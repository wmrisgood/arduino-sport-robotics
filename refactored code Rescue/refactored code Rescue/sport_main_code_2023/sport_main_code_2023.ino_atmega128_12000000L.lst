
C:\Users\14377\AppData\Local\Temp\arduino\sketches\0AA8D64967B896EDC07B25E3469CD6D5/sport_main_code_2023.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__vector_16>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <__vector_18>
      4c:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__vector_19>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <__vector_30>
      7c:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__vector_31>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__vector_33>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	00 00       	nop
      8e:	3a 00       	.word	0x003a	; ????
      90:	37 00       	.word	0x0037	; ????
      92:	34 00       	.word	0x0034	; ????
      94:	31 00       	.word	0x0031	; ????
      96:	22 00       	.word	0x0022	; ????
      98:	61 00       	.word	0x0061	; ????
      9a:	64 00       	.word	0x0064	; ????

0000009c <port_to_output_PGM>:
      9c:	00 00 3b 00 38 00 35 00 32 00 23 00 62 00 65 00     ..;.8.5.2.#.b.e.

000000ac <port_to_input_PGM>:
      ac:	00 00 39 00 36 00 33 00 30 00 21 00 20 00 63 00     ..9.6.3.0.!. .c.

000000bc <digital_pin_to_port_PGM>:
      bc:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
      cc:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
      dc:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
      ec:	06 06 06 06 06                                      .....

000000f1 <digital_pin_to_bit_mask_PGM>:
      f1:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     101:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
     111:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
     121:	08 10 20 40 80                                      .. @.

00000126 <digital_pin_to_timer_PGM>:
     126:	00 00 00 0a 0b 0c 00 00 00 00 00 00 01 04 05 06     ................
	...

0000015c <__ctors_start>:
__ctors_start():
     15c:	5b 18       	sub	r5, r11

0000015e <__ctors_end>:
__dtors_end():
     15e:	11 24       	eor	r1, r1
     160:	1f be       	out	0x3f, r1	; 63
     162:	cf ef       	ldi	r28, 0xFF	; 255
     164:	d0 e1       	ldi	r29, 0x10	; 16
     166:	de bf       	out	0x3e, r29	; 62
     168:	cd bf       	out	0x3d, r28	; 61

0000016a <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     16a:	17 e0       	ldi	r17, 0x07	; 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     16c:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     16e:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     170:	e6 ed       	ldi	r30, 0xD6	; 214
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     172:	f9 e5       	ldi	r31, 0x59	; 89
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     174:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     176:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     17a:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     17c:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     17e:	ae 3b       	cpi	r26, 0xBE	; 190
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     180:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0x10>

00000184 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     184:	2a e0       	ldi	r18, 0x0A	; 10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     186:	ae eb       	ldi	r26, 0xBE	; 190
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     188:	b7 e0       	ldi	r27, 0x07	; 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     18e:	ac 31       	cpi	r26, 0x1C	; 28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     190:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>

00000194 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     194:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     196:	cf ea       	ldi	r28, 0xAF	; 175
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     198:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     19a:	04 c0       	rjmp	.+8      	; 0x1a4 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     19c:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     19e:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     1a0:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     1a4:	ce 3a       	cpi	r28, 0xAE	; 174
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     1a6:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     1a8:	c9 f7       	brne	.-14     	; 0x19c <__do_global_ctors+0x8>
     1aa:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <main>
     1ae:	0c 94 e9 2c 	jmp	0x59d2	; 0x59d2 <_exit>

000001b2 <__bad_interrupt>:
__vector_22():
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <printf_putchar(char, __file*)>:
printf_putchar():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:204
}

// Custom implementation of printf borrowed from the teensy core files
static int16_t printf_putchar(char c, FILE *fp)
{
  ((class Print *)(fdev_get_udata(fp)))->write((uint8_t)c);
     1b6:	fb 01       	movw	r30, r22
     1b8:	a4 85       	ldd	r26, Z+12	; 0x0c
     1ba:	b5 85       	ldd	r27, Z+13	; 0x0d
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	11 97       	sbiw	r26, 0x01	; 1
     1c2:	01 90       	ld	r0, Z+
     1c4:	f0 81       	ld	r31, Z
     1c6:	e0 2d       	mov	r30, r0
     1c8:	68 2f       	mov	r22, r24
     1ca:	cd 01       	movw	r24, r26
     1cc:	09 95       	icall
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:206
  return 0;
}
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	08 95       	ret

000001d4 <TwoWire::read()>:
read():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:303
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     1d4:	90 91 6d 08 	lds	r25, 0x086D	; 0x80086d <TwoWire::rxBufferIndex>
     1d8:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <TwoWire::rxBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:300
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     1dc:	2f ef       	ldi	r18, 0xFF	; 255
     1de:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:303

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     1e0:	98 17       	cp	r25, r24
     1e2:	48 f4       	brcc	.+18     	; 0x1f6 <TwoWire::read()+0x22>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:304
    value = rxBuffer[rxBufferIndex];
     1e4:	e9 2f       	mov	r30, r25
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	e4 5b       	subi	r30, 0xB4	; 180
     1ea:	f7 4f       	sbci	r31, 0xF7	; 247
     1ec:	20 81       	ld	r18, Z
     1ee:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:305
    ++rxBufferIndex;
     1f0:	9f 5f       	subi	r25, 0xFF	; 255
     1f2:	90 93 6d 08 	sts	0x086D, r25	; 0x80086d <TwoWire::rxBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:309
  }

  return value;
}
     1f6:	c9 01       	movw	r24, r18
     1f8:	08 95       	ret

000001fa <TwoWire::read() [clone .constprop.14]>:
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:303
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     1fa:	90 91 6d 08 	lds	r25, 0x086D	; 0x80086d <TwoWire::rxBufferIndex>
     1fe:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <TwoWire::rxBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:300
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     202:	2f ef       	ldi	r18, 0xFF	; 255
     204:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:303

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     206:	98 17       	cp	r25, r24
     208:	48 f4       	brcc	.+18     	; 0x21c <TwoWire::read() [clone .constprop.14]+0x22>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:304
    value = rxBuffer[rxBufferIndex];
     20a:	e9 2f       	mov	r30, r25
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	e4 5b       	subi	r30, 0xB4	; 180
     210:	f7 4f       	sbci	r31, 0xF7	; 247
     212:	20 81       	ld	r18, Z
     214:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:305
    ++rxBufferIndex;
     216:	9f 5f       	subi	r25, 0xFF	; 255
     218:	90 93 6d 08 	sts	0x086D, r25	; 0x80086d <TwoWire::rxBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:309
  }

  return value;
}
     21c:	c9 01       	movw	r24, r18
     21e:	08 95       	ret

00000220 <TwoWire::endTransmission(unsigned char) [clone .constprop.10]>:
endTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:224
//  the bus tenure has been properly ended with a STOP. It
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
     220:	28 2f       	mov	r18, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:227
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     222:	90 91 4b 08 	lds	r25, 0x084B	; 0x80084b <TwoWire::txBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:263
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
     226:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:262
 *          5 .. timeout
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
     228:	91 32       	cpi	r25, 0x21	; 33
     22a:	08 f0       	brcs	.+2      	; 0x22e <TwoWire::endTransmission(unsigned char) [clone .constprop.10]+0xe>
     22c:	42 c0       	rjmp	.+132    	; 0x2b2 <TwoWire::endTransmission(unsigned char) [clone .constprop.10]+0x92>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:276
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(TWI_READY != twi_state){
     22e:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <twi_state>
     232:	81 11       	cpse	r24, r1
     234:	fc cf       	rjmp	.-8      	; 0x22e <TwoWire::endTransmission(unsigned char) [clone .constprop.10]+0xe>
endTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:227
     236:	80 91 4a 08 	lds	r24, 0x084A	; 0x80084a <TwoWire::txAddress>
twi_writeTo():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:281
      continue;
    }
  #endif

  twi_state = TWI_MTX;
     23a:	32 e0       	ldi	r19, 0x02	; 2
     23c:	30 93 27 08 	sts	0x0827, r19	; 0x800827 <twi_state>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:282
  twi_sendStop = sendStop;
     240:	20 93 26 08 	sts	0x0826, r18	; 0x800826 <twi_sendStop>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:284
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
     244:	2f ef       	ldi	r18, 0xFF	; 255
     246:	20 93 25 08 	sts	0x0825, r18	; 0x800825 <twi_error>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:287

  // initialize buffer iteration vars
  twi_masterBuffer = data;
     24a:	2a e2       	ldi	r18, 0x2A	; 42
     24c:	38 e0       	ldi	r19, 0x08	; 8
     24e:	30 93 24 08 	sts	0x0824, r19	; 0x800824 <twi_masterBuffer+0x1>
     252:	20 93 23 08 	sts	0x0823, r18	; 0x800823 <twi_masterBuffer>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:288
  twi_masterBufferIndex = 0;
     256:	10 92 22 08 	sts	0x0822, r1	; 0x800822 <twi_masterBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:289
  twi_masterBufferLength = length;
     25a:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <twi_masterBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:292

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     25e:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <twi_slarw>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:293
  twi_slarw |= address << 1;
     262:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <twi_slarw>
     266:	88 0f       	add	r24, r24
     268:	89 2b       	or	r24, r25
     26a:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <twi_slarw>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:298

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     26e:	80 91 1f 08 	lds	r24, 0x081F	; 0x80081f <twi_inRepStart>
     272:	81 30       	cpi	r24, 0x01	; 1
     274:	29 f5       	brne	.+74     	; 0x2c0 <TwoWire::endTransmission(unsigned char) [clone .constprop.10]+0xa0>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:305
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
     276:	10 92 1f 08 	sts	0x081F, r1	; 0x80081f <twi_inRepStart>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:316
          return (5);
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
     27a:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <twi_slarw>
     27e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:317
      } while(TWCR & _BV(TWWC));
     282:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     286:	83 fd       	sbrc	r24, 3
     288:	f8 cf       	rjmp	.-16     	; 0x27a <TwoWire::endTransmission(unsigned char) [clone .constprop.10]+0x5a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:319
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     28a:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:323
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     28c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:335
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(wait && (TWI_MTX == twi_state)){
     290:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <twi_state>
     294:	82 30       	cpi	r24, 0x02	; 2
     296:	e1 f3       	breq	.-8      	; 0x290 <TwoWire::endTransmission(unsigned char) [clone .constprop.10]+0x70>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:340
      continue;
    }
  #endif

  if (twi_error == 0xFF)
     298:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <twi_error>
     29c:	8f 3f       	cpi	r24, 0xFF	; 255
     29e:	91 f0       	breq	.+36     	; 0x2c4 <TwoWire::endTransmission(unsigned char) [clone .constprop.10]+0xa4>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:342
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
     2a0:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <twi_error>
     2a4:	80 32       	cpi	r24, 0x20	; 32
     2a6:	81 f0       	breq	.+32     	; 0x2c8 <TwoWire::endTransmission(unsigned char) [clone .constprop.10]+0xa8>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:344
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     2a8:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <twi_error>
     2ac:	80 33       	cpi	r24, 0x30	; 48
     2ae:	71 f0       	breq	.+28     	; 0x2cc <TwoWire::endTransmission(unsigned char) [clone .constprop.10]+0xac>
endTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:347
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
     2b0:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:229
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     2b2:	10 92 29 08 	sts	0x0829, r1	; 0x800829 <TwoWire::txBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:230
  txBufferLength = 0;
     2b6:	10 92 4b 08 	sts	0x084B, r1	; 0x80084b <TwoWire::txBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:232
  // indicate that we are done transmitting
  transmitting = 0;
     2ba:	10 92 28 08 	sts	0x0828, r1	; 0x800828 <TwoWire::transmitting>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:234
  return ret;
}
     2be:	08 95       	ret
twi_writeTo():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:323
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     2c0:	85 ee       	ldi	r24, 0xE5	; 229
     2c2:	e4 cf       	rjmp	.-56     	; 0x28c <TwoWire::endTransmission(unsigned char) [clone .constprop.10]+0x6c>
endTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:341
      continue;
    }
  #endif

  if (twi_error == 0xFF)
    return 0; // success
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	f5 cf       	rjmp	.-22     	; 0x2b2 <TwoWire::endTransmission(unsigned char) [clone .constprop.10]+0x92>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:343
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
     2c8:	82 e0       	ldi	r24, 0x02	; 2
     2ca:	f3 cf       	rjmp	.-26     	; 0x2b2 <TwoWire::endTransmission(unsigned char) [clone .constprop.10]+0x92>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:345
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
     2cc:	83 e0       	ldi	r24, 0x03	; 3
     2ce:	f1 cf       	rjmp	.-30     	; 0x2b2 <TwoWire::endTransmission(unsigned char) [clone .constprop.10]+0x92>

000002d0 <TwoWire::endTransmission() [clone .constprop.5]>:
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:241
//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	0c 94 10 01 	jmp	0x220	; 0x220 <TwoWire::endTransmission(unsigned char) [clone .constprop.10]>

000002d6 <turnOffPWM>:
turnOffPWM():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     2d6:	81 50       	subi	r24, 0x01	; 1
     2d8:	8c 30       	cpi	r24, 0x0C	; 12
     2da:	88 f5       	brcc	.+98     	; 0x33e <turnOffPWM+0x68>
     2dc:	e8 2f       	mov	r30, r24
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	ec 58       	subi	r30, 0x8C	; 140
     2e2:	fe 4f       	sbci	r31, 0xFE	; 254
     2e4:	0c 94 d1 2c 	jmp	0x59a2	; 0x59a2 <__tablejump2__>
     2e8:	9c 01       	movw	r18, r24
     2ea:	9c 01       	movw	r18, r24
     2ec:	9f 01       	movw	r18, r30
     2ee:	80 01       	movw	r16, r0
     2f0:	84 01       	movw	r16, r8
     2f2:	87 01       	movw	r16, r14
     2f4:	8a 01       	movw	r16, r20
     2f6:	9f 01       	movw	r18, r30
     2f8:	9f 01       	movw	r18, r30
     2fa:	8e 01       	movw	r16, r28
     2fc:	94 01       	movw	r18, r8
     2fe:	98 01       	movw	r18, r16
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     300:	8f b5       	in	r24, 0x2f	; 47
     302:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     304:	8f bd       	out	0x2f, r24	; 47
     306:	08 95       	ret
     308:	8f b5       	in	r24, 0x2f	; 47
     30a:	8f 7d       	andi	r24, 0xDF	; 223
     30c:	fb cf       	rjmp	.-10     	; 0x304 <turnOffPWM+0x2e>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
     30e:	8f b5       	in	r24, 0x2f	; 47
     310:	87 7f       	andi	r24, 0xF7	; 247
     312:	f8 cf       	rjmp	.-16     	; 0x304 <turnOffPWM+0x2e>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
     314:	85 b5       	in	r24, 0x25	; 37
     316:	8f 7d       	andi	r24, 0xDF	; 223
     318:	85 bd       	out	0x25, r24	; 37
     31a:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
     31c:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     320:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
     322:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     326:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
     328:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     32c:	8f 7d       	andi	r24, 0xDF	; 223
     32e:	f9 cf       	rjmp	.-14     	; 0x322 <turnOffPWM+0x4c>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
     330:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     334:	87 7f       	andi	r24, 0xF7	; 247
     336:	f5 cf       	rjmp	.-22     	; 0x322 <turnOffPWM+0x4c>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:171
    #if defined(TCCR0) && defined(COM01)
      case TIMER0:
        TCCR0 &= ~_BV(COM01);
        break;
      case TIMER0A:
        TCCR0 &= ~_BV(COM01);
     338:	83 b7       	in	r24, 0x33	; 51
     33a:	8f 7d       	andi	r24, 0xDF	; 223
     33c:	83 bf       	out	0x33, r24	; 51
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
     33e:	08 95       	ret

00000340 <digitalRead>:
digitalRead():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     344:	28 2f       	mov	r18, r24
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	f9 01       	movw	r30, r18
     34a:	ea 5d       	subi	r30, 0xDA	; 218
     34c:	fe 4f       	sbci	r31, 0xFE	; 254
     34e:	84 91       	lpm	r24, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     350:	f9 01       	movw	r30, r18
     352:	ef 50       	subi	r30, 0x0F	; 15
     354:	ff 4f       	sbci	r31, 0xFF	; 255
     356:	d4 91       	lpm	r29, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     358:	f9 01       	movw	r30, r18
     35a:	e4 54       	subi	r30, 0x44	; 68
     35c:	ff 4f       	sbci	r31, 0xFF	; 255
     35e:	c4 91       	lpm	r28, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     360:	cc 23       	and	r28, r28
     362:	a1 f0       	breq	.+40     	; 0x38c <digitalRead+0x4c>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     364:	81 11       	cpse	r24, r1
     366:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <turnOffPWM>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     36a:	ec 2f       	mov	r30, r28
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	ee 0f       	add	r30, r30
     370:	ff 1f       	adc	r31, r31
     372:	e4 55       	subi	r30, 0x54	; 84
     374:	ff 4f       	sbci	r31, 0xFF	; 255
     376:	a5 91       	lpm	r26, Z+
     378:	b4 91       	lpm	r27, Z
     37a:	ec 91       	ld	r30, X
     37c:	ed 23       	and	r30, r29
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	09 f4       	brne	.+2      	; 0x386 <digitalRead+0x46>
     384:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	fa cf       	rjmp	.-12     	; 0x386 <digitalRead+0x46>

00000392 <digitalWrite>:
digitalWrite():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     398:	28 2f       	mov	r18, r24
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	f9 01       	movw	r30, r18
     39e:	ea 5d       	subi	r30, 0xDA	; 218
     3a0:	fe 4f       	sbci	r31, 0xFE	; 254
     3a2:	84 91       	lpm	r24, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     3a4:	f9 01       	movw	r30, r18
     3a6:	ef 50       	subi	r30, 0x0F	; 15
     3a8:	ff 4f       	sbci	r31, 0xFF	; 255
     3aa:	d4 91       	lpm	r29, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     3ac:	f9 01       	movw	r30, r18
     3ae:	e4 54       	subi	r30, 0x44	; 68
     3b0:	ff 4f       	sbci	r31, 0xFF	; 255
     3b2:	c4 91       	lpm	r28, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     3b4:	cc 23       	and	r28, r28
     3b6:	a9 f0       	breq	.+42     	; 0x3e2 <digitalWrite+0x50>
     3b8:	16 2f       	mov	r17, r22
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     3ba:	81 11       	cpse	r24, r1
     3bc:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <turnOffPWM>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     3c0:	ec 2f       	mov	r30, r28
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	ee 0f       	add	r30, r30
     3c6:	ff 1f       	adc	r31, r31
     3c8:	e4 56       	subi	r30, 0x64	; 100
     3ca:	ff 4f       	sbci	r31, 0xFF	; 255
     3cc:	a5 91       	lpm	r26, Z+
     3ce:	b4 91       	lpm	r27, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     3d0:	8f b7       	in	r24, 0x3f	; 63
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     3d2:	f8 94       	cli
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     3d4:	ec 91       	ld	r30, X
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     3d6:	11 11       	cpse	r17, r1
     3d8:	08 c0       	rjmp	.+16     	; 0x3ea <digitalWrite+0x58>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     3da:	d0 95       	com	r29
     3dc:	de 23       	and	r29, r30
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     3de:	dc 93       	st	X, r29
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     3e0:	8f bf       	out	0x3f, r24	; 63
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:212
}
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     3ea:	de 2b       	or	r29, r30
     3ec:	f8 cf       	rjmp	.-16     	; 0x3de <digitalWrite+0x4c>

000003ee <pinMode>:
pinMode():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	fc 01       	movw	r30, r24
     3f6:	ef 50       	subi	r30, 0x0F	; 15
     3f8:	ff 4f       	sbci	r31, 0xFF	; 255
     3fa:	24 91       	lpm	r18, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     3fc:	84 54       	subi	r24, 0x44	; 68
     3fe:	9f 4f       	sbci	r25, 0xFF	; 255
     400:	fc 01       	movw	r30, r24
     402:	84 91       	lpm	r24, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     404:	88 23       	and	r24, r24
     406:	c9 f0       	breq	.+50     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	88 0f       	add	r24, r24
     40c:	99 1f       	adc	r25, r25
     40e:	fc 01       	movw	r30, r24
     410:	e4 57       	subi	r30, 0x74	; 116
     412:	ff 4f       	sbci	r31, 0xFF	; 255
     414:	a5 91       	lpm	r26, Z+
     416:	b4 91       	lpm	r27, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     418:	fc 01       	movw	r30, r24
     41a:	e4 56       	subi	r30, 0x64	; 100
     41c:	ff 4f       	sbci	r31, 0xFF	; 255
     41e:	c5 91       	lpm	r28, Z+
     420:	d4 91       	lpm	r29, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     422:	61 11       	cpse	r22, r1
     424:	0d c0       	rjmp	.+26     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     426:	9f b7       	in	r25, 0x3f	; 63
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     428:	f8 94       	cli
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     42a:	8c 91       	ld	r24, X
     42c:	20 95       	com	r18
     42e:	82 23       	and	r24, r18
     430:	8c 93       	st	X, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     432:	88 81       	ld	r24, Y
     434:	28 23       	and	r18, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
     436:	28 83       	st	Y, r18
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
     438:	9f bf       	out	0x3f, r25	; 63
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     440:	62 30       	cpi	r22, 0x02	; 2
     442:	51 f4       	brne	.+20     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
     444:	9f b7       	in	r25, 0x3f	; 63
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
     446:	f8 94       	cli
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
     448:	3c 91       	ld	r19, X
     44a:	82 2f       	mov	r24, r18
     44c:	80 95       	com	r24
     44e:	83 23       	and	r24, r19
     450:	8c 93       	st	X, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
     452:	e8 81       	ld	r30, Y
     454:	2e 2b       	or	r18, r30
     456:	ef cf       	rjmp	.-34     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     458:	8f b7       	in	r24, 0x3f	; 63
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     45a:	f8 94       	cli
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     45c:	ec 91       	ld	r30, X
     45e:	2e 2b       	or	r18, r30
     460:	2c 93       	st	X, r18
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     462:	8f bf       	out	0x3f, r24	; 63
     464:	ea cf       	rjmp	.-44     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>

00000466 <analogWrite>:
analogWrite():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:95
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
     466:	1f 93       	push	r17
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	18 2f       	mov	r17, r24
     46e:	eb 01       	movw	r28, r22
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
     470:	61 e0       	ldi	r22, 0x01	; 1
     472:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:102
  if (val == 0)
     476:	20 97       	sbiw	r28, 0x00	; 0
     478:	39 f4       	brne	.+14     	; 0x488 <analogWrite+0x22>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:104
  {
    digitalWrite(pin, LOW);
     47a:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:108
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
     47c:	81 2f       	mov	r24, r17
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:299
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	1f 91       	pop	r17
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:108
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
     484:	0c 94 c9 01 	jmp	0x392	; 0x392 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:106
  pinMode(pin, OUTPUT);
  if (val == 0)
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
     488:	cf 3f       	cpi	r28, 0xFF	; 255
     48a:	d1 05       	cpc	r29, r1
     48c:	11 f4       	brne	.+4      	; 0x492 <analogWrite+0x2c>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:108
  {
    digitalWrite(pin, HIGH);
     48e:	61 e0       	ldi	r22, 0x01	; 1
     490:	f5 cf       	rjmp	.-22     	; 0x47c <analogWrite+0x16>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:112
  }
  else
  {
    switch(digitalPinToTimer(pin))
     492:	e1 2f       	mov	r30, r17
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	ea 5d       	subi	r30, 0xDA	; 218
     498:	fe 4f       	sbci	r31, 0xFE	; 254
     49a:	e4 91       	lpm	r30, Z
     49c:	e1 50       	subi	r30, 0x01	; 1
     49e:	ec 30       	cpi	r30, 0x0C	; 12
     4a0:	08 f0       	brcs	.+2      	; 0x4a4 <analogWrite+0x3e>
     4a2:	50 c0       	rjmp	.+160    	; 0x544 <analogWrite+0xde>
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	e9 5a       	subi	r30, 0xA9	; 169
     4a8:	fd 4f       	sbci	r31, 0xFD	; 253
     4aa:	0c 94 d1 2c 	jmp	0x59a2	; 0x59a2 <__tablejump2__>
     4ae:	63 02       	muls	r22, r19
     4b0:	63 02       	muls	r22, r19
     4b2:	a2 02       	muls	r26, r18
     4b4:	6b 02       	muls	r22, r27
     4b6:	71 02       	muls	r23, r17
     4b8:	77 02       	muls	r23, r23
     4ba:	7f 02       	muls	r23, r31
     4bc:	a2 02       	muls	r26, r18
     4be:	a2 02       	muls	r26, r18
     4c0:	84 02       	muls	r24, r20
     4c2:	8e 02       	muls	r24, r30
     4c4:	98 02       	muls	r25, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:124
        break;
        
      case TIMER0A:
        // connect pwm to pin on timer 0
        // this combination is for the ATmega8535, ATmega16 and ATmega32
        TCCR0 |= _BV(COM01);
     4c6:	83 b7       	in	r24, 0x33	; 51
     4c8:	80 62       	ori	r24, 0x20	; 32
     4ca:	83 bf       	out	0x33, r24	; 51
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:125
        OCR0 = val; // set pwm duty
     4cc:	c1 bf       	out	0x31, r28	; 49
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:299
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	1f 91       	pop	r17
     4d4:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:148
      #endif

      #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        // connect pwm to pin on timer 1, channel A
        TCCR1A |= _BV(COM1A1);
     4d6:	8f b5       	in	r24, 0x2f	; 47
     4d8:	80 68       	ori	r24, 0x80	; 128
     4da:	8f bd       	out	0x2f, r24	; 47
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:149
        OCR1A = val; // set pwm duty
     4dc:	db bd       	out	0x2b, r29	; 43
     4de:	ca bd       	out	0x2a, r28	; 42
     4e0:	f6 cf       	rjmp	.-20     	; 0x4ce <analogWrite+0x68>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:156
      #endif

      #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1B1);
     4e2:	8f b5       	in	r24, 0x2f	; 47
     4e4:	80 62       	ori	r24, 0x20	; 32
     4e6:	8f bd       	out	0x2f, r24	; 47
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:157
        OCR1B = val; // set pwm duty
     4e8:	d9 bd       	out	0x29, r29	; 41
     4ea:	c8 bd       	out	0x28, r28	; 40
     4ec:	f0 cf       	rjmp	.-32     	; 0x4ce <analogWrite+0x68>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:164
      #endif

      #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1C1);
     4ee:	8f b5       	in	r24, 0x2f	; 47
     4f0:	88 60       	ori	r24, 0x08	; 8
     4f2:	8f bd       	out	0x2f, r24	; 47
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:165
        OCR1C = val; // set pwm duty
     4f4:	d0 93 79 00 	sts	0x0079, r29	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     4f8:	c0 93 78 00 	sts	0x0078, r28	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     4fc:	e8 cf       	rjmp	.-48     	; 0x4ce <analogWrite+0x68>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:172
      #endif

      #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        // connect pwm to pin on timer 2
        TCCR2 |= _BV(COM21);
     4fe:	85 b5       	in	r24, 0x25	; 37
     500:	80 62       	ori	r24, 0x20	; 32
     502:	85 bd       	out	0x25, r24	; 37
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:173
        OCR2 = val; // set pwm duty
     504:	c3 bd       	out	0x23, r28	; 35
     506:	e3 cf       	rjmp	.-58     	; 0x4ce <analogWrite+0x68>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:196
      #endif

      #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        // connect pwm to pin on timer 3, channel A
        TCCR3A |= _BV(COM3A1);
     508:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     50c:	80 68       	ori	r24, 0x80	; 128
     50e:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:197
        OCR3A = val; // set pwm duty
     512:	d0 93 87 00 	sts	0x0087, r29	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     516:	c0 93 86 00 	sts	0x0086, r28	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     51a:	d9 cf       	rjmp	.-78     	; 0x4ce <analogWrite+0x68>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:209
        #if defined(__AVR_ATmega328PB__) // Fix 324PB/328PB silicon bug
          PORTD |= _BV(PD2);
        #elif defined(__AVR_ATmega324PB__)
          PORTB |= _BV(PB7);
        #endif
        TCCR3A |= _BV(COM3B1);
     51c:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     520:	80 62       	ori	r24, 0x20	; 32
     522:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:210
        OCR3B = val; // set pwm duty
     526:	d0 93 85 00 	sts	0x0085, r29	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     52a:	c0 93 84 00 	sts	0x0084, r28	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     52e:	cf cf       	rjmp	.-98     	; 0x4ce <analogWrite+0x68>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:217
      #endif

      #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        // connect pwm to pin on timer 3, channel C
        TCCR3A |= _BV(COM3C1);
     530:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     534:	88 60       	ori	r24, 0x08	; 8
     536:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:218
        OCR3C = val; // set pwm duty
     53a:	d0 93 83 00 	sts	0x0083, r29	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     53e:	c0 93 82 00 	sts	0x0082, r28	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     542:	c5 cf       	rjmp	.-118    	; 0x4ce <analogWrite+0x68>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:292
        break;
      #endif

      case NOT_ON_TIMER:
      default:
        if (val < 128) {
     544:	c0 38       	cpi	r28, 0x80	; 128
     546:	d1 05       	cpc	r29, r1
     548:	0c f0       	brlt	.+2      	; 0x54c <analogWrite+0xe6>
     54a:	a1 cf       	rjmp	.-190    	; 0x48e <analogWrite+0x28>
     54c:	96 cf       	rjmp	.-212    	; 0x47a <analogWrite+0x14>

0000054e <analogRead>:
analogRead():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:49
int analogRead(uint8_t pin)
{

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
     54e:	8d 52       	subi	r24, 0x2D	; 45
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
     550:	80 64       	ori	r24, 0x40	; 64
     552:	87 b9       	out	0x07, r24	; 7
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
     554:	36 9a       	sbi	0x06, 6	; 6
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
     556:	36 99       	sbic	0x06, 6	; 6
     558:	fe cf       	rjmp	.-4      	; 0x556 <analogRead+0x8>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
     55a:	84 b1       	in	r24, 0x04	; 4
     55c:	95 b1       	in	r25, 0x05	; 5
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_analog.c:87
#else
  return 0;
#endif
}
     55e:	08 95       	ret

00000560 <delayMicroseconds>:
delayMicroseconds():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:665
#elif F_CPU >= 12000000L
  // for the 12 MHz clock if somebody is working with USB

  // for a 1 microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1.2 us
  if (us <= 1) return; // = 3 cycles, (4 when true)
     560:	81 30       	cpi	r24, 0x01	; 1
     562:	91 05       	cpc	r25, r1
     564:	41 f0       	breq	.+16     	; 0x576 <delayMicroseconds+0x16>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:670

  // the following loop takes 1/3 of a microsecond (4 cycles)
  // per iteration, so execute it three times for each microsecond of
  // delay requested.
  us = (us << 1) + us; // x3 us, = 5 cycles
     566:	9c 01       	movw	r18, r24
     568:	22 0f       	add	r18, r18
     56a:	33 1f       	adc	r19, r19
     56c:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:675

  // account for the time taken in the preceeding commands.
  // we just burned 20 (22) cycles above, remove 5, (5*4=20)
  // us is at least 6 so we can substract 5
  us -= 5; // = 2 cycles
     56e:	82 0f       	add	r24, r18
     570:	93 1f       	adc	r25, r19
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     572:	01 97       	sbiw	r24, 0x01	; 1
     574:	f1 f7       	brne	.-4      	; 0x572 <delayMicroseconds+0x12>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     576:	08 95       	ret

00000578 <micros>:
micros():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:229
  SREG = oldSREG;

  return m;
}

unsigned long micros() {
     578:	cf 92       	push	r12
     57a:	df 92       	push	r13
     57c:	ef 92       	push	r14
     57e:	ff 92       	push	r15
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     580:	6f b7       	in	r22, 0x3f	; 63
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     582:	f8 94       	cli
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:244

#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
     584:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <timer0_millis>
     588:	90 91 1c 08 	lds	r25, 0x081C	; 0x80081c <timer0_millis+0x1>
     58c:	a0 91 1d 08 	lds	r26, 0x081D	; 0x80081d <timer0_millis+0x2>
     590:	b0 91 1e 08 	lds	r27, 0x081E	; 0x80081e <timer0_millis+0x3>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:245
  f = timer0_fract;
     594:	50 91 1a 08 	lds	r21, 0x081A	; 0x80081a <timer0_fract>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:252
  m = timer0_overflow_count;
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     598:	22 b7       	in	r18, 0x32	; 50
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:268
    m++;
#else
    q = 1;
#endif
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
     59a:	36 b7       	in	r19, 0x36	; 54
     59c:	43 2f       	mov	r20, r19
     59e:	41 70       	andi	r20, 0x01	; 1
     5a0:	30 ff       	sbrs	r19, 0
     5a2:	04 c0       	rjmp	.+8      	; 0x5ac <micros+0x34>
     5a4:	41 e0       	ldi	r20, 0x01	; 1
     5a6:	2f 3f       	cpi	r18, 0xFF	; 255
     5a8:	09 f4       	brne	.+2      	; 0x5ac <micros+0x34>
     5aa:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     5ac:	6f bf       	out	0x3f, r22	; 63
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:286
     Basically we multiply by 1000 and add the scaled timer.

     The leading part by m and f is long-term accurate.
     For the timer we just need to be close from below.
     Must never be too high, or micros jumps backwards. */
  m = (((m << 7) - (m << 1) - m + f) << 3) +
     5ae:	6c 01       	movw	r12, r24
     5b0:	7d 01       	movw	r14, r26
     5b2:	37 e0       	ldi	r19, 0x07	; 7
     5b4:	cc 0c       	add	r12, r12
     5b6:	dd 1c       	adc	r13, r13
     5b8:	ee 1c       	adc	r14, r14
     5ba:	ff 1c       	adc	r15, r15
     5bc:	3a 95       	dec	r19
     5be:	d1 f7       	brne	.-12     	; 0x5b4 <micros+0x3c>
     5c0:	c5 0e       	add	r12, r21
     5c2:	d1 1c       	adc	r13, r1
     5c4:	e1 1c       	adc	r14, r1
     5c6:	f1 1c       	adc	r15, r1
     5c8:	c8 1a       	sub	r12, r24
     5ca:	d9 0a       	sbc	r13, r25
     5cc:	ea 0a       	sbc	r14, r26
     5ce:	fb 0a       	sbc	r15, r27
     5d0:	88 0f       	add	r24, r24
     5d2:	99 1f       	adc	r25, r25
     5d4:	aa 1f       	adc	r26, r26
     5d6:	bb 1f       	adc	r27, r27
     5d8:	c8 1a       	sub	r12, r24
     5da:	d9 0a       	sbc	r13, r25
     5dc:	ea 0a       	sbc	r14, r26
     5de:	fb 0a       	sbc	r15, r27
     5e0:	63 e0       	ldi	r22, 0x03	; 3
     5e2:	cc 0c       	add	r12, r12
     5e4:	dd 1c       	adc	r13, r13
     5e6:	ee 1c       	adc	r14, r14
     5e8:	ff 1c       	adc	r15, r15
     5ea:	6a 95       	dec	r22
     5ec:	d1 f7       	brne	.-12     	; 0x5e2 <micros+0x6a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:287
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	a5 e5       	ldi	r26, 0x55	; 85
     5f2:	b5 e0       	ldi	r27, 0x05	; 5
     5f4:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <__umulhisi3>
     5f8:	67 2f       	mov	r22, r23
     5fa:	78 2f       	mov	r23, r24
     5fc:	89 2f       	mov	r24, r25
     5fe:	99 27       	eor	r25, r25
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:286
     Basically we multiply by 1000 and add the scaled timer.

     The leading part by m and f is long-term accurate.
     For the timer we just need to be close from below.
     Must never be too high, or micros jumps backwards. */
  m = (((m << 7) - (m << 1) - m + f) << 3) +
     600:	6c 0d       	add	r22, r12
     602:	7d 1d       	adc	r23, r13
     604:	8e 1d       	adc	r24, r14
     606:	9f 1d       	adc	r25, r15
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:288
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
     608:	44 23       	and	r20, r20
     60a:	21 f0       	breq	.+8      	; 0x614 <micros+0x9c>
     60c:	6b 5a       	subi	r22, 0xAB	; 171
     60e:	7a 4f       	sbci	r23, 0xFA	; 250
     610:	8f 4f       	sbci	r24, 0xFF	; 255
     612:	9f 4f       	sbci	r25, 0xFF	; 255
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     614:	ff 90       	pop	r15
     616:	ef 90       	pop	r14
     618:	df 90       	pop	r13
     61a:	cf 90       	pop	r12
     61c:	08 95       	ret

0000061e <delay>:
delay():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     61e:	8f 92       	push	r8
     620:	9f 92       	push	r9
     622:	af 92       	push	r10
     624:	bf 92       	push	r11
     626:	cf 92       	push	r12
     628:	df 92       	push	r13
     62a:	ef 92       	push	r14
     62c:	ff 92       	push	r15
     62e:	4b 01       	movw	r8, r22
     630:	5c 01       	movw	r10, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     632:	0e 94 bc 02 	call	0x578	; 0x578 <micros>
     636:	6b 01       	movw	r12, r22
     638:	7c 01       	movw	r14, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     63a:	0e 94 bc 02 	call	0x578	; 0x578 <micros>
     63e:	6c 19       	sub	r22, r12
     640:	7d 09       	sbc	r23, r13
     642:	8e 09       	sbc	r24, r14
     644:	9f 09       	sbc	r25, r15
     646:	68 3e       	cpi	r22, 0xE8	; 232
     648:	73 40       	sbci	r23, 0x03	; 3
     64a:	81 05       	cpc	r24, r1
     64c:	91 05       	cpc	r25, r1
     64e:	a8 f3       	brcs	.-22     	; 0x63a <delay+0x1c>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     650:	21 e0       	ldi	r18, 0x01	; 1
     652:	82 1a       	sub	r8, r18
     654:	91 08       	sbc	r9, r1
     656:	a1 08       	sbc	r10, r1
     658:	b1 08       	sbc	r11, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     65a:	88 ee       	ldi	r24, 0xE8	; 232
     65c:	c8 0e       	add	r12, r24
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	d8 1e       	adc	r13, r24
     662:	e1 1c       	adc	r14, r1
     664:	f1 1c       	adc	r15, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     666:	81 14       	cp	r8, r1
     668:	91 04       	cpc	r9, r1
     66a:	a1 04       	cpc	r10, r1
     66c:	b1 04       	cpc	r11, r1
     66e:	29 f7       	brne	.-54     	; 0x63a <delay+0x1c>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     670:	ff 90       	pop	r15
     672:	ef 90       	pop	r14
     674:	df 90       	pop	r13
     676:	cf 90       	pop	r12
     678:	bf 90       	pop	r11
     67a:	af 90       	pop	r10
     67c:	9f 90       	pop	r9
     67e:	8f 90       	pop	r8
     680:	08 95       	ret

00000682 <AX(char, int, int) [clone .constprop.24]>:
AX():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:283
    delay(10); // bayad bashe hatman    hade aghal=10  // 1 bazi vaghta error mideh
               //    RXD;
}
void AX(char ID, int position, int speed)
{
    TxBuffer[0] = 0xff;
     682:	2f ef       	ldi	r18, 0xFF	; 255
     684:	20 93 6e 08 	sts	0x086E, r18	; 0x80086e <TxBuffer>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:284
    TxBuffer[1] = 0xff;
     688:	20 93 6f 08 	sts	0x086F, r18	; 0x80086f <TxBuffer+0x1>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:285
    TxBuffer[2] = ID; // ID
     68c:	2a e0       	ldi	r18, 0x0A	; 10
     68e:	20 93 70 08 	sts	0x0870, r18	; 0x800870 <TxBuffer+0x2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:286
    TxBuffer[3] = 7;  // Length(Paramter=5,Instruction=1,Checksum=1)
     692:	27 e0       	ldi	r18, 0x07	; 7
     694:	20 93 71 08 	sts	0x0871, r18	; 0x800871 <TxBuffer+0x3>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:287
    TxBuffer[4] = 3;  // bInstruction;
     698:	23 e0       	ldi	r18, 0x03	; 3
     69a:	20 93 72 08 	sts	0x0872, r18	; 0x800872 <TxBuffer+0x4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:289

    TxBuffer[5] = 30;             // Address of position
     69e:	2e e1       	ldi	r18, 0x1E	; 30
     6a0:	20 93 73 08 	sts	0x0873, r18	; 0x800873 <TxBuffer+0x5>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:290
    TxBuffer[6] = position & 255; // Writing Data P_GOAL_POSITION_L2
     6a4:	80 93 74 08 	sts	0x0874, r24	; 0x800874 <TxBuffer+0x6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:291
    TxBuffer[7] = position >> 8;  // Writing Data P_GOAL_POSITION_H
     6a8:	90 93 75 08 	sts	0x0875, r25	; 0x800875 <TxBuffer+0x7>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:292
    TxBuffer[8] = speed & 255;    // Writing Data P_GOAL_SPEED_L2
     6ac:	60 93 76 08 	sts	0x0876, r22	; 0x800876 <TxBuffer+0x8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:293
    TxBuffer[9] = speed >> 8;     // Writing Data P_GOAL_SPEED_H
     6b0:	10 92 77 08 	sts	0x0877, r1	; 0x800877 <TxBuffer+0x9>
_TXsend():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:261
void _TXsend(char last_TXBuffer)
{
    unsigned char CheckSum, Count;
    //    TXD;
    //    DDRD.3=1; ready to send
    send_mode;
     6b4:	61 e0       	ldi	r22, 0x01	; 1
     6b6:	86 e1       	ldi	r24, 0x16	; 22
     6b8:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
     6bc:	e0 e7       	ldi	r30, 0x70	; 112
     6be:	f8 e0       	ldi	r31, 0x08	; 8
AX():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:262
    CheckSum = 0;
     6c0:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:263
    for (Count = 2; Count <= last_TXBuffer; Count++) // except 0xff,checksum
     6c2:	92 e0       	ldi	r25, 0x02	; 2
_TXsend():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:264
        CheckSum += TxBuffer[Count];
     6c4:	21 91       	ld	r18, Z+
     6c6:	82 0f       	add	r24, r18
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:263
    unsigned char CheckSum, Count;
    //    TXD;
    //    DDRD.3=1; ready to send
    send_mode;
    CheckSum = 0;
    for (Count = 2; Count <= last_TXBuffer; Count++) // except 0xff,checksum
     6c8:	9f 5f       	subi	r25, 0xFF	; 255
     6ca:	9a 30       	cpi	r25, 0x0A	; 10
     6cc:	d9 f7       	brne	.-10     	; 0x6c4 <AX(char, int, int) [clone .constprop.24]+0x42>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:265
        CheckSum += TxBuffer[Count];
    TxBuffer[last_TXBuffer + 1] = ~CheckSum; // Writing Checksum with Bit Inversion
     6ce:	80 95       	com	r24
     6d0:	80 93 78 08 	sts	0x0878, r24	; 0x800878 <TxBuffer+0xa>
     6d4:	ee e6       	ldi	r30, 0x6E	; 110
     6d6:	f8 e0       	ldi	r31, 0x08	; 8
AX():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:266
    for (Count = 0; Count <= last_TXBuffer + 1; Count++)
     6d8:	80 e0       	ldi	r24, 0x00	; 0
_TXsend():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:270
    {
        // Serial1.write(TxBuffer[Count]);
        // delayMicroseconds(100);
        while (!TXD_READY)
     6da:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     6de:	95 ff       	sbrs	r25, 5
     6e0:	fc cf       	rjmp	.-8      	; 0x6da <AX(char, int, int) [clone .constprop.24]+0x58>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:272
            ;
        M_UDR = TxBuffer[Count];
     6e2:	91 91       	ld	r25, Z+
     6e4:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:266
    send_mode;
    CheckSum = 0;
    for (Count = 2; Count <= last_TXBuffer; Count++) // except 0xff,checksum
        CheckSum += TxBuffer[Count];
    TxBuffer[last_TXBuffer + 1] = ~CheckSum; // Writing Checksum with Bit Inversion
    for (Count = 0; Count <= last_TXBuffer + 1; Count++)
     6e8:	8f 5f       	subi	r24, 0xFF	; 255
     6ea:	8b 30       	cpi	r24, 0x0B	; 11
     6ec:	b1 f7       	brne	.-20     	; 0x6da <AX(char, int, int) [clone .constprop.24]+0x58>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:274
        // delayMicroseconds(100);
        while (!TXD_READY)
            ;
        M_UDR = TxBuffer[Count];
    }
    while (!CHECK_TXD_FINISH)
     6ee:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     6f2:	86 ff       	sbrs	r24, 6
     6f4:	fc cf       	rjmp	.-8      	; 0x6ee <AX(char, int, int) [clone .constprop.24]+0x6c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:278
        ; // Wait until TXD Shift register empty

    //    DDRD.3=0;
    delay(10); // bayad bashe hatman    hade aghal=10  // 1 bazi vaghta error mideh
     6f6:	6a e0       	ldi	r22, 0x0A	; 10
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0c 94 0f 03 	jmp	0x61e	; 0x61e <delay>

00000702 <TwoWire::onRequestService()>:
onRequestService():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:368
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
     702:	08 95       	ret

00000704 <TwoWire::onReceiveService(unsigned char*, int)>:
onReceiveService():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:353
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
     704:	08 95       	ret

00000706 <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     706:	af 92       	push	r10
     708:	bf 92       	push	r11
     70a:	cf 92       	push	r12
     70c:	df 92       	push	r13
     70e:	ef 92       	push	r14
     710:	ff 92       	push	r15
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	6c 01       	movw	r12, r24
     71c:	7b 01       	movw	r14, r22
     71e:	8b 01       	movw	r16, r22
     720:	04 0f       	add	r16, r20
     722:	15 1f       	adc	r17, r21
     724:	eb 01       	movw	r28, r22
     726:	5e 01       	movw	r10, r28
     728:	ae 18       	sub	r10, r14
     72a:	bf 08       	sbc	r11, r15
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     72c:	c0 17       	cp	r28, r16
     72e:	d1 07       	cpc	r29, r17
     730:	59 f0       	breq	.+22     	; 0x748 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     732:	69 91       	ld	r22, Y+
     734:	d6 01       	movw	r26, r12
     736:	ed 91       	ld	r30, X+
     738:	fc 91       	ld	r31, X
     73a:	01 90       	ld	r0, Z+
     73c:	f0 81       	ld	r31, Z
     73e:	e0 2d       	mov	r30, r0
     740:	c6 01       	movw	r24, r12
     742:	09 95       	icall
     744:	89 2b       	or	r24, r25
     746:	79 f7       	brne	.-34     	; 0x726 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     748:	c5 01       	movw	r24, r10
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	ff 90       	pop	r15
     754:	ef 90       	pop	r14
     756:	df 90       	pop	r13
     758:	cf 90       	pop	r12
     75a:	bf 90       	pop	r11
     75c:	af 90       	pop	r10
     75e:	08 95       	ret

00000760 <HardwareSerial::availableForWrite()>:
availableForWrite():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     760:	fc 01       	movw	r30, r24
     762:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     764:	44 8d       	ldd	r20, Z+28	; 0x1c
     766:	25 2f       	mov	r18, r21
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	84 2f       	mov	r24, r20
     76c:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     76e:	82 1b       	sub	r24, r18
     770:	93 0b       	sbc	r25, r19
     772:	54 17       	cp	r21, r20
     774:	10 f0       	brcs	.+4      	; 0x77a <HardwareSerial::availableForWrite()+0x1a>
     776:	cf 96       	adiw	r24, 0x3f	; 63
     778:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     77a:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     77c:	08 95       	ret

0000077e <HardwareSerial::read()>:
read():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     77e:	fc 01       	movw	r30, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     780:	91 8d       	ldd	r25, Z+25	; 0x19
     782:	82 8d       	ldd	r24, Z+26	; 0x1a
     784:	98 17       	cp	r25, r24
     786:	61 f0       	breq	.+24     	; 0x7a0 <HardwareSerial::read()+0x22>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     788:	a2 8d       	ldd	r26, Z+26	; 0x1a
     78a:	ae 0f       	add	r26, r30
     78c:	bf 2f       	mov	r27, r31
     78e:	b1 1d       	adc	r27, r1
     790:	5d 96       	adiw	r26, 0x1d	; 29
     792:	8c 91       	ld	r24, X
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     794:	92 8d       	ldd	r25, Z+26	; 0x1a
     796:	9f 5f       	subi	r25, 0xFF	; 255
     798:	9f 73       	andi	r25, 0x3F	; 63
     79a:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     7a0:	8f ef       	ldi	r24, 0xFF	; 255
     7a2:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     7a4:	08 95       	ret

000007a6 <HardwareSerial::peek()>:
peek():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     7a6:	fc 01       	movw	r30, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     7a8:	91 8d       	ldd	r25, Z+25	; 0x19
     7aa:	82 8d       	ldd	r24, Z+26	; 0x1a
     7ac:	98 17       	cp	r25, r24
     7ae:	31 f0       	breq	.+12     	; 0x7bc <HardwareSerial::peek()+0x16>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     7b0:	82 8d       	ldd	r24, Z+26	; 0x1a
     7b2:	e8 0f       	add	r30, r24
     7b4:	f1 1d       	adc	r31, r1
     7b6:	85 8d       	ldd	r24, Z+29	; 0x1d
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     7bc:	8f ef       	ldi	r24, 0xFF	; 255
     7be:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     7c0:	08 95       	ret

000007c2 <HardwareSerial::available()>:
available():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     7c2:	fc 01       	movw	r30, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     7c4:	91 8d       	ldd	r25, Z+25	; 0x19
     7c6:	22 8d       	ldd	r18, Z+26	; 0x1a
     7c8:	89 2f       	mov	r24, r25
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	80 5c       	subi	r24, 0xC0	; 192
     7ce:	9f 4f       	sbci	r25, 0xFF	; 255
     7d0:	82 1b       	sub	r24, r18
     7d2:	91 09       	sbc	r25, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     7d4:	8f 73       	andi	r24, 0x3F	; 63
     7d6:	99 27       	eor	r25, r25
     7d8:	08 95       	ret

000007da <Serial1_available()>:
Serial1_available():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial1.cpp:68
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
     7da:	8e eb       	ldi	r24, 0xBE	; 190
     7dc:	98 e0       	ldi	r25, 0x08	; 8
     7de:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <HardwareSerial::available()>
     7e2:	21 e0       	ldi	r18, 0x01	; 1
     7e4:	89 2b       	or	r24, r25
     7e6:	09 f4       	brne	.+2      	; 0x7ea <Serial1_available()+0x10>
     7e8:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
}
     7ea:	82 2f       	mov	r24, r18
     7ec:	08 95       	ret

000007ee <Serial0_available()>:
Serial0_available():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     7ee:	8b e5       	ldi	r24, 0x5B	; 91
     7f0:	99 e0       	ldi	r25, 0x09	; 9
     7f2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <HardwareSerial::available()>
     7f6:	21 e0       	ldi	r18, 0x01	; 1
     7f8:	89 2b       	or	r24, r25
     7fa:	09 f4       	brne	.+2      	; 0x7fe <Serial0_available()+0x10>
     7fc:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     7fe:	82 2f       	mov	r24, r18
     800:	08 95       	ret

00000802 <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     802:	fc 01       	movw	r30, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     804:	a4 8d       	ldd	r26, Z+28	; 0x1c
     806:	a8 0f       	add	r26, r24
     808:	b9 2f       	mov	r27, r25
     80a:	b1 1d       	adc	r27, r1
     80c:	a3 5a       	subi	r26, 0xA3	; 163
     80e:	bf 4f       	sbci	r27, 0xFF	; 255
     810:	2c 91       	ld	r18, X
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     812:	84 8d       	ldd	r24, Z+28	; 0x1c
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	8f 73       	andi	r24, 0x3F	; 63
     81a:	99 27       	eor	r25, r25
     81c:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     81e:	a6 89       	ldd	r26, Z+22	; 0x16
     820:	b7 89       	ldd	r27, Z+23	; 0x17
     822:	2c 93       	st	X, r18
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     824:	a0 89       	ldd	r26, Z+16	; 0x10
     826:	b1 89       	ldd	r27, Z+17	; 0x11
     828:	8c 91       	ld	r24, X
     82a:	83 70       	andi	r24, 0x03	; 3
     82c:	80 64       	ori	r24, 0x40	; 64
     82e:	8c 93       	st	X, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     830:	93 8d       	ldd	r25, Z+27	; 0x1b
     832:	84 8d       	ldd	r24, Z+28	; 0x1c
     834:	98 13       	cpse	r25, r24
     836:	06 c0       	rjmp	.+12     	; 0x844 <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     838:	02 88       	ldd	r0, Z+18	; 0x12
     83a:	f3 89       	ldd	r31, Z+19	; 0x13
     83c:	e0 2d       	mov	r30, r0
     83e:	80 81       	ld	r24, Z
     840:	8f 7d       	andi	r24, 0xDF	; 223
     842:	80 83       	st	Z, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     844:	08 95       	ret

00000846 <HardwareSerial::write(unsigned char)>:
write():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     846:	ef 92       	push	r14
     848:	ff 92       	push	r15
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	ec 01       	movw	r28, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     858:	9b 8d       	ldd	r25, Y+27	; 0x1b
     85a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     85c:	98 13       	cpse	r25, r24
     85e:	1a c0       	rjmp	.+52     	; 0x894 <HardwareSerial::write(unsigned char)+0x4e>
     860:	e8 89       	ldd	r30, Y+16	; 0x10
     862:	f9 89       	ldd	r31, Y+17	; 0x11
     864:	80 81       	ld	r24, Z
     866:	85 ff       	sbrs	r24, 5
     868:	15 c0       	rjmp	.+42     	; 0x894 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     86a:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\14377\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     86c:	f8 94       	cli
write():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     86e:	ee 89       	ldd	r30, Y+22	; 0x16
     870:	ff 89       	ldd	r31, Y+23	; 0x17
     872:	60 83       	st	Z, r22
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     874:	e8 89       	ldd	r30, Y+16	; 0x10
     876:	f9 89       	ldd	r31, Y+17	; 0x11
     878:	80 81       	ld	r24, Z
     87a:	83 70       	andi	r24, 0x03	; 3
     87c:	80 64       	ori	r24, 0x40	; 64
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     87e:	80 83       	st	Z, r24
__iRestore():
c:\users\14377\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     880:	9f bf       	out	0x3f, r25	; 63
write():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	ff 90       	pop	r15
     890:	ef 90       	pop	r14
     892:	08 95       	ret
     894:	f6 2e       	mov	r15, r22
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     896:	0b 8d       	ldd	r16, Y+27	; 0x1b
     898:	10 e0       	ldi	r17, 0x00	; 0
     89a:	0f 5f       	subi	r16, 0xFF	; 255
     89c:	1f 4f       	sbci	r17, 0xFF	; 255
     89e:	0f 73       	andi	r16, 0x3F	; 63
     8a0:	11 27       	eor	r17, r17
     8a2:	e0 2e       	mov	r14, r16
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     8a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8a6:	8e 11       	cpse	r24, r14
     8a8:	0c c0       	rjmp	.+24     	; 0x8c2 <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	07 fc       	sbrc	r0, 7
     8ae:	fa cf       	rjmp	.-12     	; 0x8a4 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     8b0:	e8 89       	ldd	r30, Y+16	; 0x10
     8b2:	f9 89       	ldd	r31, Y+17	; 0x11
     8b4:	80 81       	ld	r24, Z
     8b6:	85 ff       	sbrs	r24, 5
     8b8:	f5 cf       	rjmp	.-22     	; 0x8a4 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     8ba:	ce 01       	movw	r24, r28
     8bc:	0e 94 01 04 	call	0x802	; 0x802 <HardwareSerial::_tx_udr_empty_irq()>
     8c0:	f1 cf       	rjmp	.-30     	; 0x8a4 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     8c2:	eb 8d       	ldd	r30, Y+27	; 0x1b
     8c4:	ec 0f       	add	r30, r28
     8c6:	fd 2f       	mov	r31, r29
     8c8:	f1 1d       	adc	r31, r1
     8ca:	e3 5a       	subi	r30, 0xA3	; 163
     8cc:	ff 4f       	sbci	r31, 0xFF	; 255
     8ce:	f0 82       	st	Z, r15
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     8d0:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\14377\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8d2:	f8 94       	cli
write():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     8d4:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     8d6:	ea 89       	ldd	r30, Y+18	; 0x12
     8d8:	fb 89       	ldd	r31, Y+19	; 0x13
     8da:	80 81       	ld	r24, Z
     8dc:	80 62       	ori	r24, 0x20	; 32
     8de:	cf cf       	rjmp	.-98     	; 0x87e <HardwareSerial::write(unsigned char)+0x38>

000008e0 <HardwareSerial::flush()>:
flush():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	ec 01       	movw	r28, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     8e6:	88 8d       	ldd	r24, Y+24	; 0x18
     8e8:	88 23       	and	r24, r24
     8ea:	b9 f0       	breq	.+46     	; 0x91a <HardwareSerial::flush()+0x3a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     8ec:	aa 89       	ldd	r26, Y+18	; 0x12
     8ee:	bb 89       	ldd	r27, Y+19	; 0x13
     8f0:	e8 89       	ldd	r30, Y+16	; 0x10
     8f2:	f9 89       	ldd	r31, Y+17	; 0x11
     8f4:	8c 91       	ld	r24, X
     8f6:	85 fd       	sbrc	r24, 5
     8f8:	03 c0       	rjmp	.+6      	; 0x900 <HardwareSerial::flush()+0x20>
     8fa:	80 81       	ld	r24, Z
     8fc:	86 fd       	sbrc	r24, 6
     8fe:	0d c0       	rjmp	.+26     	; 0x91a <HardwareSerial::flush()+0x3a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	07 fc       	sbrc	r0, 7
     904:	f7 cf       	rjmp	.-18     	; 0x8f4 <HardwareSerial::flush()+0x14>
     906:	8c 91       	ld	r24, X
     908:	85 ff       	sbrs	r24, 5
     90a:	f2 cf       	rjmp	.-28     	; 0x8f0 <HardwareSerial::flush()+0x10>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     90c:	80 81       	ld	r24, Z
     90e:	85 ff       	sbrs	r24, 5
     910:	ed cf       	rjmp	.-38     	; 0x8ec <HardwareSerial::flush()+0xc>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     912:	ce 01       	movw	r24, r28
     914:	0e 94 01 04 	call	0x802	; 0x802 <HardwareSerial::_tx_udr_empty_irq()>
     918:	e9 cf       	rjmp	.-46     	; 0x8ec <HardwareSerial::flush()+0xc>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <serialEventRun()>:
serialEventRun():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	89 2b       	or	r24, r25
     926:	29 f0       	breq	.+10     	; 0x932 <serialEventRun()+0x12>
     928:	0e 94 f7 03 	call	0x7ee	; 0x7ee <Serial0_available()>
     92c:	81 11       	cpse	r24, r1
     92e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	89 2b       	or	r24, r25
     938:	29 f0       	breq	.+10     	; 0x944 <serialEventRun()+0x24>
     93a:	0e 94 ed 03 	call	0x7da	; 0x7da <Serial1_available()>
     93e:	81 11       	cpse	r24, r1
     940:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     944:	08 95       	ret

00000946 <twi_stop>:
twi_stop():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:430
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     946:	85 ed       	ldi	r24, 0xD5	; 213
     948:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:450
          return;
        }
      }
    }
  #else
    while(TWCR & _BV(TWSTO)){
     94c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     950:	84 fd       	sbrc	r24, 4
     952:	fc cf       	rjmp	.-8      	; 0x94c <twi_stop+0x6>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:456
      continue;
    }
  #endif

  // update twi state
  twi_state = TWI_READY;
     954:	10 92 27 08 	sts	0x0827, r1	; 0x800827 <twi_state>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:457
}
     958:	08 95       	ret

0000095a <twi_transmit>:
twi_transmit():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:365
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     95a:	20 91 e6 07 	lds	r18, 0x07E6	; 0x8007e6 <twi_txBufferLength>
     95e:	26 0f       	add	r18, r22
     960:	33 27       	eor	r19, r19
     962:	33 1f       	adc	r19, r19
     964:	21 32       	cpi	r18, 0x21	; 33
     966:	31 05       	cpc	r19, r1
     968:	ec f4       	brge	.+58     	; 0x9a4 <twi_transmit+0x4a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:370
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     96a:	20 91 27 08 	lds	r18, 0x0827	; 0x800827 <twi_state>
     96e:	fc 01       	movw	r30, r24
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	24 30       	cpi	r18, 0x04	; 4
     976:	69 f0       	breq	.+26     	; 0x992 <twi_transmit+0x38>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:371
    return 2;
     978:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:381
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     97a:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:376
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     97c:	a0 91 e6 07 	lds	r26, 0x07E6	; 0x8007e6 <twi_txBufferLength>
     980:	21 91       	ld	r18, Z+
     982:	ac 01       	movw	r20, r24
     984:	4a 53       	subi	r20, 0x3A	; 58
     986:	58 4f       	sbci	r21, 0xF8	; 248
     988:	a4 0f       	add	r26, r20
     98a:	b5 2f       	mov	r27, r21
     98c:	b1 1d       	adc	r27, r1
     98e:	2c 93       	st	X, r18
     990:	01 96       	adiw	r24, 0x01	; 1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:375
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     992:	86 17       	cp	r24, r22
     994:	98 f3       	brcs	.-26     	; 0x97c <twi_transmit+0x22>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:378
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     996:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <twi_txBufferLength>
     99a:	68 0f       	add	r22, r24
     99c:	60 93 e6 07 	sts	0x07E6, r22	; 0x8007e6 <twi_txBufferLength>
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:366
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	08 95       	ret

000009a8 <TwoWire::flush()>:
flush():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:328
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     9a8:	08 95       	ret

000009aa <TwoWire::peek()>:
peek():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:318
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
     9aa:	e0 91 6d 08 	lds	r30, 0x086D	; 0x80086d <TwoWire::rxBufferIndex>
     9ae:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <TwoWire::rxBufferLength>
     9b2:	e8 17       	cp	r30, r24
     9b4:	30 f4       	brcc	.+12     	; 0x9c2 <TwoWire::peek()+0x18>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:319
    value = rxBuffer[rxBufferIndex];
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	e4 5b       	subi	r30, 0xB4	; 180
     9ba:	f7 4f       	sbci	r31, 0xF7	; 247
     9bc:	80 81       	ld	r24, Z
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:316
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
     9c2:	8f ef       	ldi	r24, 0xFF	; 255
     9c4:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:323
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     9c6:	08 95       	ret

000009c8 <TwoWire::available()>:
available():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:292
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     9c8:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <TwoWire::rxBufferLength>
     9cc:	90 91 6d 08 	lds	r25, 0x086D	; 0x80086d <TwoWire::rxBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:293
}
     9d0:	89 1b       	sub	r24, r25
     9d2:	99 0b       	sbc	r25, r25
     9d4:	08 95       	ret

000009d6 <TwoWire::write(unsigned char const*, unsigned int)>:
write():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:273

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     9d6:	cf 92       	push	r12
     9d8:	df 92       	push	r13
     9da:	ef 92       	push	r14
     9dc:	ff 92       	push	r15
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	7c 01       	movw	r14, r24
     9e8:	cb 01       	movw	r24, r22
     9ea:	8a 01       	movw	r16, r20
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:274
  if(transmitting){
     9ec:	20 91 28 08 	lds	r18, 0x0828	; 0x800828 <TwoWire::transmitting>
     9f0:	22 23       	and	r18, r18
     9f2:	89 f0       	breq	.+34     	; 0xa16 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     9f4:	eb 01       	movw	r28, r22
     9f6:	6b 01       	movw	r12, r22
     9f8:	c4 0e       	add	r12, r20
     9fa:	d5 1e       	adc	r13, r21
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:276
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     9fc:	cc 15       	cp	r28, r12
     9fe:	dd 05       	cpc	r29, r13
     a00:	69 f0       	breq	.+26     	; 0xa1c <TwoWire::write(unsigned char const*, unsigned int)+0x46>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:277
      write(data[i]);
     a02:	69 91       	ld	r22, Y+
     a04:	d7 01       	movw	r26, r14
     a06:	ed 91       	ld	r30, X+
     a08:	fc 91       	ld	r31, X
     a0a:	01 90       	ld	r0, Z+
     a0c:	f0 81       	ld	r31, Z
     a0e:	e0 2d       	mov	r30, r0
     a10:	c7 01       	movw	r24, r14
     a12:	09 95       	icall
     a14:	f3 cf       	rjmp	.-26     	; 0x9fc <TwoWire::write(unsigned char const*, unsigned int)+0x26>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:282
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     a16:	64 2f       	mov	r22, r20
     a18:	0e 94 ad 04 	call	0x95a	; 0x95a <twi_transmit>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:285
  }
  return quantity;
}
     a1c:	c8 01       	movw	r24, r16
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	ff 90       	pop	r15
     a28:	ef 90       	pop	r14
     a2a:	df 90       	pop	r13
     a2c:	cf 90       	pop	r12
     a2e:	08 95       	ret

00000a30 <TwoWire::write(unsigned char)>:
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:248

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	1f 92       	push	r1
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
     a3a:	69 83       	std	Y+1, r22	; 0x01
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:249
  if(transmitting){
     a3c:	20 91 28 08 	lds	r18, 0x0828	; 0x800828 <TwoWire::transmitting>
     a40:	22 23       	and	r18, r18
     a42:	f9 f0       	breq	.+62     	; 0xa82 <TwoWire::write(unsigned char)+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:252
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
     a44:	20 91 4b 08 	lds	r18, 0x084B	; 0x80084b <TwoWire::txBufferLength>
     a48:	20 32       	cpi	r18, 0x20	; 32
     a4a:	58 f0       	brcs	.+22     	; 0xa62 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     a4c:	21 e0       	ldi	r18, 0x01	; 1
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	fc 01       	movw	r30, r24
     a52:	33 83       	std	Z+3, r19	; 0x03
     a54:	22 83       	std	Z+2, r18	; 0x02
write():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:254
      setWriteError();
      return 0;
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:267
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
     a5a:	0f 90       	pop	r0
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:257
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     a62:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <TwoWire::txBufferIndex>
     a66:	e8 2f       	mov	r30, r24
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	e6 5d       	subi	r30, 0xD6	; 214
     a6c:	f7 4f       	sbci	r31, 0xF7	; 247
     a6e:	99 81       	ldd	r25, Y+1	; 0x01
     a70:	90 83       	st	Z, r25
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:258
    ++txBufferIndex;
     a72:	8f 5f       	subi	r24, 0xFF	; 255
     a74:	80 93 29 08 	sts	0x0829, r24	; 0x800829 <TwoWire::txBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:260
    // update amount in buffer
    txBufferLength = txBufferIndex;
     a78:	80 93 4b 08 	sts	0x084B, r24	; 0x80084b <TwoWire::txBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:266
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	ec cf       	rjmp	.-40     	; 0xa5a <TwoWire::write(unsigned char)+0x2a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:264
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     a82:	61 e0       	ldi	r22, 0x01	; 1
     a84:	ce 01       	movw	r24, r28
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	0e 94 ad 04 	call	0x95a	; 0x95a <twi_transmit>
     a8c:	f7 cf       	rjmp	.-18     	; 0xa7c <TwoWire::write(unsigned char)+0x4c>

00000a8e <LiquidCrystal::pulseEnable()>:
pulseEnable():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:303
    write4bits(value>>4);
    write4bits(value);
  }
}

void LiquidCrystal::pulseEnable(void) {
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	ec 01       	movw	r28, r24
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:304
  digitalWrite(_enable_pin, LOW);
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	8e 81       	ldd	r24, Y+6	; 0x06
     a98:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:305
  delayMicroseconds(1);    
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 b0 02 	call	0x560	; 0x560 <delayMicroseconds>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:306
  digitalWrite(_enable_pin, HIGH);
     aa4:	61 e0       	ldi	r22, 0x01	; 1
     aa6:	8e 81       	ldd	r24, Y+6	; 0x06
     aa8:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:307
  delayMicroseconds(1);    // enable pulse must be >450ns
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	0e 94 b0 02 	call	0x560	; 0x560 <delayMicroseconds>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:308
  digitalWrite(_enable_pin, LOW);
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	8e 81       	ldd	r24, Y+6	; 0x06
     ab8:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:309
  delayMicroseconds(100);   // commands need > 37us to settle
     abc:	84 e6       	ldi	r24, 0x64	; 100
     abe:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:310
}
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:309
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(1);    
  digitalWrite(_enable_pin, HIGH);
  delayMicroseconds(1);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
     ac4:	0c 94 b0 02 	jmp	0x560	; 0x560 <delayMicroseconds>

00000ac8 <LiquidCrystal::write4bits(unsigned char)>:
write4bits():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:312
}

void LiquidCrystal::write4bits(uint8_t value) {
     ac8:	cf 92       	push	r12
     aca:	df 92       	push	r13
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	6c 01       	movw	r12, r24
     ada:	7c 01       	movw	r14, r24
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	e8 0e       	add	r14, r24
     ae0:	f1 1c       	adc	r15, r1
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:313
  for (int i = 0; i < 4; i++) {
     ae2:	d0 e0       	ldi	r29, 0x00	; 0
     ae4:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:314
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     ae6:	06 2f       	mov	r16, r22
     ae8:	10 e0       	ldi	r17, 0x00	; 0
     aea:	b8 01       	movw	r22, r16
     aec:	0c 2e       	mov	r0, r28
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <LiquidCrystal::write4bits(unsigned char)+0x2c>
     af0:	75 95       	asr	r23
     af2:	67 95       	ror	r22
     af4:	0a 94       	dec	r0
     af6:	e2 f7       	brpl	.-8      	; 0xaf0 <LiquidCrystal::write4bits(unsigned char)+0x28>
     af8:	61 70       	andi	r22, 0x01	; 1
     afa:	f7 01       	movw	r30, r14
     afc:	81 91       	ld	r24, Z+
     afe:	7f 01       	movw	r14, r30
     b00:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:313
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
     b04:	21 96       	adiw	r28, 0x01	; 1
     b06:	c4 30       	cpi	r28, 0x04	; 4
     b08:	d1 05       	cpc	r29, r1
     b0a:	79 f7       	brne	.-34     	; 0xaea <LiquidCrystal::write4bits(unsigned char)+0x22>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:317
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
     b0c:	c6 01       	movw	r24, r12
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:318
}
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	ff 90       	pop	r15
     b18:	ef 90       	pop	r14
     b1a:	df 90       	pop	r13
     b1c:	cf 90       	pop	r12
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:317
void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
     b1e:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <LiquidCrystal::pulseEnable()>

00000b22 <LiquidCrystal::send(unsigned char, unsigned char)>:
send():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:287
}

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
     b22:	cf 92       	push	r12
     b24:	df 92       	push	r13
     b26:	ef 92       	push	r14
     b28:	ff 92       	push	r15
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	ec 01       	movw	r28, r24
     b34:	f6 2e       	mov	r15, r22
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:288
  digitalWrite(_rs_pin, mode);
     b36:	64 2f       	mov	r22, r20
     b38:	8c 81       	ldd	r24, Y+4	; 0x04
     b3a:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:291

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
     b3e:	8d 81       	ldd	r24, Y+5	; 0x05
     b40:	8f 3f       	cpi	r24, 0xFF	; 255
     b42:	19 f0       	breq	.+6      	; 0xb4a <LiquidCrystal::send(unsigned char, unsigned char)+0x28>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:292
    digitalWrite(_rw_pin, LOW);
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
     b4a:	0f 2d       	mov	r16, r15
     b4c:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:295
  }
  
  if (_displayfunction & LCD_8BITMODE) {
     b4e:	8f 85       	ldd	r24, Y+15	; 0x0f
     b50:	84 ff       	sbrs	r24, 4
     b52:	25 c0       	rjmp	.+74     	; 0xb9e <LiquidCrystal::send(unsigned char, unsigned char)+0x7c>
     b54:	6e 01       	movw	r12, r28
     b56:	87 e0       	ldi	r24, 0x07	; 7
     b58:	c8 0e       	add	r12, r24
     b5a:	d1 1c       	adc	r13, r1
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:321

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
     b5c:	f1 2c       	mov	r15, r1
     b5e:	e1 2c       	mov	r14, r1
write8bits():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:322
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     b60:	b8 01       	movw	r22, r16
     b62:	0e 2c       	mov	r0, r14
     b64:	02 c0       	rjmp	.+4      	; 0xb6a <LiquidCrystal::send(unsigned char, unsigned char)+0x48>
     b66:	75 95       	asr	r23
     b68:	67 95       	ror	r22
     b6a:	0a 94       	dec	r0
     b6c:	e2 f7       	brpl	.-8      	; 0xb66 <LiquidCrystal::send(unsigned char, unsigned char)+0x44>
     b6e:	61 70       	andi	r22, 0x01	; 1
     b70:	f6 01       	movw	r30, r12
     b72:	81 91       	ld	r24, Z+
     b74:	6f 01       	movw	r12, r30
     b76:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:321

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
     b7a:	ff ef       	ldi	r31, 0xFF	; 255
     b7c:	ef 1a       	sub	r14, r31
     b7e:	ff 0a       	sbc	r15, r31
     b80:	88 e0       	ldi	r24, 0x08	; 8
     b82:	e8 16       	cp	r14, r24
     b84:	f1 04       	cpc	r15, r1
     b86:	61 f7       	brne	.-40     	; 0xb60 <LiquidCrystal::send(unsigned char, unsigned char)+0x3e>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:325
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
     b88:	ce 01       	movw	r24, r28
send():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:301
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	ff 90       	pop	r15
     b94:	ef 90       	pop	r14
     b96:	df 90       	pop	r13
     b98:	cf 90       	pop	r12
write8bits():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:325
void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
     b9a:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <LiquidCrystal::pulseEnable()>
send():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:298
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
     b9e:	b8 01       	movw	r22, r16
     ba0:	84 e0       	ldi	r24, 0x04	; 4
     ba2:	75 95       	asr	r23
     ba4:	67 95       	ror	r22
     ba6:	8a 95       	dec	r24
     ba8:	e1 f7       	brne	.-8      	; 0xba2 <LiquidCrystal::send(unsigned char, unsigned char)+0x80>
     baa:	ce 01       	movw	r24, r28
     bac:	0e 94 64 05 	call	0xac8	; 0xac8 <LiquidCrystal::write4bits(unsigned char)>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:299
    write4bits(value);
     bb0:	6f 2d       	mov	r22, r15
     bb2:	ce 01       	movw	r24, r28
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:301
  }
}
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	df 90       	pop	r13
     bc2:	cf 90       	pop	r12
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:299
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
     bc4:	0c 94 64 05 	jmp	0xac8	; 0xac8 <LiquidCrystal::write4bits(unsigned char)>

00000bc8 <LiquidCrystal::command(unsigned char) [clone .constprop.35]>:
command():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:276
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	68 2f       	mov	r22, r24
     bcc:	84 e0       	ldi	r24, 0x04	; 4
     bce:	9a e0       	ldi	r25, 0x0A	; 10
     bd0:	0c 94 91 05 	jmp	0xb22	; 0xb22 <LiquidCrystal::send(unsigned char, unsigned char)>

00000bd4 <LiquidCrystal::clear() [clone .constprop.34]>:
clear():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:178
}

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <LiquidCrystal::command(unsigned char) [clone .constprop.35]>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:179
  delayMicroseconds(2000);  // this command takes a long time!
     bda:	80 ed       	ldi	r24, 0xD0	; 208
     bdc:	97 e0       	ldi	r25, 0x07	; 7
     bde:	0c 94 b0 02 	jmp	0x560	; 0x560 <delayMicroseconds>

00000be2 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]>:
begin():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:78
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:79
  if (lines > 1) {
     be6:	61 30       	cpi	r22, 0x01	; 1
     be8:	29 f0       	breq	.+10     	; 0xbf4 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]+0x12>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:80
    _displayfunction |= LCD_2LINE;
     bea:	90 91 13 0a 	lds	r25, 0x0A13	; 0x800a13 <lcd+0xf>
     bee:	98 60       	ori	r25, 0x08	; 8
     bf0:	90 93 13 0a 	sts	0x0A13, r25	; 0x800a13 <lcd+0xf>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:82
  }
  _numlines = lines;
     bf4:	60 93 17 0a 	sts	0x0A17, r22	; 0x800a17 <lcd+0x13>
setRowOffsets():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:169

}

void LiquidCrystal::setRowOffsets(int row0, int row1, int row2, int row3)
{
  _row_offsets[0] = row0;
     bf8:	10 92 18 0a 	sts	0x0A18, r1	; 0x800a18 <lcd+0x14>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:170
  _row_offsets[1] = row1;
     bfc:	90 e4       	ldi	r25, 0x40	; 64
     bfe:	90 93 19 0a 	sts	0x0A19, r25	; 0x800a19 <lcd+0x15>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:171
  _row_offsets[2] = row2;
     c02:	80 93 1a 0a 	sts	0x0A1A, r24	; 0x800a1a <lcd+0x16>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:172
  _row_offsets[3] = row3;
     c06:	80 5c       	subi	r24, 0xC0	; 192
     c08:	80 93 1b 0a 	sts	0x0A1B, r24	; 0x800a1b <lcd+0x17>
begin():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:91
  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
    _displayfunction |= LCD_5x10DOTS;
  }

  pinMode(_rs_pin, OUTPUT);
     c0c:	61 e0       	ldi	r22, 0x01	; 1
     c0e:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <lcd+0x4>
     c12:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:93
  // we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
  if (_rw_pin != 255) { 
     c16:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <lcd+0x5>
     c1a:	8f 3f       	cpi	r24, 0xFF	; 255
     c1c:	19 f0       	breq	.+6      	; 0xc24 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]+0x42>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:94
    pinMode(_rw_pin, OUTPUT);
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:96
  }
  pinMode(_enable_pin, OUTPUT);
     c24:	61 e0       	ldi	r22, 0x01	; 1
     c26:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <lcd+0x6>
     c2a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
     c2e:	c4 e0       	ldi	r28, 0x04	; 4
     c30:	da e0       	ldi	r29, 0x0A	; 10
     c32:	9e 01       	movw	r18, r28
     c34:	24 50       	subi	r18, 0x04	; 4
     c36:	3a 40       	sbci	r19, 0x0A	; 10
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:99
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
     c38:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <lcd+0xf>
     c3c:	84 fd       	sbrc	r24, 4
     c3e:	0b c0       	rjmp	.+22     	; 0xc56 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]+0x74>
     c40:	84 e0       	ldi	r24, 0x04	; 4
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	21 96       	adiw	r28, 0x01	; 1
     c46:	28 17       	cp	r18, r24
     c48:	39 07       	cpc	r19, r25
     c4a:	44 f4       	brge	.+16     	; 0xc5c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]+0x7a>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:101
  {
    pinMode(_data_pins[i], OUTPUT);
     c4c:	61 e0       	ldi	r22, 0x01	; 1
     c4e:	8e 81       	ldd	r24, Y+6	; 0x06
     c50:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
     c54:	ee cf       	rjmp	.-36     	; 0xc32 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]+0x50>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:99
    pinMode(_rw_pin, OUTPUT);
  }
  pinMode(_enable_pin, OUTPUT);
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
     c56:	88 e0       	ldi	r24, 0x08	; 8
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	f4 cf       	rjmp	.-24     	; 0xc44 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]+0x62>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:107
   } 

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  delayMicroseconds(50000); 
     c5c:	80 e5       	ldi	r24, 0x50	; 80
     c5e:	93 ec       	ldi	r25, 0xC3	; 195
     c60:	0e 94 b0 02 	call	0x560	; 0x560 <delayMicroseconds>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:109
  // Now we pull both RS and R/W low to begin commands
  digitalWrite(_rs_pin, LOW);
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <lcd+0x4>
     c6a:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:110
  digitalWrite(_enable_pin, LOW);
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <lcd+0x6>
     c74:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:111
  if (_rw_pin != 255) { 
     c78:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <lcd+0x5>
     c7c:	8f 3f       	cpi	r24, 0xFF	; 255
     c7e:	19 f0       	breq	.+6      	; 0xc86 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]+0xa4>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:112
    digitalWrite(_rw_pin, LOW);
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:116
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
     c86:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <lcd+0xf>
     c8a:	84 fd       	sbrc	r24, 4
     c8c:	35 c0       	rjmp	.+106    	; 0xcf8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]+0x116>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:121
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
     c8e:	63 e0       	ldi	r22, 0x03	; 3
     c90:	84 e0       	ldi	r24, 0x04	; 4
     c92:	9a e0       	ldi	r25, 0x0A	; 10
     c94:	0e 94 64 05 	call	0xac8	; 0xac8 <LiquidCrystal::write4bits(unsigned char)>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:122
    delayMicroseconds(4500); // wait min 4.1ms
     c98:	84 e9       	ldi	r24, 0x94	; 148
     c9a:	91 e1       	ldi	r25, 0x11	; 17
     c9c:	0e 94 b0 02 	call	0x560	; 0x560 <delayMicroseconds>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:125

    // second try
    write4bits(0x03);
     ca0:	63 e0       	ldi	r22, 0x03	; 3
     ca2:	84 e0       	ldi	r24, 0x04	; 4
     ca4:	9a e0       	ldi	r25, 0x0A	; 10
     ca6:	0e 94 64 05 	call	0xac8	; 0xac8 <LiquidCrystal::write4bits(unsigned char)>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:126
    delayMicroseconds(4500); // wait min 4.1ms
     caa:	84 e9       	ldi	r24, 0x94	; 148
     cac:	91 e1       	ldi	r25, 0x11	; 17
     cae:	0e 94 b0 02 	call	0x560	; 0x560 <delayMicroseconds>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:129
    
    // third go!
    write4bits(0x03); 
     cb2:	63 e0       	ldi	r22, 0x03	; 3
     cb4:	84 e0       	ldi	r24, 0x04	; 4
     cb6:	9a e0       	ldi	r25, 0x0A	; 10
     cb8:	0e 94 64 05 	call	0xac8	; 0xac8 <LiquidCrystal::write4bits(unsigned char)>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:130
    delayMicroseconds(150);
     cbc:	86 e9       	ldi	r24, 0x96	; 150
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 b0 02 	call	0x560	; 0x560 <delayMicroseconds>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:133

    // finally, set to 4-bit interface
    write4bits(0x02); 
     cc4:	62 e0       	ldi	r22, 0x02	; 2
     cc6:	84 e0       	ldi	r24, 0x04	; 4
     cc8:	9a e0       	ldi	r25, 0x0A	; 10
     cca:	0e 94 64 05 	call	0xac8	; 0xac8 <LiquidCrystal::write4bits(unsigned char)>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:151
    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
     cce:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <lcd+0xf>
     cd2:	80 62       	ori	r24, 0x20	; 32
     cd4:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <LiquidCrystal::command(unsigned char) [clone .constprop.35]>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:154

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
     cd8:	84 e0       	ldi	r24, 0x04	; 4
     cda:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <lcd+0x10>
display():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:208
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::display() {
  _displaycontrol |= LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
     cde:	8c e0       	ldi	r24, 0x0C	; 12
     ce0:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <LiquidCrystal::command(unsigned char) [clone .constprop.35]>
begin():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:158
  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
  display();

  // clear it off
  clear();
     ce4:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:161

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     ce8:	82 e0       	ldi	r24, 0x02	; 2
     cea:	80 93 15 0a 	sts	0x0A15, r24	; 0x800a15 <lcd+0x11>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:163
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
     cee:	86 e0       	ldi	r24, 0x06	; 6
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:165

}
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:163
  clear();

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
     cf4:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <LiquidCrystal::command(unsigned char) [clone .constprop.35]>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:139
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
     cf8:	80 62       	ori	r24, 0x20	; 32
     cfa:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <LiquidCrystal::command(unsigned char) [clone .constprop.35]>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:140
    delayMicroseconds(4500);  // wait more than 4.1ms
     cfe:	84 e9       	ldi	r24, 0x94	; 148
     d00:	91 e1       	ldi	r25, 0x11	; 17
     d02:	0e 94 b0 02 	call	0x560	; 0x560 <delayMicroseconds>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:143

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
     d06:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <lcd+0xf>
     d0a:	80 62       	ori	r24, 0x20	; 32
     d0c:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <LiquidCrystal::command(unsigned char) [clone .constprop.35]>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:144
    delayMicroseconds(150);
     d10:	86 e9       	ldi	r24, 0x96	; 150
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 b0 02 	call	0x560	; 0x560 <delayMicroseconds>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:147

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
     d18:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <lcd+0xf>
     d1c:	80 62       	ori	r24, 0x20	; 32
     d1e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <LiquidCrystal::command(unsigned char) [clone .constprop.35]>
     d22:	d5 cf       	rjmp	.-86     	; 0xcce <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]+0xec>

00000d24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>:
setCursor():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:188
{
  command(LCD_RETURNHOME);  // set cursor position to zero
  delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal::setCursor(uint8_t col, uint8_t row)
     d24:	64 30       	cpi	r22, 0x04	; 4
     d26:	08 f0       	brcs	.+2      	; 0xd2a <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]+0x6>
     d28:	63 e0       	ldi	r22, 0x03	; 3
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:194
{
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
  if ( row >= max_lines ) {
    row = max_lines - 1;    // we count rows starting w/0
  }
  if ( row >= _numlines ) {
     d2a:	90 91 17 0a 	lds	r25, 0x0A17	; 0x800a17 <lcd+0x13>
     d2e:	69 17       	cp	r22, r25
     d30:	10 f0       	brcs	.+4      	; 0xd36 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]+0x12>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:195
    row = _numlines - 1;    // we count rows starting w/0
     d32:	6f ef       	ldi	r22, 0xFF	; 255
     d34:	69 0f       	add	r22, r25
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:198
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
     d36:	e6 2f       	mov	r30, r22
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	ec 5f       	subi	r30, 0xFC	; 252
     d3c:	f5 4f       	sbci	r31, 0xF5	; 245
     d3e:	94 89       	ldd	r25, Z+20	; 0x14
     d40:	89 0f       	add	r24, r25
     d42:	80 68       	ori	r24, 0x80	; 128
     d44:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <LiquidCrystal::command(unsigned char) [clone .constprop.35]>

00000d48 <LiquidCrystal::write(unsigned char)>:
write():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     d48:	41 e0       	ldi	r20, 0x01	; 1
     d4a:	0e 94 91 05 	call	0xb22	; 0xb22 <LiquidCrystal::send(unsigned char, unsigned char)>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:282
  return 1; // assume sucess
}
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	08 95       	ret

00000d54 <Print::flush()>:
flush():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     d54:	08 95       	ret

00000d56 <Print::availableForWrite()>:
availableForWrite():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	08 95       	ret

00000d5c <read_sensor(char, char, char)>:
read_sensor():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:141
  int result = 0;
  result = (EEPROM.read(address) << 8) + EEPROM.read(address + 1);
  return result;
}

int read_sensor(char sensorNum, char pinNum, char outputMode) {
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	d8 2f       	mov	r29, r24
     d64:	c6 2f       	mov	r28, r22
     d66:	14 2f       	mov	r17, r20
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:143
  int output = 0;
  byte n1 = sensorNum & 0b0001;
     d68:	68 2f       	mov	r22, r24
     d6a:	61 70       	andi	r22, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:147
  byte n2 = (sensorNum & 0b0010) / 2;
  byte n3 = (sensorNum & 0b0100) / 4;

  digitalWrite(MUX_A, n1);
     d6c:	8c e2       	ldi	r24, 0x2C	; 44
     d6e:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:144
}

int read_sensor(char sensorNum, char pinNum, char outputMode) {
  int output = 0;
  byte n1 = sensorNum & 0b0001;
  byte n2 = (sensorNum & 0b0010) / 2;
     d72:	d1 fb       	bst	r29, 1
     d74:	66 27       	eor	r22, r22
     d76:	60 f9       	bld	r22, 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:148
  byte n3 = (sensorNum & 0b0100) / 4;

  digitalWrite(MUX_A, n1);
  digitalWrite(MUX_B, n2);
     d78:	8b e2       	ldi	r24, 0x2B	; 43
     d7a:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:145

int read_sensor(char sensorNum, char pinNum, char outputMode) {
  int output = 0;
  byte n1 = sensorNum & 0b0001;
  byte n2 = (sensorNum & 0b0010) / 2;
  byte n3 = (sensorNum & 0b0100) / 4;
     d7e:	6d 2f       	mov	r22, r29
     d80:	65 95       	asr	r22
     d82:	65 95       	asr	r22
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:149

  digitalWrite(MUX_A, n1);
  digitalWrite(MUX_B, n2);
  digitalWrite(MUX_C, n3);
     d84:	8a e2       	ldi	r24, 0x2A	; 42
     d86:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:150
  if (outputMode == 0)  // digital Mode
     d8a:	11 11       	cpse	r17, r1
     d8c:	0f c0       	rjmp	.+30     	; 0xdac <read_sensor(char, char, char)+0x50>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:153
  {
    if (pinNum == 0)
      output = digitalRead(A0);
     d8e:	8d e2       	ldi	r24, 0x2D	; 45
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:152
  digitalWrite(MUX_A, n1);
  digitalWrite(MUX_B, n2);
  digitalWrite(MUX_C, n3);
  if (outputMode == 0)  // digital Mode
  {
    if (pinNum == 0)
     d90:	cc 23       	and	r28, r28
     d92:	39 f0       	breq	.+14     	; 0xda2 <read_sensor(char, char, char)+0x46>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:155
      output = digitalRead(A0);
    else if (pinNum == 1)
      output = digitalRead(A1);
     d94:	8e e2       	ldi	r24, 0x2E	; 46
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:154
  digitalWrite(MUX_C, n3);
  if (outputMode == 0)  // digital Mode
  {
    if (pinNum == 0)
      output = digitalRead(A0);
    else if (pinNum == 1)
     d96:	c1 30       	cpi	r28, 0x01	; 1
     d98:	21 f0       	breq	.+8      	; 0xda2 <read_sensor(char, char, char)+0x46>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:157
      output = digitalRead(A1);
    else if (pinNum == 2)
      output = digitalRead(A2);
     d9a:	8f e2       	ldi	r24, 0x2F	; 47
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:156
  {
    if (pinNum == 0)
      output = digitalRead(A0);
    else if (pinNum == 1)
      output = digitalRead(A1);
    else if (pinNum == 2)
     d9c:	c2 30       	cpi	r28, 0x02	; 2
     d9e:	09 f0       	breq	.+2      	; 0xda2 <read_sensor(char, char, char)+0x46>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:159
      output = digitalRead(A2);
    else if (pinNum == 3)
      output = digitalRead(A3);
     da0:	80 e3       	ldi	r24, 0x30	; 48
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:173
    else if (pinNum == 3)
      output = analogRead(A3);
    output = output * 5 / 102.3;
  }
  return output;
}
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	1f 91       	pop	r17
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:159
    else if (pinNum == 1)
      output = digitalRead(A1);
    else if (pinNum == 2)
      output = digitalRead(A2);
    else if (pinNum == 3)
      output = digitalRead(A3);
     da8:	0c 94 a0 01 	jmp	0x340	; 0x340 <digitalRead>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:163
  } else if (outputMode == 1)  // analog Mode
  {
    if (pinNum == 0)
      output = analogRead(A0);
     dac:	8d e2       	ldi	r24, 0x2D	; 45
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:162
      output = digitalRead(A2);
    else if (pinNum == 3)
      output = digitalRead(A3);
  } else if (outputMode == 1)  // analog Mode
  {
    if (pinNum == 0)
     dae:	cc 23       	and	r28, r28
     db0:	39 f0       	breq	.+14     	; 0xdc0 <read_sensor(char, char, char)+0x64>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:165
      output = analogRead(A0);
    else if (pinNum == 1)
      output = analogRead(A1);
     db2:	8e e2       	ldi	r24, 0x2E	; 46
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:164
      output = digitalRead(A3);
  } else if (outputMode == 1)  // analog Mode
  {
    if (pinNum == 0)
      output = analogRead(A0);
    else if (pinNum == 1)
     db4:	c1 30       	cpi	r28, 0x01	; 1
     db6:	21 f0       	breq	.+8      	; 0xdc0 <read_sensor(char, char, char)+0x64>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:167
      output = analogRead(A1);
    else if (pinNum == 2)
      output = analogRead(A2);
     db8:	8f e2       	ldi	r24, 0x2F	; 47
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:166
  {
    if (pinNum == 0)
      output = analogRead(A0);
    else if (pinNum == 1)
      output = analogRead(A1);
    else if (pinNum == 2)
     dba:	c2 30       	cpi	r28, 0x02	; 2
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <read_sensor(char, char, char)+0x64>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:169
      output = analogRead(A2);
    else if (pinNum == 3)
      output = analogRead(A3);
     dbe:	80 e3       	ldi	r24, 0x30	; 48
     dc0:	0e 94 a7 02 	call	0x54e	; 0x54e <analogRead>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:170
    output = output * 5 / 102.3;
     dc4:	25 e0       	ldi	r18, 0x05	; 5
     dc6:	28 9f       	mul	r18, r24
     dc8:	b0 01       	movw	r22, r0
     dca:	29 9f       	mul	r18, r25
     dcc:	70 0d       	add	r23, r0
     dce:	11 24       	eor	r1, r1
     dd0:	07 2e       	mov	r0, r23
     dd2:	00 0c       	add	r0, r0
     dd4:	88 0b       	sbc	r24, r24
     dd6:	99 0b       	sbc	r25, r25
     dd8:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatsisf>
     ddc:	2a e9       	ldi	r18, 0x9A	; 154
     dde:	39 e9       	ldi	r19, 0x99	; 153
     de0:	4c ec       	ldi	r20, 0xCC	; 204
     de2:	52 e4       	ldi	r21, 0x42	; 66
     de4:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__divsf3>
     de8:	0e 94 13 2b 	call	0x5626	; 0x5626 <__fixsfsi>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:173
  }
  return output;
}
     dec:	cb 01       	movw	r24, r22
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	08 95       	ret

00000df6 <go(int, int)>:
go():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:97

  else if (SL9) go(-spd, spd);
  else if (SR9) go(spd, -spd);
  
}
void go(int left, int right) {
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:99
  left = -left;
  right = -right;
     dfe:	00 27       	eor	r16, r16
     e00:	11 27       	eor	r17, r17
     e02:	06 1b       	sub	r16, r22
     e04:	17 0b       	sbc	r17, r23
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:101

  if (left > 255)
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	2f ef       	ldi	r18, 0xFF	; 255
     e0a:	92 07       	cpc	r25, r18
     e0c:	0c f4       	brge	.+2      	; 0xe10 <go(int, int)+0x1a>
     e0e:	46 c0       	rjmp	.+140    	; 0xe9c <go(int, int)+0xa6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:103
    left = 255;
  if (left < -255)
     e10:	8f 3f       	cpi	r24, 0xFF	; 255
     e12:	91 05       	cpc	r25, r1
     e14:	09 f0       	breq	.+2      	; 0xe18 <go(int, int)+0x22>
     e16:	cc f5       	brge	.+114    	; 0xe8a <go(int, int)+0x94>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:98
  else if (SL9) go(-spd, spd);
  else if (SR9) go(spd, -spd);
  
}
void go(int left, int right) {
  left = -left;
     e18:	cc 27       	eor	r28, r28
     e1a:	dd 27       	eor	r29, r29
     e1c:	c8 1b       	sub	r28, r24
     e1e:	d9 0b       	sbc	r29, r25
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:105

  if (left > 255)
    left = 255;
  if (left < -255)
    left = -255;
  if (right > 255)
     e20:	61 30       	cpi	r22, 0x01	; 1
     e22:	2f ef       	ldi	r18, 0xFF	; 255
     e24:	72 07       	cpc	r23, r18
     e26:	2c f1       	brlt	.+74     	; 0xe72 <go(int, int)+0x7c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:107
    right = 255;
  if (right < -255)
     e28:	6f 3f       	cpi	r22, 0xFF	; 255
     e2a:	71 05       	cpc	r23, r1
     e2c:	09 f0       	breq	.+2      	; 0xe30 <go(int, int)+0x3a>
     e2e:	24 f5       	brge	.+72     	; 0xe78 <go(int, int)+0x82>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:110
    right = -255;

  if (left <= 0) {
     e30:	97 fd       	sbrc	r25, 7
     e32:	29 c0       	rjmp	.+82     	; 0xe86 <go(int, int)+0x90>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:111
    digitalWrite(2, LOW);
     e34:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:114
    analogWrite(3, -left);
  } else if (left > 0) {
    digitalWrite(2, HIGH);
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:115
    analogWrite(3, -left);
     e3c:	66 27       	eor	r22, r22
     e3e:	77 27       	eor	r23, r23
     e40:	6c 1b       	sub	r22, r28
     e42:	7d 0b       	sbc	r23, r29
     e44:	83 e0       	ldi	r24, 0x03	; 3
     e46:	0e 94 33 02 	call	0x466	; 0x466 <analogWrite>
     e4a:	cc 27       	eor	r28, r28
     e4c:	dd 27       	eor	r29, r29
     e4e:	c0 1b       	sub	r28, r16
     e50:	d1 0b       	sbc	r29, r17
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:119
  }

  if (right <= 0) {
    digitalWrite(4, LOW);
     e52:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:118
  } else if (left > 0) {
    digitalWrite(2, HIGH);
    analogWrite(3, -left);
  }

  if (right <= 0) {
     e54:	10 16       	cp	r1, r16
     e56:	11 06       	cpc	r1, r17
     e58:	0c f4       	brge	.+2      	; 0xe5c <go(int, int)+0x66>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:124
    digitalWrite(4, LOW);
    analogWrite(5, -right);
  }

  else if (right > 0) {
    digitalWrite(4, HIGH);
     e5a:	61 e0       	ldi	r22, 0x01	; 1
     e5c:	84 e0       	ldi	r24, 0x04	; 4
     e5e:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:125
    analogWrite(5, -right);
     e62:	be 01       	movw	r22, r28
     e64:	85 e0       	ldi	r24, 0x05	; 5
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:127
  }
}
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:125
    analogWrite(5, -right);
  }

  else if (right > 0) {
    digitalWrite(4, HIGH);
    analogWrite(5, -right);
     e6e:	0c 94 33 02 	jmp	0x466	; 0x466 <analogWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:106
  if (left > 255)
    left = 255;
  if (left < -255)
    left = -255;
  if (right > 255)
    right = 255;
     e72:	0f ef       	ldi	r16, 0xFF	; 255
     e74:	10 e0       	ldi	r17, 0x00	; 0
     e76:	dc cf       	rjmp	.-72     	; 0xe30 <go(int, int)+0x3a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:108
  if (right < -255)
    right = -255;
     e78:	01 e0       	ldi	r16, 0x01	; 1
     e7a:	1f ef       	ldi	r17, 0xFF	; 255
     e7c:	d9 cf       	rjmp	.-78     	; 0xe30 <go(int, int)+0x3a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:106
  if (left > 255)
    left = 255;
  if (left < -255)
    left = -255;
  if (right > 255)
    right = 255;
     e7e:	0f ef       	ldi	r16, 0xFF	; 255
     e80:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:102
void go(int left, int right) {
  left = -left;
  right = -right;

  if (left > 255)
    left = 255;
     e82:	cf ef       	ldi	r28, 0xFF	; 255
     e84:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:114

  if (left <= 0) {
    digitalWrite(2, LOW);
    analogWrite(3, -left);
  } else if (left > 0) {
    digitalWrite(2, HIGH);
     e86:	61 e0       	ldi	r22, 0x01	; 1
     e88:	d6 cf       	rjmp	.-84     	; 0xe36 <go(int, int)+0x40>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:105

  if (left > 255)
    left = 255;
  if (left < -255)
    left = -255;
  if (right > 255)
     e8a:	61 30       	cpi	r22, 0x01	; 1
     e8c:	8f ef       	ldi	r24, 0xFF	; 255
     e8e:	78 07       	cpc	r23, r24
     e90:	84 f4       	brge	.+32     	; 0xeb2 <go(int, int)+0xbc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:106
    right = 255;
     e92:	0f ef       	ldi	r16, 0xFF	; 255
     e94:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:104
  right = -right;

  if (left > 255)
    left = 255;
  if (left < -255)
    left = -255;
     e96:	c1 e0       	ldi	r28, 0x01	; 1
     e98:	df ef       	ldi	r29, 0xFF	; 255
     e9a:	cc cf       	rjmp	.-104    	; 0xe34 <go(int, int)+0x3e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:105
  if (right > 255)
     e9c:	61 30       	cpi	r22, 0x01	; 1
     e9e:	2f ef       	ldi	r18, 0xFF	; 255
     ea0:	72 07       	cpc	r23, r18
     ea2:	6c f3       	brlt	.-38     	; 0xe7e <go(int, int)+0x88>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:107
    right = 255;
  if (right < -255)
     ea4:	6f 3f       	cpi	r22, 0xFF	; 255
     ea6:	71 05       	cpc	r23, r1
     ea8:	61 f3       	breq	.-40     	; 0xe82 <go(int, int)+0x8c>
     eaa:	5c f3       	brlt	.-42     	; 0xe82 <go(int, int)+0x8c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:108
    right = -255;
     eac:	01 e0       	ldi	r16, 0x01	; 1
     eae:	1f ef       	ldi	r17, 0xFF	; 255
     eb0:	e8 cf       	rjmp	.-48     	; 0xe82 <go(int, int)+0x8c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:107
    left = 255;
  if (left < -255)
    left = -255;
  if (right > 255)
    right = 255;
  if (right < -255)
     eb2:	6f 3f       	cpi	r22, 0xFF	; 255
     eb4:	71 05       	cpc	r23, r1
     eb6:	79 f3       	breq	.-34     	; 0xe96 <go(int, int)+0xa0>
     eb8:	74 f3       	brlt	.-36     	; 0xe96 <go(int, int)+0xa0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:108
    right = -255;
     eba:	01 e0       	ldi	r16, 0x01	; 1
     ebc:	1f ef       	ldi	r17, 0xFF	; 255
     ebe:	eb cf       	rjmp	.-42     	; 0xe96 <go(int, int)+0xa0>

00000ec0 <move(int, int, int)>:
move():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1705
        break;
        } 
    }
    get_back(); 
}
void move(int direction, int lenth, int speed) {
     ec0:	cf 92       	push	r12
     ec2:	df 92       	push	r13
     ec4:	ef 92       	push	r14
     ec6:	ff 92       	push	r15
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	8b 01       	movw	r16, r22
     ed2:	ea 01       	movw	r28, r20
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1715
        go(speed, speed);
      }
      go(0, 0);
      break;
    case Left:
      cnt = 0;
     ed4:	1d bc       	out	0x2d, r1	; 45
     ed6:	1c bc       	out	0x2c, r1	; 44
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1706
        } 
    }
    get_back(); 
}
void move(int direction, int lenth, int speed) {
  switch (direction) {
     ed8:	8b 30       	cpi	r24, 0x0B	; 11
     eda:	91 05       	cpc	r25, r1
     edc:	01 f1       	breq	.+64     	; 0xf1e <move(int, int, int)+0x5e>
     ede:	0c 97       	sbiw	r24, 0x0c	; 12
     ee0:	91 f1       	breq	.+100    	; 0xf46 <move(int, int, int)+0x86>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1709
    case forward:
      cnt = 0;
      while (cnt / 100 < lenth) {
     ee2:	24 e6       	ldi	r18, 0x64	; 100
     ee4:	e2 2e       	mov	r14, r18
     ee6:	f1 2c       	mov	r15, r1
     ee8:	8c b5       	in	r24, 0x2c	; 44
     eea:	9d b5       	in	r25, 0x2d	; 45
     eec:	b7 01       	movw	r22, r14
     eee:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__udivmodhi4>
     ef2:	60 17       	cp	r22, r16
     ef4:	71 07       	cpc	r23, r17
     ef6:	28 f4       	brcc	.+10     	; 0xf02 <move(int, int, int)+0x42>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1710
        go(speed, speed);
     ef8:	be 01       	movw	r22, r28
     efa:	ce 01       	movw	r24, r28
     efc:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <go(int, int)>
     f00:	f3 cf       	rjmp	.-26     	; 0xee8 <move(int, int, int)+0x28>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1712
      }
      go(0, 0);
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1736
        go(-speed, -speed);
      }
      go(0, 0);
      break;
  }
}
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	ff 90       	pop	r15
     f14:	ef 90       	pop	r14
     f16:	df 90       	pop	r13
     f18:	cf 90       	pop	r12
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1712
    case forward:
      cnt = 0;
      while (cnt / 100 < lenth) {
        go(speed, speed);
      }
      go(0, 0);
     f1a:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <go(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1716
      break;
    case Left:
      cnt = 0;
      while (cnt / 100 < lenth) {
     f1e:	94 e6       	ldi	r25, 0x64	; 100
     f20:	c9 2e       	mov	r12, r25
     f22:	d1 2c       	mov	r13, r1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1717
        go(-speed, speed);
     f24:	ee 24       	eor	r14, r14
     f26:	ff 24       	eor	r15, r15
     f28:	e4 1a       	sub	r14, r20
     f2a:	f5 0a       	sbc	r15, r21
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1716
      }
      go(0, 0);
      break;
    case Left:
      cnt = 0;
      while (cnt / 100 < lenth) {
     f2c:	8c b5       	in	r24, 0x2c	; 44
     f2e:	9d b5       	in	r25, 0x2d	; 45
     f30:	b6 01       	movw	r22, r12
     f32:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__udivmodhi4>
     f36:	60 17       	cp	r22, r16
     f38:	71 07       	cpc	r23, r17
     f3a:	18 f7       	brcc	.-58     	; 0xf02 <move(int, int, int)+0x42>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1717
        go(-speed, speed);
     f3c:	be 01       	movw	r22, r28
     f3e:	c7 01       	movw	r24, r14
     f40:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <go(int, int)>
     f44:	f3 cf       	rjmp	.-26     	; 0xf2c <move(int, int, int)+0x6c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1723
      }
      go(0, 0);
      break;
    case Right:
      cnt = 0;
      while (cnt / 100 < lenth) {
     f46:	84 e6       	ldi	r24, 0x64	; 100
     f48:	c8 2e       	mov	r12, r24
     f4a:	d1 2c       	mov	r13, r1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1724
        go(speed, -speed);
     f4c:	ee 24       	eor	r14, r14
     f4e:	ff 24       	eor	r15, r15
     f50:	e4 1a       	sub	r14, r20
     f52:	f5 0a       	sbc	r15, r21
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1723
      }
      go(0, 0);
      break;
    case Right:
      cnt = 0;
      while (cnt / 100 < lenth) {
     f54:	8c b5       	in	r24, 0x2c	; 44
     f56:	9d b5       	in	r25, 0x2d	; 45
     f58:	b6 01       	movw	r22, r12
     f5a:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__udivmodhi4>
     f5e:	60 17       	cp	r22, r16
     f60:	71 07       	cpc	r23, r17
     f62:	78 f6       	brcc	.-98     	; 0xf02 <move(int, int, int)+0x42>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1724
        go(speed, -speed);
     f64:	b7 01       	movw	r22, r14
     f66:	ce 01       	movw	r24, r28
     f68:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <go(int, int)>
     f6c:	f3 cf       	rjmp	.-26     	; 0xf54 <move(int, int, int)+0x94>

00000f6e <beep(int)>:
beep():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:5
// menu 16
void move(int direction, int lenth, int speed);
unsigned int vl(char xv);

void beep(int num) {
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	8c 01       	movw	r16, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:6
  for (int i = 0; i < num; i++) {
     f78:	d0 e0       	ldi	r29, 0x00	; 0
     f7a:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:7
    buz_on;
     f7c:	61 e0       	ldi	r22, 0x01	; 1
     f7e:	83 e2       	ldi	r24, 0x23	; 35
     f80:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:8
    delay(50);
     f84:	62 e3       	ldi	r22, 0x32	; 50
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:9
    buz_off;
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	83 e2       	ldi	r24, 0x23	; 35
     f94:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:10
    delay(50);
     f98:	62 e3       	ldi	r22, 0x32	; 50
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:6
// menu 16
void move(int direction, int lenth, int speed);
unsigned int vl(char xv);

void beep(int num) {
  for (int i = 0; i < num; i++) {
     fa4:	21 96       	adiw	r28, 0x01	; 1
     fa6:	0c 17       	cp	r16, r28
     fa8:	1d 07       	cpc	r17, r29
     faa:	41 f7       	brne	.-48     	; 0xf7c <beep(int)+0xe>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:12
    buz_on;
    delay(50);
    buz_off;
    delay(50);
  }
}
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	08 95       	ret

00000fb6 <Print::print(char const*) [clone .constprop.20]>:
write():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     fb6:	fc 01       	movw	r30, r24
     fb8:	01 90       	ld	r0, Z+
     fba:	00 20       	and	r0, r0
     fbc:	e9 f7       	brne	.-6      	; 0xfb8 <Print::print(char const*) [clone .constprop.20]+0x2>
     fbe:	31 97       	sbiw	r30, 0x01	; 1
     fc0:	af 01       	movw	r20, r30
     fc2:	48 1b       	sub	r20, r24
     fc4:	59 0b       	sbc	r21, r25
     fc6:	bc 01       	movw	r22, r24
     fc8:	84 e0       	ldi	r24, 0x04	; 4
     fca:	9a e0       	ldi	r25, 0x0A	; 10
     fcc:	0c 94 83 03 	jmp	0x706	; 0x706 <Print::write(unsigned char const*, unsigned int)>

00000fd0 <Print::printf(char const*, ...) [clone .constprop.18]>:
printf():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:208
{
  ((class Print *)(fdev_get_udata(fp)))->write((uint8_t)c);
  return 0;
}

int16_t Print::printf(const char *format, ...)
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	2e 97       	sbiw	r28, 0x0e	; 14
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:213
{
  FILE f;
  va_list ap;

  fdev_setup_stream(&f, printf_putchar, NULL, _FDEV_SETUP_WRITE);
     fe4:	8b ed       	ldi	r24, 0xDB	; 219
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	9a 87       	std	Y+10, r25	; 0x0a
     fea:	89 87       	std	Y+9, r24	; 0x09
     fec:	1c 86       	std	Y+12, r1	; 0x0c
     fee:	1b 86       	std	Y+11, r1	; 0x0b
     ff0:	82 e0       	ldi	r24, 0x02	; 2
     ff2:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:214
  fdev_set_udata(&f, this);
     ff4:	84 e0       	ldi	r24, 0x04	; 4
     ff6:	9a e0       	ldi	r25, 0x0A	; 10
     ff8:	9e 87       	std	Y+14, r25	; 0x0e
     ffa:	8d 87       	std	Y+13, r24	; 0x0d
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:216
  va_start(ap, format);
  return vfprintf(&f, format, ap);
     ffc:	ae 01       	movw	r20, r28
     ffe:	49 5e       	subi	r20, 0xE9	; 233
    1000:	5f 4f       	sbci	r21, 0xFF	; 255
    1002:	6d 89       	ldd	r22, Y+21	; 0x15
    1004:	7e 89       	ldd	r23, Y+22	; 0x16
    1006:	ce 01       	movw	r24, r28
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	0e 94 e0 27 	call	0x4fc0	; 0x4fc0 <vfprintf>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/Print.cpp:217
}
    100e:	2e 96       	adiw	r28, 0x0e	; 14
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	08 95       	ret

00001020 <TwoWire::requestFrom(int, int) [clone .constprop.6]>:
requestFrom():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:185
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
    1020:	ac 01       	movw	r20, r24
twi_readFrom():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:171
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_READY != twi_state){
    1022:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <twi_state>
    1026:	81 11       	cpse	r24, r1
    1028:	fc cf       	rjmp	.-8      	; 0x1022 <TwoWire::requestFrom(int, int) [clone .constprop.6]+0x2>
requestFrom():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:187
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    102a:	96 2f       	mov	r25, r22
twi_readFrom():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:175
      continue;
    }
  #endif
  twi_state = TWI_MRX;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <twi_state>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:176
  twi_sendStop = sendStop;
    1032:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <twi_sendStop>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:178
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    1036:	2f ef       	ldi	r18, 0xFF	; 255
    1038:	20 93 25 08 	sts	0x0825, r18	; 0x800825 <twi_error>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:181

  // initialize buffer iteration vars
  twi_masterBuffer = data;
    103c:	2c e4       	ldi	r18, 0x4C	; 76
    103e:	38 e0       	ldi	r19, 0x08	; 8
    1040:	30 93 24 08 	sts	0x0824, r19	; 0x800824 <twi_masterBuffer+0x1>
    1044:	20 93 23 08 	sts	0x0823, r18	; 0x800823 <twi_masterBuffer>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:182
  twi_masterBufferIndex = 0;
    1048:	10 92 22 08 	sts	0x0822, r1	; 0x800822 <twi_masterBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:183
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    104c:	2f ef       	ldi	r18, 0xFF	; 255
    104e:	26 0f       	add	r18, r22
    1050:	20 93 21 08 	sts	0x0821, r18	; 0x800821 <twi_masterBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:191
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    1054:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <twi_slarw>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:192
  twi_slarw |= address << 1;
    1058:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <twi_slarw>
    105c:	44 0f       	add	r20, r20
    105e:	55 1f       	adc	r21, r21
    1060:	82 2f       	mov	r24, r18
    1062:	84 2b       	or	r24, r20
    1064:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <twi_slarw>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:194

  if (true == twi_inRepStart) {
    1068:	80 91 1f 08 	lds	r24, 0x081F	; 0x80081f <twi_inRepStart>
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	e9 f4       	brne	.+58     	; 0x10aa <TwoWire::requestFrom(int, int) [clone .constprop.6]+0x8a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:201
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    1070:	10 92 1f 08 	sts	0x081F, r1	; 0x80081f <twi_inRepStart>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:213
          return 0;
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
    1074:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <twi_slarw>
    1078:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:214
      } while(TWCR & _BV(TWWC));
    107c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1080:	83 fd       	sbrc	r24, 3
    1082:	f8 cf       	rjmp	.-16     	; 0x1074 <TwoWire::requestFrom(int, int) [clone .constprop.6]+0x54>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:216
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    1084:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:220
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    1086:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:232
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_MRX == twi_state){
    108a:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <twi_state>
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	e1 f3       	breq	.-8      	; 0x108a <TwoWire::requestFrom(int, int) [clone .constprop.6]+0x6a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:237
      continue;
    }
  #endif

  if (twi_masterBufferIndex < length)
    1092:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <twi_masterBufferIndex>
    1096:	86 17       	cp	r24, r22
    1098:	10 f4       	brcc	.+4      	; 0x109e <TwoWire::requestFrom(int, int) [clone .constprop.6]+0x7e>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:238
    length = twi_masterBufferIndex;
    109a:	90 91 22 08 	lds	r25, 0x0822	; 0x800822 <twi_masterBufferIndex>
requestFrom():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:122
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    109e:	10 92 6d 08 	sts	0x086D, r1	; 0x80086d <TwoWire::rxBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:123
  rxBufferLength = read;
    10a2:	90 93 6c 08 	sts	0x086C, r25	; 0x80086c <TwoWire::rxBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:188
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
    10a6:	89 2f       	mov	r24, r25
    10a8:	08 95       	ret
twi_readFrom():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:220
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    10aa:	85 ee       	ldi	r24, 0xE5	; 229
    10ac:	ec cf       	rjmp	.-40     	; 0x1086 <TwoWire::requestFrom(int, int) [clone .constprop.6]+0x66>

000010ae <EEPROM_read_int(int)>:
EEPROM_read_int():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:135
void EEPROM_write_int(int address, int number) {
  EEPROM.write(address, number >> 8);
  EEPROM.write(address + 1, number & 0xFF);
}

int EEPROM_read_int(int address) {
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	8c 01       	movw	r16, r24
operator*():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    10b6:	0e 94 87 2a 	call	0x550e	; 0x550e <eeprom_read_byte>
    10ba:	c8 2f       	mov	r28, r24
    10bc:	c8 01       	movw	r24, r16
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	0e 94 87 2a 	call	0x550e	; 0x550e <eeprom_read_byte>
EEPROM_read_int():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:137
  int result = 0;
  result = (EEPROM.read(address) << 8) + EEPROM.read(address + 1);
    10c4:	2c 2f       	mov	r18, r28
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	32 2f       	mov	r19, r18
    10ca:	22 27       	eor	r18, r18
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:139
  return result;
}
    10cc:	82 0f       	add	r24, r18
    10ce:	93 2f       	mov	r25, r19
    10d0:	91 1d       	adc	r25, r1
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	08 95       	ret

000010da <menu_setup()>:
menu_setup():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:544
  }
}

void menu_setup(void) {
  static char page = 1, last_page = 8;
  int spd = EEPROM_read_int(spd_address);
    10da:	86 e9       	ldi	r24, 0x96	; 150
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    10e2:	ec 01       	movw	r28, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:545
  int T90 = EEPROM_read_int(T90_address);
    10e4:	88 e9       	ldi	r24, 0x98	; 152
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    10ec:	8c 01       	movw	r16, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:546
  int range_value = EEPROM_read_int(range_address);
    10ee:	8a e9       	ldi	r24, 0x9A	; 154
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    10f6:	4c 01       	movw	r8, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:547
  int m1 = EEPROM_read_int(m1_address);
    10f8:	8c e9       	ldi	r24, 0x9C	; 156
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1100:	6c 01       	movw	r12, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:548
  int m2 = EEPROM_read_int(m2_address);
    1102:	8e e9       	ldi	r24, 0x9E	; 158
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    110a:	7c 01       	movw	r14, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:549
  int m3 = EEPROM_read_int(m3_address);
    110c:	80 ea       	ldi	r24, 0xA0	; 160
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1114:	1c 01       	movw	r2, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:550
  int m4 = EEPROM_read_int(m4_address);
    1116:	82 ea       	ldi	r24, 0xA2	; 162
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    111e:	5c 01       	movw	r10, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:552

  lcd.clear();
    1120:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:555

  while (1) {
    if (next_page == 0) {
    1124:	88 e0       	ldi	r24, 0x08	; 8
    1126:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    112a:	89 2b       	or	r24, r25
    112c:	a9 f4       	brne	.+42     	; 0x1158 <__stack+0x59>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:556
      while (next_page == 0)
    112e:	88 e0       	ldi	r24, 0x08	; 8
    1130:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    1134:	89 2b       	or	r24, r25
    1136:	d9 f3       	breq	.-10     	; 0x112e <__stack+0x2f>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:558
        ;
      delay(50);
    1138:	62 e3       	ldi	r22, 0x32	; 50
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:559
      page++;
    1144:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <menu_setup()::page>
    1148:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:560
      if (page > last_page)
    114a:	89 30       	cpi	r24, 0x09	; 9
    114c:	0c f0       	brlt	.+2      	; 0x1150 <__stack+0x51>
    114e:	95 c0       	rjmp	.+298    	; 0x127a <__stack+0x17b>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:561
        page = 1;
    1150:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <menu_setup()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:562
      lcd.clear();
    1154:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:564
    }
    if (previuse_page == 0) {
    1158:	89 e0       	ldi	r24, 0x09	; 9
    115a:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    115e:	89 2b       	or	r24, r25
    1160:	a9 f4       	brne	.+42     	; 0x118c <__stack+0x8d>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:565
      while (previuse_page == 0)
    1162:	89 e0       	ldi	r24, 0x09	; 9
    1164:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    1168:	89 2b       	or	r24, r25
    116a:	d9 f3       	breq	.-10     	; 0x1162 <__stack+0x63>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:567
        ;
      delay(50);
    116c:	62 e3       	ldi	r22, 0x32	; 50
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:568
      page--;
    1178:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <menu_setup()::page>
    117c:	81 50       	subi	r24, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:569
      if (page < 1)
    117e:	18 16       	cp	r1, r24
    1180:	0c f0       	brlt	.+2      	; 0x1184 <__stack+0x85>
    1182:	7d c0       	rjmp	.+250    	; 0x127e <__stack+0x17f>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:570
        page = last_page;
    1184:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <menu_setup()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:571
      lcd.clear();
    1188:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:573
    }
    if (page < 5) {
    118c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <menu_setup()::page>
    1190:	85 30       	cpi	r24, 0x05	; 5
    1192:	0c f0       	brlt	.+2      	; 0x1196 <__stack+0x97>
    1194:	76 c0       	rjmp	.+236    	; 0x1282 <__stack+0x183>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:574
      lcd.setCursor(2, 0);
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	82 e0       	ldi	r24, 0x02	; 2
    119a:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:575
      lcd.printf("speed     %3d ", spd);
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	8a e8       	ldi	r24, 0x8A	; 138
    11a4:	93 e0       	ldi	r25, 0x03	; 3
    11a6:	9f 93       	push	r25
    11a8:	8f 93       	push	r24
    11aa:	84 e0       	ldi	r24, 0x04	; 4
    11ac:	9a e0       	ldi	r25, 0x0A	; 10
    11ae:	9f 93       	push	r25
    11b0:	8f 93       	push	r24
    11b2:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:577

      lcd.setCursor(2, 1);
    11b6:	61 e0       	ldi	r22, 0x01	; 1
    11b8:	82 e0       	ldi	r24, 0x02	; 2
    11ba:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:578
      lcd.printf("T90       %3d ", T90);
    11be:	1f 93       	push	r17
    11c0:	0f 93       	push	r16
    11c2:	89 e9       	ldi	r24, 0x99	; 153
    11c4:	93 e0       	ldi	r25, 0x03	; 3
    11c6:	9f 93       	push	r25
    11c8:	8f 93       	push	r24
    11ca:	84 e0       	ldi	r24, 0x04	; 4
    11cc:	9a e0       	ldi	r25, 0x0A	; 10
    11ce:	9f 93       	push	r25
    11d0:	8f 93       	push	r24
    11d2:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:580

      lcd.setCursor(2, 2);
    11d6:	62 e0       	ldi	r22, 0x02	; 2
    11d8:	82 e0       	ldi	r24, 0x02	; 2
    11da:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:581
      lcd.printf("calib rng %3d ", range);
    11de:	8a e9       	ldi	r24, 0x9A	; 154
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    11e6:	9f 93       	push	r25
    11e8:	8f 93       	push	r24
    11ea:	88 ea       	ldi	r24, 0xA8	; 168
    11ec:	93 e0       	ldi	r25, 0x03	; 3
    11ee:	9f 93       	push	r25
    11f0:	8f 93       	push	r24
    11f2:	84 e0       	ldi	r24, 0x04	; 4
    11f4:	9a e0       	ldi	r25, 0x0A	; 10
    11f6:	9f 93       	push	r25
    11f8:	8f 93       	push	r24
    11fa:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:583

      lcd.setCursor(2, 3);
    11fe:	63 e0       	ldi	r22, 0x03	; 3
    1200:	82 e0       	ldi	r24, 0x02	; 2
    1202:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:584
      lcd.printf("reset memory   ");
    1206:	87 eb       	ldi	r24, 0xB7	; 183
    1208:	93 e0       	ldi	r25, 0x03	; 3
    120a:	9f 93       	push	r25
    120c:	8f 93       	push	r24
    120e:	84 e0       	ldi	r24, 0x04	; 4
    1210:	9a e0       	ldi	r25, 0x0A	; 10
    1212:	9f 93       	push	r25
    1214:	8f 93       	push	r24
    1216:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:586

      lcd.setCursor(0, page - 1);
    121a:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <menu_setup()::page>
    121e:	61 50       	subi	r22, 0x01	; 1
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:587
      lcd.print(">");
    1226:	87 ec       	ldi	r24, 0xC7	; 199
    1228:	93 e0       	ldi	r25, 0x03	; 3
    122a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
    122e:	8d b7       	in	r24, 0x3d	; 61
    1230:	9e b7       	in	r25, 0x3e	; 62
    1232:	46 96       	adiw	r24, 0x16	; 22
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	9e bf       	out	0x3e, r25	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	8d bf       	out	0x3d, r24	; 61
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:607

      lcd.setCursor(0, page - 5);
      lcd.print(">");
    }

    if (page == 1)  // spd
    123e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <menu_setup()::page>
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	09 f0       	breq	.+2      	; 0x1248 <__stack+0x149>
    1246:	e0 c0       	rjmp	.+448    	; 0x1408 <__stack+0x309>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:609
    {
      if (increase == 0) {
    1248:	8a e0       	ldi	r24, 0x0A	; 10
    124a:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    124e:	89 2b       	or	r24, r25
    1250:	09 f0       	breq	.+2      	; 0x1254 <__stack+0x155>
    1252:	b1 c0       	rjmp	.+354    	; 0x13b6 <__stack+0x2b7>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:610
        delay(120);
    1254:	68 e7       	ldi	r22, 0x78	; 120
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
    1260:	2a 96       	adiw	r28, 0x0a	; 10
    1262:	cf 3f       	cpi	r28, 0xFF	; 255
    1264:	d1 05       	cpc	r29, r1
    1266:	19 f0       	breq	.+6      	; 0x126e <__stack+0x16f>
    1268:	14 f0       	brlt	.+4      	; 0x126e <__stack+0x16f>
    126a:	cf ef       	ldi	r28, 0xFF	; 255
    126c:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:626
      } else if (start == 0) {
        go(spd, spd);
        while (start == 0)
          ;
        go(0, 0);
        EEPROM_write_int(spd_address, spd);
    126e:	be 01       	movw	r22, r28
    1270:	86 e9       	ldi	r24, 0x96	; 150
    1272:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:726
        m4 += 5;
        EEPROM_write_int(m4_address, m4);
      } else if (decrease == 0) {
        delay(100);
        m4 -= 5;
        EEPROM_write_int(m4_address, m4);
    1274:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
    1278:	55 cf       	rjmp	.-342    	; 0x1124 <__stack+0x25>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:561
      while (next_page == 0)
        ;
      delay(50);
      page++;
      if (page > last_page)
        page = 1;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	69 cf       	rjmp	.-302    	; 0x1150 <__stack+0x51>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:570
      while (previuse_page == 0)
        ;
      delay(50);
      page--;
      if (page < 1)
        page = last_page;
    127e:	88 e0       	ldi	r24, 0x08	; 8
    1280:	81 cf       	rjmp	.-254    	; 0x1184 <__stack+0x85>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:588
      lcd.setCursor(2, 3);
      lcd.printf("reset memory   ");

      lcd.setCursor(0, page - 1);
      lcd.print(">");
    } else if (page < 9) {
    1282:	89 30       	cpi	r24, 0x09	; 9
    1284:	e4 f6       	brge	.-72     	; 0x123e <__stack+0x13f>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:589
      float result = T90;
    1286:	b8 01       	movw	r22, r16
    1288:	01 2e       	mov	r0, r17
    128a:	00 0c       	add	r0, r0
    128c:	88 0b       	sbc	r24, r24
    128e:	99 0b       	sbc	r25, r25
    1290:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatsisf>
    1294:	2b 01       	movw	r4, r22
    1296:	3c 01       	movw	r6, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:591

      lcd.setCursor(2, 0);
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	82 e0       	ldi	r24, 0x02	; 2
    129c:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:592
      lcd.printf("m1  %3d =T90*%1.1f", m1, m1 / result);
    12a0:	b6 01       	movw	r22, r12
    12a2:	0d 2c       	mov	r0, r13
    12a4:	00 0c       	add	r0, r0
    12a6:	88 0b       	sbc	r24, r24
    12a8:	99 0b       	sbc	r25, r25
    12aa:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatsisf>
    12ae:	a3 01       	movw	r20, r6
    12b0:	92 01       	movw	r18, r4
    12b2:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__divsf3>
    12b6:	9f 93       	push	r25
    12b8:	8f 93       	push	r24
    12ba:	7f 93       	push	r23
    12bc:	6f 93       	push	r22
    12be:	df 92       	push	r13
    12c0:	cf 92       	push	r12
    12c2:	89 ec       	ldi	r24, 0xC9	; 201
    12c4:	93 e0       	ldi	r25, 0x03	; 3
    12c6:	9f 93       	push	r25
    12c8:	8f 93       	push	r24
    12ca:	84 e0       	ldi	r24, 0x04	; 4
    12cc:	9a e0       	ldi	r25, 0x0A	; 10
    12ce:	9f 93       	push	r25
    12d0:	8f 93       	push	r24
    12d2:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:594

      lcd.setCursor(2, 1);
    12d6:	61 e0       	ldi	r22, 0x01	; 1
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:595
      lcd.printf("m2  %3d =T90*%1.1f", m2, m2 / result);
    12de:	b7 01       	movw	r22, r14
    12e0:	0f 2c       	mov	r0, r15
    12e2:	00 0c       	add	r0, r0
    12e4:	88 0b       	sbc	r24, r24
    12e6:	99 0b       	sbc	r25, r25
    12e8:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatsisf>
    12ec:	a3 01       	movw	r20, r6
    12ee:	92 01       	movw	r18, r4
    12f0:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__divsf3>
    12f4:	9f 93       	push	r25
    12f6:	8f 93       	push	r24
    12f8:	7f 93       	push	r23
    12fa:	6f 93       	push	r22
    12fc:	ff 92       	push	r15
    12fe:	ef 92       	push	r14
    1300:	8c ed       	ldi	r24, 0xDC	; 220
    1302:	93 e0       	ldi	r25, 0x03	; 3
    1304:	9f 93       	push	r25
    1306:	8f 93       	push	r24
    1308:	84 e0       	ldi	r24, 0x04	; 4
    130a:	9a e0       	ldi	r25, 0x0A	; 10
    130c:	9f 93       	push	r25
    130e:	8f 93       	push	r24
    1310:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:597

      lcd.setCursor(2, 2);
    1314:	62 e0       	ldi	r22, 0x02	; 2
    1316:	82 e0       	ldi	r24, 0x02	; 2
    1318:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:598
      lcd.printf("m3  %3d =T90*%1.1f", m3, m3 / result);
    131c:	b1 01       	movw	r22, r2
    131e:	03 2c       	mov	r0, r3
    1320:	00 0c       	add	r0, r0
    1322:	88 0b       	sbc	r24, r24
    1324:	99 0b       	sbc	r25, r25
    1326:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatsisf>
    132a:	a3 01       	movw	r20, r6
    132c:	92 01       	movw	r18, r4
    132e:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__divsf3>
    1332:	9f 93       	push	r25
    1334:	8f 93       	push	r24
    1336:	7f 93       	push	r23
    1338:	6f 93       	push	r22
    133a:	3f 92       	push	r3
    133c:	2f 92       	push	r2
    133e:	8f ee       	ldi	r24, 0xEF	; 239
    1340:	93 e0       	ldi	r25, 0x03	; 3
    1342:	9f 93       	push	r25
    1344:	8f 93       	push	r24
    1346:	84 e0       	ldi	r24, 0x04	; 4
    1348:	9a e0       	ldi	r25, 0x0A	; 10
    134a:	9f 93       	push	r25
    134c:	8f 93       	push	r24
    134e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:600

      lcd.setCursor(2, 3);
    1352:	63 e0       	ldi	r22, 0x03	; 3
    1354:	82 e0       	ldi	r24, 0x02	; 2
    1356:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:601
      lcd.printf("m4  %3d =T90*%1.1f", m4, m4 / result);
    135a:	b5 01       	movw	r22, r10
    135c:	0b 2c       	mov	r0, r11
    135e:	00 0c       	add	r0, r0
    1360:	88 0b       	sbc	r24, r24
    1362:	99 0b       	sbc	r25, r25
    1364:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatsisf>
    1368:	a3 01       	movw	r20, r6
    136a:	92 01       	movw	r18, r4
    136c:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__divsf3>
    1370:	9f 93       	push	r25
    1372:	8f 93       	push	r24
    1374:	7f 93       	push	r23
    1376:	6f 93       	push	r22
    1378:	bf 92       	push	r11
    137a:	af 92       	push	r10
    137c:	82 e0       	ldi	r24, 0x02	; 2
    137e:	94 e0       	ldi	r25, 0x04	; 4
    1380:	9f 93       	push	r25
    1382:	8f 93       	push	r24
    1384:	84 e0       	ldi	r24, 0x04	; 4
    1386:	9a e0       	ldi	r25, 0x0A	; 10
    1388:	9f 93       	push	r25
    138a:	8f 93       	push	r24
    138c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:603

      lcd.setCursor(0, page - 5);
    1390:	8d b7       	in	r24, 0x3d	; 61
    1392:	9e b7       	in	r25, 0x3e	; 62
    1394:	88 96       	adiw	r24, 0x28	; 40
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	9e bf       	out	0x3e, r25	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	8d bf       	out	0x3d, r24	; 61
    13a0:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <menu_setup()::page>
    13a4:	65 50       	subi	r22, 0x05	; 5
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:604
      lcd.print(">");
    13ac:	87 ec       	ldi	r24, 0xC7	; 199
    13ae:	93 e0       	ldi	r25, 0x03	; 3
    13b0:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
    13b4:	44 cf       	rjmp	.-376    	; 0x123e <__stack+0x13f>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:615
        delay(120);
        spd += 10;
        if (spd > 255)
          spd = 255;
        EEPROM_write_int(spd_address, spd);
      } else if (decrease == 0) {
    13b6:	8b e0       	ldi	r24, 0x0B	; 11
    13b8:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    13bc:	89 2b       	or	r24, r25
    13be:	71 f4       	brne	.+28     	; 0x13dc <__stack+0x2dd>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:616
        delay(120);
    13c0:	68 e7       	ldi	r22, 0x78	; 120
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
    13cc:	2a 97       	sbiw	r28, 0x0a	; 10
    13ce:	ca 30       	cpi	r28, 0x0A	; 10
    13d0:	d1 05       	cpc	r29, r1
    13d2:	0c f0       	brlt	.+2      	; 0x13d6 <__stack+0x2d7>
    13d4:	4c cf       	rjmp	.-360    	; 0x126e <__stack+0x16f>
    13d6:	ca e0       	ldi	r28, 0x0A	; 10
    13d8:	d0 e0       	ldi	r29, 0x00	; 0
    13da:	49 cf       	rjmp	.-366    	; 0x126e <__stack+0x16f>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:621
        spd -= 10;
        if (spd < 10)
          spd = 10;
        EEPROM_write_int(spd_address, spd);
      } else if (start == 0) {
    13dc:	86 e0       	ldi	r24, 0x06	; 6
    13de:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    13e2:	89 2b       	or	r24, r25
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <__stack+0x2e9>
    13e6:	9e ce       	rjmp	.-708    	; 0x1124 <__stack+0x25>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:622
        go(spd, spd);
    13e8:	be 01       	movw	r22, r28
    13ea:	ce 01       	movw	r24, r28
    13ec:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <go(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:623
        while (start == 0)
    13f0:	86 e0       	ldi	r24, 0x06	; 6
    13f2:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    13f6:	89 2b       	or	r24, r25
    13f8:	d9 f3       	breq	.-10     	; 0x13f0 <__stack+0x2f1>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:625
          ;
        go(0, 0);
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <go(int, int)>
    1406:	33 cf       	rjmp	.-410    	; 0x126e <__stack+0x16f>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:628
        EEPROM_write_int(spd_address, spd);
      }
    } else if (page == 2)  // T90
    1408:	82 30       	cpi	r24, 0x02	; 2
    140a:	c9 f5       	brne	.+114    	; 0x147e <__stack+0x37f>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:630
    {
      if (increase == 0) {
    140c:	8a e0       	ldi	r24, 0x0A	; 10
    140e:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    1412:	89 2b       	or	r24, r25
    1414:	61 f4       	brne	.+24     	; 0x142e <__stack+0x32f>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:631
        delay(200);
    1416:	68 ec       	ldi	r22, 0xC8	; 200
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:632
        T90 += 1;
    1422:	0f 5f       	subi	r16, 0xFF	; 255
    1424:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:637
        EEPROM_write_int(T90_address, T90);
      } else if (decrease == 0) {
        delay(200);
        T90 -= 1;
        EEPROM_write_int(T90_address, T90);
    1426:	b8 01       	movw	r22, r16
    1428:	88 e9       	ldi	r24, 0x98	; 152
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	23 cf       	rjmp	.-442    	; 0x1274 <__stack+0x175>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:634
    {
      if (increase == 0) {
        delay(200);
        T90 += 1;
        EEPROM_write_int(T90_address, T90);
      } else if (decrease == 0) {
    142e:	8b e0       	ldi	r24, 0x0B	; 11
    1430:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    1434:	89 2b       	or	r24, r25
    1436:	49 f4       	brne	.+18     	; 0x144a <__stack+0x34b>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:635
        delay(200);
    1438:	68 ec       	ldi	r22, 0xC8	; 200
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:636
        T90 -= 1;
    1444:	01 50       	subi	r16, 0x01	; 1
    1446:	11 09       	sbc	r17, r1
    1448:	ee cf       	rjmp	.-36     	; 0x1426 <__stack+0x327>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:638
        EEPROM_write_int(T90_address, T90);
      } else if (start == 0) {
    144a:	86 e0       	ldi	r24, 0x06	; 6
    144c:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    1450:	89 2b       	or	r24, r25
    1452:	09 f0       	breq	.+2      	; 0x1456 <__stack+0x357>
    1454:	67 ce       	rjmp	.-818    	; 0x1124 <__stack+0x25>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:639
        while (start == 0)
    1456:	86 e0       	ldi	r24, 0x06	; 6
    1458:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    145c:	89 2b       	or	r24, r25
    145e:	d9 f3       	breq	.-10     	; 0x1456 <__stack+0x357>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:641
          ;
        lcd.clear();
    1460:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:642
        EEPROM_write_int(T90_address, T90);
    1464:	b8 01       	movw	r22, r16
    1466:	88 e9       	ldi	r24, 0x98	; 152
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:643
        move(Left, T90, 200);
    146e:	48 ec       	ldi	r20, 0xC8	; 200
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	b8 01       	movw	r22, r16
    1474:	8b e0       	ldi	r24, 0x0B	; 11
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 60 07 	call	0xec0	; 0xec0 <move(int, int, int)>
    147c:	53 ce       	rjmp	.-858    	; 0x1124 <__stack+0x25>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:645
      }
    } else if (page == 3)  // range
    147e:	83 30       	cpi	r24, 0x03	; 3
    1480:	81 f5       	brne	.+96     	; 0x14e2 <__stack+0x3e3>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:647
    {
      if (increase == 0) {
    1482:	8a e0       	ldi	r24, 0x0A	; 10
    1484:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    1488:	89 2b       	or	r24, r25
    148a:	a1 f4       	brne	.+40     	; 0x14b4 <__stack+0x3b5>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:648
        delay(100);
    148c:	64 e6       	ldi	r22, 0x64	; 100
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
    1498:	9f ef       	ldi	r25, 0xFF	; 255
    149a:	89 1a       	sub	r8, r25
    149c:	99 0a       	sbc	r9, r25
    149e:	21 e5       	ldi	r18, 0x51	; 81
    14a0:	82 16       	cp	r8, r18
    14a2:	91 04       	cpc	r9, r1
    14a4:	1c f0       	brlt	.+6      	; 0x14ac <__stack+0x3ad>
    14a6:	90 e5       	ldi	r25, 0x50	; 80
    14a8:	89 2e       	mov	r8, r25
    14aa:	91 2c       	mov	r9, r1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:658
      } else if (decrease == 0) {
        delay(100);
        range_value -= 1;
        if (range_value < 5)
          range_value = 5;
        EEPROM_write_int(range_address, range_value);
    14ac:	b4 01       	movw	r22, r8
    14ae:	8a e9       	ldi	r24, 0x9A	; 154
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	e0 ce       	rjmp	.-576    	; 0x1274 <__stack+0x175>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:653
        delay(100);
        range_value += 1;
        if (range_value > 80)
          range_value = 80;
        EEPROM_write_int(range_address, range_value);
      } else if (decrease == 0) {
    14b4:	8b e0       	ldi	r24, 0x0B	; 11
    14b6:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    14ba:	89 2b       	or	r24, r25
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <__stack+0x3c1>
    14be:	32 ce       	rjmp	.-924    	; 0x1124 <__stack+0x25>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:654
        delay(100);
    14c0:	64 e6       	ldi	r22, 0x64	; 100
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	88 1a       	sub	r8, r24
    14d0:	91 08       	sbc	r9, r1
    14d2:	95 e0       	ldi	r25, 0x05	; 5
    14d4:	89 16       	cp	r8, r25
    14d6:	91 04       	cpc	r9, r1
    14d8:	4c f7       	brge	.-46     	; 0x14ac <__stack+0x3ad>
    14da:	85 e0       	ldi	r24, 0x05	; 5
    14dc:	88 2e       	mov	r8, r24
    14de:	91 2c       	mov	r9, r1
    14e0:	e5 cf       	rjmp	.-54     	; 0x14ac <__stack+0x3ad>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:660
        range_value -= 1;
        if (range_value < 5)
          range_value = 5;
        EEPROM_write_int(range_address, range_value);
      }
    } else if (page == 4)  // reset memory
    14e2:	84 30       	cpi	r24, 0x04	; 4
    14e4:	d1 f4       	brne	.+52     	; 0x151a <__stack+0x41b>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:662
    {
      if (start == 0) {
    14e6:	86 e0       	ldi	r24, 0x06	; 6
    14e8:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    14ec:	3c 01       	movw	r6, r24
    14ee:	89 2b       	or	r24, r25
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <__stack+0x3f5>
    14f2:	18 ce       	rjmp	.-976    	; 0x1124 <__stack+0x25>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:663
        lcd.clear();
    14f4:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:664
        while (start == 0)
    14f8:	86 e0       	ldi	r24, 0x06	; 6
    14fa:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    14fe:	89 2b       	or	r24, r25
    1500:	d9 f3       	breq	.-10     	; 0x14f8 <__stack+0x3f9>
operator=():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:47
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	c3 01       	movw	r24, r6
    1506:	0e 94 8f 2a 	call	0x551e	; 0x551e <eeprom_write_byte>
menu_setup():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:666
          ;
        for (int i = 0; i < 200; i++)
    150a:	2f ef       	ldi	r18, 0xFF	; 255
    150c:	62 1a       	sub	r6, r18
    150e:	72 0a       	sbc	r7, r18
    1510:	88 ec       	ldi	r24, 0xC8	; 200
    1512:	68 16       	cp	r6, r24
    1514:	71 04       	cpc	r7, r1
    1516:	a9 f7       	brne	.-22     	; 0x1502 <__stack+0x403>
    1518:	05 ce       	rjmp	.-1014   	; 0x1124 <__stack+0x25>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:669
          EEPROM.write(i, 0);
      }
    } else if (page == 5)  // m1
    151a:	85 30       	cpi	r24, 0x05	; 5
    151c:	a9 f5       	brne	.+106    	; 0x1588 <__stack+0x489>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:671
    {
      if (increase == 0) {
    151e:	8a e0       	ldi	r24, 0x0A	; 10
    1520:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    1524:	89 2b       	or	r24, r25
    1526:	69 f4       	brne	.+26     	; 0x1542 <__stack+0x443>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:672
        delay(100);
    1528:	64 e6       	ldi	r22, 0x64	; 100
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:673
        m1 += 5;
    1534:	95 e0       	ldi	r25, 0x05	; 5
    1536:	c9 0e       	add	r12, r25
    1538:	d1 1c       	adc	r13, r1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:678
        EEPROM_write_int(m1_address, m1);
      } else if (decrease == 0) {
        delay(100);
        m1 -= 5;
        EEPROM_write_int(m1_address, m1);
    153a:	b6 01       	movw	r22, r12
    153c:	8c e9       	ldi	r24, 0x9C	; 156
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	99 ce       	rjmp	.-718    	; 0x1274 <__stack+0x175>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:675
    {
      if (increase == 0) {
        delay(100);
        m1 += 5;
        EEPROM_write_int(m1_address, m1);
      } else if (decrease == 0) {
    1542:	8b e0       	ldi	r24, 0x0B	; 11
    1544:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    1548:	89 2b       	or	r24, r25
    154a:	51 f4       	brne	.+20     	; 0x1560 <__stack+0x461>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:676
        delay(100);
    154c:	64 e6       	ldi	r22, 0x64	; 100
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:677
        m1 -= 5;
    1558:	25 e0       	ldi	r18, 0x05	; 5
    155a:	c2 1a       	sub	r12, r18
    155c:	d1 08       	sbc	r13, r1
    155e:	ed cf       	rjmp	.-38     	; 0x153a <__stack+0x43b>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:679
        EEPROM_write_int(m1_address, m1);
      } else if (start == 0) {
    1560:	86 e0       	ldi	r24, 0x06	; 6
    1562:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    1566:	89 2b       	or	r24, r25
    1568:	09 f0       	breq	.+2      	; 0x156c <__stack+0x46d>
    156a:	dc cd       	rjmp	.-1096   	; 0x1124 <__stack+0x25>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:680
        while (start == 0)
    156c:	86 e0       	ldi	r24, 0x06	; 6
    156e:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    1572:	89 2b       	or	r24, r25
    1574:	d9 f3       	breq	.-10     	; 0x156c <__stack+0x46d>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:683
          ;
        m1 = 0;
        EEPROM_write_int(m1_address, m1);
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	8c e9       	ldi	r24, 0x9C	; 156
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:682
        m1 -= 5;
        EEPROM_write_int(m1_address, m1);
      } else if (start == 0) {
        while (start == 0)
          ;
        m1 = 0;
    1582:	d1 2c       	mov	r13, r1
    1584:	c1 2c       	mov	r12, r1
    1586:	ce cd       	rjmp	.-1124   	; 0x1124 <__stack+0x25>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:685
        EEPROM_write_int(m1_address, m1);
      }
    } else if (page == 6)  // m2
    1588:	86 30       	cpi	r24, 0x06	; 6
    158a:	a9 f5       	brne	.+106    	; 0x15f6 <__stack+0x4f7>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:687
    {
      if (increase == 0) {
    158c:	8a e0       	ldi	r24, 0x0A	; 10
    158e:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    1592:	89 2b       	or	r24, r25
    1594:	69 f4       	brne	.+26     	; 0x15b0 <__stack+0x4b1>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:688
        delay(100);
    1596:	64 e6       	ldi	r22, 0x64	; 100
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:689
        m2 += 5;
    15a2:	85 e0       	ldi	r24, 0x05	; 5
    15a4:	e8 0e       	add	r14, r24
    15a6:	f1 1c       	adc	r15, r1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:694
        EEPROM_write_int(m2_address, m2);
      } else if (decrease == 0) {
        delay(100);
        m2 -= 5;
        EEPROM_write_int(m2_address, m2);
    15a8:	b7 01       	movw	r22, r14
    15aa:	8e e9       	ldi	r24, 0x9E	; 158
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	62 ce       	rjmp	.-828    	; 0x1274 <__stack+0x175>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:691
    {
      if (increase == 0) {
        delay(100);
        m2 += 5;
        EEPROM_write_int(m2_address, m2);
      } else if (decrease == 0) {
    15b0:	8b e0       	ldi	r24, 0x0B	; 11
    15b2:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    15b6:	89 2b       	or	r24, r25
    15b8:	51 f4       	brne	.+20     	; 0x15ce <__stack+0x4cf>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:692
        delay(100);
    15ba:	64 e6       	ldi	r22, 0x64	; 100
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:693
        m2 -= 5;
    15c6:	95 e0       	ldi	r25, 0x05	; 5
    15c8:	e9 1a       	sub	r14, r25
    15ca:	f1 08       	sbc	r15, r1
    15cc:	ed cf       	rjmp	.-38     	; 0x15a8 <__stack+0x4a9>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:695
        EEPROM_write_int(m2_address, m2);
      } else if (start == 0) {
    15ce:	86 e0       	ldi	r24, 0x06	; 6
    15d0:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    15d4:	89 2b       	or	r24, r25
    15d6:	09 f0       	breq	.+2      	; 0x15da <__stack+0x4db>
    15d8:	a5 cd       	rjmp	.-1206   	; 0x1124 <__stack+0x25>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:696
        while (start == 0)
    15da:	86 e0       	ldi	r24, 0x06	; 6
    15dc:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    15e0:	89 2b       	or	r24, r25
    15e2:	d9 f3       	breq	.-10     	; 0x15da <__stack+0x4db>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:699
          ;
        m2 = 0;
        EEPROM_write_int(m2_address, m2);
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	60 e0       	ldi	r22, 0x00	; 0
    15e8:	8e e9       	ldi	r24, 0x9E	; 158
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:698
        m2 -= 5;
        EEPROM_write_int(m2_address, m2);
      } else if (start == 0) {
        while (start == 0)
          ;
        m2 = 0;
    15f0:	f1 2c       	mov	r15, r1
    15f2:	e1 2c       	mov	r14, r1
    15f4:	97 cd       	rjmp	.-1234   	; 0x1124 <__stack+0x25>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:701
        EEPROM_write_int(m2_address, m2);
      }
    } else if (page == 7)  // m3
    15f6:	87 30       	cpi	r24, 0x07	; 7
    15f8:	a9 f5       	brne	.+106    	; 0x1664 <__stack+0x565>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:703
    {
      if (increase == 0) {
    15fa:	8a e0       	ldi	r24, 0x0A	; 10
    15fc:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    1600:	89 2b       	or	r24, r25
    1602:	69 f4       	brne	.+26     	; 0x161e <__stack+0x51f>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:704
        delay(100);
    1604:	64 e6       	ldi	r22, 0x64	; 100
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:705
        m3 += 5;
    1610:	25 e0       	ldi	r18, 0x05	; 5
    1612:	22 0e       	add	r2, r18
    1614:	31 1c       	adc	r3, r1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:710
        EEPROM_write_int(m3_address, m3);
      } else if (decrease == 0) {
        delay(100);
        m3 -= 5;
        EEPROM_write_int(m3_address, m3);
    1616:	b1 01       	movw	r22, r2
    1618:	80 ea       	ldi	r24, 0xA0	; 160
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	2b ce       	rjmp	.-938    	; 0x1274 <__stack+0x175>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:707
    {
      if (increase == 0) {
        delay(100);
        m3 += 5;
        EEPROM_write_int(m3_address, m3);
      } else if (decrease == 0) {
    161e:	8b e0       	ldi	r24, 0x0B	; 11
    1620:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    1624:	89 2b       	or	r24, r25
    1626:	51 f4       	brne	.+20     	; 0x163c <__stack+0x53d>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:708
        delay(100);
    1628:	64 e6       	ldi	r22, 0x64	; 100
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:709
        m3 -= 5;
    1634:	85 e0       	ldi	r24, 0x05	; 5
    1636:	28 1a       	sub	r2, r24
    1638:	31 08       	sbc	r3, r1
    163a:	ed cf       	rjmp	.-38     	; 0x1616 <__stack+0x517>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:711
        EEPROM_write_int(m3_address, m3);
      } else if (start == 0) {
    163c:	86 e0       	ldi	r24, 0x06	; 6
    163e:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    1642:	89 2b       	or	r24, r25
    1644:	09 f0       	breq	.+2      	; 0x1648 <__stack+0x549>
    1646:	6e cd       	rjmp	.-1316   	; 0x1124 <__stack+0x25>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:712
        while (start == 0)
    1648:	86 e0       	ldi	r24, 0x06	; 6
    164a:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    164e:	89 2b       	or	r24, r25
    1650:	d9 f3       	breq	.-10     	; 0x1648 <__stack+0x549>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:715
          ;
        m3 = 0;
        EEPROM_write_int(m3_address, m3);
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	80 ea       	ldi	r24, 0xA0	; 160
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:714
        m3 -= 5;
        EEPROM_write_int(m3_address, m3);
      } else if (start == 0) {
        while (start == 0)
          ;
        m3 = 0;
    165e:	31 2c       	mov	r3, r1
    1660:	21 2c       	mov	r2, r1
    1662:	60 cd       	rjmp	.-1344   	; 0x1124 <__stack+0x25>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:717
        EEPROM_write_int(m3_address, m3);
      }
    } else if (page == 8)  // m4
    1664:	88 30       	cpi	r24, 0x08	; 8
    1666:	09 f0       	breq	.+2      	; 0x166a <__stack+0x56b>
    1668:	5d cd       	rjmp	.-1350   	; 0x1124 <__stack+0x25>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:719
    {
      if (increase == 0) {
    166a:	8a e0       	ldi	r24, 0x0A	; 10
    166c:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    1670:	89 2b       	or	r24, r25
    1672:	69 f4       	brne	.+26     	; 0x168e <__stack+0x58f>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:720
        delay(100);
    1674:	64 e6       	ldi	r22, 0x64	; 100
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:721
        m4 += 5;
    1680:	95 e0       	ldi	r25, 0x05	; 5
    1682:	a9 0e       	add	r10, r25
    1684:	b1 1c       	adc	r11, r1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:726
        EEPROM_write_int(m4_address, m4);
      } else if (decrease == 0) {
        delay(100);
        m4 -= 5;
        EEPROM_write_int(m4_address, m4);
    1686:	b5 01       	movw	r22, r10
    1688:	82 ea       	ldi	r24, 0xA2	; 162
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	f3 cd       	rjmp	.-1050   	; 0x1274 <__stack+0x175>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:723
    {
      if (increase == 0) {
        delay(100);
        m4 += 5;
        EEPROM_write_int(m4_address, m4);
      } else if (decrease == 0) {
    168e:	8b e0       	ldi	r24, 0x0B	; 11
    1690:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    1694:	89 2b       	or	r24, r25
    1696:	51 f4       	brne	.+20     	; 0x16ac <__stack+0x5ad>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:724
        delay(100);
    1698:	64 e6       	ldi	r22, 0x64	; 100
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:725
        m4 -= 5;
    16a4:	25 e0       	ldi	r18, 0x05	; 5
    16a6:	a2 1a       	sub	r10, r18
    16a8:	b1 08       	sbc	r11, r1
    16aa:	ed cf       	rjmp	.-38     	; 0x1686 <__stack+0x587>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:727
        EEPROM_write_int(m4_address, m4);
      } else if (start == 0) {
    16ac:	86 e0       	ldi	r24, 0x06	; 6
    16ae:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    16b2:	89 2b       	or	r24, r25
    16b4:	09 f0       	breq	.+2      	; 0x16b8 <__stack+0x5b9>
    16b6:	36 cd       	rjmp	.-1428   	; 0x1124 <__stack+0x25>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:728
        while (start == 0)
    16b8:	86 e0       	ldi	r24, 0x06	; 6
    16ba:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    16be:	89 2b       	or	r24, r25
    16c0:	d9 f3       	breq	.-10     	; 0x16b8 <__stack+0x5b9>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:731
          ;
        m4 = 0;
        EEPROM_write_int(m4_address, m4);
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	82 ea       	ldi	r24, 0xA2	; 162
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:730
        m4 -= 5;
        EEPROM_write_int(m4_address, m4);
      } else if (start == 0) {
        while (start == 0)
          ;
        m4 = 0;
    16ce:	b1 2c       	mov	r11, r1
    16d0:	a1 2c       	mov	r10, r1
    16d2:	28 cd       	rjmp	.-1456   	; 0x1124 <__stack+0x25>

000016d4 <color(char)>:
color():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:225
    delay(1000);
  }
  delay(500);
}

char color(char select) {
    16d4:	bf 92       	push	r11
    16d6:	cf 92       	push	r12
    16d8:	df 92       	push	r13
    16da:	ef 92       	push	r14
    16dc:	ff 92       	push	r15
    16de:	0f 93       	push	r16
    16e0:	1f 93       	push	r17
    16e2:	cf 93       	push	r28
    16e4:	df 93       	push	r29
    16e6:	b8 2e       	mov	r11, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:227
  unsigned char low_byte, high_byte;
  if (select == 1)  // left
    16e8:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:229
  {
    digitalWrite(MUX_C, LOW);
    16ea:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:227
  delay(500);
}

char color(char select) {
  unsigned char low_byte, high_byte;
  if (select == 1)  // left
    16ec:	b8 12       	cpse	r11, r24
    16ee:	2b c1       	rjmp	.+598    	; 0x1946 <color(char)+0x272>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:229
  {
    digitalWrite(MUX_C, LOW);
    16f0:	8a e2       	ldi	r24, 0x2A	; 42
    16f2:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:230
    digitalWrite(MUX_B, LOW);
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	8b e2       	ldi	r24, 0x2B	; 43
    16fa:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:231
    digitalWrite(MUX_A, LOW);
    16fe:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:237
    //  Serial.print("left color:  ");
  } else  // right
  {
    digitalWrite(MUX_C, LOW);
    digitalWrite(MUX_B, LOW);
    digitalWrite(MUX_A, HIGH);
    1700:	8c e2       	ldi	r24, 0x2C	; 44
    1702:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:240
    //  Serial.print("right color:  ");
  }
  delayMicroseconds(10);
    1706:	8a e0       	ldi	r24, 0x0A	; 10
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	0e 94 b0 02 	call	0x560	; 0x560 <delayMicroseconds>
beginTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:198
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    170e:	c1 e0       	ldi	r28, 0x01	; 1
    1710:	c0 93 28 08 	sts	0x0828, r28	; 0x800828 <TwoWire::transmitting>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:200
  // set address of targeted slave
  txAddress = address;
    1714:	89 e3       	ldi	r24, 0x39	; 57
    1716:	80 93 4a 08 	sts	0x084A, r24	; 0x80084a <TwoWire::txAddress>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:202
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    171a:	10 92 29 08 	sts	0x0829, r1	; 0x800829 <TwoWire::txBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:203
  txBufferLength = 0;
    171e:	10 92 4b 08 	sts	0x084B, r1	; 0x80084b <TwoWire::txBufferLength>
color():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:243

  Wire.beginTransmission(57);  // transmit to device #57 (0x39)
  Wire.write(byte(0x80));
    1722:	60 e8       	ldi	r22, 0x80	; 128
    1724:	88 ef       	ldi	r24, 0xF8	; 248
    1726:	99 e0       	ldi	r25, 0x09	; 9
    1728:	0e 94 18 05 	call	0xa30	; 0xa30 <TwoWire::write(unsigned char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:244
  Wire.write(byte(3));  // power
    172c:	63 e0       	ldi	r22, 0x03	; 3
    172e:	88 ef       	ldi	r24, 0xF8	; 248
    1730:	99 e0       	ldi	r25, 0x09	; 9
    1732:	0e 94 18 05 	call	0xa30	; 0xa30 <TwoWire::write(unsigned char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:245
  Wire.endTransmission();
    1736:	0e 94 68 01 	call	0x2d0	; 0x2d0 <TwoWire::endTransmission() [clone .constprop.5]>
beginTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:198
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    173a:	c0 93 28 08 	sts	0x0828, r28	; 0x800828 <TwoWire::transmitting>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:202
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    173e:	10 92 29 08 	sts	0x0829, r1	; 0x800829 <TwoWire::txBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:203
  txBufferLength = 0;
    1742:	10 92 4b 08 	sts	0x084B, r1	; 0x80084b <TwoWire::txBufferLength>
color():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:248

  Wire.beginTransmission(57);  // transmit to device #57 (0x39)
  Wire.write(byte(0x8F));
    1746:	6f e8       	ldi	r22, 0x8F	; 143
    1748:	88 ef       	ldi	r24, 0xF8	; 248
    174a:	99 e0       	ldi	r25, 0x09	; 9
    174c:	0e 94 18 05 	call	0xa30	; 0xa30 <TwoWire::write(unsigned char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:249
  Wire.write(byte(1));  // gain
    1750:	61 e0       	ldi	r22, 0x01	; 1
    1752:	88 ef       	ldi	r24, 0xF8	; 248
    1754:	99 e0       	ldi	r25, 0x09	; 9
    1756:	0e 94 18 05 	call	0xa30	; 0xa30 <TwoWire::write(unsigned char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:250
  Wire.endTransmission();
    175a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <TwoWire::endTransmission() [clone .constprop.5]>
beginTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:198
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    175e:	c0 93 28 08 	sts	0x0828, r28	; 0x800828 <TwoWire::transmitting>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:202
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1762:	10 92 29 08 	sts	0x0829, r1	; 0x800829 <TwoWire::txBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:203
  txBufferLength = 0;
    1766:	10 92 4b 08 	sts	0x084B, r1	; 0x80084b <TwoWire::txBufferLength>
color():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:253

  Wire.beginTransmission(57);  // transmit to device #57 (0x39)
  Wire.write(byte(0x94));      // address of first data
    176a:	64 e9       	ldi	r22, 0x94	; 148
    176c:	88 ef       	ldi	r24, 0xF8	; 248
    176e:	99 e0       	ldi	r25, 0x09	; 9
    1770:	0e 94 18 05 	call	0xa30	; 0xa30 <TwoWire::write(unsigned char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:254
  Wire.endTransmission();
    1774:	0e 94 68 01 	call	0x2d0	; 0x2d0 <TwoWire::endTransmission() [clone .constprop.5]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:256

  Wire.requestFrom(57, 8);
    1778:	68 e0       	ldi	r22, 0x08	; 8
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	89 e3       	ldi	r24, 0x39	; 57
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 94 10 08 	call	0x1020	; 0x1020 <TwoWire::requestFrom(int, int) [clone .constprop.6]>
available():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:292
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    1784:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <TwoWire::rxBufferLength>
    1788:	90 91 6d 08 	lds	r25, 0x086D	; 0x80086d <TwoWire::rxBufferIndex>
    178c:	89 1b       	sub	r24, r25
    178e:	99 0b       	sbc	r25, r25
color():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:257
  if (8 <= Wire.available())  // if 8 bytes were received
    1790:	08 97       	sbiw	r24, 0x08	; 8
    1792:	d4 f1       	brlt	.+116    	; 0x1808 <color(char)+0x134>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:259
  {
    low_byte = Wire.read();
    1794:	0e 94 fd 00 	call	0x1fa	; 0x1fa <TwoWire::read() [clone .constprop.14]>
    1798:	ec 01       	movw	r28, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:260
    high_byte = Wire.read();
    179a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <TwoWire::read() [clone .constprop.14]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:261
    clear = high_byte * 255 + low_byte;
    179e:	1f ef       	ldi	r17, 0xFF	; 255
    17a0:	dd 27       	eor	r29, r29
    17a2:	81 9f       	mul	r24, r17
    17a4:	c0 0d       	add	r28, r0
    17a6:	d1 1d       	adc	r29, r1
    17a8:	11 24       	eor	r1, r1
    17aa:	d0 93 18 08 	sts	0x0818, r29	; 0x800818 <clear+0x1>
    17ae:	c0 93 17 08 	sts	0x0817, r28	; 0x800817 <clear>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:263

    low_byte = Wire.read();
    17b2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <TwoWire::read() [clone .constprop.14]>
    17b6:	ec 01       	movw	r28, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:264
    high_byte = Wire.read();
    17b8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <TwoWire::read() [clone .constprop.14]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:265
    red = high_byte * 255 + low_byte;
    17bc:	dd 27       	eor	r29, r29
    17be:	81 9f       	mul	r24, r17
    17c0:	c0 0d       	add	r28, r0
    17c2:	d1 1d       	adc	r29, r1
    17c4:	11 24       	eor	r1, r1
    17c6:	d0 93 12 08 	sts	0x0812, r29	; 0x800812 <red+0x1>
    17ca:	c0 93 11 08 	sts	0x0811, r28	; 0x800811 <red>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:267

    low_byte = Wire.read();
    17ce:	0e 94 fd 00 	call	0x1fa	; 0x1fa <TwoWire::read() [clone .constprop.14]>
    17d2:	ec 01       	movw	r28, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:268
    high_byte = Wire.read();
    17d4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <TwoWire::read() [clone .constprop.14]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:269
    green = high_byte * 255 + low_byte;
    17d8:	dd 27       	eor	r29, r29
    17da:	81 9f       	mul	r24, r17
    17dc:	c0 0d       	add	r28, r0
    17de:	d1 1d       	adc	r29, r1
    17e0:	11 24       	eor	r1, r1
    17e2:	d0 93 14 08 	sts	0x0814, r29	; 0x800814 <green+0x1>
    17e6:	c0 93 13 08 	sts	0x0813, r28	; 0x800813 <green>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:271

    low_byte = Wire.read();
    17ea:	0e 94 fd 00 	call	0x1fa	; 0x1fa <TwoWire::read() [clone .constprop.14]>
    17ee:	ec 01       	movw	r28, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:272
    high_byte = Wire.read();
    17f0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <TwoWire::read() [clone .constprop.14]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:273
    blue = (high_byte * 255 + low_byte) - 10;
    17f4:	dd 27       	eor	r29, r29
    17f6:	81 9f       	mul	r24, r17
    17f8:	c0 0d       	add	r28, r0
    17fa:	d1 1d       	adc	r29, r1
    17fc:	11 24       	eor	r1, r1
    17fe:	2a 97       	sbiw	r28, 0x0a	; 10
    1800:	d0 93 16 08 	sts	0x0816, r29	; 0x800816 <blue+0x1>
    1804:	c0 93 15 08 	sts	0x0815, r28	; 0x800815 <blue>
    1808:	c0 90 11 08 	lds	r12, 0x0811	; 0x800811 <red>
    180c:	d0 90 12 08 	lds	r13, 0x0812	; 0x800812 <red+0x1>
    1810:	e0 90 13 08 	lds	r14, 0x0813	; 0x800813 <green>
    1814:	f0 90 14 08 	lds	r15, 0x0814	; 0x800814 <green+0x1>
    1818:	00 91 15 08 	lds	r16, 0x0815	; 0x800815 <blue>
    181c:	10 91 16 08 	lds	r17, 0x0816	; 0x800816 <blue+0x1>
    1820:	8a e9       	ldi	r24, 0x9A	; 154
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1828:	ec 01       	movw	r28, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:276
  }

  if (select == 1)  // left
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	b8 16       	cp	r11, r24
    182e:	09 f4       	brne	.+2      	; 0x1832 <color(char)+0x15e>
    1830:	93 c0       	rjmp	.+294    	; 0x1958 <color(char)+0x284>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:306
      color_out = WHITE;

    return color_out;
  } else if (select == 2)  // right
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_right_r) + range && red > EEPROM_read_int(red_right_r) - range && green < EEPROM_read_int(red_right_g) + range && green > EEPROM_read_int(red_right_g) - range && blue < EEPROM_read_int(red_right_b) + range && blue > EEPROM_read_int(red_right_b) - range && clear < EEPROM_read_int(red_right_c) + range && clear > EEPROM_read_int(red_right_c) - range)
    1832:	ec 14       	cp	r14, r12
    1834:	fd 04       	cpc	r15, r13
    1836:	0c f0       	brlt	.+2      	; 0x183a <color(char)+0x166>
    1838:	1a c2       	rjmp	.+1076   	; 0x1c6e <color(char)+0x59a>
    183a:	0c 15       	cp	r16, r12
    183c:	1d 05       	cpc	r17, r13
    183e:	0c f0       	brlt	.+2      	; 0x1842 <color(char)+0x16e>
    1840:	1a c2       	rjmp	.+1076   	; 0x1c76 <color(char)+0x5a2>
    1842:	8c e3       	ldi	r24, 0x3C	; 60
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    184a:	9e 01       	movw	r18, r28
    184c:	28 0f       	add	r18, r24
    184e:	39 1f       	adc	r19, r25
    1850:	c2 16       	cp	r12, r18
    1852:	d3 06       	cpc	r13, r19
    1854:	bc f5       	brge	.+110    	; 0x18c4 <color(char)+0x1f0>
    1856:	8c 1b       	sub	r24, r28
    1858:	9d 0b       	sbc	r25, r29
    185a:	8c 15       	cp	r24, r12
    185c:	9d 05       	cpc	r25, r13
    185e:	94 f5       	brge	.+100    	; 0x18c4 <color(char)+0x1f0>
    1860:	8e e3       	ldi	r24, 0x3E	; 62
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1868:	9e 01       	movw	r18, r28
    186a:	28 0f       	add	r18, r24
    186c:	39 1f       	adc	r19, r25
    186e:	e2 16       	cp	r14, r18
    1870:	f3 06       	cpc	r15, r19
    1872:	44 f5       	brge	.+80     	; 0x18c4 <color(char)+0x1f0>
    1874:	8c 1b       	sub	r24, r28
    1876:	9d 0b       	sbc	r25, r29
    1878:	8e 15       	cp	r24, r14
    187a:	9f 05       	cpc	r25, r15
    187c:	1c f5       	brge	.+70     	; 0x18c4 <color(char)+0x1f0>
    187e:	80 e4       	ldi	r24, 0x40	; 64
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1886:	9e 01       	movw	r18, r28
    1888:	28 0f       	add	r18, r24
    188a:	39 1f       	adc	r19, r25
    188c:	02 17       	cp	r16, r18
    188e:	13 07       	cpc	r17, r19
    1890:	cc f4       	brge	.+50     	; 0x18c4 <color(char)+0x1f0>
    1892:	8c 1b       	sub	r24, r28
    1894:	9d 0b       	sbc	r25, r29
    1896:	80 17       	cp	r24, r16
    1898:	91 07       	cpc	r25, r17
    189a:	a4 f4       	brge	.+40     	; 0x18c4 <color(char)+0x1f0>
    189c:	82 e4       	ldi	r24, 0x42	; 66
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    18a4:	20 91 17 08 	lds	r18, 0x0817	; 0x800817 <clear>
    18a8:	30 91 18 08 	lds	r19, 0x0818	; 0x800818 <clear+0x1>
    18ac:	ae 01       	movw	r20, r28
    18ae:	48 0f       	add	r20, r24
    18b0:	59 1f       	adc	r21, r25
    18b2:	24 17       	cp	r18, r20
    18b4:	35 07       	cpc	r19, r21
    18b6:	34 f4       	brge	.+12     	; 0x18c4 <color(char)+0x1f0>
    18b8:	8c 1b       	sub	r24, r28
    18ba:	9d 0b       	sbc	r25, r29
    18bc:	82 17       	cp	r24, r18
    18be:	93 07       	cpc	r25, r19
    18c0:	0c f4       	brge	.+2      	; 0x18c4 <color(char)+0x1f0>
    18c2:	9a c0       	rjmp	.+308    	; 0x19f8 <color(char)+0x324>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:315
      color_out = GREEN;

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_right_r) + range && red > EEPROM_read_int(blue_right_r) - range && green < EEPROM_read_int(blue_right_g) + range && green > EEPROM_read_int(blue_right_g) - range && blue < EEPROM_read_int(blue_right_b) + range && blue > EEPROM_read_int(blue_right_b) - range && clear < EEPROM_read_int(blue_right_c) + range && clear > EEPROM_read_int(blue_right_c) - range)
      color_out = BLUE;

    else if (red < EEPROM_read_int(yellow_right_r) + range && red > EEPROM_read_int(yellow_right_r) - range && green < EEPROM_read_int(yellow_right_g) + range && green > EEPROM_read_int(yellow_right_g) - range && blue < EEPROM_read_int(yellow_right_b) + range && blue > EEPROM_read_int(yellow_right_b) - range && clear < EEPROM_read_int(yellow_right_c) + range && clear > EEPROM_read_int(yellow_right_c) - range)
    18c4:	84 e5       	ldi	r24, 0x54	; 84
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    18cc:	9e 01       	movw	r18, r28
    18ce:	28 0f       	add	r18, r24
    18d0:	39 1f       	adc	r19, r25
    18d2:	c2 16       	cp	r12, r18
    18d4:	d3 06       	cpc	r13, r19
    18d6:	0c f4       	brge	.+2      	; 0x18da <color(char)+0x206>
    18d8:	72 c2       	rjmp	.+1252   	; 0x1dbe <color(char)+0x6ea>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:319
      color_out = YELLOW;

    else if (
    red <= (EEPROM_read_int(silver_right_r) + range) && red >= (EEPROM_read_int(silver_right_r)-range) &&
    18da:	8c e5       	ldi	r24, 0x5C	; 92
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    18e2:	9e 01       	movw	r18, r28
    18e4:	28 0f       	add	r18, r24
    18e6:	39 1f       	adc	r19, r25
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:322
    green >= (EEPROM_read_int(silver_right_g) - range) && green <= (EEPROM_read_int(silver_right_g) + range) &&
    blue >= (EEPROM_read_int(silver_right_b) - range) && blue <= (EEPROM_read_int(silver_right_b) + range) &&
    clear <= (EEPROM_read_int(silver_right_c) + range) && clear >= (EEPROM_read_int(silver_right_c) - range)
    18e8:	2c 15       	cp	r18, r12
    18ea:	3d 05       	cpc	r19, r13
    18ec:	0c f4       	brge	.+2      	; 0x18f0 <color(char)+0x21c>
    18ee:	2d c1       	rjmp	.+602    	; 0x1b4a <color(char)+0x476>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:319

    else if (red < EEPROM_read_int(yellow_right_r) + range && red > EEPROM_read_int(yellow_right_r) - range && green < EEPROM_read_int(yellow_right_g) + range && green > EEPROM_read_int(yellow_right_g) - range && blue < EEPROM_read_int(yellow_right_b) + range && blue > EEPROM_read_int(yellow_right_b) - range && clear < EEPROM_read_int(yellow_right_c) + range && clear > EEPROM_read_int(yellow_right_c) - range)
      color_out = YELLOW;

    else if (
    red <= (EEPROM_read_int(silver_right_r) + range) && red >= (EEPROM_read_int(silver_right_r)-range) &&
    18f0:	8c 1b       	sub	r24, r28
    18f2:	9d 0b       	sbc	r25, r29
    18f4:	c8 16       	cp	r12, r24
    18f6:	d9 06       	cpc	r13, r25
    18f8:	0c f4       	brge	.+2      	; 0x18fc <color(char)+0x228>
    18fa:	27 c1       	rjmp	.+590    	; 0x1b4a <color(char)+0x476>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:320
    green >= (EEPROM_read_int(silver_right_g) - range) && green <= (EEPROM_read_int(silver_right_g) + range) &&
    18fc:	8e e5       	ldi	r24, 0x5E	; 94
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1904:	9c 01       	movw	r18, r24
    1906:	2c 1b       	sub	r18, r28
    1908:	3d 0b       	sbc	r19, r29
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:319

    else if (red < EEPROM_read_int(yellow_right_r) + range && red > EEPROM_read_int(yellow_right_r) - range && green < EEPROM_read_int(yellow_right_g) + range && green > EEPROM_read_int(yellow_right_g) - range && blue < EEPROM_read_int(yellow_right_b) + range && blue > EEPROM_read_int(yellow_right_b) - range && clear < EEPROM_read_int(yellow_right_c) + range && clear > EEPROM_read_int(yellow_right_c) - range)
      color_out = YELLOW;

    else if (
    red <= (EEPROM_read_int(silver_right_r) + range) && red >= (EEPROM_read_int(silver_right_r)-range) &&
    190a:	e2 16       	cp	r14, r18
    190c:	f3 06       	cpc	r15, r19
    190e:	0c f4       	brge	.+2      	; 0x1912 <color(char)+0x23e>
    1910:	1c c1       	rjmp	.+568    	; 0x1b4a <color(char)+0x476>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:320
    green >= (EEPROM_read_int(silver_right_g) - range) && green <= (EEPROM_read_int(silver_right_g) + range) &&
    1912:	8c 0f       	add	r24, r28
    1914:	9d 1f       	adc	r25, r29
    1916:	8e 15       	cp	r24, r14
    1918:	9f 05       	cpc	r25, r15
    191a:	0c f4       	brge	.+2      	; 0x191e <color(char)+0x24a>
    191c:	16 c1       	rjmp	.+556    	; 0x1b4a <color(char)+0x476>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:321
    blue >= (EEPROM_read_int(silver_right_b) - range) && blue <= (EEPROM_read_int(silver_right_b) + range) &&
    191e:	80 e6       	ldi	r24, 0x60	; 96
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1926:	9c 01       	movw	r18, r24
    1928:	2c 1b       	sub	r18, r28
    192a:	3d 0b       	sbc	r19, r29
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:320
    else if (red < EEPROM_read_int(yellow_right_r) + range && red > EEPROM_read_int(yellow_right_r) - range && green < EEPROM_read_int(yellow_right_g) + range && green > EEPROM_read_int(yellow_right_g) - range && blue < EEPROM_read_int(yellow_right_b) + range && blue > EEPROM_read_int(yellow_right_b) - range && clear < EEPROM_read_int(yellow_right_c) + range && clear > EEPROM_read_int(yellow_right_c) - range)
      color_out = YELLOW;

    else if (
    red <= (EEPROM_read_int(silver_right_r) + range) && red >= (EEPROM_read_int(silver_right_r)-range) &&
    green >= (EEPROM_read_int(silver_right_g) - range) && green <= (EEPROM_read_int(silver_right_g) + range) &&
    192c:	02 17       	cp	r16, r18
    192e:	13 07       	cpc	r17, r19
    1930:	0c f4       	brge	.+2      	; 0x1934 <color(char)+0x260>
    1932:	0b c1       	rjmp	.+534    	; 0x1b4a <color(char)+0x476>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:321
    blue >= (EEPROM_read_int(silver_right_b) - range) && blue <= (EEPROM_read_int(silver_right_b) + range) &&
    1934:	8c 0f       	add	r24, r28
    1936:	9d 1f       	adc	r25, r29
    1938:	80 17       	cp	r24, r16
    193a:	91 07       	cpc	r25, r17
    193c:	0c f4       	brge	.+2      	; 0x1940 <color(char)+0x26c>
    193e:	05 c1       	rjmp	.+522    	; 0x1b4a <color(char)+0x476>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:322
    clear <= (EEPROM_read_int(silver_right_c) + range) && clear >= (EEPROM_read_int(silver_right_c) - range)
    1940:	82 e6       	ldi	r24, 0x62	; 98
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	f0 c0       	rjmp	.+480    	; 0x1b26 <color(char)+0x452>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:235
    digitalWrite(MUX_B, LOW);
    digitalWrite(MUX_A, LOW);
    //  Serial.print("left color:  ");
  } else  // right
  {
    digitalWrite(MUX_C, LOW);
    1946:	8a e2       	ldi	r24, 0x2A	; 42
    1948:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:236
    digitalWrite(MUX_B, LOW);
    194c:	60 e0       	ldi	r22, 0x00	; 0
    194e:	8b e2       	ldi	r24, 0x2B	; 43
    1950:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:237
    digitalWrite(MUX_A, HIGH);
    1954:	61 e0       	ldi	r22, 0x01	; 1
    1956:	d4 ce       	rjmp	.-600    	; 0x1700 <color(char)+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:278
    blue = (high_byte * 255 + low_byte) - 10;
  }

  if (select == 1)  // left
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_left_r) + range && red > EEPROM_read_int(red_left_r) - range && green < EEPROM_read_int(red_left_g) + range && green > EEPROM_read_int(red_left_g) - range && blue < EEPROM_read_int(red_left_b) + range && blue > EEPROM_read_int(red_left_b) - range && clear < EEPROM_read_int(red_left_c) + range && clear > EEPROM_read_int(red_left_c) - range)
    1958:	ec 14       	cp	r14, r12
    195a:	fd 04       	cpc	r15, r13
    195c:	0c f0       	brlt	.+2      	; 0x1960 <color(char)+0x28c>
    195e:	5c c0       	rjmp	.+184    	; 0x1a18 <color(char)+0x344>
    1960:	0c 15       	cp	r16, r12
    1962:	1d 05       	cpc	r17, r13
    1964:	0c f0       	brlt	.+2      	; 0x1968 <color(char)+0x294>
    1966:	a1 c0       	rjmp	.+322    	; 0x1aaa <color(char)+0x3d6>
    1968:	84 e1       	ldi	r24, 0x14	; 20
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1970:	9c 01       	movw	r18, r24
    1972:	2c 0f       	add	r18, r28
    1974:	3d 1f       	adc	r19, r29
    1976:	c2 16       	cp	r12, r18
    1978:	d3 06       	cpc	r13, r19
    197a:	0c f0       	brlt	.+2      	; 0x197e <color(char)+0x2aa>
    197c:	9a c0       	rjmp	.+308    	; 0x1ab2 <color(char)+0x3de>
    197e:	8c 1b       	sub	r24, r28
    1980:	9d 0b       	sbc	r25, r29
    1982:	8c 15       	cp	r24, r12
    1984:	9d 05       	cpc	r25, r13
    1986:	0c f0       	brlt	.+2      	; 0x198a <color(char)+0x2b6>
    1988:	94 c0       	rjmp	.+296    	; 0x1ab2 <color(char)+0x3de>
    198a:	86 e1       	ldi	r24, 0x16	; 22
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1992:	9c 01       	movw	r18, r24
    1994:	2c 0f       	add	r18, r28
    1996:	3d 1f       	adc	r19, r29
    1998:	e2 16       	cp	r14, r18
    199a:	f3 06       	cpc	r15, r19
    199c:	0c f0       	brlt	.+2      	; 0x19a0 <color(char)+0x2cc>
    199e:	89 c0       	rjmp	.+274    	; 0x1ab2 <color(char)+0x3de>
    19a0:	8c 1b       	sub	r24, r28
    19a2:	9d 0b       	sbc	r25, r29
    19a4:	8e 15       	cp	r24, r14
    19a6:	9f 05       	cpc	r25, r15
    19a8:	0c f0       	brlt	.+2      	; 0x19ac <color(char)+0x2d8>
    19aa:	83 c0       	rjmp	.+262    	; 0x1ab2 <color(char)+0x3de>
    19ac:	88 e1       	ldi	r24, 0x18	; 24
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    19b4:	9c 01       	movw	r18, r24
    19b6:	2c 0f       	add	r18, r28
    19b8:	3d 1f       	adc	r19, r29
    19ba:	02 17       	cp	r16, r18
    19bc:	13 07       	cpc	r17, r19
    19be:	0c f0       	brlt	.+2      	; 0x19c2 <color(char)+0x2ee>
    19c0:	78 c0       	rjmp	.+240    	; 0x1ab2 <color(char)+0x3de>
    19c2:	8c 1b       	sub	r24, r28
    19c4:	9d 0b       	sbc	r25, r29
    19c6:	80 17       	cp	r24, r16
    19c8:	91 07       	cpc	r25, r17
    19ca:	0c f0       	brlt	.+2      	; 0x19ce <color(char)+0x2fa>
    19cc:	72 c0       	rjmp	.+228    	; 0x1ab2 <color(char)+0x3de>
    19ce:	8a e1       	ldi	r24, 0x1A	; 26
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    19d6:	20 91 17 08 	lds	r18, 0x0817	; 0x800817 <clear>
    19da:	30 91 18 08 	lds	r19, 0x0818	; 0x800818 <clear+0x1>
    19de:	ac 01       	movw	r20, r24
    19e0:	4c 0f       	add	r20, r28
    19e2:	5d 1f       	adc	r21, r29
    19e4:	24 17       	cp	r18, r20
    19e6:	35 07       	cpc	r19, r21
    19e8:	0c f0       	brlt	.+2      	; 0x19ec <color(char)+0x318>
    19ea:	63 c0       	rjmp	.+198    	; 0x1ab2 <color(char)+0x3de>
    19ec:	8c 1b       	sub	r24, r28
    19ee:	9d 0b       	sbc	r25, r29
    19f0:	82 17       	cp	r24, r18
    19f2:	93 07       	cpc	r25, r19
    19f4:	0c f0       	brlt	.+2      	; 0x19f8 <color(char)+0x324>
    19f6:	5d c0       	rjmp	.+186    	; 0x1ab2 <color(char)+0x3de>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:307

    return color_out;
  } else if (select == 2)  // right
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_right_r) + range && red > EEPROM_read_int(red_right_r) - range && green < EEPROM_read_int(red_right_g) + range && green > EEPROM_read_int(red_right_g) - range && blue < EEPROM_read_int(red_right_b) + range && blue > EEPROM_read_int(red_right_b) - range && clear < EEPROM_read_int(red_right_c) + range && clear > EEPROM_read_int(red_right_c) - range)
      color_out = RED;
    19f8:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <color_out+0x1>
    19fc:	10 92 c4 07 	sts	0x07C4, r1	; 0x8007c4 <color_out>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:331
    }

    else
      color_out = WHITE;

    return color_out;
    1a00:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <color_out>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:334
  }
  // delay(5);
}
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	ff 90       	pop	r15
    1a0e:	ef 90       	pop	r14
    1a10:	df 90       	pop	r13
    1a12:	cf 90       	pop	r12
    1a14:	bf 90       	pop	r11
    1a16:	08 95       	ret
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:281
  if (select == 1)  // left
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_left_r) + range && red > EEPROM_read_int(red_left_r) - range && green < EEPROM_read_int(red_left_g) + range && green > EEPROM_read_int(red_left_g) - range && blue < EEPROM_read_int(red_left_b) + range && blue > EEPROM_read_int(red_left_b) - range && clear < EEPROM_read_int(red_left_c) + range && clear > EEPROM_read_int(red_left_c) - range)
      color_out = RED;

    else if (green > red && green > blue && red < EEPROM_read_int(green_left_r) + range && red > EEPROM_read_int(green_left_r) - range && green < EEPROM_read_int(green_left_g) + range && green > EEPROM_read_int(green_left_g) - range && blue < EEPROM_read_int(green_left_b) + range && blue > EEPROM_read_int(green_left_b) - range && clear < EEPROM_read_int(green_left_c) + range && clear > EEPROM_read_int(green_left_c) - range)
    1a18:	ce 14       	cp	r12, r14
    1a1a:	df 04       	cpc	r13, r15
    1a1c:	0c f0       	brlt	.+2      	; 0x1a20 <color(char)+0x34c>
    1a1e:	45 c0       	rjmp	.+138    	; 0x1aaa <color(char)+0x3d6>
    1a20:	0e 15       	cp	r16, r14
    1a22:	1f 05       	cpc	r17, r15
    1a24:	0c f0       	brlt	.+2      	; 0x1a28 <color(char)+0x354>
    1a26:	41 c0       	rjmp	.+130    	; 0x1aaa <color(char)+0x3d6>
    1a28:	8c e1       	ldi	r24, 0x1C	; 28
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1a30:	9c 01       	movw	r18, r24
    1a32:	2c 0f       	add	r18, r28
    1a34:	3d 1f       	adc	r19, r29
    1a36:	c2 16       	cp	r12, r18
    1a38:	d3 06       	cpc	r13, r19
    1a3a:	bc f5       	brge	.+110    	; 0x1aaa <color(char)+0x3d6>
    1a3c:	8c 1b       	sub	r24, r28
    1a3e:	9d 0b       	sbc	r25, r29
    1a40:	8c 15       	cp	r24, r12
    1a42:	9d 05       	cpc	r25, r13
    1a44:	94 f5       	brge	.+100    	; 0x1aaa <color(char)+0x3d6>
    1a46:	8e e1       	ldi	r24, 0x1E	; 30
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1a4e:	9e 01       	movw	r18, r28
    1a50:	28 0f       	add	r18, r24
    1a52:	39 1f       	adc	r19, r25
    1a54:	e2 16       	cp	r14, r18
    1a56:	f3 06       	cpc	r15, r19
    1a58:	44 f5       	brge	.+80     	; 0x1aaa <color(char)+0x3d6>
    1a5a:	8c 1b       	sub	r24, r28
    1a5c:	9d 0b       	sbc	r25, r29
    1a5e:	8e 15       	cp	r24, r14
    1a60:	9f 05       	cpc	r25, r15
    1a62:	1c f5       	brge	.+70     	; 0x1aaa <color(char)+0x3d6>
    1a64:	80 e2       	ldi	r24, 0x20	; 32
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1a6c:	9e 01       	movw	r18, r28
    1a6e:	28 0f       	add	r18, r24
    1a70:	39 1f       	adc	r19, r25
    1a72:	02 17       	cp	r16, r18
    1a74:	13 07       	cpc	r17, r19
    1a76:	cc f4       	brge	.+50     	; 0x1aaa <color(char)+0x3d6>
    1a78:	8c 1b       	sub	r24, r28
    1a7a:	9d 0b       	sbc	r25, r29
    1a7c:	80 17       	cp	r24, r16
    1a7e:	91 07       	cpc	r25, r17
    1a80:	a4 f4       	brge	.+40     	; 0x1aaa <color(char)+0x3d6>
    1a82:	82 e2       	ldi	r24, 0x22	; 34
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1a8a:	20 91 17 08 	lds	r18, 0x0817	; 0x800817 <clear>
    1a8e:	30 91 18 08 	lds	r19, 0x0818	; 0x800818 <clear+0x1>
    1a92:	ae 01       	movw	r20, r28
    1a94:	48 0f       	add	r20, r24
    1a96:	59 1f       	adc	r21, r25
    1a98:	24 17       	cp	r18, r20
    1a9a:	35 07       	cpc	r19, r21
    1a9c:	34 f4       	brge	.+12     	; 0x1aaa <color(char)+0x3d6>
    1a9e:	8c 1b       	sub	r24, r28
    1aa0:	9d 0b       	sbc	r25, r29
    1aa2:	82 17       	cp	r24, r18
    1aa4:	93 07       	cpc	r25, r19
    1aa6:	0c f4       	brge	.+2      	; 0x1aaa <color(char)+0x3d6>
    1aa8:	83 c1       	rjmp	.+774    	; 0x1db0 <color(char)+0x6dc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:284
      color_out = GREEN;

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_left_r) + range && red > EEPROM_read_int(blue_left_r) - range && green < EEPROM_read_int(blue_left_g) + range && green > EEPROM_read_int(blue_left_g) - range && blue < EEPROM_read_int(blue_left_b) + range && blue > EEPROM_read_int(blue_left_b) - range && clear < EEPROM_read_int(blue_left_c) + range && clear > EEPROM_read_int(blue_left_c) - range)
    1aaa:	c0 16       	cp	r12, r16
    1aac:	d1 06       	cpc	r13, r17
    1aae:	0c f4       	brge	.+2      	; 0x1ab2 <color(char)+0x3de>
    1ab0:	4f c0       	rjmp	.+158    	; 0x1b50 <color(char)+0x47c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:287
      color_out = BLUE;

    else if (red < EEPROM_read_int(yellow_left_r) + range && red > EEPROM_read_int(yellow_left_r) - range && green < EEPROM_read_int(yellow_left_g) + range && green > EEPROM_read_int(yellow_left_g) - range && blue < EEPROM_read_int(yellow_left_b) + range && blue > EEPROM_read_int(yellow_left_b) - range && clear < EEPROM_read_int(yellow_left_c) + range && clear > EEPROM_read_int(yellow_left_c) - range)
    1ab2:	8c e2       	ldi	r24, 0x2C	; 44
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1aba:	9e 01       	movw	r18, r28
    1abc:	28 0f       	add	r18, r24
    1abe:	39 1f       	adc	r19, r25
    1ac0:	c2 16       	cp	r12, r18
    1ac2:	d3 06       	cpc	r13, r19
    1ac4:	0c f4       	brge	.+2      	; 0x1ac8 <color(char)+0x3f4>
    1ac6:	93 c0       	rjmp	.+294    	; 0x1bee <color(char)+0x51a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:291
      color_out = YELLOW;

    else if (
    red <= (EEPROM_read_int(silver_left_r) + range) && red >= (EEPROM_read_int(silver_left_r)-range) &&
    1ac8:	84 e3       	ldi	r24, 0x34	; 52
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1ad0:	9e 01       	movw	r18, r28
    1ad2:	28 0f       	add	r18, r24
    1ad4:	39 1f       	adc	r19, r25
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:294
    green >= (EEPROM_read_int(silver_left_g) - range) && green <= (EEPROM_read_int(silver_left_g) + range) &&
    blue >= (EEPROM_read_int(silver_left_b) - range) && blue <= (EEPROM_read_int(silver_left_b) + range) &&
    clear <= (EEPROM_read_int(silver_left_c) + range) && clear >= (EEPROM_read_int(silver_left_c) - range)
    1ad6:	2c 15       	cp	r18, r12
    1ad8:	3d 05       	cpc	r19, r13
    1ada:	bc f1       	brlt	.+110    	; 0x1b4a <color(char)+0x476>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:291

    else if (red < EEPROM_read_int(yellow_left_r) + range && red > EEPROM_read_int(yellow_left_r) - range && green < EEPROM_read_int(yellow_left_g) + range && green > EEPROM_read_int(yellow_left_g) - range && blue < EEPROM_read_int(yellow_left_b) + range && blue > EEPROM_read_int(yellow_left_b) - range && clear < EEPROM_read_int(yellow_left_c) + range && clear > EEPROM_read_int(yellow_left_c) - range)
      color_out = YELLOW;

    else if (
    red <= (EEPROM_read_int(silver_left_r) + range) && red >= (EEPROM_read_int(silver_left_r)-range) &&
    1adc:	8c 1b       	sub	r24, r28
    1ade:	9d 0b       	sbc	r25, r29
    1ae0:	c8 16       	cp	r12, r24
    1ae2:	d9 06       	cpc	r13, r25
    1ae4:	94 f1       	brlt	.+100    	; 0x1b4a <color(char)+0x476>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:292
    green >= (EEPROM_read_int(silver_left_g) - range) && green <= (EEPROM_read_int(silver_left_g) + range) &&
    1ae6:	86 e3       	ldi	r24, 0x36	; 54
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1aee:	9c 01       	movw	r18, r24
    1af0:	2c 1b       	sub	r18, r28
    1af2:	3d 0b       	sbc	r19, r29
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:291

    else if (red < EEPROM_read_int(yellow_left_r) + range && red > EEPROM_read_int(yellow_left_r) - range && green < EEPROM_read_int(yellow_left_g) + range && green > EEPROM_read_int(yellow_left_g) - range && blue < EEPROM_read_int(yellow_left_b) + range && blue > EEPROM_read_int(yellow_left_b) - range && clear < EEPROM_read_int(yellow_left_c) + range && clear > EEPROM_read_int(yellow_left_c) - range)
      color_out = YELLOW;

    else if (
    red <= (EEPROM_read_int(silver_left_r) + range) && red >= (EEPROM_read_int(silver_left_r)-range) &&
    1af4:	e2 16       	cp	r14, r18
    1af6:	f3 06       	cpc	r15, r19
    1af8:	44 f1       	brlt	.+80     	; 0x1b4a <color(char)+0x476>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:292
    green >= (EEPROM_read_int(silver_left_g) - range) && green <= (EEPROM_read_int(silver_left_g) + range) &&
    1afa:	8c 0f       	add	r24, r28
    1afc:	9d 1f       	adc	r25, r29
    1afe:	8e 15       	cp	r24, r14
    1b00:	9f 05       	cpc	r25, r15
    1b02:	1c f1       	brlt	.+70     	; 0x1b4a <color(char)+0x476>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:293
    blue >= (EEPROM_read_int(silver_left_b) - range) && blue <= (EEPROM_read_int(silver_left_b) + range) &&
    1b04:	88 e3       	ldi	r24, 0x38	; 56
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1b0c:	9c 01       	movw	r18, r24
    1b0e:	2c 1b       	sub	r18, r28
    1b10:	3d 0b       	sbc	r19, r29
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:292
    else if (red < EEPROM_read_int(yellow_left_r) + range && red > EEPROM_read_int(yellow_left_r) - range && green < EEPROM_read_int(yellow_left_g) + range && green > EEPROM_read_int(yellow_left_g) - range && blue < EEPROM_read_int(yellow_left_b) + range && blue > EEPROM_read_int(yellow_left_b) - range && clear < EEPROM_read_int(yellow_left_c) + range && clear > EEPROM_read_int(yellow_left_c) - range)
      color_out = YELLOW;

    else if (
    red <= (EEPROM_read_int(silver_left_r) + range) && red >= (EEPROM_read_int(silver_left_r)-range) &&
    green >= (EEPROM_read_int(silver_left_g) - range) && green <= (EEPROM_read_int(silver_left_g) + range) &&
    1b12:	02 17       	cp	r16, r18
    1b14:	13 07       	cpc	r17, r19
    1b16:	cc f0       	brlt	.+50     	; 0x1b4a <color(char)+0x476>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:293
    blue >= (EEPROM_read_int(silver_left_b) - range) && blue <= (EEPROM_read_int(silver_left_b) + range) &&
    1b18:	8c 0f       	add	r24, r28
    1b1a:	9d 1f       	adc	r25, r29
    1b1c:	80 17       	cp	r24, r16
    1b1e:	91 07       	cpc	r25, r17
    1b20:	a4 f0       	brlt	.+40     	; 0x1b4a <color(char)+0x476>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:294
    clear <= (EEPROM_read_int(silver_left_c) + range) && clear >= (EEPROM_read_int(silver_left_c) - range)
    1b22:	8a e3       	ldi	r24, 0x3A	; 58
    1b24:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:322

    else if (
    red <= (EEPROM_read_int(silver_right_r) + range) && red >= (EEPROM_read_int(silver_right_r)-range) &&
    green >= (EEPROM_read_int(silver_right_g) - range) && green <= (EEPROM_read_int(silver_right_g) + range) &&
    blue >= (EEPROM_read_int(silver_right_b) - range) && blue <= (EEPROM_read_int(silver_right_b) + range) &&
    clear <= (EEPROM_read_int(silver_right_c) + range) && clear >= (EEPROM_read_int(silver_right_c) - range)
    1b26:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1b2a:	20 91 17 08 	lds	r18, 0x0817	; 0x800817 <clear>
    1b2e:	30 91 18 08 	lds	r19, 0x0818	; 0x800818 <clear+0x1>
    1b32:	ae 01       	movw	r20, r28
    1b34:	48 0f       	add	r20, r24
    1b36:	59 1f       	adc	r21, r25
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:321
      color_out = YELLOW;

    else if (
    red <= (EEPROM_read_int(silver_right_r) + range) && red >= (EEPROM_read_int(silver_right_r)-range) &&
    green >= (EEPROM_read_int(silver_right_g) - range) && green <= (EEPROM_read_int(silver_right_g) + range) &&
    blue >= (EEPROM_read_int(silver_right_b) - range) && blue <= (EEPROM_read_int(silver_right_b) + range) &&
    1b38:	42 17       	cp	r20, r18
    1b3a:	53 07       	cpc	r21, r19
    1b3c:	34 f0       	brlt	.+12     	; 0x1b4a <color(char)+0x476>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:322
    clear <= (EEPROM_read_int(silver_right_c) + range) && clear >= (EEPROM_read_int(silver_right_c) - range)
    1b3e:	8c 1b       	sub	r24, r28
    1b40:	9d 0b       	sbc	r25, r29
    1b42:	28 17       	cp	r18, r24
    1b44:	39 07       	cpc	r19, r25
    1b46:	0c f0       	brlt	.+2      	; 0x1b4a <color(char)+0x476>
    1b48:	78 c1       	rjmp	.+752    	; 0x1e3a <color(char)+0x766>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:329
    {
        color_out = SILVER;
    }

    else
      color_out = WHITE;
    1b4a:	87 e0       	ldi	r24, 0x07	; 7
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	32 c1       	rjmp	.+612    	; 0x1db4 <color(char)+0x6e0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:284
      color_out = RED;

    else if (green > red && green > blue && red < EEPROM_read_int(green_left_r) + range && red > EEPROM_read_int(green_left_r) - range && green < EEPROM_read_int(green_left_g) + range && green > EEPROM_read_int(green_left_g) - range && blue < EEPROM_read_int(green_left_b) + range && blue > EEPROM_read_int(green_left_b) - range && clear < EEPROM_read_int(green_left_c) + range && clear > EEPROM_read_int(green_left_c) - range)
      color_out = GREEN;

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_left_r) + range && red > EEPROM_read_int(blue_left_r) - range && green < EEPROM_read_int(blue_left_g) + range && green > EEPROM_read_int(blue_left_g) - range && blue < EEPROM_read_int(blue_left_b) + range && blue > EEPROM_read_int(blue_left_b) - range && clear < EEPROM_read_int(blue_left_c) + range && clear > EEPROM_read_int(blue_left_c) - range)
    1b50:	e0 16       	cp	r14, r16
    1b52:	f1 06       	cpc	r15, r17
    1b54:	0c f0       	brlt	.+2      	; 0x1b58 <color(char)+0x484>
    1b56:	ad cf       	rjmp	.-166    	; 0x1ab2 <color(char)+0x3de>
    1b58:	84 e2       	ldi	r24, 0x24	; 36
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1b60:	9e 01       	movw	r18, r28
    1b62:	28 0f       	add	r18, r24
    1b64:	39 1f       	adc	r19, r25
    1b66:	c2 16       	cp	r12, r18
    1b68:	d3 06       	cpc	r13, r19
    1b6a:	0c f0       	brlt	.+2      	; 0x1b6e <color(char)+0x49a>
    1b6c:	a2 cf       	rjmp	.-188    	; 0x1ab2 <color(char)+0x3de>
    1b6e:	8c 1b       	sub	r24, r28
    1b70:	9d 0b       	sbc	r25, r29
    1b72:	8c 15       	cp	r24, r12
    1b74:	9d 05       	cpc	r25, r13
    1b76:	0c f0       	brlt	.+2      	; 0x1b7a <color(char)+0x4a6>
    1b78:	9c cf       	rjmp	.-200    	; 0x1ab2 <color(char)+0x3de>
    1b7a:	86 e2       	ldi	r24, 0x26	; 38
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1b82:	9e 01       	movw	r18, r28
    1b84:	28 0f       	add	r18, r24
    1b86:	39 1f       	adc	r19, r25
    1b88:	e2 16       	cp	r14, r18
    1b8a:	f3 06       	cpc	r15, r19
    1b8c:	0c f0       	brlt	.+2      	; 0x1b90 <color(char)+0x4bc>
    1b8e:	91 cf       	rjmp	.-222    	; 0x1ab2 <color(char)+0x3de>
    1b90:	8c 1b       	sub	r24, r28
    1b92:	9d 0b       	sbc	r25, r29
    1b94:	8e 15       	cp	r24, r14
    1b96:	9f 05       	cpc	r25, r15
    1b98:	0c f0       	brlt	.+2      	; 0x1b9c <color(char)+0x4c8>
    1b9a:	8b cf       	rjmp	.-234    	; 0x1ab2 <color(char)+0x3de>
    1b9c:	88 e2       	ldi	r24, 0x28	; 40
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1ba4:	9e 01       	movw	r18, r28
    1ba6:	28 0f       	add	r18, r24
    1ba8:	39 1f       	adc	r19, r25
    1baa:	02 17       	cp	r16, r18
    1bac:	13 07       	cpc	r17, r19
    1bae:	0c f0       	brlt	.+2      	; 0x1bb2 <color(char)+0x4de>
    1bb0:	80 cf       	rjmp	.-256    	; 0x1ab2 <color(char)+0x3de>
    1bb2:	8c 1b       	sub	r24, r28
    1bb4:	9d 0b       	sbc	r25, r29
    1bb6:	80 17       	cp	r24, r16
    1bb8:	91 07       	cpc	r25, r17
    1bba:	0c f0       	brlt	.+2      	; 0x1bbe <color(char)+0x4ea>
    1bbc:	7a cf       	rjmp	.-268    	; 0x1ab2 <color(char)+0x3de>
    1bbe:	8a e2       	ldi	r24, 0x2A	; 42
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1bc6:	20 91 17 08 	lds	r18, 0x0817	; 0x800817 <clear>
    1bca:	30 91 18 08 	lds	r19, 0x0818	; 0x800818 <clear+0x1>
    1bce:	ae 01       	movw	r20, r28
    1bd0:	48 0f       	add	r20, r24
    1bd2:	59 1f       	adc	r21, r25
    1bd4:	24 17       	cp	r18, r20
    1bd6:	35 07       	cpc	r19, r21
    1bd8:	0c f0       	brlt	.+2      	; 0x1bdc <color(char)+0x508>
    1bda:	6b cf       	rjmp	.-298    	; 0x1ab2 <color(char)+0x3de>
    1bdc:	8c 1b       	sub	r24, r28
    1bde:	9d 0b       	sbc	r25, r29
    1be0:	82 17       	cp	r24, r18
    1be2:	93 07       	cpc	r25, r19
    1be4:	0c f0       	brlt	.+2      	; 0x1be8 <color(char)+0x514>
    1be6:	65 cf       	rjmp	.-310    	; 0x1ab2 <color(char)+0x3de>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:313

    else if (green > red && green > blue && red < EEPROM_read_int(green_right_r) + range && red > EEPROM_read_int(green_right_r) - range && green < EEPROM_read_int(green_right_g) + range && green > EEPROM_read_int(green_right_g) - range && blue < EEPROM_read_int(green_right_b) + range && blue > EEPROM_read_int(green_right_b) - range && clear < EEPROM_read_int(green_right_c) + range && clear > EEPROM_read_int(green_right_c) - range)
      color_out = GREEN;

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_right_r) + range && red > EEPROM_read_int(blue_right_r) - range && green < EEPROM_read_int(blue_right_g) + range && green > EEPROM_read_int(blue_right_g) - range && blue < EEPROM_read_int(blue_right_b) + range && blue > EEPROM_read_int(blue_right_b) - range && clear < EEPROM_read_int(blue_right_c) + range && clear > EEPROM_read_int(blue_right_c) - range)
      color_out = BLUE;
    1be8:	82 e0       	ldi	r24, 0x02	; 2
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	e3 c0       	rjmp	.+454    	; 0x1db4 <color(char)+0x6e0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:287
      color_out = GREEN;

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_left_r) + range && red > EEPROM_read_int(blue_left_r) - range && green < EEPROM_read_int(blue_left_g) + range && green > EEPROM_read_int(blue_left_g) - range && blue < EEPROM_read_int(blue_left_b) + range && blue > EEPROM_read_int(blue_left_b) - range && clear < EEPROM_read_int(blue_left_c) + range && clear > EEPROM_read_int(blue_left_c) - range)
      color_out = BLUE;

    else if (red < EEPROM_read_int(yellow_left_r) + range && red > EEPROM_read_int(yellow_left_r) - range && green < EEPROM_read_int(yellow_left_g) + range && green > EEPROM_read_int(yellow_left_g) - range && blue < EEPROM_read_int(yellow_left_b) + range && blue > EEPROM_read_int(yellow_left_b) - range && clear < EEPROM_read_int(yellow_left_c) + range && clear > EEPROM_read_int(yellow_left_c) - range)
    1bee:	8c 1b       	sub	r24, r28
    1bf0:	9d 0b       	sbc	r25, r29
    1bf2:	8c 15       	cp	r24, r12
    1bf4:	9d 05       	cpc	r25, r13
    1bf6:	0c f0       	brlt	.+2      	; 0x1bfa <color(char)+0x526>
    1bf8:	67 cf       	rjmp	.-306    	; 0x1ac8 <color(char)+0x3f4>
    1bfa:	8e e2       	ldi	r24, 0x2E	; 46
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1c02:	9e 01       	movw	r18, r28
    1c04:	28 0f       	add	r18, r24
    1c06:	39 1f       	adc	r19, r25
    1c08:	e2 16       	cp	r14, r18
    1c0a:	f3 06       	cpc	r15, r19
    1c0c:	0c f0       	brlt	.+2      	; 0x1c10 <color(char)+0x53c>
    1c0e:	5c cf       	rjmp	.-328    	; 0x1ac8 <color(char)+0x3f4>
    1c10:	8c 1b       	sub	r24, r28
    1c12:	9d 0b       	sbc	r25, r29
    1c14:	8e 15       	cp	r24, r14
    1c16:	9f 05       	cpc	r25, r15
    1c18:	0c f0       	brlt	.+2      	; 0x1c1c <color(char)+0x548>
    1c1a:	56 cf       	rjmp	.-340    	; 0x1ac8 <color(char)+0x3f4>
    1c1c:	80 e3       	ldi	r24, 0x30	; 48
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1c24:	9e 01       	movw	r18, r28
    1c26:	28 0f       	add	r18, r24
    1c28:	39 1f       	adc	r19, r25
    1c2a:	02 17       	cp	r16, r18
    1c2c:	13 07       	cpc	r17, r19
    1c2e:	0c f0       	brlt	.+2      	; 0x1c32 <color(char)+0x55e>
    1c30:	4b cf       	rjmp	.-362    	; 0x1ac8 <color(char)+0x3f4>
    1c32:	8c 1b       	sub	r24, r28
    1c34:	9d 0b       	sbc	r25, r29
    1c36:	80 17       	cp	r24, r16
    1c38:	91 07       	cpc	r25, r17
    1c3a:	0c f0       	brlt	.+2      	; 0x1c3e <color(char)+0x56a>
    1c3c:	45 cf       	rjmp	.-374    	; 0x1ac8 <color(char)+0x3f4>
    1c3e:	82 e3       	ldi	r24, 0x32	; 50
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1c46:	20 91 17 08 	lds	r18, 0x0817	; 0x800817 <clear>
    1c4a:	30 91 18 08 	lds	r19, 0x0818	; 0x800818 <clear+0x1>
    1c4e:	ae 01       	movw	r20, r28
    1c50:	48 0f       	add	r20, r24
    1c52:	59 1f       	adc	r21, r25
    1c54:	24 17       	cp	r18, r20
    1c56:	35 07       	cpc	r19, r21
    1c58:	0c f0       	brlt	.+2      	; 0x1c5c <color(char)+0x588>
    1c5a:	36 cf       	rjmp	.-404    	; 0x1ac8 <color(char)+0x3f4>
    1c5c:	8c 1b       	sub	r24, r28
    1c5e:	9d 0b       	sbc	r25, r29
    1c60:	82 17       	cp	r24, r18
    1c62:	93 07       	cpc	r25, r19
    1c64:	0c f0       	brlt	.+2      	; 0x1c68 <color(char)+0x594>
    1c66:	30 cf       	rjmp	.-416    	; 0x1ac8 <color(char)+0x3f4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:316

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_right_r) + range && red > EEPROM_read_int(blue_right_r) - range && green < EEPROM_read_int(blue_right_g) + range && green > EEPROM_read_int(blue_right_g) - range && blue < EEPROM_read_int(blue_right_b) + range && blue > EEPROM_read_int(blue_right_b) - range && clear < EEPROM_read_int(blue_right_c) + range && clear > EEPROM_read_int(blue_right_c) - range)
      color_out = BLUE;

    else if (red < EEPROM_read_int(yellow_right_r) + range && red > EEPROM_read_int(yellow_right_r) - range && green < EEPROM_read_int(yellow_right_g) + range && green > EEPROM_read_int(yellow_right_g) - range && blue < EEPROM_read_int(yellow_right_b) + range && blue > EEPROM_read_int(yellow_right_b) - range && clear < EEPROM_read_int(yellow_right_c) + range && clear > EEPROM_read_int(yellow_right_c) - range)
      color_out = YELLOW;
    1c68:	84 e0       	ldi	r24, 0x04	; 4
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	a3 c0       	rjmp	.+326    	; 0x1db4 <color(char)+0x6e0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:309
  } else if (select == 2)  // right
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_right_r) + range && red > EEPROM_read_int(red_right_r) - range && green < EEPROM_read_int(red_right_g) + range && green > EEPROM_read_int(red_right_g) - range && blue < EEPROM_read_int(red_right_b) + range && blue > EEPROM_read_int(red_right_b) - range && clear < EEPROM_read_int(red_right_c) + range && clear > EEPROM_read_int(red_right_c) - range)
      color_out = RED;

    else if (green > red && green > blue && red < EEPROM_read_int(green_right_r) + range && red > EEPROM_read_int(green_right_r) - range && green < EEPROM_read_int(green_right_g) + range && green > EEPROM_read_int(green_right_g) - range && blue < EEPROM_read_int(green_right_b) + range && blue > EEPROM_read_int(green_right_b) - range && clear < EEPROM_read_int(green_right_c) + range && clear > EEPROM_read_int(green_right_c) - range)
    1c6e:	ce 14       	cp	r12, r14
    1c70:	df 04       	cpc	r13, r15
    1c72:	0c f4       	brge	.+2      	; 0x1c76 <color(char)+0x5a2>
    1c74:	51 c0       	rjmp	.+162    	; 0x1d18 <color(char)+0x644>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:312
      color_out = GREEN;

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_right_r) + range && red > EEPROM_read_int(blue_right_r) - range && green < EEPROM_read_int(blue_right_g) + range && green > EEPROM_read_int(blue_right_g) - range && blue < EEPROM_read_int(blue_right_b) + range && blue > EEPROM_read_int(blue_right_b) - range && clear < EEPROM_read_int(blue_right_c) + range && clear > EEPROM_read_int(blue_right_c) - range)
    1c76:	c0 16       	cp	r12, r16
    1c78:	d1 06       	cpc	r13, r17
    1c7a:	0c f0       	brlt	.+2      	; 0x1c7e <color(char)+0x5aa>
    1c7c:	23 ce       	rjmp	.-954    	; 0x18c4 <color(char)+0x1f0>
    1c7e:	e0 16       	cp	r14, r16
    1c80:	f1 06       	cpc	r15, r17
    1c82:	0c f0       	brlt	.+2      	; 0x1c86 <color(char)+0x5b2>
    1c84:	1f ce       	rjmp	.-962    	; 0x18c4 <color(char)+0x1f0>
    1c86:	8c e4       	ldi	r24, 0x4C	; 76
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1c8e:	9e 01       	movw	r18, r28
    1c90:	28 0f       	add	r18, r24
    1c92:	39 1f       	adc	r19, r25
    1c94:	c2 16       	cp	r12, r18
    1c96:	d3 06       	cpc	r13, r19
    1c98:	0c f0       	brlt	.+2      	; 0x1c9c <color(char)+0x5c8>
    1c9a:	14 ce       	rjmp	.-984    	; 0x18c4 <color(char)+0x1f0>
    1c9c:	8c 1b       	sub	r24, r28
    1c9e:	9d 0b       	sbc	r25, r29
    1ca0:	8c 15       	cp	r24, r12
    1ca2:	9d 05       	cpc	r25, r13
    1ca4:	0c f0       	brlt	.+2      	; 0x1ca8 <color(char)+0x5d4>
    1ca6:	0e ce       	rjmp	.-996    	; 0x18c4 <color(char)+0x1f0>
    1ca8:	8e e4       	ldi	r24, 0x4E	; 78
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1cb0:	9e 01       	movw	r18, r28
    1cb2:	28 0f       	add	r18, r24
    1cb4:	39 1f       	adc	r19, r25
    1cb6:	e2 16       	cp	r14, r18
    1cb8:	f3 06       	cpc	r15, r19
    1cba:	0c f0       	brlt	.+2      	; 0x1cbe <color(char)+0x5ea>
    1cbc:	03 ce       	rjmp	.-1018   	; 0x18c4 <color(char)+0x1f0>
    1cbe:	8c 1b       	sub	r24, r28
    1cc0:	9d 0b       	sbc	r25, r29
    1cc2:	8e 15       	cp	r24, r14
    1cc4:	9f 05       	cpc	r25, r15
    1cc6:	0c f0       	brlt	.+2      	; 0x1cca <color(char)+0x5f6>
    1cc8:	fd cd       	rjmp	.-1030   	; 0x18c4 <color(char)+0x1f0>
    1cca:	80 e5       	ldi	r24, 0x50	; 80
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1cd2:	9e 01       	movw	r18, r28
    1cd4:	28 0f       	add	r18, r24
    1cd6:	39 1f       	adc	r19, r25
    1cd8:	02 17       	cp	r16, r18
    1cda:	13 07       	cpc	r17, r19
    1cdc:	0c f0       	brlt	.+2      	; 0x1ce0 <color(char)+0x60c>
    1cde:	f2 cd       	rjmp	.-1052   	; 0x18c4 <color(char)+0x1f0>
    1ce0:	8c 1b       	sub	r24, r28
    1ce2:	9d 0b       	sbc	r25, r29
    1ce4:	80 17       	cp	r24, r16
    1ce6:	91 07       	cpc	r25, r17
    1ce8:	0c f0       	brlt	.+2      	; 0x1cec <color(char)+0x618>
    1cea:	ec cd       	rjmp	.-1064   	; 0x18c4 <color(char)+0x1f0>
    1cec:	82 e5       	ldi	r24, 0x52	; 82
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1cf4:	20 91 17 08 	lds	r18, 0x0817	; 0x800817 <clear>
    1cf8:	30 91 18 08 	lds	r19, 0x0818	; 0x800818 <clear+0x1>
    1cfc:	ae 01       	movw	r20, r28
    1cfe:	48 0f       	add	r20, r24
    1d00:	59 1f       	adc	r21, r25
    1d02:	24 17       	cp	r18, r20
    1d04:	35 07       	cpc	r19, r21
    1d06:	0c f0       	brlt	.+2      	; 0x1d0a <color(char)+0x636>
    1d08:	dd cd       	rjmp	.-1094   	; 0x18c4 <color(char)+0x1f0>
    1d0a:	8c 1b       	sub	r24, r28
    1d0c:	9d 0b       	sbc	r25, r29
    1d0e:	82 17       	cp	r24, r18
    1d10:	93 07       	cpc	r25, r19
    1d12:	0c f4       	brge	.+2      	; 0x1d16 <color(char)+0x642>
    1d14:	69 cf       	rjmp	.-302    	; 0x1be8 <color(char)+0x514>
    1d16:	d6 cd       	rjmp	.-1108   	; 0x18c4 <color(char)+0x1f0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:309
  } else if (select == 2)  // right
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_right_r) + range && red > EEPROM_read_int(red_right_r) - range && green < EEPROM_read_int(red_right_g) + range && green > EEPROM_read_int(red_right_g) - range && blue < EEPROM_read_int(red_right_b) + range && blue > EEPROM_read_int(red_right_b) - range && clear < EEPROM_read_int(red_right_c) + range && clear > EEPROM_read_int(red_right_c) - range)
      color_out = RED;

    else if (green > red && green > blue && red < EEPROM_read_int(green_right_r) + range && red > EEPROM_read_int(green_right_r) - range && green < EEPROM_read_int(green_right_g) + range && green > EEPROM_read_int(green_right_g) - range && blue < EEPROM_read_int(green_right_b) + range && blue > EEPROM_read_int(green_right_b) - range && clear < EEPROM_read_int(green_right_c) + range && clear > EEPROM_read_int(green_right_c) - range)
    1d18:	0e 15       	cp	r16, r14
    1d1a:	1f 05       	cpc	r17, r15
    1d1c:	0c f0       	brlt	.+2      	; 0x1d20 <color(char)+0x64c>
    1d1e:	ab cf       	rjmp	.-170    	; 0x1c76 <color(char)+0x5a2>
    1d20:	84 e4       	ldi	r24, 0x44	; 68
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1d28:	9e 01       	movw	r18, r28
    1d2a:	28 0f       	add	r18, r24
    1d2c:	39 1f       	adc	r19, r25
    1d2e:	c2 16       	cp	r12, r18
    1d30:	d3 06       	cpc	r13, r19
    1d32:	0c f0       	brlt	.+2      	; 0x1d36 <color(char)+0x662>
    1d34:	a0 cf       	rjmp	.-192    	; 0x1c76 <color(char)+0x5a2>
    1d36:	8c 1b       	sub	r24, r28
    1d38:	9d 0b       	sbc	r25, r29
    1d3a:	8c 15       	cp	r24, r12
    1d3c:	9d 05       	cpc	r25, r13
    1d3e:	0c f0       	brlt	.+2      	; 0x1d42 <color(char)+0x66e>
    1d40:	9a cf       	rjmp	.-204    	; 0x1c76 <color(char)+0x5a2>
    1d42:	86 e4       	ldi	r24, 0x46	; 70
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1d4a:	9e 01       	movw	r18, r28
    1d4c:	28 0f       	add	r18, r24
    1d4e:	39 1f       	adc	r19, r25
    1d50:	e2 16       	cp	r14, r18
    1d52:	f3 06       	cpc	r15, r19
    1d54:	0c f0       	brlt	.+2      	; 0x1d58 <color(char)+0x684>
    1d56:	8f cf       	rjmp	.-226    	; 0x1c76 <color(char)+0x5a2>
    1d58:	8c 1b       	sub	r24, r28
    1d5a:	9d 0b       	sbc	r25, r29
    1d5c:	8e 15       	cp	r24, r14
    1d5e:	9f 05       	cpc	r25, r15
    1d60:	0c f0       	brlt	.+2      	; 0x1d64 <color(char)+0x690>
    1d62:	89 cf       	rjmp	.-238    	; 0x1c76 <color(char)+0x5a2>
    1d64:	88 e4       	ldi	r24, 0x48	; 72
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1d6c:	9e 01       	movw	r18, r28
    1d6e:	28 0f       	add	r18, r24
    1d70:	39 1f       	adc	r19, r25
    1d72:	02 17       	cp	r16, r18
    1d74:	13 07       	cpc	r17, r19
    1d76:	0c f0       	brlt	.+2      	; 0x1d7a <color(char)+0x6a6>
    1d78:	7e cf       	rjmp	.-260    	; 0x1c76 <color(char)+0x5a2>
    1d7a:	8c 1b       	sub	r24, r28
    1d7c:	9d 0b       	sbc	r25, r29
    1d7e:	80 17       	cp	r24, r16
    1d80:	91 07       	cpc	r25, r17
    1d82:	0c f0       	brlt	.+2      	; 0x1d86 <color(char)+0x6b2>
    1d84:	78 cf       	rjmp	.-272    	; 0x1c76 <color(char)+0x5a2>
    1d86:	8a e4       	ldi	r24, 0x4A	; 74
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1d8e:	20 91 17 08 	lds	r18, 0x0817	; 0x800817 <clear>
    1d92:	30 91 18 08 	lds	r19, 0x0818	; 0x800818 <clear+0x1>
    1d96:	ae 01       	movw	r20, r28
    1d98:	48 0f       	add	r20, r24
    1d9a:	59 1f       	adc	r21, r25
    1d9c:	24 17       	cp	r18, r20
    1d9e:	35 07       	cpc	r19, r21
    1da0:	0c f0       	brlt	.+2      	; 0x1da4 <color(char)+0x6d0>
    1da2:	69 cf       	rjmp	.-302    	; 0x1c76 <color(char)+0x5a2>
    1da4:	8c 1b       	sub	r24, r28
    1da6:	9d 0b       	sbc	r25, r29
    1da8:	82 17       	cp	r24, r18
    1daa:	93 07       	cpc	r25, r19
    1dac:	0c f0       	brlt	.+2      	; 0x1db0 <color(char)+0x6dc>
    1dae:	63 cf       	rjmp	.-314    	; 0x1c76 <color(char)+0x5a2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:310
      color_out = GREEN;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:325
    green >= (EEPROM_read_int(silver_right_g) - range) && green <= (EEPROM_read_int(silver_right_g) + range) &&
    blue >= (EEPROM_read_int(silver_right_b) - range) && blue <= (EEPROM_read_int(silver_right_b) + range) &&
    clear <= (EEPROM_read_int(silver_right_c) + range) && clear >= (EEPROM_read_int(silver_right_c) - range)
   )
    {
        color_out = SILVER;
    1db4:	90 93 c5 07 	sts	0x07C5, r25	; 0x8007c5 <color_out+0x1>
    1db8:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <color_out>
    1dbc:	21 ce       	rjmp	.-958    	; 0x1a00 <color(char)+0x32c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:315
      color_out = GREEN;

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_right_r) + range && red > EEPROM_read_int(blue_right_r) - range && green < EEPROM_read_int(blue_right_g) + range && green > EEPROM_read_int(blue_right_g) - range && blue < EEPROM_read_int(blue_right_b) + range && blue > EEPROM_read_int(blue_right_b) - range && clear < EEPROM_read_int(blue_right_c) + range && clear > EEPROM_read_int(blue_right_c) - range)
      color_out = BLUE;

    else if (red < EEPROM_read_int(yellow_right_r) + range && red > EEPROM_read_int(yellow_right_r) - range && green < EEPROM_read_int(yellow_right_g) + range && green > EEPROM_read_int(yellow_right_g) - range && blue < EEPROM_read_int(yellow_right_b) + range && blue > EEPROM_read_int(yellow_right_b) - range && clear < EEPROM_read_int(yellow_right_c) + range && clear > EEPROM_read_int(yellow_right_c) - range)
    1dbe:	8c 1b       	sub	r24, r28
    1dc0:	9d 0b       	sbc	r25, r29
    1dc2:	8c 15       	cp	r24, r12
    1dc4:	9d 05       	cpc	r25, r13
    1dc6:	0c f0       	brlt	.+2      	; 0x1dca <color(char)+0x6f6>
    1dc8:	88 cd       	rjmp	.-1264   	; 0x18da <color(char)+0x206>
    1dca:	86 e5       	ldi	r24, 0x56	; 86
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1dd2:	9e 01       	movw	r18, r28
    1dd4:	28 0f       	add	r18, r24
    1dd6:	39 1f       	adc	r19, r25
    1dd8:	e2 16       	cp	r14, r18
    1dda:	f3 06       	cpc	r15, r19
    1ddc:	0c f0       	brlt	.+2      	; 0x1de0 <color(char)+0x70c>
    1dde:	7d cd       	rjmp	.-1286   	; 0x18da <color(char)+0x206>
    1de0:	8c 1b       	sub	r24, r28
    1de2:	9d 0b       	sbc	r25, r29
    1de4:	8e 15       	cp	r24, r14
    1de6:	9f 05       	cpc	r25, r15
    1de8:	0c f0       	brlt	.+2      	; 0x1dec <color(char)+0x718>
    1dea:	77 cd       	rjmp	.-1298   	; 0x18da <color(char)+0x206>
    1dec:	88 e5       	ldi	r24, 0x58	; 88
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1df4:	9e 01       	movw	r18, r28
    1df6:	28 0f       	add	r18, r24
    1df8:	39 1f       	adc	r19, r25
    1dfa:	02 17       	cp	r16, r18
    1dfc:	13 07       	cpc	r17, r19
    1dfe:	0c f0       	brlt	.+2      	; 0x1e02 <color(char)+0x72e>
    1e00:	6c cd       	rjmp	.-1320   	; 0x18da <color(char)+0x206>
    1e02:	8c 1b       	sub	r24, r28
    1e04:	9d 0b       	sbc	r25, r29
    1e06:	80 17       	cp	r24, r16
    1e08:	91 07       	cpc	r25, r17
    1e0a:	0c f0       	brlt	.+2      	; 0x1e0e <color(char)+0x73a>
    1e0c:	66 cd       	rjmp	.-1332   	; 0x18da <color(char)+0x206>
    1e0e:	8a e5       	ldi	r24, 0x5A	; 90
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    1e16:	20 91 17 08 	lds	r18, 0x0817	; 0x800817 <clear>
    1e1a:	30 91 18 08 	lds	r19, 0x0818	; 0x800818 <clear+0x1>
    1e1e:	ae 01       	movw	r20, r28
    1e20:	48 0f       	add	r20, r24
    1e22:	59 1f       	adc	r21, r25
    1e24:	24 17       	cp	r18, r20
    1e26:	35 07       	cpc	r19, r21
    1e28:	0c f0       	brlt	.+2      	; 0x1e2c <color(char)+0x758>
    1e2a:	57 cd       	rjmp	.-1362   	; 0x18da <color(char)+0x206>
    1e2c:	8c 1b       	sub	r24, r28
    1e2e:	9d 0b       	sbc	r25, r29
    1e30:	82 17       	cp	r24, r18
    1e32:	93 07       	cpc	r25, r19
    1e34:	0c f4       	brge	.+2      	; 0x1e38 <color(char)+0x764>
    1e36:	18 cf       	rjmp	.-464    	; 0x1c68 <color(char)+0x594>
    1e38:	50 cd       	rjmp	.-1376   	; 0x18da <color(char)+0x206>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:325
    green >= (EEPROM_read_int(silver_right_g) - range) && green <= (EEPROM_read_int(silver_right_g) + range) &&
    blue >= (EEPROM_read_int(silver_right_b) - range) && blue <= (EEPROM_read_int(silver_right_b) + range) &&
    clear <= (EEPROM_read_int(silver_right_c) + range) && clear >= (EEPROM_read_int(silver_right_c) - range)
   )
    {
        color_out = SILVER;
    1e3a:	85 e0       	ldi	r24, 0x05	; 5
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	ba cf       	rjmp	.-140    	; 0x1db4 <color(char)+0x6e0>

00001e40 <__vector_16>:
__vector_16():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1e40:	1f 92       	push	r1
    1e42:	0f 92       	push	r0
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	0f 92       	push	r0
    1e48:	11 24       	eor	r1, r1
    1e4a:	4f 93       	push	r20
    1e4c:	5f 93       	push	r21
    1e4e:	6f 93       	push	r22
    1e50:	7f 93       	push	r23
    1e52:	8f 93       	push	r24
    1e54:	9f 93       	push	r25
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    1e56:	40 91 1b 08 	lds	r20, 0x081B	; 0x80081b <timer0_millis>
    1e5a:	50 91 1c 08 	lds	r21, 0x081C	; 0x80081c <timer0_millis+0x1>
    1e5e:	60 91 1d 08 	lds	r22, 0x081D	; 0x80081d <timer0_millis+0x2>
    1e62:	70 91 1e 08 	lds	r23, 0x081E	; 0x80081e <timer0_millis+0x3>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    1e66:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <timer0_fract>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:174

  f += FRACT_INC FRACT_INC_PLUS;

#ifdef CORRECT_EXACT_MILLIS
  // correct millis () to be exact for certain clocks
  if (timer0_exact == CORRECT_ROLL - 1) {
    1e6a:	90 91 19 08 	lds	r25, 0x0819	; 0x800819 <timer0_exact.2342>
    1e6e:	92 30       	cpi	r25, 0x02	; 2
    1e70:	f9 f4       	brne	.+62     	; 0x1eb0 <__vector_16+0x70>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:170
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
  unsigned char f = timer0_fract;

  f += FRACT_INC FRACT_INC_PLUS;
    1e72:	83 5d       	subi	r24, 0xD3	; 211
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:175

#ifdef CORRECT_EXACT_MILLIS
  // correct millis () to be exact for certain clocks
  if (timer0_exact == CORRECT_ROLL - 1) {
    timer0_exact = 0;
    1e74:	10 92 19 08 	sts	0x0819, r1	; 0x800819 <timer0_exact.2342>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    1e78:	8d 37       	cpi	r24, 0x7D	; 125
    1e7a:	f8 f0       	brcs	.+62     	; 0x1eba <__vector_16+0x7a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    1e7c:	8d 57       	subi	r24, 0x7D	; 125
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    1e7e:	4e 5f       	subi	r20, 0xFE	; 254
    1e80:	5f 4f       	sbci	r21, 0xFF	; 255
    1e82:	6f 4f       	sbci	r22, 0xFF	; 255
    1e84:	7f 4f       	sbci	r23, 0xFF	; 255
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    1e86:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <timer0_fract>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    1e8a:	40 93 1b 08 	sts	0x081B, r20	; 0x80081b <timer0_millis>
    1e8e:	50 93 1c 08 	sts	0x081C, r21	; 0x80081c <timer0_millis+0x1>
    1e92:	60 93 1d 08 	sts	0x081D, r22	; 0x80081d <timer0_millis+0x2>
    1e96:	70 93 1e 08 	sts	0x081E, r23	; 0x80081e <timer0_millis+0x3>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:213
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
#endif
}
    1e9a:	9f 91       	pop	r25
    1e9c:	8f 91       	pop	r24
    1e9e:	7f 91       	pop	r23
    1ea0:	6f 91       	pop	r22
    1ea2:	5f 91       	pop	r21
    1ea4:	4f 91       	pop	r20
    1ea6:	0f 90       	pop	r0
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	0f 90       	pop	r0
    1eac:	1f 90       	pop	r1
    1eae:	18 95       	reti
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:181
#ifdef CORRECT_LO
    ++f;
#endif
  }
  else {
    ++timer0_exact;
    1eb0:	9f 5f       	subi	r25, 0xFF	; 255
    1eb2:	90 93 19 08 	sts	0x0819, r25	; 0x800819 <timer0_exact.2342>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:183
#ifdef CORRECT_HI
    ++f;
    1eb6:	82 5d       	subi	r24, 0xD2	; 210
    1eb8:	df cf       	rjmp	.-66     	; 0x1e78 <__vector_16+0x38>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    1eba:	4f 5f       	subi	r20, 0xFF	; 255
    1ebc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ebe:	6f 4f       	sbci	r22, 0xFF	; 255
    1ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec2:	e1 cf       	rjmp	.-62     	; 0x1e86 <__vector_16+0x46>

00001ec4 <__vector_31>:
__vector_31():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial1.cpp:59
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1ec4:	1f 92       	push	r1
    1ec6:	0f 92       	push	r0
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	0f 92       	push	r0
    1ecc:	11 24       	eor	r1, r1
    1ece:	0b b6       	in	r0, 0x3b	; 59
    1ed0:	0f 92       	push	r0
    1ed2:	2f 93       	push	r18
    1ed4:	3f 93       	push	r19
    1ed6:	4f 93       	push	r20
    1ed8:	5f 93       	push	r21
    1eda:	6f 93       	push	r22
    1edc:	7f 93       	push	r23
    1ede:	8f 93       	push	r24
    1ee0:	9f 93       	push	r25
    1ee2:	af 93       	push	r26
    1ee4:	bf 93       	push	r27
    1ee6:	ef 93       	push	r30
    1ee8:	ff 93       	push	r31
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial1.cpp:60
  Serial1._tx_udr_empty_irq();
    1eea:	8e eb       	ldi	r24, 0xBE	; 190
    1eec:	98 e0       	ldi	r25, 0x08	; 8
    1eee:	0e 94 01 04 	call	0x802	; 0x802 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial1.cpp:61
}
    1ef2:	ff 91       	pop	r31
    1ef4:	ef 91       	pop	r30
    1ef6:	bf 91       	pop	r27
    1ef8:	af 91       	pop	r26
    1efa:	9f 91       	pop	r25
    1efc:	8f 91       	pop	r24
    1efe:	7f 91       	pop	r23
    1f00:	6f 91       	pop	r22
    1f02:	5f 91       	pop	r21
    1f04:	4f 91       	pop	r20
    1f06:	3f 91       	pop	r19
    1f08:	2f 91       	pop	r18
    1f0a:	0f 90       	pop	r0
    1f0c:	0b be       	out	0x3b, r0	; 59
    1f0e:	0f 90       	pop	r0
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	0f 90       	pop	r0
    1f14:	1f 90       	pop	r1
    1f16:	18 95       	reti

00001f18 <__vector_30>:
__vector_30():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial1.cpp:48
#elif defined(USART1_RXC_vect)
ISR(USART1_RXC_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1f18:	1f 92       	push	r1
    1f1a:	0f 92       	push	r0
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	0f 92       	push	r0
    1f20:	11 24       	eor	r1, r1
    1f22:	0b b6       	in	r0, 0x3b	; 59
    1f24:	0f 92       	push	r0
    1f26:	2f 93       	push	r18
    1f28:	8f 93       	push	r24
    1f2a:	9f 93       	push	r25
    1f2c:	ef 93       	push	r30
    1f2e:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1f30:	e0 91 ce 08 	lds	r30, 0x08CE	; 0x8008ce <Serial1+0x10>
    1f34:	f0 91 cf 08 	lds	r31, 0x08CF	; 0x8008cf <Serial1+0x11>
    1f38:	80 81       	ld	r24, Z
    1f3a:	e0 91 d4 08 	lds	r30, 0x08D4	; 0x8008d4 <Serial1+0x16>
    1f3e:	f0 91 d5 08 	lds	r31, 0x08D5	; 0x8008d5 <Serial1+0x17>
    1f42:	82 fd       	sbrc	r24, 2
    1f44:	1d c0       	rjmp	.+58     	; 0x1f80 <__vector_30+0x68>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1f46:	90 81       	ld	r25, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1f48:	80 91 d7 08 	lds	r24, 0x08D7	; 0x8008d7 <Serial1+0x19>
    1f4c:	8f 5f       	subi	r24, 0xFF	; 255
    1f4e:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1f50:	20 91 d8 08 	lds	r18, 0x08D8	; 0x8008d8 <Serial1+0x1a>
    1f54:	82 17       	cp	r24, r18
    1f56:	41 f0       	breq	.+16     	; 0x1f68 <__vector_30+0x50>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    1f58:	e0 91 d7 08 	lds	r30, 0x08D7	; 0x8008d7 <Serial1+0x19>
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	e2 54       	subi	r30, 0x42	; 66
    1f60:	f7 4f       	sbci	r31, 0xF7	; 247
    1f62:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    1f64:	80 93 d7 08 	sts	0x08D7, r24	; 0x8008d7 <Serial1+0x19>
__vector_30():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
  Serial1._rx_complete_irq();
}
    1f68:	ff 91       	pop	r31
    1f6a:	ef 91       	pop	r30
    1f6c:	9f 91       	pop	r25
    1f6e:	8f 91       	pop	r24
    1f70:	2f 91       	pop	r18
    1f72:	0f 90       	pop	r0
    1f74:	0b be       	out	0x3b, r0	; 59
    1f76:	0f 90       	pop	r0
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	0f 90       	pop	r0
    1f7c:	1f 90       	pop	r1
    1f7e:	18 95       	reti
_rx_complete_irq():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1f80:	80 81       	ld	r24, Z
    1f82:	f2 cf       	rjmp	.-28     	; 0x1f68 <__vector_30+0x50>

00001f84 <__vector_19>:
__vector_19():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1f84:	1f 92       	push	r1
    1f86:	0f 92       	push	r0
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	0f 92       	push	r0
    1f8c:	11 24       	eor	r1, r1
    1f8e:	0b b6       	in	r0, 0x3b	; 59
    1f90:	0f 92       	push	r0
    1f92:	2f 93       	push	r18
    1f94:	3f 93       	push	r19
    1f96:	4f 93       	push	r20
    1f98:	5f 93       	push	r21
    1f9a:	6f 93       	push	r22
    1f9c:	7f 93       	push	r23
    1f9e:	8f 93       	push	r24
    1fa0:	9f 93       	push	r25
    1fa2:	af 93       	push	r26
    1fa4:	bf 93       	push	r27
    1fa6:	ef 93       	push	r30
    1fa8:	ff 93       	push	r31
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    1faa:	8b e5       	ldi	r24, 0x5B	; 91
    1fac:	99 e0       	ldi	r25, 0x09	; 9
    1fae:	0e 94 01 04 	call	0x802	; 0x802 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    1fb2:	ff 91       	pop	r31
    1fb4:	ef 91       	pop	r30
    1fb6:	bf 91       	pop	r27
    1fb8:	af 91       	pop	r26
    1fba:	9f 91       	pop	r25
    1fbc:	8f 91       	pop	r24
    1fbe:	7f 91       	pop	r23
    1fc0:	6f 91       	pop	r22
    1fc2:	5f 91       	pop	r21
    1fc4:	4f 91       	pop	r20
    1fc6:	3f 91       	pop	r19
    1fc8:	2f 91       	pop	r18
    1fca:	0f 90       	pop	r0
    1fcc:	0b be       	out	0x3b, r0	; 59
    1fce:	0f 90       	pop	r0
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	0f 90       	pop	r0
    1fd4:	1f 90       	pop	r1
    1fd6:	18 95       	reti

00001fd8 <__vector_18>:
__vector_18():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1fd8:	1f 92       	push	r1
    1fda:	0f 92       	push	r0
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	0f 92       	push	r0
    1fe0:	11 24       	eor	r1, r1
    1fe2:	0b b6       	in	r0, 0x3b	; 59
    1fe4:	0f 92       	push	r0
    1fe6:	2f 93       	push	r18
    1fe8:	8f 93       	push	r24
    1fea:	9f 93       	push	r25
    1fec:	ef 93       	push	r30
    1fee:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1ff0:	e0 91 6b 09 	lds	r30, 0x096B	; 0x80096b <Serial+0x10>
    1ff4:	f0 91 6c 09 	lds	r31, 0x096C	; 0x80096c <Serial+0x11>
    1ff8:	80 81       	ld	r24, Z
    1ffa:	e0 91 71 09 	lds	r30, 0x0971	; 0x800971 <Serial+0x16>
    1ffe:	f0 91 72 09 	lds	r31, 0x0972	; 0x800972 <Serial+0x17>
    2002:	82 fd       	sbrc	r24, 2
    2004:	1d c0       	rjmp	.+58     	; 0x2040 <__vector_18+0x68>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2006:	90 81       	ld	r25, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2008:	80 91 74 09 	lds	r24, 0x0974	; 0x800974 <Serial+0x19>
    200c:	8f 5f       	subi	r24, 0xFF	; 255
    200e:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2010:	20 91 75 09 	lds	r18, 0x0975	; 0x800975 <Serial+0x1a>
    2014:	82 17       	cp	r24, r18
    2016:	41 f0       	breq	.+16     	; 0x2028 <__vector_18+0x50>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    2018:	e0 91 74 09 	lds	r30, 0x0974	; 0x800974 <Serial+0x19>
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	e5 5a       	subi	r30, 0xA5	; 165
    2020:	f6 4f       	sbci	r31, 0xF6	; 246
    2022:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    2024:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <Serial+0x19>
__vector_18():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    2028:	ff 91       	pop	r31
    202a:	ef 91       	pop	r30
    202c:	9f 91       	pop	r25
    202e:	8f 91       	pop	r24
    2030:	2f 91       	pop	r18
    2032:	0f 90       	pop	r0
    2034:	0b be       	out	0x3b, r0	; 59
    2036:	0f 90       	pop	r0
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	0f 90       	pop	r0
    203c:	1f 90       	pop	r1
    203e:	18 95       	reti
_rx_complete_irq():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2040:	80 81       	ld	r24, Z
    2042:	f2 cf       	rjmp	.-28     	; 0x2028 <__vector_18+0x50>

00002044 <__vector_33>:
__vector_33():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:528
  }
  return(flag);
}

ISR(TWI_vect)
{
    2044:	1f 92       	push	r1
    2046:	0f 92       	push	r0
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	0f 92       	push	r0
    204c:	11 24       	eor	r1, r1
    204e:	0b b6       	in	r0, 0x3b	; 59
    2050:	0f 92       	push	r0
    2052:	2f 93       	push	r18
    2054:	3f 93       	push	r19
    2056:	4f 93       	push	r20
    2058:	5f 93       	push	r21
    205a:	6f 93       	push	r22
    205c:	7f 93       	push	r23
    205e:	8f 93       	push	r24
    2060:	9f 93       	push	r25
    2062:	af 93       	push	r26
    2064:	bf 93       	push	r27
    2066:	ef 93       	push	r30
    2068:	ff 93       	push	r31
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:529
  switch(TW_STATUS){
    206a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    206e:	88 7f       	andi	r24, 0xF8	; 248
    2070:	80 36       	cpi	r24, 0x60	; 96
    2072:	09 f4       	brne	.+2      	; 0x2076 <__vector_33+0x32>
    2074:	4d c0       	rjmp	.+154    	; 0x2110 <__vector_33+0xcc>
    2076:	08 f0       	brcs	.+2      	; 0x207a <__vector_33+0x36>
    2078:	40 c0       	rjmp	.+128    	; 0x20fa <__vector_33+0xb6>
    207a:	88 32       	cpi	r24, 0x28	; 40
    207c:	09 f4       	brne	.+2      	; 0x2080 <__vector_33+0x3c>
    207e:	a9 c0       	rjmp	.+338    	; 0x21d2 <__vector_33+0x18e>
    2080:	28 f5       	brcc	.+74     	; 0x20cc <__vector_33+0x88>
    2082:	80 31       	cpi	r24, 0x10	; 16
    2084:	09 f4       	brne	.+2      	; 0x2088 <__vector_33+0x44>
    2086:	9d c0       	rjmp	.+314    	; 0x21c2 <__vector_33+0x17e>
    2088:	c8 f4       	brcc	.+50     	; 0x20bc <__vector_33+0x78>
    208a:	88 23       	and	r24, r24
    208c:	09 f4       	brne	.+2      	; 0x2090 <__vector_33+0x4c>
    208e:	07 c1       	rjmp	.+526    	; 0x229e <__vector_33+0x25a>
    2090:	88 30       	cpi	r24, 0x08	; 8
    2092:	09 f4       	brne	.+2      	; 0x2096 <__vector_33+0x52>
    2094:	96 c0       	rjmp	.+300    	; 0x21c2 <__vector_33+0x17e>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:690
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    2096:	ff 91       	pop	r31
    2098:	ef 91       	pop	r30
    209a:	bf 91       	pop	r27
    209c:	af 91       	pop	r26
    209e:	9f 91       	pop	r25
    20a0:	8f 91       	pop	r24
    20a2:	7f 91       	pop	r23
    20a4:	6f 91       	pop	r22
    20a6:	5f 91       	pop	r21
    20a8:	4f 91       	pop	r20
    20aa:	3f 91       	pop	r19
    20ac:	2f 91       	pop	r18
    20ae:	0f 90       	pop	r0
    20b0:	0b be       	out	0x3b, r0	; 59
    20b2:	0f 90       	pop	r0
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	0f 90       	pop	r0
    20b8:	1f 90       	pop	r1
    20ba:	18 95       	reti
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    20bc:	88 31       	cpi	r24, 0x18	; 24
    20be:	09 f4       	brne	.+2      	; 0x20c2 <__vector_33+0x7e>
    20c0:	88 c0       	rjmp	.+272    	; 0x21d2 <__vector_33+0x18e>
    20c2:	80 32       	cpi	r24, 0x20	; 32
    20c4:	41 f7       	brne	.-48     	; 0x2096 <__vector_33+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:564
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    20c6:	80 93 25 08 	sts	0x0825, r24	; 0x800825 <twi_error>
    20ca:	14 c0       	rjmp	.+40     	; 0x20f4 <__vector_33+0xb0>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    20cc:	80 34       	cpi	r24, 0x40	; 64
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <__vector_33+0x8e>
    20d0:	a5 c0       	rjmp	.+330    	; 0x221c <__vector_33+0x1d8>
    20d2:	40 f4       	brcc	.+16     	; 0x20e4 <__vector_33+0xa0>
    20d4:	80 33       	cpi	r24, 0x30	; 48
    20d6:	b9 f3       	breq	.-18     	; 0x20c6 <__vector_33+0x82>
    20d8:	88 33       	cpi	r24, 0x38	; 56
    20da:	e9 f6       	brne	.-70     	; 0x2096 <__vector_33+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:568
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    20dc:	80 93 25 08 	sts	0x0825, r24	; 0x800825 <twi_error>
twi_reply():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:415
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    20e0:	85 ec       	ldi	r24, 0xC5	; 197
    20e2:	bc c0       	rjmp	.+376    	; 0x225c <__vector_33+0x218>
__vector_33():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    20e4:	80 35       	cpi	r24, 0x50	; 80
    20e6:	09 f4       	brne	.+2      	; 0x20ea <__vector_33+0xa6>
    20e8:	89 c0       	rjmp	.+274    	; 0x21fc <__vector_33+0x1b8>
    20ea:	88 35       	cpi	r24, 0x58	; 88
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <__vector_33+0xac>
    20ee:	9e c0       	rjmp	.+316    	; 0x222c <__vector_33+0x1e8>
    20f0:	88 34       	cpi	r24, 0x48	; 72
    20f2:	89 f6       	brne	.-94     	; 0x2096 <__vector_33+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:687
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    20f4:	0e 94 a3 04 	call	0x946	; 0x946 <twi_stop>
    20f8:	ce cf       	rjmp	.-100    	; 0x2096 <__vector_33+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    20fa:	88 39       	cpi	r24, 0x98	; 152
    20fc:	09 f4       	brne	.+2      	; 0x2100 <__vector_33+0xbc>
    20fe:	94 c0       	rjmp	.+296    	; 0x2228 <__vector_33+0x1e4>
    2100:	38 f5       	brcc	.+78     	; 0x2150 <__vector_33+0x10c>
    2102:	88 37       	cpi	r24, 0x78	; 120
    2104:	29 f0       	breq	.+10     	; 0x2110 <__vector_33+0xcc>
    2106:	50 f4       	brcc	.+20     	; 0x211c <__vector_33+0xd8>
    2108:	88 36       	cpi	r24, 0x68	; 104
    210a:	11 f0       	breq	.+4      	; 0x2110 <__vector_33+0xcc>
    210c:	80 37       	cpi	r24, 0x70	; 112
    210e:	19 f6       	brne	.-122    	; 0x2096 <__vector_33+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:610
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2110:	83 e0       	ldi	r24, 0x03	; 3
    2112:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <twi_state>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:612
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2116:	10 92 08 08 	sts	0x0808, r1	; 0x800808 <twi_rxBufferIndex>
    211a:	57 c0       	rjmp	.+174    	; 0x21ca <__vector_33+0x186>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    211c:	88 38       	cpi	r24, 0x88	; 136
    211e:	09 f4       	brne	.+2      	; 0x2122 <__vector_33+0xde>
    2120:	83 c0       	rjmp	.+262    	; 0x2228 <__vector_33+0x1e4>
    2122:	80 39       	cpi	r24, 0x90	; 144
    2124:	19 f0       	breq	.+6      	; 0x212c <__vector_33+0xe8>
    2126:	80 38       	cpi	r24, 0x80	; 128
    2128:	09 f0       	breq	.+2      	; 0x212c <__vector_33+0xe8>
    212a:	b5 cf       	rjmp	.-150    	; 0x2096 <__vector_33+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:618
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    212c:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <twi_rxBufferIndex>
    2130:	80 32       	cpi	r24, 0x20	; 32
    2132:	08 f0       	brcs	.+2      	; 0x2136 <__vector_33+0xf2>
    2134:	79 c0       	rjmp	.+242    	; 0x2228 <__vector_33+0x1e4>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:620
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2136:	e0 91 08 08 	lds	r30, 0x0808	; 0x800808 <twi_rxBufferIndex>
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	8e 0f       	add	r24, r30
    213e:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <twi_rxBufferIndex>
    2142:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	e8 51       	subi	r30, 0x18	; 24
    214a:	f8 4f       	sbci	r31, 0xF8	; 248
    214c:	80 83       	st	Z, r24
    214e:	3d c0       	rjmp	.+122    	; 0x21ca <__vector_33+0x186>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2150:	80 3b       	cpi	r24, 0xB0	; 176
    2152:	39 f0       	breq	.+14     	; 0x2162 <__vector_33+0x11e>
    2154:	e0 f4       	brcc	.+56     	; 0x218e <__vector_33+0x14a>
    2156:	80 3a       	cpi	r24, 0xA0	; 160
    2158:	09 f4       	brne	.+2      	; 0x215c <__vector_33+0x118>
    215a:	85 c0       	rjmp	.+266    	; 0x2266 <__vector_33+0x222>
    215c:	88 3a       	cpi	r24, 0xA8	; 168
    215e:	09 f0       	breq	.+2      	; 0x2162 <__vector_33+0x11e>
    2160:	9a cf       	rjmp	.-204    	; 0x2096 <__vector_33+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:649

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2162:	84 e0       	ldi	r24, 0x04	; 4
    2164:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <twi_state>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:651
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2168:	10 92 e7 07 	sts	0x07E7, r1	; 0x8007e7 <twi_txBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:653
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    216c:	10 92 e6 07 	sts	0x07E6, r1	; 0x8007e6 <twi_txBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:656
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2170:	e0 91 0b 08 	lds	r30, 0x080B	; 0x80080b <twi_onSlaveTransmit>
    2174:	f0 91 0c 08 	lds	r31, 0x080C	; 0x80080c <twi_onSlaveTransmit+0x1>
    2178:	09 95       	icall
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:658
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    217a:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <twi_txBufferLength>
    217e:	81 11       	cpse	r24, r1
    2180:	0f c0       	rjmp	.+30     	; 0x21a0 <__vector_33+0x15c>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:659
        twi_txBufferLength = 1;
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <twi_txBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:660
        twi_txBuffer[0] = 0x00;
    2188:	10 92 c6 07 	sts	0x07C6, r1	; 0x8007c6 <twi_txBuffer>
    218c:	09 c0       	rjmp	.+18     	; 0x21a0 <__vector_33+0x15c>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    218e:	80 3c       	cpi	r24, 0xC0	; 192
    2190:	09 f4       	brne	.+2      	; 0x2194 <__vector_33+0x150>
    2192:	a6 cf       	rjmp	.-180    	; 0x20e0 <__vector_33+0x9c>
    2194:	88 3c       	cpi	r24, 0xC8	; 200
    2196:	09 f4       	brne	.+2      	; 0x219a <__vector_33+0x156>
    2198:	a3 cf       	rjmp	.-186    	; 0x20e0 <__vector_33+0x9c>
    219a:	88 3b       	cpi	r24, 0xB8	; 184
    219c:	09 f0       	breq	.+2      	; 0x21a0 <__vector_33+0x15c>
    219e:	7b cf       	rjmp	.-266    	; 0x2096 <__vector_33+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:666
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    21a0:	e0 91 e7 07 	lds	r30, 0x07E7	; 0x8007e7 <twi_txBufferIndex>
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	8e 0f       	add	r24, r30
    21a8:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <twi_txBufferIndex>
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	ea 53       	subi	r30, 0x3A	; 58
    21b0:	f8 4f       	sbci	r31, 0xF8	; 248
    21b2:	80 81       	ld	r24, Z
    21b4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:668
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    21b8:	90 91 e7 07 	lds	r25, 0x07E7	; 0x8007e7 <twi_txBufferIndex>
    21bc:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <twi_txBufferLength>
    21c0:	31 c0       	rjmp	.+98     	; 0x2224 <__vector_33+0x1e0>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:534
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    21c2:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <twi_slarw>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:544
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    21c6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
twi_reply():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:415
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    21ca:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:417
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    21cc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    21d0:	62 cf       	rjmp	.-316    	; 0x2096 <__vector_33+0x52>
__vector_33():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:542

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    21d2:	90 91 22 08 	lds	r25, 0x0822	; 0x800822 <twi_masterBufferIndex>
    21d6:	80 91 21 08 	lds	r24, 0x0821	; 0x800821 <twi_masterBufferLength>
    21da:	98 17       	cp	r25, r24
    21dc:	b8 f5       	brcc	.+110    	; 0x224c <__vector_33+0x208>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:544
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    21de:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <twi_masterBuffer>
    21e2:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <twi_masterBuffer+0x1>
    21e6:	e0 91 22 08 	lds	r30, 0x0822	; 0x800822 <twi_masterBufferIndex>
    21ea:	21 e0       	ldi	r18, 0x01	; 1
    21ec:	2e 0f       	add	r18, r30
    21ee:	20 93 22 08 	sts	0x0822, r18	; 0x800822 <twi_masterBufferIndex>
    21f2:	e8 0f       	add	r30, r24
    21f4:	f9 2f       	mov	r31, r25
    21f6:	f1 1d       	adc	r31, r1
    21f8:	80 81       	ld	r24, Z
    21fa:	e5 cf       	rjmp	.-54     	; 0x21c6 <__vector_33+0x182>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:575
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    21fc:	20 91 23 08 	lds	r18, 0x0823	; 0x800823 <twi_masterBuffer>
    2200:	30 91 24 08 	lds	r19, 0x0824	; 0x800824 <twi_masterBuffer+0x1>
    2204:	e0 91 22 08 	lds	r30, 0x0822	; 0x800822 <twi_masterBufferIndex>
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	8e 0f       	add	r24, r30
    220c:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <twi_masterBufferIndex>
    2210:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    2214:	e2 0f       	add	r30, r18
    2216:	f3 2f       	mov	r31, r19
    2218:	f1 1d       	adc	r31, r1
    221a:	80 83       	st	Z, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:579
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    221c:	90 91 22 08 	lds	r25, 0x0822	; 0x800822 <twi_masterBufferIndex>
    2220:	80 91 21 08 	lds	r24, 0x0821	; 0x800821 <twi_masterBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:668
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2224:	98 17       	cp	r25, r24
    2226:	88 f2       	brcs	.-94     	; 0x21ca <__vector_33+0x186>
twi_reply():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:417
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2228:	85 e8       	ldi	r24, 0x85	; 133
    222a:	d0 cf       	rjmp	.-96     	; 0x21cc <__vector_33+0x188>
__vector_33():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:587
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    222c:	20 91 23 08 	lds	r18, 0x0823	; 0x800823 <twi_masterBuffer>
    2230:	30 91 24 08 	lds	r19, 0x0824	; 0x800824 <twi_masterBuffer+0x1>
    2234:	e0 91 22 08 	lds	r30, 0x0822	; 0x800822 <twi_masterBufferIndex>
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	8e 0f       	add	r24, r30
    223c:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <twi_masterBufferIndex>
    2240:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    2244:	e2 0f       	add	r30, r18
    2246:	f3 2f       	mov	r31, r19
    2248:	f1 1d       	adc	r31, r1
    224a:	80 83       	st	Z, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:588
  if (twi_sendStop)
    224c:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <twi_sendStop>
    2250:	81 11       	cpse	r24, r1
    2252:	50 cf       	rjmp	.-352    	; 0x20f4 <__vector_33+0xb0>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:591
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <twi_inRepStart>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:595
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    225a:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:415
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    225c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
__vector_33():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:679
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2260:	10 92 27 08 	sts	0x0827, r1	; 0x800827 <twi_state>
    2264:	18 cf       	rjmp	.-464    	; 0x2096 <__vector_33+0x52>
twi_releaseBus():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:468
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2266:	85 ec       	ldi	r24, 0xC5	; 197
    2268:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:471

  // update twi state
  twi_state = TWI_READY;
    226c:	10 92 27 08 	sts	0x0827, r1	; 0x800827 <twi_state>
__vector_33():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:631
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    2270:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <twi_rxBufferIndex>
    2274:	80 32       	cpi	r24, 0x20	; 32
    2276:	30 f4       	brcc	.+12     	; 0x2284 <__vector_33+0x240>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:632
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2278:	e0 91 08 08 	lds	r30, 0x0808	; 0x800808 <twi_rxBufferIndex>
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	e8 51       	subi	r30, 0x18	; 24
    2280:	f8 4f       	sbci	r31, 0xF8	; 248
    2282:	10 82       	st	Z, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:635
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2284:	60 91 08 08 	lds	r22, 0x0808	; 0x800808 <twi_rxBufferIndex>
    2288:	70 e0       	ldi	r23, 0x00	; 0
    228a:	e0 91 09 08 	lds	r30, 0x0809	; 0x800809 <twi_onSlaveReceive>
    228e:	f0 91 0a 08 	lds	r31, 0x080A	; 0x80080a <twi_onSlaveReceive+0x1>
    2292:	88 ee       	ldi	r24, 0xE8	; 232
    2294:	97 e0       	ldi	r25, 0x07	; 7
    2296:	09 95       	icall
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:637
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2298:	10 92 08 08 	sts	0x0808, r1	; 0x800808 <twi_rxBufferIndex>
    229c:	fc ce       	rjmp	.-520    	; 0x2096 <__vector_33+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:686

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    229e:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <twi_error>
    22a2:	28 cf       	rjmp	.-432    	; 0x20f4 <__vector_33+0xb0>

000022a4 <countPulseASM>:
countPulseASM():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:62

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
    22a4:	cf 92       	push	r12
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:63
    push r13   ;   ;  131 pushqi1/1 [length = 1]
    22a6:	df 92       	push	r13
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:64
    push r14   ;   ;  132 pushqi1/1 [length = 1]
    22a8:	ef 92       	push	r14
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:65
    push r15   ;   ;  133 pushqi1/1 [length = 1]
    22aa:	ff 92       	push	r15
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:66
    push r16   ;   ;  134 pushqi1/1 [length = 1]
    22ac:	0f 93       	push	r16
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:67
    push r17   ;   ;  135 pushqi1/1 [length = 1]
    22ae:	1f 93       	push	r17
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:72
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
    22b0:	e8 2f       	mov	r30, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:73
    mov r31,r25  ;  port, port
    22b2:	f9 2f       	mov	r31, r25
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:79
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
    22b4:	05 c0       	rjmp	.+10     	; 0x22c0 <countPulseASM+0x1c>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:83
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
    22b6:	01 50       	subi	r16, 0x01	; 1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:84
    sbc r17, r1   ;  maxloops
    22b8:	11 09       	sbc	r17, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:85
    sbc r18, r1   ;  maxloops
    22ba:	21 09       	sbc	r18, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:86
    sbc r19, r1   ;  maxloops
    22bc:	31 09       	sbc	r19, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:87
    breq .L13  ; ,   ;  19  branch  [length = 1]
    22be:	61 f1       	breq	.+88     	; 0x2318 <countPulseASM+0x74>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:91
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
    22c0:	90 81       	ld	r25, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:92
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
    22c2:	96 23       	and	r25, r22
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:93
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
    22c4:	94 17       	cp	r25, r20
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:94
    breq .L4   ; ,   ;  26  branch  [length = 1]
    22c6:	b9 f3       	breq	.-18     	; 0x22b6 <countPulseASM+0x12>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:95
    rjmp .L6   ;   ;  184 jump  [length = 1]
    22c8:	05 c0       	rjmp	.+10     	; 0x22d4 <countPulseASM+0x30>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:104
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
    22ca:	01 50       	subi	r16, 0x01	; 1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:105
    sbc r17, r1   ;  maxloops
    22cc:	11 09       	sbc	r17, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:106
    sbc r18, r1   ;  maxloops
    22ce:	21 09       	sbc	r18, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:107
    sbc r19, r1   ;  maxloops
    22d0:	31 09       	sbc	r19, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:108
    breq .L13  ; ,   ;  33  branch  [length = 1]
    22d2:	11 f1       	breq	.+68     	; 0x2318 <countPulseASM+0x74>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:112
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
    22d4:	90 81       	ld	r25, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:113
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
    22d6:	96 23       	and	r25, r22
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:114
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
    22d8:	94 13       	cpse	r25, r20
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:115
    rjmp .L7   ;
    22da:	f7 cf       	rjmp	.-18     	; 0x22ca <countPulseASM+0x26>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:116
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
    22dc:	c1 2c       	mov	r12, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:117
    mov r13, r1   ;  width
    22de:	d1 2c       	mov	r13, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:118
    mov r14, r1   ;  width
    22e0:	e1 2c       	mov	r14, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:119
    mov r15, r1   ;  width
    22e2:	f1 2c       	mov	r15, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:120
    rjmp .L9   ;   ;  186 jump  [length = 1]
    22e4:	0a c0       	rjmp	.+20     	; 0x22fa <countPulseASM+0x56>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:129
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
    22e6:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:130
    sub r12,r24  ;  width,
    22e8:	c8 1a       	sub	r12, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:131
    sbc r13,r24  ;  width,
    22ea:	d8 0a       	sbc	r13, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:132
    sbc r14,r24  ;  width,
    22ec:	e8 0a       	sbc	r14, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:133
    sbc r15,r24  ;  width,
    22ee:	f8 0a       	sbc	r15, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:134
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
    22f0:	0c 15       	cp	r16, r12
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:135
    cpc r17,r13  ;  maxloops, width
    22f2:	1d 05       	cpc	r17, r13
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:136
    cpc r18,r14  ;  maxloops, width
    22f4:	2e 05       	cpc	r18, r14
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:137
    cpc r19,r15  ;  maxloops, width
    22f6:	3f 05       	cpc	r19, r15
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:138
    breq .L13  ; ,   ;  52  branch  [length = 1]
    22f8:	79 f0       	breq	.+30     	; 0x2318 <countPulseASM+0x74>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:142
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
    22fa:	80 81       	ld	r24, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:143
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
    22fc:	86 23       	and	r24, r22
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:144
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
    22fe:	84 17       	cp	r24, r20
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:145
    breq .L10  ; ,   ;  64  branch  [length = 1]
    2300:	91 f3       	breq	.-28     	; 0x22e6 <countPulseASM+0x42>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:151
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
    2302:	6c 2d       	mov	r22, r12
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:152
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
    2304:	7d 2d       	mov	r23, r13
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:153
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
    2306:	8e 2d       	mov	r24, r14
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:154
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
    2308:	9f 2d       	mov	r25, r15
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:157
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
    230a:	1f 91       	pop	r17
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:158
    pop r16  ;   ;  172 popqi [length = 1]
    230c:	0f 91       	pop	r16
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:159
    pop r15  ;   ;  173 popqi [length = 1]
    230e:	ff 90       	pop	r15
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:160
    pop r14  ;   ;  174 popqi [length = 1]
    2310:	ef 90       	pop	r14
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:161
    pop r13  ;   ;  175 popqi [length = 1]
    2312:	df 90       	pop	r13
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:162
    pop r12  ;   ;  176 popqi [length = 1]
    2314:	cf 90       	pop	r12
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:163
    ret  ;  177 return_from_epilogue  [length = 1]
    2316:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:166
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
    2318:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:167
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
    231a:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:168
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
    231c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:169
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
    231e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:172
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
    2320:	1f 91       	pop	r17
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:173
    pop r16  ;   ;  139 popqi [length = 1]
    2322:	0f 91       	pop	r16
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:174
    pop r15  ;   ;  140 popqi [length = 1]
    2324:	ff 90       	pop	r15
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:175
    pop r14  ;   ;  141 popqi [length = 1]
    2326:	ef 90       	pop	r14
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:176
    pop r13  ;   ;  142 popqi [length = 1]
    2328:	df 90       	pop	r13
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:177
    pop r12  ;   ;  143 popqi [length = 1]
    232a:	cf 90       	pop	r12
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.S:178
    ret  ;  144 return_from_epilogue  [length = 1]
    232c:	08 95       	ret

0000232e <update_crc(unsigned short, unsigned short*, unsigned short) [clone .constprop.28]>:
update_crc():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:40
unsigned int puls_cnt;

unsigned char TxBuffer[20];
unsigned short gbpTxBuffer[20], gbpParameter[20], packet[30];

unsigned short update_crc(unsigned short crc_accum, unsigned short *data_blk_ptr, unsigned short data_blk_size)
    232e:	cf 93       	push	r28
    2330:	df 93       	push	r29
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	d2 50       	subi	r29, 0x02	; 2
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:43
{
    unsigned short i, j;
    unsigned short crc_table[256] = {
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	92 e0       	ldi	r25, 0x02	; 2
    2346:	e6 e0       	ldi	r30, 0x06	; 6
    2348:	f1 e0       	ldi	r31, 0x01	; 1
    234a:	de 01       	movw	r26, r28
    234c:	11 96       	adiw	r26, 0x01	; 1
    234e:	01 90       	ld	r0, Z+
    2350:	0d 92       	st	X+, r0
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	e1 f7       	brne	.-8      	; 0x234e <update_crc(unsigned short, unsigned short*, unsigned short) [clone .constprop.28]+0x20>
    2356:	a2 e8       	ldi	r26, 0x82	; 130
    2358:	b8 e0       	ldi	r27, 0x08	; 8
    235a:	2e e9       	ldi	r18, 0x9E	; 158
    235c:	38 e0       	ldi	r19, 0x08	; 8
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:79
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202};

    for (j = 0; j < data_blk_size; j++)
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
    2362:	6d 91       	ld	r22, X+
    2364:	7d 91       	ld	r23, X+
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:80
        crc_accum = (crc_accum << 8) ^ crc_table[i];
    2366:	58 2f       	mov	r21, r24
    2368:	44 27       	eor	r20, r20
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:79
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202};

    for (j = 0; j < data_blk_size; j++)
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
    236a:	e9 2f       	mov	r30, r25
    236c:	ff 27       	eor	r31, r31
    236e:	e6 27       	eor	r30, r22
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:80
        crc_accum = (crc_accum << 8) ^ crc_table[i];
    2370:	ee 0f       	add	r30, r30
    2372:	ff 1f       	adc	r31, r31
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	8c 0f       	add	r24, r28
    237a:	9d 1f       	adc	r25, r29
    237c:	e8 0f       	add	r30, r24
    237e:	f9 1f       	adc	r31, r25
    2380:	80 81       	ld	r24, Z
    2382:	91 81       	ldd	r25, Z+1	; 0x01
    2384:	84 27       	eor	r24, r20
    2386:	95 27       	eor	r25, r21
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:77
        0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252,
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202};

    for (j = 0; j < data_blk_size; j++)
    2388:	2a 17       	cp	r18, r26
    238a:	3b 07       	cpc	r19, r27
    238c:	51 f7       	brne	.-44     	; 0x2362 <update_crc(unsigned short, unsigned short*, unsigned short) [clone .constprop.28]+0x34>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:83
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
        crc_accum = (crc_accum << 8) ^ crc_table[i];
    }
    return crc_accum;
}
    238e:	de 5f       	subi	r29, 0xFE	; 254
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	de bf       	out	0x3e, r29	; 62
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	cd bf       	out	0x3d, r28	; 61
    239a:	df 91       	pop	r29
    239c:	cf 91       	pop	r28
    239e:	08 95       	ret

000023a0 <r26(char, int, int) [clone .constprop.27]>:
r26():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:151
void XL(char ID, int position, int speed)
{
    char Count;
    unsigned short CRC;

    packet[0] = 0xFF;
    23a0:	2f ef       	ldi	r18, 0xFF	; 255
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	30 93 83 08 	sts	0x0883, r19	; 0x800883 <packet+0x1>
    23a8:	20 93 82 08 	sts	0x0882, r18	; 0x800882 <packet>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:152
    packet[1] = 0xFF;
    23ac:	30 93 85 08 	sts	0x0885, r19	; 0x800885 <packet+0x3>
    23b0:	20 93 84 08 	sts	0x0884, r18	; 0x800884 <packet+0x2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:153
    packet[2] = 0xFD;
    23b4:	2d ef       	ldi	r18, 0xFD	; 253
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	30 93 87 08 	sts	0x0887, r19	; 0x800887 <packet+0x5>
    23bc:	20 93 86 08 	sts	0x0886, r18	; 0x800886 <packet+0x4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:154
    packet[3] = 0x00;                   // RESERVED
    23c0:	10 92 89 08 	sts	0x0889, r1	; 0x800889 <packet+0x7>
    23c4:	10 92 88 08 	sts	0x0888, r1	; 0x800888 <packet+0x6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:155
    packet[4] = ID;                     // id
    23c8:	08 2e       	mov	r0, r24
    23ca:	00 0c       	add	r0, r0
    23cc:	99 0b       	sbc	r25, r25
    23ce:	90 93 8b 08 	sts	0x088B, r25	; 0x80088b <packet+0x9>
    23d2:	80 93 8a 08 	sts	0x088A, r24	; 0x80088a <packet+0x8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:156
    packet[5] = 7 + 2;                  // packet lengh L  : packet lengh after packet lengh
    23d6:	89 e0       	ldi	r24, 0x09	; 9
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	90 93 8d 08 	sts	0x088D, r25	; 0x80088d <packet+0xb>
    23de:	80 93 8c 08 	sts	0x088C, r24	; 0x80088c <packet+0xa>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:157
    packet[6] = 0;                      // packet lengh H
    23e2:	10 92 8f 08 	sts	0x088F, r1	; 0x80088f <packet+0xd>
    23e6:	10 92 8e 08 	sts	0x088E, r1	; 0x80088e <packet+0xc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:158
    packet[7] = 3;                      // Instraction
    23ea:	83 e0       	ldi	r24, 0x03	; 3
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	90 93 91 08 	sts	0x0891, r25	; 0x800891 <packet+0xf>
    23f2:	80 93 90 08 	sts	0x0890, r24	; 0x800890 <packet+0xe>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:159
    packet[8] = 30;                     // address L
    23f6:	8e e1       	ldi	r24, 0x1E	; 30
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	90 93 93 08 	sts	0x0893, r25	; 0x800893 <packet+0x11>
    23fe:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <packet+0x10>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:160
    packet[9] = 0;                      // address H
    2402:	10 92 95 08 	sts	0x0895, r1	; 0x800895 <packet+0x13>
    2406:	10 92 94 08 	sts	0x0894, r1	; 0x800894 <packet+0x12>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:161
    packet[10] = position & 255;        // parameter
    240a:	cb 01       	movw	r24, r22
    240c:	99 27       	eor	r25, r25
    240e:	90 93 97 08 	sts	0x0897, r25	; 0x800897 <packet+0x15>
    2412:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <packet+0x14>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:162
    packet[11] = (position >> 8) & 255; // parameter
    2416:	70 93 98 08 	sts	0x0898, r23	; 0x800898 <packet+0x16>
    241a:	10 92 99 08 	sts	0x0899, r1	; 0x800899 <packet+0x17>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:163
    packet[12] = speed & 255;           // parameter
    241e:	82 e3       	ldi	r24, 0x32	; 50
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	90 93 9b 08 	sts	0x089B, r25	; 0x80089b <packet+0x19>
    2426:	80 93 9a 08 	sts	0x089A, r24	; 0x80089a <packet+0x18>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:164
    packet[13] = (speed >> 8) & 255;    // parameter
    242a:	10 92 9d 08 	sts	0x089D, r1	; 0x80089d <packet+0x1b>
    242e:	10 92 9c 08 	sts	0x089C, r1	; 0x80089c <packet+0x1a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:166

    CRC = update_crc(0, packet, 14);
    2432:	0e 94 97 11 	call	0x232e	; 0x232e <update_crc(unsigned short, unsigned short*, unsigned short) [clone .constprop.28]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:167
    packet[14] = CRC & 0xFF;        // CRC_L
    2436:	9c 01       	movw	r18, r24
    2438:	33 27       	eor	r19, r19
    243a:	30 93 9f 08 	sts	0x089F, r19	; 0x80089f <packet+0x1d>
    243e:	20 93 9e 08 	sts	0x089E, r18	; 0x80089e <packet+0x1c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:168
    packet[15] = (CRC >> 8) & 0xFF; // CRC_H
    2442:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <packet+0x1e>
    2446:	10 92 a1 08 	sts	0x08A1, r1	; 0x8008a1 <packet+0x1f>
    244a:	e2 e8       	ldi	r30, 0x82	; 130
    244c:	f8 e0       	ldi	r31, 0x08	; 8
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:172

    for (Count = 0; Count < 16; Count++)
    {
        while (!TXD_READY)
    244e:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    2452:	85 ff       	sbrs	r24, 5
    2454:	fc cf       	rjmp	.-8      	; 0x244e <r26(char, int, int) [clone .constprop.27]+0xae>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:174
            ;
        M_UDR = packet[Count];
    2456:	80 81       	ld	r24, Z
    2458:	32 96       	adiw	r30, 0x02	; 2
    245a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:170

    CRC = update_crc(0, packet, 14);
    packet[14] = CRC & 0xFF;        // CRC_L
    packet[15] = (CRC >> 8) & 0xFF; // CRC_H

    for (Count = 0; Count < 16; Count++)
    245e:	88 e0       	ldi	r24, 0x08	; 8
    2460:	e2 3a       	cpi	r30, 0xA2	; 162
    2462:	f8 07       	cpc	r31, r24
    2464:	a1 f7       	brne	.-24     	; 0x244e <r26(char, int, int) [clone .constprop.27]+0xae>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:176
    {
        while (!TXD_READY)
            ;
        M_UDR = packet[Count];
    }
    while (!CHECK_TXD_FINISH)
    2466:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    246a:	86 ff       	sbrs	r24, 6
    246c:	fc cf       	rjmp	.-8      	; 0x2466 <r26(char, int, int) [clone .constprop.27]+0xc6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:178
        ; // Wait until TXD Shift register empty
    delay(15);
    246e:	6f e0       	ldi	r22, 0x0F	; 15
    2470:	70 e0       	ldi	r23, 0x00	; 0
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	0c 94 0f 03 	jmp	0x61e	; 0x61e <delay>

0000247a <vl(char)>:
vl():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1520
    }
    

  
}}
unsigned int vl(char xv) {
    247a:	cf 93       	push	r28
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1529
  
  // Select the appropriate sensor
  if (xv == 1) {
    // Set MUX pins to select sensor 1
    // B11 Right
     digitalWrite(MUX_A, LOW);
    247c:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1526
  unsigned int vl_dis = 1;
  
  // Your pin manipulation logic here if needed
  
  // Select the appropriate sensor
  if (xv == 1) {
    247e:	81 30       	cpi	r24, 0x01	; 1
    2480:	09 f0       	breq	.+2      	; 0x2484 <vl(char)+0xa>
    2482:	4f c0       	rjmp	.+158    	; 0x2522 <vl(char)+0xa8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1529
    // Set MUX pins to select sensor 1
    // B11 Right
     digitalWrite(MUX_A, LOW);
    2484:	8c e2       	ldi	r24, 0x2C	; 44
    2486:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1530
     digitalWrite(MUX_B, HIGH);
    248a:	61 e0       	ldi	r22, 0x01	; 1
    248c:	8b e2       	ldi	r24, 0x2B	; 43
    248e:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1531
     digitalWrite(MUX_C, LOW);
    2492:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1537
  } else if (xv == 2) {
    // Set MUX pins to select sensor 2
    // B13 Left
     digitalWrite(MUX_A, LOW);
     digitalWrite(MUX_B, LOW);
     digitalWrite(MUX_C, HIGH);
    2494:	8a e2       	ldi	r24, 0x2A	; 42
    2496:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
beginTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:198
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    249a:	c1 e0       	ldi	r28, 0x01	; 1
    249c:	c0 93 28 08 	sts	0x0828, r28	; 0x800828 <TwoWire::transmitting>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:200
  // set address of targeted slave
  txAddress = address;
    24a0:	89 e2       	ldi	r24, 0x29	; 41
    24a2:	80 93 4a 08 	sts	0x084A, r24	; 0x80084a <TwoWire::txAddress>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:202
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    24a6:	10 92 29 08 	sts	0x0829, r1	; 0x800829 <TwoWire::txBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:203
  txBufferLength = 0;
    24aa:	10 92 4b 08 	sts	0x084B, r1	; 0x80084b <TwoWire::txBufferLength>
write():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.h:88
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    24ae:	60 e0       	ldi	r22, 0x00	; 0
    24b0:	88 ef       	ldi	r24, 0xF8	; 248
    24b2:	99 e0       	ldi	r25, 0x09	; 9
    24b4:	0e 94 18 05 	call	0xa30	; 0xa30 <TwoWire::write(unsigned char)>
    24b8:	61 e0       	ldi	r22, 0x01	; 1
    24ba:	88 ef       	ldi	r24, 0xF8	; 248
    24bc:	99 e0       	ldi	r25, 0x09	; 9
    24be:	0e 94 18 05 	call	0xa30	; 0xa30 <TwoWire::write(unsigned char)>
vl():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1544
  
  // Send command to start distance measurement
  Wire.beginTransmission(VL53L0X_ADDRESS);
  Wire.write(VL53L0X_REG_SYSRANGE_START);
  Wire.write(0x01);
  Wire.endTransmission();
    24c2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <TwoWire::endTransmission() [clone .constprop.5]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1547
  
  // Delay for measurement completion
  delay(10); // Adjust delay if needed
    24c6:	6a e0       	ldi	r22, 0x0A	; 10
    24c8:	70 e0       	ldi	r23, 0x00	; 0
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
beginTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:198
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    24d2:	c0 93 28 08 	sts	0x0828, r28	; 0x800828 <TwoWire::transmitting>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:202
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    24d6:	10 92 29 08 	sts	0x0829, r1	; 0x800829 <TwoWire::txBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:203
  txBufferLength = 0;
    24da:	10 92 4b 08 	sts	0x084B, r1	; 0x80084b <TwoWire::txBufferLength>
write():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.h:88
    24de:	6e e1       	ldi	r22, 0x1E	; 30
    24e0:	88 ef       	ldi	r24, 0xF8	; 248
    24e2:	99 e0       	ldi	r25, 0x09	; 9
    24e4:	0e 94 18 05 	call	0xa30	; 0xa30 <TwoWire::write(unsigned char)>
vl():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1552
  
  // Request distance measurement
  Wire.beginTransmission(VL53L0X_ADDRESS);
  Wire.write(VL53L0X_REG_RESULT_RANGE_VAL);
  Wire.endTransmission(false);
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	0e 94 10 01 	call	0x220	; 0x220 <TwoWire::endTransmission(unsigned char) [clone .constprop.10]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1555
  
  // Read distance measurement (2 bytes)
  Wire.requestFrom(VL53L0X_ADDRESS, 2);
    24ee:	62 e0       	ldi	r22, 0x02	; 2
    24f0:	70 e0       	ldi	r23, 0x00	; 0
    24f2:	89 e2       	ldi	r24, 0x29	; 41
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	0e 94 10 08 	call	0x1020	; 0x1020 <TwoWire::requestFrom(int, int) [clone .constprop.6]>
available():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:292
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    24fa:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <TwoWire::rxBufferLength>
    24fe:	90 91 6d 08 	lds	r25, 0x086D	; 0x80086d <TwoWire::rxBufferIndex>
    2502:	89 1b       	sub	r24, r25
    2504:	99 0b       	sbc	r25, r25
vl():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1556
  if (Wire.available() >= 2) {
    2506:	02 97       	sbiw	r24, 0x02	; 2
    2508:	ac f0       	brlt	.+42     	; 0x2534 <vl(char)+0xba>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1557
    byte distance_msb = Wire.read();
    250a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <TwoWire::read() [clone .constprop.14]>
    250e:	c8 2f       	mov	r28, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1558
    byte distance_lsb = Wire.read();
    2510:	0e 94 fd 00 	call	0x1fa	; 0x1fa <TwoWire::read() [clone .constprop.14]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1559
    vl_dis = ((unsigned int)distance_msb << 8) | distance_lsb;
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	3c 2f       	mov	r19, r28
    2518:	a9 01       	movw	r20, r18
    251a:	48 2b       	or	r20, r24
    251c:	ca 01       	movw	r24, r20
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1565
  }
  
  // Your additional processing logic here
  
  return vl_dis;
}
    251e:	cf 91       	pop	r28
    2520:	08 95       	ret
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1535
     digitalWrite(MUX_B, HIGH);
     digitalWrite(MUX_C, LOW);
  } else if (xv == 2) {
    // Set MUX pins to select sensor 2
    // B13 Left
     digitalWrite(MUX_A, LOW);
    2522:	8c e2       	ldi	r24, 0x2C	; 44
    2524:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1536
     digitalWrite(MUX_B, LOW);
    2528:	60 e0       	ldi	r22, 0x00	; 0
    252a:	8b e2       	ldi	r24, 0x2B	; 43
    252c:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1537
     digitalWrite(MUX_C, HIGH);
    2530:	61 e0       	ldi	r22, 0x01	; 1
    2532:	b0 cf       	rjmp	.-160    	; 0x2494 <vl(char)+0x1a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1521
    

  
}}
unsigned int vl(char xv) {
  unsigned int vl_dis = 1;
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	f2 cf       	rjmp	.-28     	; 0x251e <vl(char)+0xa4>

0000253a <EEPROM_write_int(int, int)>:
EEPROM_write_int():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:130
    analogWrite(5, -right);
  }
}


void EEPROM_write_int(int address, int number) {
    253a:	1f 93       	push	r17
    253c:	cf 93       	push	r28
    253e:	df 93       	push	r29
    2540:	ec 01       	movw	r28, r24
    2542:	16 2f       	mov	r17, r22
    2544:	67 2f       	mov	r22, r23
operator=():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:47
    2546:	0e 94 8f 2a 	call	0x551e	; 0x551e <eeprom_write_byte>
    254a:	61 2f       	mov	r22, r17
    254c:	ce 01       	movw	r24, r28
    254e:	01 96       	adiw	r24, 0x01	; 1
EEPROM_write_int():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:133
  EEPROM.write(address, number >> 8);
  EEPROM.write(address + 1, number & 0xFF);
}
    2550:	df 91       	pop	r29
    2552:	cf 91       	pop	r28
    2554:	1f 91       	pop	r17
operator=():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\EEPROM\src/EEPROM.h:47
    2556:	0c 94 8f 2a 	jmp	0x551e	; 0x551e <eeprom_write_byte>

0000255a <menu_motor()>:
menu_motor():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:883
}

void menu_motor(void) {
  static char page = 1, last_page = 8;
  signed int spd = 0;
  lcd.clear();
    255a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:884
  int deg1 = EEPROM_read_int(deg1_address);
    255e:	84 ea       	ldi	r24, 0xA4	; 164
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    2566:	3c 01       	movw	r6, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:885
  int deg2 = EEPROM_read_int(deg2_address);
    2568:	86 ea       	ldi	r24, 0xA6	; 166
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    2570:	4c 01       	movw	r8, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:886
  int deg3 = EEPROM_read_int(deg3_address);
    2572:	88 ea       	ldi	r24, 0xA8	; 168
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    257a:	2c 01       	movw	r4, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:887
  int deg4 = EEPROM_read_int(deg4_address);
    257c:	8a ea       	ldi	r24, 0xAA	; 170
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    2584:	ec 01       	movw	r28, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:888
  int deg_normal = EEPROM_read_int(deg_normal_address);
    2586:	8c ea       	ldi	r24, 0xAC	; 172
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    258e:	8c 01       	movw	r16, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:889
  int deg_down = EEPROM_read_int(deg_down_address);
    2590:	8e ea       	ldi	r24, 0xAE	; 174
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    2598:	6c 01       	movw	r12, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:890
  int deg_up = EEPROM_read_int(deg_up_address);
    259a:	80 eb       	ldi	r24, 0xB0	; 176
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    25a2:	7c 01       	movw	r14, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:882
  }
}

void menu_motor(void) {
  static char page = 1, last_page = 8;
  signed int spd = 0;
    25a4:	b1 2c       	mov	r11, r1
    25a6:	a1 2c       	mov	r10, r1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:933

      lcd.setCursor(0, page - 1);
      lcd.print("> ");
    } else if (page <= 8) {
      lcd.setCursor(2, 0);
      lcd.printf("deg_nor %4d", deg_normal);
    25a8:	54 e0       	ldi	r21, 0x04	; 4
    25aa:	25 2e       	mov	r2, r21
    25ac:	5a e0       	ldi	r21, 0x0A	; 10
    25ae:	35 2e       	mov	r3, r21
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:893
  int deg_normal = EEPROM_read_int(deg_normal_address);
  int deg_down = EEPROM_read_int(deg_down_address);
  int deg_up = EEPROM_read_int(deg_up_address);

  while (1) {
    if (next_page == 0) {
    25b0:	88 e0       	ldi	r24, 0x08	; 8
    25b2:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    25b6:	89 2b       	or	r24, r25
    25b8:	a9 f4       	brne	.+42     	; 0x25e4 <menu_motor()+0x8a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:894
      while (next_page == 0)
    25ba:	88 e0       	ldi	r24, 0x08	; 8
    25bc:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    25c0:	89 2b       	or	r24, r25
    25c2:	d9 f3       	breq	.-10     	; 0x25ba <menu_motor()+0x60>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:896
        ;
      delay(50);
    25c4:	62 e3       	ldi	r22, 0x32	; 50
    25c6:	70 e0       	ldi	r23, 0x00	; 0
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:897
      page++;
    25d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <menu_motor()::page>
    25d4:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:898
      if (page > last_page)
    25d6:	89 30       	cpi	r24, 0x09	; 9
    25d8:	0c f0       	brlt	.+2      	; 0x25dc <menu_motor()+0x82>
    25da:	a2 c0       	rjmp	.+324    	; 0x2720 <menu_motor()+0x1c6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:897
  while (1) {
    if (next_page == 0) {
      while (next_page == 0)
        ;
      delay(50);
      page++;
    25dc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <menu_motor()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:900
      if (page > last_page)
        page = 1;
      lcd.clear();
    25e0:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:903
    }

    if (previuse_page == 0) {
    25e4:	89 e0       	ldi	r24, 0x09	; 9
    25e6:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    25ea:	89 2b       	or	r24, r25
    25ec:	a9 f4       	brne	.+42     	; 0x2618 <menu_motor()+0xbe>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:904
      while (previuse_page == 0)
    25ee:	89 e0       	ldi	r24, 0x09	; 9
    25f0:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    25f4:	89 2b       	or	r24, r25
    25f6:	d9 f3       	breq	.-10     	; 0x25ee <menu_motor()+0x94>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:906
        ;
      delay(50);
    25f8:	62 e3       	ldi	r22, 0x32	; 50
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:907
      page--;
    2604:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <menu_motor()::page>
    2608:	81 50       	subi	r24, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:908
      if (page < 1)
    260a:	18 16       	cp	r1, r24
    260c:	0c f0       	brlt	.+2      	; 0x2610 <menu_motor()+0xb6>
    260e:	8c c0       	rjmp	.+280    	; 0x2728 <menu_motor()+0x1ce>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:909
        page = last_page;
    2610:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <menu_motor()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:910
      lcd.clear();
    2614:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:913
    }

    if (page <= 4) {
    2618:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <menu_motor()::page>
    261c:	85 30       	cpi	r24, 0x05	; 5
    261e:	0c f0       	brlt	.+2      	; 0x2622 <menu_motor()+0xc8>
    2620:	85 c0       	rjmp	.+266    	; 0x272c <menu_motor()+0x1d2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:914
      lcd.setCursor(2, 0);
    2622:	60 e0       	ldi	r22, 0x00	; 0
    2624:	82 e0       	ldi	r24, 0x02	; 2
    2626:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:915
      lcd.printf("go(%4d,%4d) ", spd, spd);
    262a:	bf 92       	push	r11
    262c:	af 92       	push	r10
    262e:	bf 92       	push	r11
    2630:	af 92       	push	r10
    2632:	86 e3       	ldi	r24, 0x36	; 54
    2634:	93 e0       	ldi	r25, 0x03	; 3
    2636:	9f 93       	push	r25
    2638:	8f 93       	push	r24
    263a:	3f 92       	push	r3
    263c:	2f 92       	push	r2
    263e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:917

      lcd.setCursor(2, 1);
    2642:	61 e0       	ldi	r22, 0x01	; 1
    2644:	82 e0       	ldi	r24, 0x02	; 2
    2646:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:918
      lcd.printf("MotAX %d %4d", AX_ID, deg1);
    264a:	7f 92       	push	r7
    264c:	6f 92       	push	r6
    264e:	1f 92       	push	r1
    2650:	8a e0       	ldi	r24, 0x0A	; 10
    2652:	8f 93       	push	r24
    2654:	83 e4       	ldi	r24, 0x43	; 67
    2656:	93 e0       	ldi	r25, 0x03	; 3
    2658:	9f 93       	push	r25
    265a:	8f 93       	push	r24
    265c:	3f 92       	push	r3
    265e:	2f 92       	push	r2
    2660:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:920

      lcd.setCursor(2, 2);
    2664:	62 e0       	ldi	r22, 0x02	; 2
    2666:	82 e0       	ldi	r24, 0x02	; 2
    2668:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:921
      lcd.printf("MotXL %d %4d", XL_ID_L, deg2);
    266c:	9f 92       	push	r9
    266e:	8f 92       	push	r8
    2670:	1f 92       	push	r1
    2672:	8f e0       	ldi	r24, 0x0F	; 15
    2674:	8f 93       	push	r24
    2676:	80 e5       	ldi	r24, 0x50	; 80
    2678:	93 e0       	ldi	r25, 0x03	; 3
    267a:	9f 93       	push	r25
    267c:	8f 93       	push	r24
    267e:	3f 92       	push	r3
    2680:	2f 92       	push	r2
    2682:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:923

      lcd.setCursor(2, 3);
    2686:	63 e0       	ldi	r22, 0x03	; 3
    2688:	82 e0       	ldi	r24, 0x02	; 2
    268a:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:924
      lcd.printf("MotXL %d %4d", XL_ID_B, deg3);
    268e:	5f 92       	push	r5
    2690:	4f 92       	push	r4
    2692:	1f 92       	push	r1
    2694:	80 e1       	ldi	r24, 0x10	; 16
    2696:	8f 93       	push	r24
    2698:	80 e5       	ldi	r24, 0x50	; 80
    269a:	93 e0       	ldi	r25, 0x03	; 3
    269c:	9f 93       	push	r25
    269e:	8f 93       	push	r24
    26a0:	3f 92       	push	r3
    26a2:	2f 92       	push	r2
    26a4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:929

      // lcd.setCursor(2, 3);
      // lcd.printf("MOT shoot      ");

      lcd.setCursor(0, page - 1);
    26a8:	8d b7       	in	r24, 0x3d	; 61
    26aa:	9e b7       	in	r25, 0x3e	; 62
    26ac:	80 96       	adiw	r24, 0x20	; 32
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	9e bf       	out	0x3e, r25	; 62
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	8d bf       	out	0x3d, r24	; 61
    26b8:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <menu_motor()::page>
    26bc:	61 50       	subi	r22, 0x01	; 1
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:930
      lcd.print("> ");
    26c4:	8f e4       	ldi	r24, 0x4F	; 79
    26c6:	94 e0       	ldi	r25, 0x04	; 4
    26c8:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:948

      lcd.setCursor(0, page - 5);
      lcd.print("> ");
    }

    if (page == 1)  // go
    26cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <menu_motor()::page>
    26d0:	81 30       	cpi	r24, 0x01	; 1
    26d2:	09 f0       	breq	.+2      	; 0x26d6 <menu_motor()+0x17c>
    26d4:	84 c0       	rjmp	.+264    	; 0x27de <menu_motor()+0x284>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:950
    {
      if (increase == 0) {
    26d6:	8a e0       	ldi	r24, 0x0A	; 10
    26d8:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    26dc:	89 2b       	or	r24, r25
    26de:	09 f0       	breq	.+2      	; 0x26e2 <menu_motor()+0x188>
    26e0:	72 c0       	rjmp	.+228    	; 0x27c6 <menu_motor()+0x26c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:951
        spd += 50;
    26e2:	92 e3       	ldi	r25, 0x32	; 50
    26e4:	a9 0e       	add	r10, r25
    26e6:	b1 1c       	adc	r11, r1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:955
        delay(400);
      } else if (decrease == 0) {
        spd -= 50;
        delay(400);
    26e8:	60 e9       	ldi	r22, 0x90	; 144
    26ea:	71 e0       	ldi	r23, 0x01	; 1
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	a8 16       	cp	r10, r24
    26f8:	8f ef       	ldi	r24, 0xFF	; 255
    26fa:	b8 06       	cpc	r11, r24
    26fc:	24 f4       	brge	.+8      	; 0x2706 <menu_motor()+0x1ac>
    26fe:	aa 24       	eor	r10, r10
    2700:	a3 94       	inc	r10
    2702:	bb 24       	eor	r11, r11
    2704:	ba 94       	dec	r11
    2706:	9f ef       	ldi	r25, 0xFF	; 255
    2708:	a9 16       	cp	r10, r25
    270a:	b1 04       	cpc	r11, r1
    270c:	21 f0       	breq	.+8      	; 0x2716 <menu_motor()+0x1bc>
    270e:	1c f0       	brlt	.+6      	; 0x2716 <menu_motor()+0x1bc>
    2710:	aa 24       	eor	r10, r10
    2712:	aa 94       	dec	r10
    2714:	b1 2c       	mov	r11, r1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:964
      if (spd > 255)
        spd = 255;
      if (spd < -255)
        spd = -255;

      go(spd, spd);
    2716:	b5 01       	movw	r22, r10
    2718:	c5 01       	movw	r24, r10
    271a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <go(int, int)>
    271e:	48 cf       	rjmp	.-368    	; 0x25b0 <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:899
      while (next_page == 0)
        ;
      delay(50);
      page++;
      if (page > last_page)
        page = 1;
    2720:	21 e0       	ldi	r18, 0x01	; 1
    2722:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <menu_motor()::page>
    2726:	5c cf       	rjmp	.-328    	; 0x25e0 <menu_motor()+0x86>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:909
      while (previuse_page == 0)
        ;
      delay(50);
      page--;
      if (page < 1)
        page = last_page;
    2728:	88 e0       	ldi	r24, 0x08	; 8
    272a:	72 cf       	rjmp	.-284    	; 0x2610 <menu_motor()+0xb6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:931
      // lcd.setCursor(2, 3);
      // lcd.printf("MOT shoot      ");

      lcd.setCursor(0, page - 1);
      lcd.print("> ");
    } else if (page <= 8) {
    272c:	89 30       	cpi	r24, 0x09	; 9
    272e:	74 f6       	brge	.-100    	; 0x26cc <menu_motor()+0x172>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:932
      lcd.setCursor(2, 0);
    2730:	60 e0       	ldi	r22, 0x00	; 0
    2732:	82 e0       	ldi	r24, 0x02	; 2
    2734:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:933
      lcd.printf("deg_nor %4d", deg_normal);
    2738:	1f 93       	push	r17
    273a:	0f 93       	push	r16
    273c:	8d e5       	ldi	r24, 0x5D	; 93
    273e:	93 e0       	ldi	r25, 0x03	; 3
    2740:	9f 93       	push	r25
    2742:	8f 93       	push	r24
    2744:	3f 92       	push	r3
    2746:	2f 92       	push	r2
    2748:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:935

      lcd.setCursor(2, 1);
    274c:	61 e0       	ldi	r22, 0x01	; 1
    274e:	82 e0       	ldi	r24, 0x02	; 2
    2750:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:936
      lcd.printf("deg_dn %4d", deg_down);
    2754:	df 92       	push	r13
    2756:	cf 92       	push	r12
    2758:	89 e6       	ldi	r24, 0x69	; 105
    275a:	93 e0       	ldi	r25, 0x03	; 3
    275c:	9f 93       	push	r25
    275e:	8f 93       	push	r24
    2760:	3f 92       	push	r3
    2762:	2f 92       	push	r2
    2764:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:938

      lcd.setCursor(2, 2);
    2768:	62 e0       	ldi	r22, 0x02	; 2
    276a:	82 e0       	ldi	r24, 0x02	; 2
    276c:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:939
      lcd.printf("deg_up %4d", deg_up);
    2770:	ff 92       	push	r15
    2772:	ef 92       	push	r14
    2774:	84 e7       	ldi	r24, 0x74	; 116
    2776:	93 e0       	ldi	r25, 0x03	; 3
    2778:	9f 93       	push	r25
    277a:	8f 93       	push	r24
    277c:	3f 92       	push	r3
    277e:	2f 92       	push	r2
    2780:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:941

      lcd.setCursor(2, 3);
    2784:	63 e0       	ldi	r22, 0x03	; 3
    2786:	82 e0       	ldi	r24, 0x02	; 2
    2788:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:942
      lcd.printf("deg4   %4d", deg4);
    278c:	df 93       	push	r29
    278e:	cf 93       	push	r28
    2790:	8f e7       	ldi	r24, 0x7F	; 127
    2792:	93 e0       	ldi	r25, 0x03	; 3
    2794:	9f 93       	push	r25
    2796:	8f 93       	push	r24
    2798:	3f 92       	push	r3
    279a:	2f 92       	push	r2
    279c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:944

      lcd.setCursor(0, page - 5);
    27a0:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <menu_motor()::page>
    27a4:	65 50       	subi	r22, 0x05	; 5
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:945
      lcd.print("> ");
    27ac:	8f e4       	ldi	r24, 0x4F	; 79
    27ae:	94 e0       	ldi	r25, 0x04	; 4
    27b0:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
    27b4:	8d b7       	in	r24, 0x3d	; 61
    27b6:	9e b7       	in	r25, 0x3e	; 62
    27b8:	48 96       	adiw	r24, 0x18	; 24
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	9e bf       	out	0x3e, r25	; 62
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	8d bf       	out	0x3d, r24	; 61
    27c4:	83 cf       	rjmp	.-250    	; 0x26cc <menu_motor()+0x172>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:953
    if (page == 1)  // go
    {
      if (increase == 0) {
        spd += 50;
        delay(400);
      } else if (decrease == 0) {
    27c6:	8b e0       	ldi	r24, 0x0B	; 11
    27c8:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    27cc:	89 2b       	or	r24, r25
    27ce:	21 f4       	brne	.+8      	; 0x27d8 <menu_motor()+0x27e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:954
        spd -= 50;
    27d0:	22 e3       	ldi	r18, 0x32	; 50
    27d2:	a2 1a       	sub	r10, r18
    27d4:	b1 08       	sbc	r11, r1
    27d6:	88 cf       	rjmp	.-240    	; 0x26e8 <menu_motor()+0x18e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:957
        delay(400);
      } else
        spd = 0;
    27d8:	b1 2c       	mov	r11, r1
    27da:	a1 2c       	mov	r10, r1
    27dc:	9c cf       	rjmp	.-200    	; 0x2716 <menu_motor()+0x1bc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:965
        spd = 255;
      if (spd < -255)
        spd = -255;

      go(spd, spd);
    } else if (page == 2)  // AX1
    27de:	82 30       	cpi	r24, 0x02	; 2
    27e0:	09 f0       	breq	.+2      	; 0x27e4 <menu_motor()+0x28a>
    27e2:	48 c0       	rjmp	.+144    	; 0x2874 <menu_motor()+0x31a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:967
    {
      if (increase == 0) {
    27e4:	8a e0       	ldi	r24, 0x0A	; 10
    27e6:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    27ea:	89 2b       	or	r24, r25
    27ec:	c9 f4       	brne	.+50     	; 0x2820 <menu_motor()+0x2c6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:968
        delay(50);
    27ee:	62 e3       	ldi	r22, 0x32	; 50
    27f0:	70 e0       	ldi	r23, 0x00	; 0
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:969
        if (deg1 < 700)
    27fa:	2c eb       	ldi	r18, 0xBC	; 188
    27fc:	62 16       	cp	r6, r18
    27fe:	22 e0       	ldi	r18, 0x02	; 2
    2800:	72 06       	cpc	r7, r18
    2802:	1c f4       	brge	.+6      	; 0x280a <menu_motor()+0x2b0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:970
          deg1 += 5;
    2804:	85 e0       	ldi	r24, 0x05	; 5
    2806:	68 0e       	add	r6, r24
    2808:	71 1c       	adc	r7, r1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:980
        delay(50);

        if (deg1 > 170)
          deg1 -= 5;

        AX(AX_ID, deg1, 150);
    280a:	66 e9       	ldi	r22, 0x96	; 150
    280c:	70 e0       	ldi	r23, 0x00	; 0
    280e:	c3 01       	movw	r24, r6
    2810:	0e 94 41 03 	call	0x682	; 0x682 <AX(char, int, int) [clone .constprop.24]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:981
        EEPROM_write_int(deg1_address, deg1);
    2814:	b3 01       	movw	r22, r6
    2816:	84 ea       	ldi	r24, 0xA4	; 164
    2818:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1121

        AX(AX_ID, deg4, 150);
        EEPROM_write_int(deg4_address, deg4);
      } else if (start == 0) {
        AX(AX_ID, deg4, 150);
        EEPROM_write_int(deg4_address, deg4);
    281a:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
    281e:	c8 ce       	rjmp	.-624    	; 0x25b0 <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:974
        if (deg1 < 700)
          deg1 += 5;

        AX(AX_ID, deg1, 150);
        EEPROM_write_int(deg1_address, deg1);
      } else if (decrease == 0) {
    2820:	8b e0       	ldi	r24, 0x0B	; 11
    2822:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2826:	89 2b       	or	r24, r25
    2828:	71 f4       	brne	.+28     	; 0x2846 <menu_motor()+0x2ec>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:975
        delay(50);
    282a:	62 e3       	ldi	r22, 0x32	; 50
    282c:	70 e0       	ldi	r23, 0x00	; 0
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:977

        if (deg1 > 170)
    2836:	9b ea       	ldi	r25, 0xAB	; 171
    2838:	69 16       	cp	r6, r25
    283a:	71 04       	cpc	r7, r1
    283c:	34 f3       	brlt	.-52     	; 0x280a <menu_motor()+0x2b0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:978
          deg1 -= 5;
    283e:	25 e0       	ldi	r18, 0x05	; 5
    2840:	62 1a       	sub	r6, r18
    2842:	71 08       	sbc	r7, r1
    2844:	e2 cf       	rjmp	.-60     	; 0x280a <menu_motor()+0x2b0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:982

        AX(AX_ID, deg1, 150);
        EEPROM_write_int(deg1_address, deg1);
      } else if (start == 0) {
    2846:	86 e0       	ldi	r24, 0x06	; 6
    2848:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    284c:	89 2b       	or	r24, r25
    284e:	09 f0       	breq	.+2      	; 0x2852 <menu_motor()+0x2f8>
    2850:	af ce       	rjmp	.-674    	; 0x25b0 <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:984
        deg1 = 510;
        AX(AX_ID, deg1, 150);
    2852:	66 e9       	ldi	r22, 0x96	; 150
    2854:	70 e0       	ldi	r23, 0x00	; 0
    2856:	8e ef       	ldi	r24, 0xFE	; 254
    2858:	91 e0       	ldi	r25, 0x01	; 1
    285a:	0e 94 41 03 	call	0x682	; 0x682 <AX(char, int, int) [clone .constprop.24]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:985
        EEPROM_write_int(deg1_address, deg1);
    285e:	6e ef       	ldi	r22, 0xFE	; 254
    2860:	71 e0       	ldi	r23, 0x01	; 1
    2862:	84 ea       	ldi	r24, 0xA4	; 164
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:983
          deg1 -= 5;

        AX(AX_ID, deg1, 150);
        EEPROM_write_int(deg1_address, deg1);
      } else if (start == 0) {
        deg1 = 510;
    286a:	2e ef       	ldi	r18, 0xFE	; 254
    286c:	62 2e       	mov	r6, r18
    286e:	77 24       	eor	r7, r7
    2870:	73 94       	inc	r7
    2872:	9e ce       	rjmp	.-708    	; 0x25b0 <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:987
        AX(AX_ID, deg1, 150);
        EEPROM_write_int(deg1_address, deg1);
      }
    } else if (page == 3)  // XL
    2874:	83 30       	cpi	r24, 0x03	; 3
    2876:	09 f0       	breq	.+2      	; 0x287a <menu_motor()+0x320>
    2878:	46 c0       	rjmp	.+140    	; 0x2906 <menu_motor()+0x3ac>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:989
    {
      if (increase == 0) {
    287a:	8a e0       	ldi	r24, 0x0A	; 10
    287c:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2880:	89 2b       	or	r24, r25
    2882:	e9 f4       	brne	.+58     	; 0x28be <menu_motor()+0x364>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:990
        delay(10);
    2884:	6a e0       	ldi	r22, 0x0A	; 10
    2886:	70 e0       	ldi	r23, 0x00	; 0
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:991
        if (deg2 < 800)
    2890:	80 e2       	ldi	r24, 0x20	; 32
    2892:	88 16       	cp	r8, r24
    2894:	83 e0       	ldi	r24, 0x03	; 3
    2896:	98 06       	cpc	r9, r24
    2898:	1c f4       	brge	.+6      	; 0x28a0 <menu_motor()+0x346>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:992
          deg2 += 5;
    289a:	95 e0       	ldi	r25, 0x05	; 5
    289c:	89 0e       	add	r8, r25
    289e:	91 1c       	adc	r9, r1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1002
      } else if (decrease == 0) {
        delay(10);
        if (deg2 > 100)
          deg2 -= 5;

        XL(XL_ID_L, deg2, 50);
    28a0:	b4 01       	movw	r22, r8
    28a2:	8f e0       	ldi	r24, 0x0F	; 15
    28a4:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <r26(char, int, int) [clone .constprop.27]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1003
        XL(XL_ID_R, 1023 - deg2, 50);
    28a8:	6f ef       	ldi	r22, 0xFF	; 255
    28aa:	73 e0       	ldi	r23, 0x03	; 3
    28ac:	68 19       	sub	r22, r8
    28ae:	79 09       	sbc	r23, r9
    28b0:	8e e0       	ldi	r24, 0x0E	; 14
    28b2:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <r26(char, int, int) [clone .constprop.27]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1004
        EEPROM_write_int(deg2_address, deg2);
    28b6:	b4 01       	movw	r22, r8
    28b8:	86 ea       	ldi	r24, 0xA6	; 166
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	ae cf       	rjmp	.-164    	; 0x281a <menu_motor()+0x2c0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:997
          deg2 += 5;

        XL(XL_ID_L, deg2, 50);
        XL(XL_ID_R, 1023 - deg2, 50);
        EEPROM_write_int(deg2_address, deg2);
      } else if (decrease == 0) {
    28be:	8b e0       	ldi	r24, 0x0B	; 11
    28c0:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    28c4:	89 2b       	or	r24, r25
    28c6:	71 f4       	brne	.+28     	; 0x28e4 <menu_motor()+0x38a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:998
        delay(10);
    28c8:	6a e0       	ldi	r22, 0x0A	; 10
    28ca:	70 e0       	ldi	r23, 0x00	; 0
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:999
        if (deg2 > 100)
    28d4:	25 e6       	ldi	r18, 0x65	; 101
    28d6:	82 16       	cp	r8, r18
    28d8:	91 04       	cpc	r9, r1
    28da:	14 f3       	brlt	.-60     	; 0x28a0 <menu_motor()+0x346>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1000
          deg2 -= 5;
    28dc:	85 e0       	ldi	r24, 0x05	; 5
    28de:	88 1a       	sub	r8, r24
    28e0:	91 08       	sbc	r9, r1
    28e2:	de cf       	rjmp	.-68     	; 0x28a0 <menu_motor()+0x346>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1005

        XL(XL_ID_L, deg2, 50);
        XL(XL_ID_R, 1023 - deg2, 50);
        EEPROM_write_int(deg2_address, deg2);
      } else if (start == 0) {
    28e4:	86 e0       	ldi	r24, 0x06	; 6
    28e6:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    28ea:	89 2b       	or	r24, r25
    28ec:	09 f0       	breq	.+2      	; 0x28f0 <menu_motor()+0x396>
    28ee:	60 ce       	rjmp	.-832    	; 0x25b0 <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1007
        deg2 = 500;
        EEPROM_write_int(deg2_address, deg2);
    28f0:	64 ef       	ldi	r22, 0xF4	; 244
    28f2:	71 e0       	ldi	r23, 0x01	; 1
    28f4:	86 ea       	ldi	r24, 0xA6	; 166
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1006

        XL(XL_ID_L, deg2, 50);
        XL(XL_ID_R, 1023 - deg2, 50);
        EEPROM_write_int(deg2_address, deg2);
      } else if (start == 0) {
        deg2 = 500;
    28fc:	94 ef       	ldi	r25, 0xF4	; 244
    28fe:	89 2e       	mov	r8, r25
    2900:	99 24       	eor	r9, r9
    2902:	93 94       	inc	r9
    2904:	55 ce       	rjmp	.-854    	; 0x25b0 <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1017
    //     if (start == 0)
    //     {
    //         shoot();
    //     }
    // }
    else if (page == 4)  // XL
    2906:	84 30       	cpi	r24, 0x04	; 4
    2908:	09 f0       	breq	.+2      	; 0x290c <menu_motor()+0x3b2>
    290a:	3f c0       	rjmp	.+126    	; 0x298a <menu_motor()+0x430>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1019
    {
      if (increase == 0) {
    290c:	8a e0       	ldi	r24, 0x0A	; 10
    290e:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2912:	89 2b       	or	r24, r25
    2914:	b1 f4       	brne	.+44     	; 0x2942 <menu_motor()+0x3e8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1020
        delay(10);
    2916:	6a e0       	ldi	r22, 0x0A	; 10
    2918:	70 e0       	ldi	r23, 0x00	; 0
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1021
        if (deg3 < 800)
    2922:	90 e2       	ldi	r25, 0x20	; 32
    2924:	49 16       	cp	r4, r25
    2926:	93 e0       	ldi	r25, 0x03	; 3
    2928:	59 06       	cpc	r5, r25
    292a:	1c f4       	brge	.+6      	; 0x2932 <menu_motor()+0x3d8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1022
          deg3 += 5;
    292c:	25 e0       	ldi	r18, 0x05	; 5
    292e:	42 0e       	add	r4, r18
    2930:	51 1c       	adc	r5, r1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1031
      } else if (decrease == 0) {
        delay(10);
        if (deg3 > 100)
          deg3 -= 5;

        XL(XL_ID_B, deg3, 50);
    2932:	b2 01       	movw	r22, r4
    2934:	80 e1       	ldi	r24, 0x10	; 16
    2936:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <r26(char, int, int) [clone .constprop.27]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1032
        EEPROM_write_int(deg3_address, deg3);
    293a:	b2 01       	movw	r22, r4
    293c:	88 ea       	ldi	r24, 0xA8	; 168
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	6c cf       	rjmp	.-296    	; 0x281a <menu_motor()+0x2c0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1026
        if (deg3 < 800)
          deg3 += 5;

        XL(XL_ID_B, deg3, 50);
        EEPROM_write_int(deg3_address, deg3);
      } else if (decrease == 0) {
    2942:	8b e0       	ldi	r24, 0x0B	; 11
    2944:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2948:	89 2b       	or	r24, r25
    294a:	71 f4       	brne	.+28     	; 0x2968 <menu_motor()+0x40e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1027
        delay(10);
    294c:	6a e0       	ldi	r22, 0x0A	; 10
    294e:	70 e0       	ldi	r23, 0x00	; 0
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1028
        if (deg3 > 100)
    2958:	85 e6       	ldi	r24, 0x65	; 101
    295a:	48 16       	cp	r4, r24
    295c:	51 04       	cpc	r5, r1
    295e:	4c f3       	brlt	.-46     	; 0x2932 <menu_motor()+0x3d8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1029
          deg3 -= 5;
    2960:	95 e0       	ldi	r25, 0x05	; 5
    2962:	49 1a       	sub	r4, r25
    2964:	51 08       	sbc	r5, r1
    2966:	e5 cf       	rjmp	.-54     	; 0x2932 <menu_motor()+0x3d8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1033

        XL(XL_ID_B, deg3, 50);
        EEPROM_write_int(deg3_address, deg3);
      } else if (start == 0) {
    2968:	86 e0       	ldi	r24, 0x06	; 6
    296a:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    296e:	89 2b       	or	r24, r25
    2970:	09 f0       	breq	.+2      	; 0x2974 <menu_motor()+0x41a>
    2972:	1e ce       	rjmp	.-964    	; 0x25b0 <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1035
        deg3 = 500;
        EEPROM_write_int(deg3_address, deg3);
    2974:	64 ef       	ldi	r22, 0xF4	; 244
    2976:	71 e0       	ldi	r23, 0x01	; 1
    2978:	88 ea       	ldi	r24, 0xA8	; 168
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1034
          deg3 -= 5;

        XL(XL_ID_B, deg3, 50);
        EEPROM_write_int(deg3_address, deg3);
      } else if (start == 0) {
        deg3 = 500;
    2980:	84 ef       	ldi	r24, 0xF4	; 244
    2982:	48 2e       	mov	r4, r24
    2984:	55 24       	eor	r5, r5
    2986:	53 94       	inc	r5
    2988:	13 ce       	rjmp	.-986    	; 0x25b0 <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1039
        EEPROM_write_int(deg3_address, deg3);
      }
    }

    else if (page == 5)  // deg_normal
    298a:	85 30       	cpi	r24, 0x05	; 5
    298c:	91 f5       	brne	.+100    	; 0x29f2 <menu_motor()+0x498>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1041
    {
      if (increase == 0) {
    298e:	8a e0       	ldi	r24, 0x0A	; 10
    2990:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2994:	89 2b       	or	r24, r25
    2996:	a9 f4       	brne	.+42     	; 0x29c2 <menu_motor()+0x468>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1042
        delay(10);
    2998:	6a e0       	ldi	r22, 0x0A	; 10
    299a:	70 e0       	ldi	r23, 0x00	; 0
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1043
        if (deg_normal < 1022)
    29a4:	0e 3f       	cpi	r16, 0xFE	; 254
    29a6:	23 e0       	ldi	r18, 0x03	; 3
    29a8:	12 07       	cpc	r17, r18
    29aa:	14 f4       	brge	.+4      	; 0x29b0 <menu_motor()+0x456>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1044
          deg_normal += 5;
    29ac:	0b 5f       	subi	r16, 0xFB	; 251
    29ae:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1057
          deg_normal -= 5;

        AX(AX_ID, deg_normal, 150);
        EEPROM_write_int(deg_normal_address, deg_normal);
      } else if (start == 0) {
        AX(AX_ID, deg_normal, 150);
    29b0:	66 e9       	ldi	r22, 0x96	; 150
    29b2:	70 e0       	ldi	r23, 0x00	; 0
    29b4:	c8 01       	movw	r24, r16
    29b6:	0e 94 41 03 	call	0x682	; 0x682 <AX(char, int, int) [clone .constprop.24]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1058
        EEPROM_write_int(deg_normal_address, deg_normal);
    29ba:	b8 01       	movw	r22, r16
    29bc:	8c ea       	ldi	r24, 0xAC	; 172
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	2c cf       	rjmp	.-424    	; 0x281a <menu_motor()+0x2c0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1048
        if (deg_normal < 1022)
          deg_normal += 5;

        AX(AX_ID, deg_normal, 150);
        EEPROM_write_int(deg_normal_address, deg_normal);
      } else if (decrease == 0) {
    29c2:	8b e0       	ldi	r24, 0x0B	; 11
    29c4:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    29c8:	89 2b       	or	r24, r25
    29ca:	61 f4       	brne	.+24     	; 0x29e4 <menu_motor()+0x48a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1049
        delay(10);
    29cc:	6a e0       	ldi	r22, 0x0A	; 10
    29ce:	70 e0       	ldi	r23, 0x00	; 0
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1051

        if (deg_normal > 1)
    29d8:	02 30       	cpi	r16, 0x02	; 2
    29da:	11 05       	cpc	r17, r1
    29dc:	4c f3       	brlt	.-46     	; 0x29b0 <menu_motor()+0x456>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1052
          deg_normal -= 5;
    29de:	05 50       	subi	r16, 0x05	; 5
    29e0:	11 09       	sbc	r17, r1
    29e2:	e6 cf       	rjmp	.-52     	; 0x29b0 <menu_motor()+0x456>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1056

        AX(AX_ID, deg_normal, 150);
        EEPROM_write_int(deg_normal_address, deg_normal);
      } else if (start == 0) {
    29e4:	86 e0       	ldi	r24, 0x06	; 6
    29e6:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    29ea:	89 2b       	or	r24, r25
    29ec:	09 f0       	breq	.+2      	; 0x29f0 <menu_motor()+0x496>
    29ee:	e0 cd       	rjmp	.-1088   	; 0x25b0 <menu_motor()+0x56>
    29f0:	df cf       	rjmp	.-66     	; 0x29b0 <menu_motor()+0x456>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1060
        AX(AX_ID, deg_normal, 150);
        EEPROM_write_int(deg_normal_address, deg_normal);
      }
    } else if (page == 6)  // deg_down
    29f2:	86 30       	cpi	r24, 0x06	; 6
    29f4:	b1 f5       	brne	.+108    	; 0x2a62 <menu_motor()+0x508>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1062
    {
      if (increase == 0) {
    29f6:	8a e0       	ldi	r24, 0x0A	; 10
    29f8:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    29fc:	89 2b       	or	r24, r25
    29fe:	b9 f4       	brne	.+46     	; 0x2a2e <menu_motor()+0x4d4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1063
        delay(10);
    2a00:	6a e0       	ldi	r22, 0x0A	; 10
    2a02:	70 e0       	ldi	r23, 0x00	; 0
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1064
        if (deg_down < 1022)
    2a0c:	8e ef       	ldi	r24, 0xFE	; 254
    2a0e:	c8 16       	cp	r12, r24
    2a10:	83 e0       	ldi	r24, 0x03	; 3
    2a12:	d8 06       	cpc	r13, r24
    2a14:	1c f4       	brge	.+6      	; 0x2a1c <menu_motor()+0x4c2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1065
          deg_down += 5;
    2a16:	95 e0       	ldi	r25, 0x05	; 5
    2a18:	c9 0e       	add	r12, r25
    2a1a:	d1 1c       	adc	r13, r1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1078
          deg_down -= 5;

        AX(AX_ID, deg_down, 150);
        EEPROM_write_int(deg_down_address, deg_down);
      } else if (start == 0) {
        AX(AX_ID, deg_down, 150);
    2a1c:	66 e9       	ldi	r22, 0x96	; 150
    2a1e:	70 e0       	ldi	r23, 0x00	; 0
    2a20:	c6 01       	movw	r24, r12
    2a22:	0e 94 41 03 	call	0x682	; 0x682 <AX(char, int, int) [clone .constprop.24]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1079
        EEPROM_write_int(deg_down_address, deg_down);
    2a26:	b6 01       	movw	r22, r12
    2a28:	8e ea       	ldi	r24, 0xAE	; 174
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	f6 ce       	rjmp	.-532    	; 0x281a <menu_motor()+0x2c0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1069
        if (deg_down < 1022)
          deg_down += 5;

        AX(AX_ID, deg_down, 150);
        EEPROM_write_int(deg_down_address, deg_down);
      } else if (decrease == 0) {
    2a2e:	8b e0       	ldi	r24, 0x0B	; 11
    2a30:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2a34:	89 2b       	or	r24, r25
    2a36:	71 f4       	brne	.+28     	; 0x2a54 <menu_motor()+0x4fa>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1070
        delay(10);
    2a38:	6a e0       	ldi	r22, 0x0A	; 10
    2a3a:	70 e0       	ldi	r23, 0x00	; 0
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1072

        if (deg_down > 1)
    2a44:	22 e0       	ldi	r18, 0x02	; 2
    2a46:	c2 16       	cp	r12, r18
    2a48:	d1 04       	cpc	r13, r1
    2a4a:	44 f3       	brlt	.-48     	; 0x2a1c <menu_motor()+0x4c2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1073
          deg_down -= 5;
    2a4c:	85 e0       	ldi	r24, 0x05	; 5
    2a4e:	c8 1a       	sub	r12, r24
    2a50:	d1 08       	sbc	r13, r1
    2a52:	e4 cf       	rjmp	.-56     	; 0x2a1c <menu_motor()+0x4c2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1077

        AX(AX_ID, deg_down, 150);
        EEPROM_write_int(deg_down_address, deg_down);
      } else if (start == 0) {
    2a54:	86 e0       	ldi	r24, 0x06	; 6
    2a56:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2a5a:	89 2b       	or	r24, r25
    2a5c:	09 f0       	breq	.+2      	; 0x2a60 <menu_motor()+0x506>
    2a5e:	a8 cd       	rjmp	.-1200   	; 0x25b0 <menu_motor()+0x56>
    2a60:	dd cf       	rjmp	.-70     	; 0x2a1c <menu_motor()+0x4c2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1081
        AX(AX_ID, deg_down, 150);
        EEPROM_write_int(deg_down_address, deg_down);
      }
    } else if (page == 7)  // deg_up
    2a62:	87 30       	cpi	r24, 0x07	; 7
    2a64:	b1 f5       	brne	.+108    	; 0x2ad2 <menu_motor()+0x578>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1083
    {
      if (increase == 0) {
    2a66:	8a e0       	ldi	r24, 0x0A	; 10
    2a68:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2a6c:	89 2b       	or	r24, r25
    2a6e:	b9 f4       	brne	.+46     	; 0x2a9e <menu_motor()+0x544>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1084
        delay(10);
    2a70:	6a e0       	ldi	r22, 0x0A	; 10
    2a72:	70 e0       	ldi	r23, 0x00	; 0
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1085
        if (deg_up < 1022)
    2a7c:	9e ef       	ldi	r25, 0xFE	; 254
    2a7e:	e9 16       	cp	r14, r25
    2a80:	93 e0       	ldi	r25, 0x03	; 3
    2a82:	f9 06       	cpc	r15, r25
    2a84:	1c f4       	brge	.+6      	; 0x2a8c <menu_motor()+0x532>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1086
          deg_up += 5;
    2a86:	25 e0       	ldi	r18, 0x05	; 5
    2a88:	e2 0e       	add	r14, r18
    2a8a:	f1 1c       	adc	r15, r1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1099
          deg_up -= 5;

        AX(AX_ID, deg_up, 150);
        EEPROM_write_int(deg_up_address, deg_up);
      } else if (start == 0) {
        AX(AX_ID, deg_up, 150);
    2a8c:	66 e9       	ldi	r22, 0x96	; 150
    2a8e:	70 e0       	ldi	r23, 0x00	; 0
    2a90:	c7 01       	movw	r24, r14
    2a92:	0e 94 41 03 	call	0x682	; 0x682 <AX(char, int, int) [clone .constprop.24]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1100
        EEPROM_write_int(deg_up_address, deg_up);
    2a96:	b7 01       	movw	r22, r14
    2a98:	80 eb       	ldi	r24, 0xB0	; 176
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	be ce       	rjmp	.-644    	; 0x281a <menu_motor()+0x2c0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1090
        if (deg_up < 1022)
          deg_up += 5;

        AX(AX_ID, deg_up, 150);
        EEPROM_write_int(deg_up_address, deg_up);
      } else if (decrease == 0) {
    2a9e:	8b e0       	ldi	r24, 0x0B	; 11
    2aa0:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2aa4:	89 2b       	or	r24, r25
    2aa6:	71 f4       	brne	.+28     	; 0x2ac4 <menu_motor()+0x56a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1091
        delay(10);
    2aa8:	6a e0       	ldi	r22, 0x0A	; 10
    2aaa:	70 e0       	ldi	r23, 0x00	; 0
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1093

        if (deg_up > 1)
    2ab4:	82 e0       	ldi	r24, 0x02	; 2
    2ab6:	e8 16       	cp	r14, r24
    2ab8:	f1 04       	cpc	r15, r1
    2aba:	44 f3       	brlt	.-48     	; 0x2a8c <menu_motor()+0x532>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1094
          deg_up -= 5;
    2abc:	95 e0       	ldi	r25, 0x05	; 5
    2abe:	e9 1a       	sub	r14, r25
    2ac0:	f1 08       	sbc	r15, r1
    2ac2:	e4 cf       	rjmp	.-56     	; 0x2a8c <menu_motor()+0x532>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1098

        AX(AX_ID, deg_up, 150);
        EEPROM_write_int(deg_up_address, deg_up);
      } else if (start == 0) {
    2ac4:	86 e0       	ldi	r24, 0x06	; 6
    2ac6:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2aca:	89 2b       	or	r24, r25
    2acc:	09 f0       	breq	.+2      	; 0x2ad0 <menu_motor()+0x576>
    2ace:	70 cd       	rjmp	.-1312   	; 0x25b0 <menu_motor()+0x56>
    2ad0:	dd cf       	rjmp	.-70     	; 0x2a8c <menu_motor()+0x532>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1102
        AX(AX_ID, deg_up, 150);
        EEPROM_write_int(deg_up_address, deg_up);
      }
    } else if (page == 8)  // deg4
    2ad2:	88 30       	cpi	r24, 0x08	; 8
    2ad4:	09 f0       	breq	.+2      	; 0x2ad8 <menu_motor()+0x57e>
    2ad6:	6c cd       	rjmp	.-1320   	; 0x25b0 <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1104
    {
      if (increase == 0) {
    2ad8:	8a e0       	ldi	r24, 0x0A	; 10
    2ada:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2ade:	89 2b       	or	r24, r25
    2ae0:	a1 f4       	brne	.+40     	; 0x2b0a <menu_motor()+0x5b0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1105
        delay(10);
    2ae2:	6a e0       	ldi	r22, 0x0A	; 10
    2ae4:	70 e0       	ldi	r23, 0x00	; 0
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1106
        if (deg4 < 1022)
    2aee:	ce 3f       	cpi	r28, 0xFE	; 254
    2af0:	23 e0       	ldi	r18, 0x03	; 3
    2af2:	d2 07       	cpc	r29, r18
    2af4:	0c f4       	brge	.+2      	; 0x2af8 <menu_motor()+0x59e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1107
          deg4 += 5;
    2af6:	25 96       	adiw	r28, 0x05	; 5
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1120
          deg4 -= 5;

        AX(AX_ID, deg4, 150);
        EEPROM_write_int(deg4_address, deg4);
      } else if (start == 0) {
        AX(AX_ID, deg4, 150);
    2af8:	66 e9       	ldi	r22, 0x96	; 150
    2afa:	70 e0       	ldi	r23, 0x00	; 0
    2afc:	ce 01       	movw	r24, r28
    2afe:	0e 94 41 03 	call	0x682	; 0x682 <AX(char, int, int) [clone .constprop.24]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1121
        EEPROM_write_int(deg4_address, deg4);
    2b02:	be 01       	movw	r22, r28
    2b04:	8a ea       	ldi	r24, 0xAA	; 170
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	88 ce       	rjmp	.-752    	; 0x281a <menu_motor()+0x2c0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1111
        if (deg4 < 1022)
          deg4 += 5;

        AX(AX_ID, deg4, 150);
        EEPROM_write_int(deg4_address, deg4);
      } else if (decrease == 0) {
    2b0a:	8b e0       	ldi	r24, 0x0B	; 11
    2b0c:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2b10:	89 2b       	or	r24, r25
    2b12:	59 f4       	brne	.+22     	; 0x2b2a <menu_motor()+0x5d0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1112
        delay(10);
    2b14:	6a e0       	ldi	r22, 0x0A	; 10
    2b16:	70 e0       	ldi	r23, 0x00	; 0
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1114

        if (deg4 > 1)
    2b20:	c2 30       	cpi	r28, 0x02	; 2
    2b22:	d1 05       	cpc	r29, r1
    2b24:	4c f3       	brlt	.-46     	; 0x2af8 <menu_motor()+0x59e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1115
          deg4 -= 5;
    2b26:	25 97       	sbiw	r28, 0x05	; 5
    2b28:	e7 cf       	rjmp	.-50     	; 0x2af8 <menu_motor()+0x59e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1119

        AX(AX_ID, deg4, 150);
        EEPROM_write_int(deg4_address, deg4);
      } else if (start == 0) {
    2b2a:	86 e0       	ldi	r24, 0x06	; 6
    2b2c:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2b30:	89 2b       	or	r24, r25
    2b32:	09 f0       	breq	.+2      	; 0x2b36 <menu_motor()+0x5dc>
    2b34:	3d cd       	rjmp	.-1414   	; 0x25b0 <menu_motor()+0x56>
    2b36:	e0 cf       	rjmp	.-64     	; 0x2af8 <menu_motor()+0x59e>

00002b38 <color_calib()>:
color_calib():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:340

void color_calib(void) {
  static char page = 1, last_page = 10;
  char red_l_calibrated = 0, red_r_calibrated = 0, grn_l_calibrated = 0, grn_r_calibrated = 0, blu_l_calibrated = 0, blu_r_calibrated = 0, yel_l_calibrated = 0, yel_r_calibrated = 0, sil_l_calibrated = 0, sil_r_calibrated = 0;

  lcd.clear();
    2b38:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:338
  // delay(5);
}

void color_calib(void) {
  static char page = 1, last_page = 10;
  char red_l_calibrated = 0, red_r_calibrated = 0, grn_l_calibrated = 0, grn_r_calibrated = 0, blu_l_calibrated = 0, blu_r_calibrated = 0, yel_l_calibrated = 0, yel_r_calibrated = 0, sil_l_calibrated = 0, sil_r_calibrated = 0;
    2b3c:	c0 e0       	ldi	r28, 0x00	; 0
    2b3e:	d0 e0       	ldi	r29, 0x00	; 0
    2b40:	10 e0       	ldi	r17, 0x00	; 0
    2b42:	00 e0       	ldi	r16, 0x00	; 0
    2b44:	f1 2c       	mov	r15, r1
    2b46:	e1 2c       	mov	r14, r1
    2b48:	d1 2c       	mov	r13, r1
    2b4a:	c1 2c       	mov	r12, r1
    2b4c:	b1 2c       	mov	r11, r1
    2b4e:	a1 2c       	mov	r10, r1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:347
    if (next_page == 0) {
      while (next_page == 0)
        ;
      page++;
      if (page > last_page)
        page = 1;
    2b50:	99 24       	eor	r9, r9
    2b52:	93 94       	inc	r9
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:356
    if (previuse_page == 0) {
      while (previuse_page == 0)
        ;
      page--;
      if (page < 1)
        page = last_page;
    2b54:	8a e0       	ldi	r24, 0x0A	; 10
    2b56:	88 2e       	mov	r8, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:342
  static char page = 1, last_page = 10;
  char red_l_calibrated = 0, red_r_calibrated = 0, grn_l_calibrated = 0, grn_r_calibrated = 0, blu_l_calibrated = 0, blu_r_calibrated = 0, yel_l_calibrated = 0, yel_r_calibrated = 0, sil_l_calibrated = 0, sil_r_calibrated = 0;

  lcd.clear();
  while (1) {
    if (next_page == 0) {
    2b58:	88 e0       	ldi	r24, 0x08	; 8
    2b5a:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2b5e:	89 2b       	or	r24, r25
    2b60:	79 f4       	brne	.+30     	; 0x2b80 <color_calib()+0x48>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:343
      while (next_page == 0)
    2b62:	88 e0       	ldi	r24, 0x08	; 8
    2b64:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2b68:	89 2b       	or	r24, r25
    2b6a:	d9 f3       	breq	.-10     	; 0x2b62 <color_calib()+0x2a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:345
        ;
      page++;
    2b6c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2b70:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:346
      if (page > last_page)
    2b72:	8b 30       	cpi	r24, 0x0B	; 11
    2b74:	0c f0       	brlt	.+2      	; 0x2b78 <color_calib()+0x40>
    2b76:	a1 c0       	rjmp	.+322    	; 0x2cba <color_calib()+0x182>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:345
  lcd.clear();
  while (1) {
    if (next_page == 0) {
      while (next_page == 0)
        ;
      page++;
    2b78:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:348
      if (page > last_page)
        page = 1;
      lcd.clear();
    2b7c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:351
    }

    if (previuse_page == 0) {
    2b80:	89 e0       	ldi	r24, 0x09	; 9
    2b82:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2b86:	89 2b       	or	r24, r25
    2b88:	79 f4       	brne	.+30     	; 0x2ba8 <color_calib()+0x70>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:352
      while (previuse_page == 0)
    2b8a:	89 e0       	ldi	r24, 0x09	; 9
    2b8c:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2b90:	89 2b       	or	r24, r25
    2b92:	d9 f3       	breq	.-10     	; 0x2b8a <color_calib()+0x52>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:354
        ;
      page--;
    2b94:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2b98:	81 50       	subi	r24, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:355
      if (page < 1)
    2b9a:	18 16       	cp	r1, r24
    2b9c:	0c f0       	brlt	.+2      	; 0x2ba0 <color_calib()+0x68>
    2b9e:	90 c0       	rjmp	.+288    	; 0x2cc0 <color_calib()+0x188>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:354
    }

    if (previuse_page == 0) {
      while (previuse_page == 0)
        ;
      page--;
    2ba0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:357
      if (page < 1)
        page = last_page;
      lcd.clear();
    2ba4:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:360
    }

    if (start == 0) {
    2ba8:	86 e0       	ldi	r24, 0x06	; 6
    2baa:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2bae:	89 2b       	or	r24, r25
    2bb0:	41 f4       	brne	.+16     	; 0x2bc2 <color_calib()+0x8a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:361
      lcd.clear();
    2bb2:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:362
      delay(200);
    2bb6:	68 ec       	ldi	r22, 0xC8	; 200
    2bb8:	70 e0       	ldi	r23, 0x00	; 0
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:365
    }  // baraye inke age 2 bar khastim calib konim motevajeh beshim

    if (page <= 4) {
    2bc2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:366
      lcd.setCursor(3, 0);
    2bc6:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:365
    if (start == 0) {
      lcd.clear();
      delay(200);
    }  // baraye inke age 2 bar khastim calib konim motevajeh beshim

    if (page <= 4) {
    2bc8:	85 30       	cpi	r24, 0x05	; 5
    2bca:	0c f0       	brlt	.+2      	; 0x2bce <color_calib()+0x96>
    2bcc:	7c c0       	rjmp	.+248    	; 0x2cc6 <color_calib()+0x18e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:366
      lcd.setCursor(3, 0);
    2bce:	83 e0       	ldi	r24, 0x03	; 3
    2bd0:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:367
      lcd.print("RED left    ");
    2bd4:	85 e1       	ldi	r24, 0x15	; 21
    2bd6:	94 e0       	ldi	r25, 0x04	; 4
    2bd8:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:368
      if (red_l_calibrated == 1)
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	a8 12       	cpse	r10, r24
    2be0:	04 c0       	rjmp	.+8      	; 0x2bea <color_calib()+0xb2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:369
        lcd.print("done");
    2be2:	82 e2       	ldi	r24, 0x22	; 34
    2be4:	94 e0       	ldi	r25, 0x04	; 4
    2be6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:371

      lcd.setCursor(3, 1);
    2bea:	61 e0       	ldi	r22, 0x01	; 1
    2bec:	83 e0       	ldi	r24, 0x03	; 3
    2bee:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:372
      lcd.print("RED right   ");
    2bf2:	87 e2       	ldi	r24, 0x27	; 39
    2bf4:	94 e0       	ldi	r25, 0x04	; 4
    2bf6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:373
      if (red_r_calibrated == 1)
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	b8 12       	cpse	r11, r24
    2bfe:	04 c0       	rjmp	.+8      	; 0x2c08 <color_calib()+0xd0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:374
        lcd.print("done");
    2c00:	82 e2       	ldi	r24, 0x22	; 34
    2c02:	94 e0       	ldi	r25, 0x04	; 4
    2c04:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:376

      lcd.setCursor(3, 2);
    2c08:	62 e0       	ldi	r22, 0x02	; 2
    2c0a:	83 e0       	ldi	r24, 0x03	; 3
    2c0c:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:377
      lcd.print("Green left  ");
    2c10:	84 e3       	ldi	r24, 0x34	; 52
    2c12:	94 e0       	ldi	r25, 0x04	; 4
    2c14:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:378
      if (grn_l_calibrated == 1)
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	c8 12       	cpse	r12, r24
    2c1c:	04 c0       	rjmp	.+8      	; 0x2c26 <color_calib()+0xee>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:379
        lcd.print("done");
    2c1e:	82 e2       	ldi	r24, 0x22	; 34
    2c20:	94 e0       	ldi	r25, 0x04	; 4
    2c22:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:381

      lcd.setCursor(3, 3);
    2c26:	63 e0       	ldi	r22, 0x03	; 3
    2c28:	83 e0       	ldi	r24, 0x03	; 3
    2c2a:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:382
      lcd.print("Green right ");
    2c2e:	81 e4       	ldi	r24, 0x41	; 65
    2c30:	94 e0       	ldi	r25, 0x04	; 4
    2c32:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:383
      if (grn_r_calibrated == 1)
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	d8 12       	cpse	r13, r24
    2c3a:	04 c0       	rjmp	.+8      	; 0x2c44 <color_calib()+0x10c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:384
        lcd.print("done");
    2c3c:	82 e2       	ldi	r24, 0x22	; 34
    2c3e:	94 e0       	ldi	r25, 0x04	; 4
    2c40:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:386

      lcd.setCursor(0, page - 1);
    2c44:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2c48:	61 50       	subi	r22, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:422
      lcd.setCursor(3, 1);
      lcd.print("SILVER right ");
      if (sil_r_calibrated == 1)
        lcd.print("done");

      lcd.setCursor(0, page - 9);
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:423
      lcd.print("-> ");
    2c50:	8e e4       	ldi	r24, 0x4E	; 78
    2c52:	94 e0       	ldi	r25, 0x04	; 4
    2c54:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:426
    }

    if (page == 1)  // -> red left
    2c58:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2c5c:	81 30       	cpi	r24, 0x01	; 1
    2c5e:	09 f0       	breq	.+2      	; 0x2c62 <color_calib()+0x12a>
    2c60:	90 c0       	rjmp	.+288    	; 0x2d82 <color_calib()+0x24a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:428
    {
      if (start == 0) {
    2c62:	86 e0       	ldi	r24, 0x06	; 6
    2c64:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2c68:	89 2b       	or	r24, r25
    2c6a:	09 f0       	breq	.+2      	; 0x2c6e <color_calib()+0x136>
    2c6c:	75 cf       	rjmp	.-278    	; 0x2b58 <color_calib()+0x20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:429
        color_L;
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:434
        // EEPROM_read_int(red_left_r) = red;
        // EEPROM_read_int(red_left_g) = green;
        // EEPROM_read_int(red_left_b) = blue;
        // EEPROM_read_int(red_left_c) = clear;
        EEPROM_write_int(red_left_r, red);
    2c74:	60 91 11 08 	lds	r22, 0x0811	; 0x800811 <red>
    2c78:	70 91 12 08 	lds	r23, 0x0812	; 0x800812 <red+0x1>
    2c7c:	84 e1       	ldi	r24, 0x14	; 20
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:435
        EEPROM_write_int(red_left_g, green);
    2c84:	60 91 13 08 	lds	r22, 0x0813	; 0x800813 <green>
    2c88:	70 91 14 08 	lds	r23, 0x0814	; 0x800814 <green+0x1>
    2c8c:	86 e1       	ldi	r24, 0x16	; 22
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:436
        EEPROM_write_int(red_left_b, blue);
    2c94:	60 91 15 08 	lds	r22, 0x0815	; 0x800815 <blue>
    2c98:	70 91 16 08 	lds	r23, 0x0816	; 0x800816 <blue+0x1>
    2c9c:	88 e1       	ldi	r24, 0x18	; 24
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:437
        EEPROM_write_int(red_left_c, clear);
    2ca4:	60 91 17 08 	lds	r22, 0x0817	; 0x800817 <clear>
    2ca8:	70 91 18 08 	lds	r23, 0x0818	; 0x800818 <clear+0x1>
    2cac:	8a e1       	ldi	r24, 0x1A	; 26
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:438
        red_l_calibrated = 1;
    2cb4:	aa 24       	eor	r10, r10
    2cb6:	a3 94       	inc	r10
    2cb8:	4f cf       	rjmp	.-354    	; 0x2b58 <color_calib()+0x20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:347
    if (next_page == 0) {
      while (next_page == 0)
        ;
      page++;
      if (page > last_page)
        page = 1;
    2cba:	90 92 00 01 	sts	0x0100, r9	; 0x800100 <__DATA_REGION_ORIGIN__>
    2cbe:	5e cf       	rjmp	.-324    	; 0x2b7c <color_calib()+0x44>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:356
    if (previuse_page == 0) {
      while (previuse_page == 0)
        ;
      page--;
      if (page < 1)
        page = last_page;
    2cc0:	80 92 00 01 	sts	0x0100, r8	; 0x800100 <__DATA_REGION_ORIGIN__>
    2cc4:	6f cf       	rjmp	.-290    	; 0x2ba4 <color_calib()+0x6c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:388
      if (grn_r_calibrated == 1)
        lcd.print("done");

      lcd.setCursor(0, page - 1);
      lcd.print("-> ");
    } else if (page <= 8) {
    2cc6:	89 30       	cpi	r24, 0x09	; 9
    2cc8:	ec f5       	brge	.+122    	; 0x2d44 <color_calib()+0x20c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:389
      lcd.setCursor(3, 0);
    2cca:	83 e0       	ldi	r24, 0x03	; 3
    2ccc:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:390
      lcd.print("BLUE left   ");
    2cd0:	82 e5       	ldi	r24, 0x52	; 82
    2cd2:	94 e0       	ldi	r25, 0x04	; 4
    2cd4:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:391
      if (blu_l_calibrated == 1)
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	e8 12       	cpse	r14, r24
    2cdc:	04 c0       	rjmp	.+8      	; 0x2ce6 <color_calib()+0x1ae>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:392
        lcd.print("done");
    2cde:	82 e2       	ldi	r24, 0x22	; 34
    2ce0:	94 e0       	ldi	r25, 0x04	; 4
    2ce2:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:394

      lcd.setCursor(3, 1);
    2ce6:	61 e0       	ldi	r22, 0x01	; 1
    2ce8:	83 e0       	ldi	r24, 0x03	; 3
    2cea:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:395
      lcd.print("BLUE right  ");
    2cee:	8f e5       	ldi	r24, 0x5F	; 95
    2cf0:	94 e0       	ldi	r25, 0x04	; 4
    2cf2:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:396
      if (blu_r_calibrated == 1)
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	f8 12       	cpse	r15, r24
    2cfa:	04 c0       	rjmp	.+8      	; 0x2d04 <color_calib()+0x1cc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:397
        lcd.print("done");
    2cfc:	82 e2       	ldi	r24, 0x22	; 34
    2cfe:	94 e0       	ldi	r25, 0x04	; 4
    2d00:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:399

      lcd.setCursor(3, 2);
    2d04:	62 e0       	ldi	r22, 0x02	; 2
    2d06:	83 e0       	ldi	r24, 0x03	; 3
    2d08:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:400
      lcd.print("YELLOW left ");
    2d0c:	8c e6       	ldi	r24, 0x6C	; 108
    2d0e:	94 e0       	ldi	r25, 0x04	; 4
    2d10:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:401
      if (yel_l_calibrated == 1)
    2d14:	01 30       	cpi	r16, 0x01	; 1
    2d16:	21 f4       	brne	.+8      	; 0x2d20 <color_calib()+0x1e8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:402
        lcd.print("done");
    2d18:	82 e2       	ldi	r24, 0x22	; 34
    2d1a:	94 e0       	ldi	r25, 0x04	; 4
    2d1c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:404

      lcd.setCursor(3, 3);
    2d20:	63 e0       	ldi	r22, 0x03	; 3
    2d22:	83 e0       	ldi	r24, 0x03	; 3
    2d24:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:405
      lcd.print("YELLOW right ");
    2d28:	89 e7       	ldi	r24, 0x79	; 121
    2d2a:	94 e0       	ldi	r25, 0x04	; 4
    2d2c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:406
      if (yel_r_calibrated == 1)
    2d30:	11 30       	cpi	r17, 0x01	; 1
    2d32:	21 f4       	brne	.+8      	; 0x2d3c <color_calib()+0x204>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:407
        lcd.print("done");
    2d34:	82 e2       	ldi	r24, 0x22	; 34
    2d36:	94 e0       	ldi	r25, 0x04	; 4
    2d38:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:409

      lcd.setCursor(0, page - 5);
    2d3c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2d40:	65 50       	subi	r22, 0x05	; 5
    2d42:	83 cf       	rjmp	.-250    	; 0x2c4a <color_calib()+0x112>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:412
      lcd.print("-> ");
    } else {
      lcd.setCursor(3, 0);
    2d44:	83 e0       	ldi	r24, 0x03	; 3
    2d46:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:413
      lcd.print("SILVER left  ");
    2d4a:	87 e8       	ldi	r24, 0x87	; 135
    2d4c:	94 e0       	ldi	r25, 0x04	; 4
    2d4e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:414
      if (sil_l_calibrated == 1)
    2d52:	d1 30       	cpi	r29, 0x01	; 1
    2d54:	21 f4       	brne	.+8      	; 0x2d5e <color_calib()+0x226>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:415
        lcd.print("done");
    2d56:	82 e2       	ldi	r24, 0x22	; 34
    2d58:	94 e0       	ldi	r25, 0x04	; 4
    2d5a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:417

      lcd.setCursor(3, 1);
    2d5e:	61 e0       	ldi	r22, 0x01	; 1
    2d60:	83 e0       	ldi	r24, 0x03	; 3
    2d62:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:418
      lcd.print("SILVER right ");
    2d66:	85 e9       	ldi	r24, 0x95	; 149
    2d68:	94 e0       	ldi	r25, 0x04	; 4
    2d6a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:419
      if (sil_r_calibrated == 1)
    2d6e:	c1 30       	cpi	r28, 0x01	; 1
    2d70:	21 f4       	brne	.+8      	; 0x2d7a <color_calib()+0x242>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:420
        lcd.print("done");
    2d72:	82 e2       	ldi	r24, 0x22	; 34
    2d74:	94 e0       	ldi	r25, 0x04	; 4
    2d76:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:422

      lcd.setCursor(0, page - 9);
    2d7a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2d7e:	69 50       	subi	r22, 0x09	; 9
    2d80:	64 cf       	rjmp	.-312    	; 0x2c4a <color_calib()+0x112>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:440
        EEPROM_write_int(red_left_g, green);
        EEPROM_write_int(red_left_b, blue);
        EEPROM_write_int(red_left_c, clear);
        red_l_calibrated = 1;
      }
    } else if (page == 2)  // red right
    2d82:	82 30       	cpi	r24, 0x02	; 2
    2d84:	61 f5       	brne	.+88     	; 0x2dde <color_calib()+0x2a6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:442
    {
      if (start == 0) {
    2d86:	86 e0       	ldi	r24, 0x06	; 6
    2d88:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2d8c:	89 2b       	or	r24, r25
    2d8e:	09 f0       	breq	.+2      	; 0x2d92 <color_calib()+0x25a>
    2d90:	e3 ce       	rjmp	.-570    	; 0x2b58 <color_calib()+0x20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:443
        color_R;
    2d92:	82 e0       	ldi	r24, 0x02	; 2
    2d94:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:444
        EEPROM_write_int(red_right_r, red);
    2d98:	60 91 11 08 	lds	r22, 0x0811	; 0x800811 <red>
    2d9c:	70 91 12 08 	lds	r23, 0x0812	; 0x800812 <red+0x1>
    2da0:	8c e3       	ldi	r24, 0x3C	; 60
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:445
        EEPROM_write_int(red_right_g, green);
    2da8:	60 91 13 08 	lds	r22, 0x0813	; 0x800813 <green>
    2dac:	70 91 14 08 	lds	r23, 0x0814	; 0x800814 <green+0x1>
    2db0:	8e e3       	ldi	r24, 0x3E	; 62
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:446
        EEPROM_write_int(red_right_b, blue);
    2db8:	60 91 15 08 	lds	r22, 0x0815	; 0x800815 <blue>
    2dbc:	70 91 16 08 	lds	r23, 0x0816	; 0x800816 <blue+0x1>
    2dc0:	80 e4       	ldi	r24, 0x40	; 64
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:447
        EEPROM_write_int(red_right_c, clear);
    2dc8:	60 91 17 08 	lds	r22, 0x0817	; 0x800817 <clear>
    2dcc:	70 91 18 08 	lds	r23, 0x0818	; 0x800818 <clear+0x1>
    2dd0:	82 e4       	ldi	r24, 0x42	; 66
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:448
        red_r_calibrated = 1;
    2dd8:	bb 24       	eor	r11, r11
    2dda:	b3 94       	inc	r11
    2ddc:	bd ce       	rjmp	.-646    	; 0x2b58 <color_calib()+0x20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:452
      }
    }

    else if (page == 3)  // grn left
    2dde:	83 30       	cpi	r24, 0x03	; 3
    2de0:	61 f5       	brne	.+88     	; 0x2e3a <color_calib()+0x302>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:454
    {
      if (start == 0) {
    2de2:	86 e0       	ldi	r24, 0x06	; 6
    2de4:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2de8:	89 2b       	or	r24, r25
    2dea:	09 f0       	breq	.+2      	; 0x2dee <color_calib()+0x2b6>
    2dec:	b5 ce       	rjmp	.-662    	; 0x2b58 <color_calib()+0x20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:455
        color_L;
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:456
        EEPROM_write_int(green_left_r, red);
    2df4:	60 91 11 08 	lds	r22, 0x0811	; 0x800811 <red>
    2df8:	70 91 12 08 	lds	r23, 0x0812	; 0x800812 <red+0x1>
    2dfc:	8c e1       	ldi	r24, 0x1C	; 28
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:457
        EEPROM_write_int(green_left_g, green);
    2e04:	60 91 13 08 	lds	r22, 0x0813	; 0x800813 <green>
    2e08:	70 91 14 08 	lds	r23, 0x0814	; 0x800814 <green+0x1>
    2e0c:	8e e1       	ldi	r24, 0x1E	; 30
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:458
        EEPROM_write_int(green_left_b, blue);
    2e14:	60 91 15 08 	lds	r22, 0x0815	; 0x800815 <blue>
    2e18:	70 91 16 08 	lds	r23, 0x0816	; 0x800816 <blue+0x1>
    2e1c:	80 e2       	ldi	r24, 0x20	; 32
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:459
        EEPROM_write_int(green_left_c, clear);
    2e24:	60 91 17 08 	lds	r22, 0x0817	; 0x800817 <clear>
    2e28:	70 91 18 08 	lds	r23, 0x0818	; 0x800818 <clear+0x1>
    2e2c:	82 e2       	ldi	r24, 0x22	; 34
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:460
        grn_l_calibrated = 1;
    2e34:	cc 24       	eor	r12, r12
    2e36:	c3 94       	inc	r12
    2e38:	8f ce       	rjmp	.-738    	; 0x2b58 <color_calib()+0x20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:462
      }
    } else if (page == 4)  // grn right
    2e3a:	84 30       	cpi	r24, 0x04	; 4
    2e3c:	61 f5       	brne	.+88     	; 0x2e96 <color_calib()+0x35e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:464
    {
      if (start == 0) {
    2e3e:	86 e0       	ldi	r24, 0x06	; 6
    2e40:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2e44:	89 2b       	or	r24, r25
    2e46:	09 f0       	breq	.+2      	; 0x2e4a <color_calib()+0x312>
    2e48:	87 ce       	rjmp	.-754    	; 0x2b58 <color_calib()+0x20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:465
        color_R;
    2e4a:	82 e0       	ldi	r24, 0x02	; 2
    2e4c:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:466
        EEPROM_write_int(green_right_r, red);
    2e50:	60 91 11 08 	lds	r22, 0x0811	; 0x800811 <red>
    2e54:	70 91 12 08 	lds	r23, 0x0812	; 0x800812 <red+0x1>
    2e58:	84 e4       	ldi	r24, 0x44	; 68
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:467
        EEPROM_write_int(green_right_g, green);
    2e60:	60 91 13 08 	lds	r22, 0x0813	; 0x800813 <green>
    2e64:	70 91 14 08 	lds	r23, 0x0814	; 0x800814 <green+0x1>
    2e68:	86 e4       	ldi	r24, 0x46	; 70
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:468
        EEPROM_write_int(green_right_b, blue);
    2e70:	60 91 15 08 	lds	r22, 0x0815	; 0x800815 <blue>
    2e74:	70 91 16 08 	lds	r23, 0x0816	; 0x800816 <blue+0x1>
    2e78:	88 e4       	ldi	r24, 0x48	; 72
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:469
        EEPROM_write_int(green_right_c, clear);
    2e80:	60 91 17 08 	lds	r22, 0x0817	; 0x800817 <clear>
    2e84:	70 91 18 08 	lds	r23, 0x0818	; 0x800818 <clear+0x1>
    2e88:	8a e4       	ldi	r24, 0x4A	; 74
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:470
        grn_r_calibrated = 1;
    2e90:	dd 24       	eor	r13, r13
    2e92:	d3 94       	inc	r13
    2e94:	61 ce       	rjmp	.-830    	; 0x2b58 <color_calib()+0x20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:474
      }
    }

    else if (page == 5)  // blu left
    2e96:	85 30       	cpi	r24, 0x05	; 5
    2e98:	61 f5       	brne	.+88     	; 0x2ef2 <color_calib()+0x3ba>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:476
    {
      if (start == 0) {
    2e9a:	86 e0       	ldi	r24, 0x06	; 6
    2e9c:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2ea0:	89 2b       	or	r24, r25
    2ea2:	09 f0       	breq	.+2      	; 0x2ea6 <color_calib()+0x36e>
    2ea4:	59 ce       	rjmp	.-846    	; 0x2b58 <color_calib()+0x20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:477
        color_L;
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:478
        EEPROM_write_int(blue_left_r, red);
    2eac:	60 91 11 08 	lds	r22, 0x0811	; 0x800811 <red>
    2eb0:	70 91 12 08 	lds	r23, 0x0812	; 0x800812 <red+0x1>
    2eb4:	84 e2       	ldi	r24, 0x24	; 36
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:479
        EEPROM_write_int(blue_left_g, green);
    2ebc:	60 91 13 08 	lds	r22, 0x0813	; 0x800813 <green>
    2ec0:	70 91 14 08 	lds	r23, 0x0814	; 0x800814 <green+0x1>
    2ec4:	86 e2       	ldi	r24, 0x26	; 38
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:480
        EEPROM_write_int(blue_left_b, blue);
    2ecc:	60 91 15 08 	lds	r22, 0x0815	; 0x800815 <blue>
    2ed0:	70 91 16 08 	lds	r23, 0x0816	; 0x800816 <blue+0x1>
    2ed4:	88 e2       	ldi	r24, 0x28	; 40
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:481
        EEPROM_write_int(blue_left_c, clear);
    2edc:	60 91 17 08 	lds	r22, 0x0817	; 0x800817 <clear>
    2ee0:	70 91 18 08 	lds	r23, 0x0818	; 0x800818 <clear+0x1>
    2ee4:	8a e2       	ldi	r24, 0x2A	; 42
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:482
        blu_l_calibrated = 1;
    2eec:	ee 24       	eor	r14, r14
    2eee:	e3 94       	inc	r14
    2ef0:	33 ce       	rjmp	.-922    	; 0x2b58 <color_calib()+0x20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:484
      }
    } else if (page == 6)  // blu right
    2ef2:	86 30       	cpi	r24, 0x06	; 6
    2ef4:	59 f5       	brne	.+86     	; 0x2f4c <color_calib()+0x414>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:486
    {
      if (start == 0) {
    2ef6:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2efa:	89 2b       	or	r24, r25
    2efc:	09 f0       	breq	.+2      	; 0x2f00 <color_calib()+0x3c8>
    2efe:	2c ce       	rjmp	.-936    	; 0x2b58 <color_calib()+0x20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:487
        color_R;
    2f00:	82 e0       	ldi	r24, 0x02	; 2
    2f02:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:488
        EEPROM_write_int(blue_right_r, red);
    2f06:	60 91 11 08 	lds	r22, 0x0811	; 0x800811 <red>
    2f0a:	70 91 12 08 	lds	r23, 0x0812	; 0x800812 <red+0x1>
    2f0e:	8c e4       	ldi	r24, 0x4C	; 76
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:489
        EEPROM_write_int(blue_right_g, green);
    2f16:	60 91 13 08 	lds	r22, 0x0813	; 0x800813 <green>
    2f1a:	70 91 14 08 	lds	r23, 0x0814	; 0x800814 <green+0x1>
    2f1e:	8e e4       	ldi	r24, 0x4E	; 78
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:490
        EEPROM_write_int(blue_right_b, blue);
    2f26:	60 91 15 08 	lds	r22, 0x0815	; 0x800815 <blue>
    2f2a:	70 91 16 08 	lds	r23, 0x0816	; 0x800816 <blue+0x1>
    2f2e:	80 e5       	ldi	r24, 0x50	; 80
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:491
        EEPROM_write_int(blue_right_c, clear);
    2f36:	60 91 17 08 	lds	r22, 0x0817	; 0x800817 <clear>
    2f3a:	70 91 18 08 	lds	r23, 0x0818	; 0x800818 <clear+0x1>
    2f3e:	82 e5       	ldi	r24, 0x52	; 82
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:492
        blu_r_calibrated = 1;
    2f46:	ff 24       	eor	r15, r15
    2f48:	f3 94       	inc	r15
    2f4a:	06 ce       	rjmp	.-1012   	; 0x2b58 <color_calib()+0x20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:496
      }
    }

    else if (page == 7)  // yelow left
    2f4c:	87 30       	cpi	r24, 0x07	; 7
    2f4e:	59 f5       	brne	.+86     	; 0x2fa6 <color_calib()+0x46e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:498
    {
      if (start == 0) {
    2f50:	86 e0       	ldi	r24, 0x06	; 6
    2f52:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2f56:	89 2b       	or	r24, r25
    2f58:	09 f0       	breq	.+2      	; 0x2f5c <color_calib()+0x424>
    2f5a:	fe cd       	rjmp	.-1028   	; 0x2b58 <color_calib()+0x20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:499
        color_L;
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:500
        EEPROM_write_int(yellow_left_r, red);
    2f62:	60 91 11 08 	lds	r22, 0x0811	; 0x800811 <red>
    2f66:	70 91 12 08 	lds	r23, 0x0812	; 0x800812 <red+0x1>
    2f6a:	8c e2       	ldi	r24, 0x2C	; 44
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:501
        EEPROM_write_int(yellow_left_g, green);
    2f72:	60 91 13 08 	lds	r22, 0x0813	; 0x800813 <green>
    2f76:	70 91 14 08 	lds	r23, 0x0814	; 0x800814 <green+0x1>
    2f7a:	8e e2       	ldi	r24, 0x2E	; 46
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:502
        EEPROM_write_int(yellow_left_b, blue);
    2f82:	60 91 15 08 	lds	r22, 0x0815	; 0x800815 <blue>
    2f86:	70 91 16 08 	lds	r23, 0x0816	; 0x800816 <blue+0x1>
    2f8a:	80 e3       	ldi	r24, 0x30	; 48
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:503
        EEPROM_write_int(yellow_left_c, clear);
    2f92:	60 91 17 08 	lds	r22, 0x0817	; 0x800817 <clear>
    2f96:	70 91 18 08 	lds	r23, 0x0818	; 0x800818 <clear+0x1>
    2f9a:	82 e3       	ldi	r24, 0x32	; 50
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:504
        yel_l_calibrated = 1;
    2fa2:	01 e0       	ldi	r16, 0x01	; 1
    2fa4:	d9 cd       	rjmp	.-1102   	; 0x2b58 <color_calib()+0x20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:506
      }
    } else if (page == 8)  // yelow right
    2fa6:	88 30       	cpi	r24, 0x08	; 8
    2fa8:	59 f5       	brne	.+86     	; 0x3000 <color_calib()+0x4c8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:508
    {
      if (start == 0) {
    2faa:	86 e0       	ldi	r24, 0x06	; 6
    2fac:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    2fb0:	89 2b       	or	r24, r25
    2fb2:	09 f0       	breq	.+2      	; 0x2fb6 <color_calib()+0x47e>
    2fb4:	d1 cd       	rjmp	.-1118   	; 0x2b58 <color_calib()+0x20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:509
        color_R;
    2fb6:	82 e0       	ldi	r24, 0x02	; 2
    2fb8:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:510
        EEPROM_write_int(yellow_right_r, red);
    2fbc:	60 91 11 08 	lds	r22, 0x0811	; 0x800811 <red>
    2fc0:	70 91 12 08 	lds	r23, 0x0812	; 0x800812 <red+0x1>
    2fc4:	84 e5       	ldi	r24, 0x54	; 84
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:511
        EEPROM_write_int(yellow_right_g, green);
    2fcc:	60 91 13 08 	lds	r22, 0x0813	; 0x800813 <green>
    2fd0:	70 91 14 08 	lds	r23, 0x0814	; 0x800814 <green+0x1>
    2fd4:	86 e5       	ldi	r24, 0x56	; 86
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:512
        EEPROM_write_int(yellow_right_b, blue);
    2fdc:	60 91 15 08 	lds	r22, 0x0815	; 0x800815 <blue>
    2fe0:	70 91 16 08 	lds	r23, 0x0816	; 0x800816 <blue+0x1>
    2fe4:	88 e5       	ldi	r24, 0x58	; 88
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:513
        EEPROM_write_int(yellow_right_c, clear);
    2fec:	60 91 17 08 	lds	r22, 0x0817	; 0x800817 <clear>
    2ff0:	70 91 18 08 	lds	r23, 0x0818	; 0x800818 <clear+0x1>
    2ff4:	8a e5       	ldi	r24, 0x5A	; 90
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:514
        yel_r_calibrated = 1;
    2ffc:	11 e0       	ldi	r17, 0x01	; 1
    2ffe:	ac cd       	rjmp	.-1192   	; 0x2b58 <color_calib()+0x20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:518
      }
    }

    else if (page == 9)  // sil left
    3000:	89 30       	cpi	r24, 0x09	; 9
    3002:	59 f5       	brne	.+86     	; 0x305a <color_calib()+0x522>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:520
    {
      if (start == 0) {
    3004:	86 e0       	ldi	r24, 0x06	; 6
    3006:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    300a:	89 2b       	or	r24, r25
    300c:	09 f0       	breq	.+2      	; 0x3010 <color_calib()+0x4d8>
    300e:	a4 cd       	rjmp	.-1208   	; 0x2b58 <color_calib()+0x20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:521
        color_L;
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:522
        EEPROM_write_int(silver_left_r, red);
    3016:	60 91 11 08 	lds	r22, 0x0811	; 0x800811 <red>
    301a:	70 91 12 08 	lds	r23, 0x0812	; 0x800812 <red+0x1>
    301e:	84 e3       	ldi	r24, 0x34	; 52
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:523
        EEPROM_write_int(silver_left_g, green);
    3026:	60 91 13 08 	lds	r22, 0x0813	; 0x800813 <green>
    302a:	70 91 14 08 	lds	r23, 0x0814	; 0x800814 <green+0x1>
    302e:	86 e3       	ldi	r24, 0x36	; 54
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:524
        EEPROM_write_int(silver_left_b, blue);
    3036:	60 91 15 08 	lds	r22, 0x0815	; 0x800815 <blue>
    303a:	70 91 16 08 	lds	r23, 0x0816	; 0x800816 <blue+0x1>
    303e:	88 e3       	ldi	r24, 0x38	; 56
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:525
        EEPROM_write_int(silver_left_c, clear);
    3046:	60 91 17 08 	lds	r22, 0x0817	; 0x800817 <clear>
    304a:	70 91 18 08 	lds	r23, 0x0818	; 0x800818 <clear+0x1>
    304e:	8a e3       	ldi	r24, 0x3A	; 58
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:526
        sil_l_calibrated = 1;
    3056:	d1 e0       	ldi	r29, 0x01	; 1
    3058:	7f cd       	rjmp	.-1282   	; 0x2b58 <color_calib()+0x20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:528
      }
    } else if (page == 10)  // sil right
    305a:	8a 30       	cpi	r24, 0x0A	; 10
    305c:	09 f0       	breq	.+2      	; 0x3060 <color_calib()+0x528>
    305e:	7c cd       	rjmp	.-1288   	; 0x2b58 <color_calib()+0x20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:530
    {
      if (start == 0) {
    3060:	86 e0       	ldi	r24, 0x06	; 6
    3062:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    3066:	89 2b       	or	r24, r25
    3068:	09 f0       	breq	.+2      	; 0x306c <color_calib()+0x534>
    306a:	76 cd       	rjmp	.-1300   	; 0x2b58 <color_calib()+0x20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:531
        color_R;
    306c:	82 e0       	ldi	r24, 0x02	; 2
    306e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:532
        EEPROM_write_int(silver_right_r, red);
    3072:	60 91 11 08 	lds	r22, 0x0811	; 0x800811 <red>
    3076:	70 91 12 08 	lds	r23, 0x0812	; 0x800812 <red+0x1>
    307a:	8c e5       	ldi	r24, 0x5C	; 92
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:533
        EEPROM_write_int(silver_right_g, green);
    3082:	60 91 13 08 	lds	r22, 0x0813	; 0x800813 <green>
    3086:	70 91 14 08 	lds	r23, 0x0814	; 0x800814 <green+0x1>
    308a:	8e e5       	ldi	r24, 0x5E	; 94
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:534
        EEPROM_write_int(silver_right_b, blue);
    3092:	60 91 15 08 	lds	r22, 0x0815	; 0x800815 <blue>
    3096:	70 91 16 08 	lds	r23, 0x0816	; 0x800816 <blue+0x1>
    309a:	80 e6       	ldi	r24, 0x60	; 96
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:535
        EEPROM_write_int(silver_right_c, clear);
    30a2:	60 91 17 08 	lds	r22, 0x0817	; 0x800817 <clear>
    30a6:	70 91 18 08 	lds	r23, 0x0818	; 0x800818 <clear+0x1>
    30aa:	82 e6       	ldi	r24, 0x62	; 98
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:536
        sil_r_calibrated = 1;
    30b2:	c1 e0       	ldi	r28, 0x01	; 1
    30b4:	51 cd       	rjmp	.-1374   	; 0x2b58 <color_calib()+0x20>

000030b6 <global constructors keyed to 65535_0_sport_main_code_2023.ino.cpp.o.2280>:
_GLOBAL__I_65535_0_sport_main_code_2023.ino.cpp.o.2280():
    30b6:	ee eb       	ldi	r30, 0xBE	; 190
    30b8:	f8 e0       	ldi	r31, 0x08	; 8
    30ba:	13 82       	std	Z+3, r1	; 0x03
    30bc:	12 82       	std	Z+2, r1	; 0x02
    30be:	88 ee       	ldi	r24, 0xE8	; 232
    30c0:	93 e0       	ldi	r25, 0x03	; 3
    30c2:	a0 e0       	ldi	r26, 0x00	; 0
    30c4:	b0 e0       	ldi	r27, 0x00	; 0
    30c6:	84 83       	std	Z+4, r24	; 0x04
    30c8:	95 83       	std	Z+5, r25	; 0x05
    30ca:	a6 83       	std	Z+6, r26	; 0x06
    30cc:	b7 83       	std	Z+7, r27	; 0x07
    30ce:	2a e0       	ldi	r18, 0x0A	; 10
    30d0:	33 e0       	ldi	r19, 0x03	; 3
    30d2:	31 83       	std	Z+1, r19	; 0x01
    30d4:	20 83       	st	Z, r18
    30d6:	48 e9       	ldi	r20, 0x98	; 152
    30d8:	50 e0       	ldi	r21, 0x00	; 0
    30da:	55 87       	std	Z+13, r21	; 0x0d
    30dc:	44 87       	std	Z+12, r20	; 0x0c
    30de:	49 e9       	ldi	r20, 0x99	; 153
    30e0:	50 e0       	ldi	r21, 0x00	; 0
    30e2:	57 87       	std	Z+15, r21	; 0x0f
    30e4:	46 87       	std	Z+14, r20	; 0x0e
    30e6:	4b e9       	ldi	r20, 0x9B	; 155
    30e8:	50 e0       	ldi	r21, 0x00	; 0
    30ea:	51 8b       	std	Z+17, r21	; 0x11
    30ec:	40 8b       	std	Z+16, r20	; 0x10
    30ee:	4a e9       	ldi	r20, 0x9A	; 154
    30f0:	50 e0       	ldi	r21, 0x00	; 0
    30f2:	53 8b       	std	Z+19, r21	; 0x13
    30f4:	42 8b       	std	Z+18, r20	; 0x12
    30f6:	4d e9       	ldi	r20, 0x9D	; 157
    30f8:	50 e0       	ldi	r21, 0x00	; 0
    30fa:	55 8b       	std	Z+21, r21	; 0x15
    30fc:	44 8b       	std	Z+20, r20	; 0x14
    30fe:	4c e9       	ldi	r20, 0x9C	; 156
    3100:	50 e0       	ldi	r21, 0x00	; 0
    3102:	57 8b       	std	Z+23, r21	; 0x17
    3104:	46 8b       	std	Z+22, r20	; 0x16
    3106:	11 8e       	std	Z+25, r1	; 0x19
    3108:	12 8e       	std	Z+26, r1	; 0x1a
    310a:	13 8e       	std	Z+27, r1	; 0x1b
    310c:	14 8e       	std	Z+28, r1	; 0x1c
    310e:	eb e5       	ldi	r30, 0x5B	; 91
    3110:	f9 e0       	ldi	r31, 0x09	; 9
    3112:	13 82       	std	Z+3, r1	; 0x03
    3114:	12 82       	std	Z+2, r1	; 0x02
    3116:	84 83       	std	Z+4, r24	; 0x04
    3118:	95 83       	std	Z+5, r25	; 0x05
    311a:	a6 83       	std	Z+6, r26	; 0x06
    311c:	b7 83       	std	Z+7, r27	; 0x07
    311e:	31 83       	std	Z+1, r19	; 0x01
    3120:	20 83       	st	Z, r18
    3122:	20 e9       	ldi	r18, 0x90	; 144
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	35 87       	std	Z+13, r19	; 0x0d
    3128:	24 87       	std	Z+12, r18	; 0x0c
    312a:	29 e2       	ldi	r18, 0x29	; 41
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	37 87       	std	Z+15, r19	; 0x0f
    3130:	26 87       	std	Z+14, r18	; 0x0e
    3132:	2b e2       	ldi	r18, 0x2B	; 43
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	31 8b       	std	Z+17, r19	; 0x11
    3138:	20 8b       	std	Z+16, r18	; 0x10
    313a:	2a e2       	ldi	r18, 0x2A	; 42
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	33 8b       	std	Z+19, r19	; 0x13
    3140:	22 8b       	std	Z+18, r18	; 0x12
    3142:	25 e9       	ldi	r18, 0x95	; 149
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	35 8b       	std	Z+21, r19	; 0x15
    3148:	24 8b       	std	Z+20, r18	; 0x14
    314a:	2c e2       	ldi	r18, 0x2C	; 44
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	37 8b       	std	Z+23, r19	; 0x17
    3150:	26 8b       	std	Z+22, r18	; 0x16
    3152:	11 8e       	std	Z+25, r1	; 0x19
    3154:	12 8e       	std	Z+26, r1	; 0x1a
    3156:	13 8e       	std	Z+27, r1	; 0x1b
    3158:	14 8e       	std	Z+28, r1	; 0x1c
    315a:	e8 ef       	ldi	r30, 0xF8	; 248
    315c:	f9 e0       	ldi	r31, 0x09	; 9
    315e:	13 82       	std	Z+3, r1	; 0x03
    3160:	12 82       	std	Z+2, r1	; 0x02
    3162:	84 83       	std	Z+4, r24	; 0x04
    3164:	95 83       	std	Z+5, r25	; 0x05
    3166:	a6 83       	std	Z+6, r26	; 0x06
    3168:	b7 83       	std	Z+7, r27	; 0x07
    316a:	8c e1       	ldi	r24, 0x1C	; 28
    316c:	93 e0       	ldi	r25, 0x03	; 3
    316e:	91 83       	std	Z+1, r25	; 0x01
    3170:	80 83       	st	Z, r24
    3172:	e4 e0       	ldi	r30, 0x04	; 4
    3174:	fa e0       	ldi	r31, 0x0A	; 10
    3176:	13 82       	std	Z+3, r1	; 0x03
    3178:	12 82       	std	Z+2, r1	; 0x02
    317a:	8e e2       	ldi	r24, 0x2E	; 46
    317c:	93 e0       	ldi	r25, 0x03	; 3
    317e:	91 83       	std	Z+1, r25	; 0x01
    3180:	80 83       	st	Z, r24
    3182:	8c e1       	ldi	r24, 0x1C	; 28
    3184:	84 83       	std	Z+4, r24	; 0x04
    3186:	8f ef       	ldi	r24, 0xFF	; 255
    3188:	85 83       	std	Z+5, r24	; 0x05
    318a:	8e e1       	ldi	r24, 0x1E	; 30
    318c:	86 83       	std	Z+6, r24	; 0x06
    318e:	8f e1       	ldi	r24, 0x1F	; 31
    3190:	87 83       	std	Z+7, r24	; 0x07
    3192:	80 e2       	ldi	r24, 0x20	; 32
    3194:	80 87       	std	Z+8, r24	; 0x08
    3196:	81 e2       	ldi	r24, 0x21	; 33
    3198:	81 87       	std	Z+9, r24	; 0x09
    319a:	82 e2       	ldi	r24, 0x22	; 34
    319c:	82 87       	std	Z+10, r24	; 0x0a
    319e:	13 86       	std	Z+11, r1	; 0x0b
    31a0:	14 86       	std	Z+12, r1	; 0x0c
    31a2:	15 86       	std	Z+13, r1	; 0x0d
    31a4:	16 86       	std	Z+14, r1	; 0x0e
    31a6:	17 86       	std	Z+15, r1	; 0x0f
    31a8:	61 e0       	ldi	r22, 0x01	; 1
    31aa:	80 e1       	ldi	r24, 0x10	; 16
    31ac:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]>

000031b0 <main>:
init():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    31b0:	78 94       	sei
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:963
#endif

  // Set timer 0 prescale factor to 64
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
    31b2:	83 b7       	in	r24, 0x33	; 51
    31b4:	8c 64       	ori	r24, 0x4C	; 76
    31b6:	83 bf       	out	0x33, r24	; 51
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
    31b8:	87 b7       	in	r24, 0x37	; 55
    31ba:	81 60       	ori	r24, 0x01	; 1
    31bc:	87 bf       	out	0x37, r24	; 55
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    31be:	c2 e0       	ldi	r28, 0x02	; 2
    31c0:	ce bd       	out	0x2e, r28	; 46
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    31c2:	8e b5       	in	r24, 0x2e	; 46
    31c4:	81 60       	ori	r24, 0x01	; 1
    31c6:	8e bd       	out	0x2e, r24	; 46
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    31c8:	8f b5       	in	r24, 0x2f	; 47
    31ca:	81 60       	ori	r24, 0x01	; 1
    31cc:	8f bd       	out	0x2f, r24	; 47
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
    31ce:	85 b5       	in	r24, 0x25	; 37
    31d0:	84 60       	ori	r24, 0x04	; 4
    31d2:	85 bd       	out	0x25, r24	; 37
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
    31d4:	85 b5       	in	r24, 0x25	; 37
    31d6:	80 64       	ori	r24, 0x40	; 64
    31d8:	85 bd       	out	0x25, r24	; 37
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    31da:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    31de:	83 60       	ori	r24, 0x03	; 3
    31e0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    31e4:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    31e8:	81 60       	ori	r24, 0x01	; 1
    31ea:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    31ee:	86 e8       	ldi	r24, 0x86	; 134
    31f0:	86 b9       	out	0x06, r24	; 6
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    31f2:	1a b8       	out	0x0a, r1	; 10
setup():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:9



void setup()
{
  int deg_down = EEPROM_read_int(deg_down_address);
    31f4:	8e ea       	ldi	r24, 0xAE	; 174
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    31fc:	7c 01       	movw	r14, r24
robot_setup():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1425
    }
  }
}

void robot_setup() {
  TCCR1A = 0;  // Clear the register
    31fe:	1f bc       	out	0x2f, r1	; 47
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1427
  // Set the Timer/Counter 1 Mode to "Normal" mode
  TCCR1A |= (0 << WGM10) | (0 << WGM11);
    3200:	8f b5       	in	r24, 0x2f	; 47
    3202:	8f bd       	out	0x2f, r24	; 47
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1428
  TCCR1B |= (0 << WGM12) | (0 << WGM13);
    3204:	8e b5       	in	r24, 0x2e	; 46
    3206:	8e bd       	out	0x2e, r24	; 46
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1430
  // Set the Timer/Counter 1 clock source to "External Crystal Oscillator"
  TCCR1B |= (1 << CS12) | (0 << CS11) | (0 << CS10);
    3208:	8e b5       	in	r24, 0x2e	; 46
    320a:	84 60       	ori	r24, 0x04	; 4
    320c:	8e bd       	out	0x2e, r24	; 46
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1431
  pinMode(13, OUTPUT);
    320e:	61 e0       	ldi	r22, 0x01	; 1
    3210:	8d e0       	ldi	r24, 0x0D	; 13
    3212:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1432
  pinMode(12, OUTPUT);
    3216:	61 e0       	ldi	r22, 0x01	; 1
    3218:	8c e0       	ldi	r24, 0x0C	; 12
    321a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1433
  pinMode(6, INPUT_PULLUP);
    321e:	62 e0       	ldi	r22, 0x02	; 2
    3220:	86 e0       	ldi	r24, 0x06	; 6
    3222:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1434
  pinMode(35, OUTPUT);
    3226:	61 e0       	ldi	r22, 0x01	; 1
    3228:	83 e2       	ldi	r24, 0x23	; 35
    322a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1435
  pinMode(37, INPUT_PULLUP);  // sbl
    322e:	62 e0       	ldi	r22, 0x02	; 2
    3230:	85 e2       	ldi	r24, 0x25	; 37
    3232:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1436
  pinMode(38, INPUT_PULLUP);  // sbr
    3236:	62 e0       	ldi	r22, 0x02	; 2
    3238:	86 e2       	ldi	r24, 0x26	; 38
    323a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1437
  pinMode(start_pin, INPUT_PULLUP);
    323e:	62 e0       	ldi	r22, 0x02	; 2
    3240:	86 e0       	ldi	r24, 0x06	; 6
    3242:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1438
  pinMode(next_page_pin, INPUT_PULLUP);
    3246:	62 e0       	ldi	r22, 0x02	; 2
    3248:	88 e0       	ldi	r24, 0x08	; 8
    324a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1439
  pinMode(previuse_page_pin, INPUT_PULLUP);
    324e:	62 e0       	ldi	r22, 0x02	; 2
    3250:	89 e0       	ldi	r24, 0x09	; 9
    3252:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1440
  pinMode(increase_pin, INPUT_PULLUP);
    3256:	62 e0       	ldi	r22, 0x02	; 2
    3258:	8a e0       	ldi	r24, 0x0A	; 10
    325a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1441
  pinMode(decrease_pin, INPUT_PULLUP);
    325e:	62 e0       	ldi	r22, 0x02	; 2
    3260:	8b e0       	ldi	r24, 0x0B	; 11
    3262:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1442
  pinMode(MUX_A, OUTPUT);
    3266:	61 e0       	ldi	r22, 0x01	; 1
    3268:	8c e2       	ldi	r24, 0x2C	; 44
    326a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1443
  pinMode(MUX_B, OUTPUT);
    326e:	61 e0       	ldi	r22, 0x01	; 1
    3270:	8b e2       	ldi	r24, 0x2B	; 43
    3272:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1444
  pinMode(MUX_C, OUTPUT);
    3276:	61 e0       	ldi	r22, 0x01	; 1
    3278:	8a e2       	ldi	r24, 0x2A	; 42
    327a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
begin():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:63

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    327e:	10 92 6d 08 	sts	0x086D, r1	; 0x80086d <TwoWire::rxBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:64
  rxBufferLength = 0;
    3282:	10 92 6c 08 	sts	0x086C, r1	; 0x80086c <TwoWire::rxBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:66

  txBufferIndex = 0;
    3286:	10 92 29 08 	sts	0x0829, r1	; 0x800829 <TwoWire::txBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire/TwoWire.cpp:67
  txBufferLength = 0;
    328a:	10 92 4b 08 	sts	0x084B, r1	; 0x80084b <TwoWire::txBufferLength>
twi_init():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:79
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    328e:	10 92 27 08 	sts	0x0827, r1	; 0x800827 <twi_state>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:80
  twi_sendStop = true; // default value
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <twi_sendStop>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:81
  twi_inRepStart = false;
    3298:	10 92 1f 08 	sts	0x081F, r1	; 0x80081f <twi_inRepStart>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:84

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    329c:	61 e0       	ldi	r22, 0x01	; 1
    329e:	83 e1       	ldi	r24, 0x13	; 19
    32a0:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:85
  digitalWrite(SCL, 1);
    32a4:	61 e0       	ldi	r22, 0x01	; 1
    32a6:	82 e1       	ldi	r24, 0x12	; 18
    32a8:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:88

  // initialize twi prescaler and bit rate
  TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    32ac:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    32b0:	8c 7f       	andi	r24, 0xFC	; 252
    32b2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:89
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    32b6:	84 e3       	ldi	r24, 0x34	; 52
    32b8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:97
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    32bc:	85 e4       	ldi	r24, 0x45	; 69
    32be:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
twi_attachSlaveTxEvent():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:402
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    32c2:	81 e8       	ldi	r24, 0x81	; 129
    32c4:	93 e0       	ldi	r25, 0x03	; 3
    32c6:	90 93 0c 08 	sts	0x080C, r25	; 0x80080c <twi_onSlaveTransmit+0x1>
    32ca:	80 93 0b 08 	sts	0x080B, r24	; 0x80080b <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\libraries\Wire\src\TwoWire\utility/twi.c:391
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    32ce:	82 e8       	ldi	r24, 0x82	; 130
    32d0:	93 e0       	ldi	r25, 0x03	; 3
    32d2:	90 93 0a 08 	sts	0x080A, r25	; 0x80080a <twi_onSlaveReceive+0x1>
    32d6:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <twi_onSlaveReceive>
begin():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    32da:	e0 91 6b 09 	lds	r30, 0x096B	; 0x80096b <Serial+0x10>
    32de:	f0 91 6c 09 	lds	r31, 0x096C	; 0x80096c <Serial+0x11>
    32e2:	c0 83       	st	Z, r28
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    32e4:	e0 91 67 09 	lds	r30, 0x0967	; 0x800967 <Serial+0xc>
    32e8:	f0 91 68 09 	lds	r31, 0x0968	; 0x800968 <Serial+0xd>
    32ec:	10 82       	st	Z, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    32ee:	e0 91 69 09 	lds	r30, 0x0969	; 0x800969 <Serial+0xe>
    32f2:	f0 91 6a 09 	lds	r31, 0x096A	; 0x80096a <Serial+0xf>
    32f6:	1c e0       	ldi	r17, 0x0C	; 12
    32f8:	10 83       	st	Z, r17
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    32fa:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <Serial+0x18>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    32fe:	e0 91 6f 09 	lds	r30, 0x096F	; 0x80096f <Serial+0x14>
    3302:	f0 91 70 09 	lds	r31, 0x0970	; 0x800970 <Serial+0x15>
    3306:	d6 e0       	ldi	r29, 0x06	; 6
    3308:	d0 83       	st	Z, r29
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    330a:	e0 91 6d 09 	lds	r30, 0x096D	; 0x80096d <Serial+0x12>
    330e:	f0 91 6e 09 	lds	r31, 0x096E	; 0x80096e <Serial+0x13>
    3312:	80 81       	ld	r24, Z
    3314:	88 69       	ori	r24, 0x98	; 152
    3316:	80 83       	st	Z, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    3318:	e0 91 6d 09 	lds	r30, 0x096D	; 0x80096d <Serial+0x12>
    331c:	f0 91 6e 09 	lds	r31, 0x096E	; 0x80096e <Serial+0x13>
    3320:	80 81       	ld	r24, Z
    3322:	8f 7d       	andi	r24, 0xDF	; 223
    3324:	80 83       	st	Z, r24
dxl_init():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:252
    delay(10);
}

void dxl_init(long int baudRate)
{
    pinMode(M_TX_PIN, OUTPUT);
    3326:	61 e0       	ldi	r22, 0x01	; 1
    3328:	85 e1       	ldi	r24, 0x15	; 21
    332a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:253
    pinMode(M_DIR_PIN, OUTPUT);
    332e:	61 e0       	ldi	r22, 0x01	; 1
    3330:	86 e1       	ldi	r24, 0x16	; 22
    3332:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
begin():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3336:	e0 91 ce 08 	lds	r30, 0x08CE	; 0x8008ce <Serial1+0x10>
    333a:	f0 91 cf 08 	lds	r31, 0x08CF	; 0x8008cf <Serial1+0x11>
    333e:	c0 83       	st	Z, r28
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3340:	e0 91 ca 08 	lds	r30, 0x08CA	; 0x8008ca <Serial1+0xc>
    3344:	f0 91 cb 08 	lds	r31, 0x08CB	; 0x8008cb <Serial1+0xd>
    3348:	10 82       	st	Z, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    334a:	e0 91 cc 08 	lds	r30, 0x08CC	; 0x8008cc <Serial1+0xe>
    334e:	f0 91 cd 08 	lds	r31, 0x08CD	; 0x8008cd <Serial1+0xf>
    3352:	10 83       	st	Z, r17
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    3354:	10 92 d6 08 	sts	0x08D6, r1	; 0x8008d6 <Serial1+0x18>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3358:	e0 91 d2 08 	lds	r30, 0x08D2	; 0x8008d2 <Serial1+0x14>
    335c:	f0 91 d3 08 	lds	r31, 0x08D3	; 0x8008d3 <Serial1+0x15>
    3360:	d0 83       	st	Z, r29
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    3362:	e0 91 d0 08 	lds	r30, 0x08D0	; 0x8008d0 <Serial1+0x12>
    3366:	f0 91 d1 08 	lds	r31, 0x08D1	; 0x8008d1 <Serial1+0x13>
    336a:	80 81       	ld	r24, Z
    336c:	88 69       	ori	r24, 0x98	; 152
    336e:	80 83       	st	Z, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    3370:	e0 91 d0 08 	lds	r30, 0x08D0	; 0x8008d0 <Serial1+0x12>
    3374:	f0 91 d1 08 	lds	r31, 0x08D1	; 0x8008d1 <Serial1+0x13>
    3378:	80 81       	ld	r24, Z
    337a:	8f 7d       	andi	r24, 0xDF	; 223
    337c:	80 83       	st	Z, r24
robot_setup():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1449

  Wire.begin();
  Serial.begin(115200);
  dxl_init(115200);
  lcd.begin(20, 4);
    337e:	64 e0       	ldi	r22, 0x04	; 4
    3380:	84 e1       	ldi	r24, 0x14	; 20
    3382:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1450
  delay(800);
    3386:	60 e2       	ldi	r22, 0x20	; 32
    3388:	73 e0       	ldi	r23, 0x03	; 3
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
menu():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1309
}

void menu(void) {
  static unsigned char page = 1, last_page = 6;
  int battery;
  lcd.clear();
    3392:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1310
  lcd.print("Error: check switch");
    3396:	83 ea       	ldi	r24, 0xA3	; 163
    3398:	94 e0       	ldi	r25, 0x04	; 4
    339a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1312

  lcd.setCursor(0, 1);
    339e:	61 e0       	ldi	r22, 0x01	; 1
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1313
  lcd.printf("SBL=%d   SBR=%d", SBL, SBR);
    33a6:	86 e2       	ldi	r24, 0x26	; 38
    33a8:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    33ac:	ec 01       	movw	r28, r24
    33ae:	85 e2       	ldi	r24, 0x25	; 37
    33b0:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    33b4:	df 93       	push	r29
    33b6:	cf 93       	push	r28
    33b8:	9f 93       	push	r25
    33ba:	8f 93       	push	r24
    33bc:	87 eb       	ldi	r24, 0xB7	; 183
    33be:	94 e0       	ldi	r25, 0x04	; 4
    33c0:	9f 93       	push	r25
    33c2:	8f 93       	push	r24
    33c4:	c4 e0       	ldi	r28, 0x04	; 4
    33c6:	da e0       	ldi	r29, 0x0A	; 10
    33c8:	df 93       	push	r29
    33ca:	cf 93       	push	r28
    33cc:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1315

  lcd.setCursor(0, 3);
    33d0:	63 e0       	ldi	r22, 0x03	; 3
    33d2:	80 e0       	ldi	r24, 0x00	; 0
    33d4:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1316
  lcd.printf("p_p=%d next_p=%d Ent=%d", previuse_page, next_page, start);
    33d8:	86 e0       	ldi	r24, 0x06	; 6
    33da:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    33de:	d8 2e       	mov	r13, r24
    33e0:	c9 2e       	mov	r12, r25
    33e2:	88 e0       	ldi	r24, 0x08	; 8
    33e4:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    33e8:	18 2f       	mov	r17, r24
    33ea:	09 2f       	mov	r16, r25
    33ec:	89 e0       	ldi	r24, 0x09	; 9
    33ee:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    33f2:	cf 92       	push	r12
    33f4:	df 92       	push	r13
    33f6:	0f 93       	push	r16
    33f8:	1f 93       	push	r17
    33fa:	9f 93       	push	r25
    33fc:	8f 93       	push	r24
    33fe:	87 ec       	ldi	r24, 0xC7	; 199
    3400:	94 e0       	ldi	r25, 0x04	; 4
    3402:	9f 93       	push	r25
    3404:	8f 93       	push	r24
    3406:	df 93       	push	r29
    3408:	cf 93       	push	r28
    340a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1318

  if (start == 0 || next_page == 0 || previuse_page == 0 || SBL == 0 || SBR == 0)
    340e:	86 e0       	ldi	r24, 0x06	; 6
    3410:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    3414:	ed b7       	in	r30, 0x3d	; 61
    3416:	fe b7       	in	r31, 0x3e	; 62
    3418:	72 96       	adiw	r30, 0x12	; 18
    341a:	0f b6       	in	r0, 0x3f	; 63
    341c:	f8 94       	cli
    341e:	fe bf       	out	0x3e, r31	; 62
    3420:	0f be       	out	0x3f, r0	; 63
    3422:	ed bf       	out	0x3d, r30	; 61
    3424:	89 2b       	or	r24, r25
    3426:	09 f0       	breq	.+2      	; 0x342a <main+0x27a>
    3428:	d2 c0       	rjmp	.+420    	; 0x35ce <main+0x41e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1319
    beep(10);
    342a:	8a e0       	ldi	r24, 0x0A	; 10
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <beep(int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1320
  lcd.clear();
    3432:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1328
      while (next_page == 0)
        ;
      delay(50);
      page++;
      if (page > last_page)
        page = 1;
    3436:	bb 24       	eor	r11, r11
    3438:	b3 94       	inc	r11
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1337
      while (previuse_page == 0)
        ;
      delay(50);
      page--;
      if (page < 1)
        page = last_page;
    343a:	26 e0       	ldi	r18, 0x06	; 6
    343c:	a2 2e       	mov	r10, r18
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1372
        lcd.print("Rescue Team");
        beep(1);
        break;
      }
      battery = analogRead(A7);
      battery = (battery * 5 / 102.3) * 3.1;
    343e:	35 e0       	ldi	r19, 0x05	; 5
    3440:	93 2e       	mov	r9, r19
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1374
      lcd.setCursor(8, 0);
      lcd.printf("bat=%3d ", battery);
    3442:	ca e3       	ldi	r28, 0x3A	; 58
    3444:	d5 e0       	ldi	r29, 0x05	; 5
    3446:	04 e0       	ldi	r16, 0x04	; 4
    3448:	1a e0       	ldi	r17, 0x0A	; 10
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1322

  if (start == 0 || next_page == 0 || previuse_page == 0 || SBL == 0 || SBR == 0)
    beep(10);
  lcd.clear();
  while (1) {
    if (next_page == 0) {
    344a:	88 e0       	ldi	r24, 0x08	; 8
    344c:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    3450:	89 2b       	or	r24, r25
    3452:	a9 f4       	brne	.+42     	; 0x347e <main+0x2ce>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1323
      while (next_page == 0)
    3454:	88 e0       	ldi	r24, 0x08	; 8
    3456:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    345a:	89 2b       	or	r24, r25
    345c:	d9 f3       	breq	.-10     	; 0x3454 <main+0x2a4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1325
        ;
      delay(50);
    345e:	62 e3       	ldi	r22, 0x32	; 50
    3460:	70 e0       	ldi	r23, 0x00	; 0
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1326
      page++;
    346a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <menu()::page>
    346e:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1327
      if (page > last_page)
    3470:	87 30       	cpi	r24, 0x07	; 7
    3472:	08 f0       	brcs	.+2      	; 0x3476 <main+0x2c6>
    3474:	c5 c0       	rjmp	.+394    	; 0x3600 <main+0x450>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1326
  while (1) {
    if (next_page == 0) {
      while (next_page == 0)
        ;
      delay(50);
      page++;
    3476:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <menu()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1329
      if (page > last_page)
        page = 1;
      lcd.clear();
    347a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1331
    }
    if (previuse_page == 0) {
    347e:	89 e0       	ldi	r24, 0x09	; 9
    3480:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    3484:	89 2b       	or	r24, r25
    3486:	a1 f4       	brne	.+40     	; 0x34b0 <main+0x300>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1332
      while (previuse_page == 0)
    3488:	89 e0       	ldi	r24, 0x09	; 9
    348a:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    348e:	89 2b       	or	r24, r25
    3490:	d9 f3       	breq	.-10     	; 0x3488 <main+0x2d8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1334
        ;
      delay(50);
    3492:	62 e3       	ldi	r22, 0x32	; 50
    3494:	70 e0       	ldi	r23, 0x00	; 0
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1335
      page--;
    349e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <menu()::page>
    34a2:	81 50       	subi	r24, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1336
      if (page < 1)
    34a4:	09 f4       	brne	.+2      	; 0x34a8 <main+0x2f8>
    34a6:	af c0       	rjmp	.+350    	; 0x3606 <main+0x456>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1335
    }
    if (previuse_page == 0) {
      while (previuse_page == 0)
        ;
      delay(50);
      page--;
    34a8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <menu()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1338
      if (page < 1)
        page = last_page;
      lcd.clear();
    34ac:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1340
    }
    if (page <= 4) {
    34b0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <menu()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1341
      lcd.setCursor(2, 0);
    34b4:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1340
      page--;
      if (page < 1)
        page = last_page;
      lcd.clear();
    }
    if (page <= 4) {
    34b6:	85 30       	cpi	r24, 0x05	; 5
    34b8:	08 f0       	brcs	.+2      	; 0x34bc <main+0x30c>
    34ba:	a8 c0       	rjmp	.+336    	; 0x360c <main+0x45c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1341
      lcd.setCursor(2, 0);
    34bc:	82 e0       	ldi	r24, 0x02	; 2
    34be:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1342
      lcd.print("Start ");
    34c2:	8f ed       	ldi	r24, 0xDF	; 223
    34c4:	94 e0       	ldi	r25, 0x04	; 4
    34c6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1343
      lcd.setCursor(2, 1);
    34ca:	61 e0       	ldi	r22, 0x01	; 1
    34cc:	82 e0       	ldi	r24, 0x02	; 2
    34ce:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1344
      lcd.print("Test Sensor   ");
    34d2:	86 ee       	ldi	r24, 0xE6	; 230
    34d4:	94 e0       	ldi	r25, 0x04	; 4
    34d6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1345
      lcd.setCursor(2, 2);
    34da:	62 e0       	ldi	r22, 0x02	; 2
    34dc:	82 e0       	ldi	r24, 0x02	; 2
    34de:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1346
      lcd.print("Setup         ");
    34e2:	85 ef       	ldi	r24, 0xF5	; 245
    34e4:	94 e0       	ldi	r25, 0x04	; 4
    34e6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1347
      lcd.setCursor(2, 3);
    34ea:	63 e0       	ldi	r22, 0x03	; 3
    34ec:	82 e0       	ldi	r24, 0x02	; 2
    34ee:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1348
      lcd.print("Test Color    ");
    34f2:	84 e0       	ldi	r24, 0x04	; 4
    34f4:	95 e0       	ldi	r25, 0x05	; 5
    34f6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1349
      lcd.setCursor(0, page - 1);
    34fa:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <menu()::page>
    34fe:	61 50       	subi	r22, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1356
    } else if (page > 4) {
      lcd.setCursor(2, 0);
      lcd.print("Test Motor   ");
      lcd.setCursor(2, 1);
      lcd.print("color calib ");
      lcd.setCursor(0, page - 5);
    3500:	80 e0       	ldi	r24, 0x00	; 0
    3502:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1357
      lcd.print("> ");
    3506:	8f e4       	ldi	r24, 0x4F	; 79
    3508:	94 e0       	ldi	r25, 0x04	; 4
    350a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1360
    }

    if (page == 1)  // start
    350e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <menu()::page>
    3512:	81 30       	cpi	r24, 0x01	; 1
    3514:	09 f0       	breq	.+2      	; 0x3518 <main+0x368>
    3516:	d9 c0       	rjmp	.+434    	; 0x36ca <main+0x51a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1362
    {
      if (start == 0) {
    3518:	86 e0       	ldi	r24, 0x06	; 6
    351a:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    351e:	89 2b       	or	r24, r25
    3520:	09 f0       	breq	.+2      	; 0x3524 <main+0x374>
    3522:	87 c0       	rjmp	.+270    	; 0x3632 <main+0x482>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1363
        while (start == 0)
    3524:	86 e0       	ldi	r24, 0x06	; 6
    3526:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    352a:	89 2b       	or	r24, r25
    352c:	d9 f3       	breq	.-10     	; 0x3524 <main+0x374>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1365
          ;
        lcd.clear();
    352e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1367

        lcd.print("Rescue Team");
    3532:	8e e2       	ldi	r24, 0x2E	; 46
    3534:	95 e0       	ldi	r25, 0x05	; 5
    3536:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1368
        beep(1);
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <beep(int)>
setup():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:12
  robot_setup();
  menu();
  AX(AX_ID, deg_down, 100);
    3542:	64 e6       	ldi	r22, 0x64	; 100
    3544:	70 e0       	ldi	r23, 0x00	; 0
    3546:	c7 01       	movw	r24, r14
    3548:	0e 94 41 03 	call	0x682	; 0x682 <AX(char, int, int) [clone .constprop.24]>
handle_color():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1854
  right_card = color_R;  //right side

  if(color_L==GREEN){
    cnt=0;
    go(80,80);
    while (cnt / 100 < T90/5) {
    354c:	05 e0       	ldi	r16, 0x05	; 5
    354e:	10 e0       	ldi	r17, 0x00	; 0
    3550:	84 e6       	ldi	r24, 0x64	; 100
    3552:	e8 2e       	mov	r14, r24
    3554:	f1 2c       	mov	r15, r1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1866
        break;
      }
    }
    if(deadend_detected){
      move(Right,T90*2.3,150);
      move(forward,T90/3,150);
    3556:	93 e0       	ldi	r25, 0x03	; 3
    3558:	c9 2e       	mov	r12, r25
    355a:	d1 2c       	mov	r13, r1
linefollow():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:21
  delay(200);
  shooter_off;
  delay(200);
}
void linefollow() {
  int spd = EEPROM_read_int(spd_address);
    355c:	86 e9       	ldi	r24, 0x96	; 150
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    3564:	ec 01       	movw	r28, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:22
  if (SM == 1) go(spd, spd);
    3566:	40 e0       	ldi	r20, 0x00	; 0
    3568:	60 e0       	ldi	r22, 0x00	; 0
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3570:	be 01       	movw	r22, r28
    3572:	01 97       	sbiw	r24, 0x01	; 1
    3574:	11 f4       	brne	.+4      	; 0x357a <main+0x3ca>
    3576:	0c 94 ea 25 	jmp	0x4bd4	; 0x4bd4 <main+0x1a24>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:24

  else if (SL1) go(spd * 0.5, spd*1.1);
    357a:	40 e0       	ldi	r20, 0x00	; 0
    357c:	60 e0       	ldi	r22, 0x00	; 0
    357e:	81 e0       	ldi	r24, 0x01	; 1
    3580:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3584:	89 2b       	or	r24, r25
    3586:	11 f4       	brne	.+4      	; 0x358c <main+0x3dc>
    3588:	0c 94 44 25 	jmp	0x4a88	; 0x4a88 <main+0x18d8>
    358c:	be 01       	movw	r22, r28
    358e:	dd 0f       	add	r29, r29
    3590:	88 0b       	sbc	r24, r24
    3592:	99 0b       	sbc	r25, r25
    3594:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatsisf>
    3598:	4b 01       	movw	r8, r22
    359a:	5c 01       	movw	r10, r24
    359c:	2d ec       	ldi	r18, 0xCD	; 205
    359e:	3c ec       	ldi	r19, 0xCC	; 204
    35a0:	4c e8       	ldi	r20, 0x8C	; 140
    35a2:	5f e3       	ldi	r21, 0x3F	; 63
    35a4:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <__mulsf3>
    35a8:	0e 94 13 2b 	call	0x5626	; 0x5626 <__fixsfsi>
    35ac:	2b 01       	movw	r4, r22
    35ae:	20 e0       	ldi	r18, 0x00	; 0
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	40 e0       	ldi	r20, 0x00	; 0
    35b4:	5f e3       	ldi	r21, 0x3F	; 63
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:25
  else if (SR1) go(spd*1.1, spd * 0.5);
    35b6:	c5 01       	movw	r24, r10
    35b8:	b4 01       	movw	r22, r8
    35ba:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <__mulsf3>
    35be:	0e 94 13 2b 	call	0x5626	; 0x5626 <__fixsfsi>
    35c2:	cb 01       	movw	r24, r22
    35c4:	b2 01       	movw	r22, r4
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:49

  else if (SL8) go(-spd, spd);
  else if (SR8) go(spd, -spd);

  else if (SL9) go(-spd, spd);
  else if (SR9) go(spd, -spd);
    35c6:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <go(int, int)>
    35ca:	0c 94 6c 26 	jmp	0x4cd8	; 0x4cd8 <main+0x1b28>
menu():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1318
  lcd.printf("SBL=%d   SBR=%d", SBL, SBR);

  lcd.setCursor(0, 3);
  lcd.printf("p_p=%d next_p=%d Ent=%d", previuse_page, next_page, start);

  if (start == 0 || next_page == 0 || previuse_page == 0 || SBL == 0 || SBR == 0)
    35ce:	88 e0       	ldi	r24, 0x08	; 8
    35d0:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    35d4:	89 2b       	or	r24, r25
    35d6:	09 f4       	brne	.+2      	; 0x35da <main+0x42a>
    35d8:	28 cf       	rjmp	.-432    	; 0x342a <main+0x27a>
    35da:	89 e0       	ldi	r24, 0x09	; 9
    35dc:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    35e0:	89 2b       	or	r24, r25
    35e2:	09 f4       	brne	.+2      	; 0x35e6 <main+0x436>
    35e4:	22 cf       	rjmp	.-444    	; 0x342a <main+0x27a>
    35e6:	85 e2       	ldi	r24, 0x25	; 37
    35e8:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    35ec:	89 2b       	or	r24, r25
    35ee:	09 f4       	brne	.+2      	; 0x35f2 <main+0x442>
    35f0:	1c cf       	rjmp	.-456    	; 0x342a <main+0x27a>
    35f2:	86 e2       	ldi	r24, 0x26	; 38
    35f4:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    35f8:	89 2b       	or	r24, r25
    35fa:	09 f4       	brne	.+2      	; 0x35fe <main+0x44e>
    35fc:	16 cf       	rjmp	.-468    	; 0x342a <main+0x27a>
    35fe:	19 cf       	rjmp	.-462    	; 0x3432 <main+0x282>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1328
      while (next_page == 0)
        ;
      delay(50);
      page++;
      if (page > last_page)
        page = 1;
    3600:	b0 92 05 01 	sts	0x0105, r11	; 0x800105 <menu()::page>
    3604:	3a cf       	rjmp	.-396    	; 0x347a <main+0x2ca>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1337
      while (previuse_page == 0)
        ;
      delay(50);
      page--;
      if (page < 1)
        page = last_page;
    3606:	a0 92 05 01 	sts	0x0105, r10	; 0x800105 <menu()::page>
    360a:	50 cf       	rjmp	.-352    	; 0x34ac <main+0x2fc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1352
      lcd.setCursor(2, 3);
      lcd.print("Test Color    ");
      lcd.setCursor(0, page - 1);
      lcd.print("> ");
    } else if (page > 4) {
      lcd.setCursor(2, 0);
    360c:	82 e0       	ldi	r24, 0x02	; 2
    360e:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1353
      lcd.print("Test Motor   ");
    3612:	83 e1       	ldi	r24, 0x13	; 19
    3614:	95 e0       	ldi	r25, 0x05	; 5
    3616:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1354
      lcd.setCursor(2, 1);
    361a:	61 e0       	ldi	r22, 0x01	; 1
    361c:	82 e0       	ldi	r24, 0x02	; 2
    361e:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1355
      lcd.print("color calib ");
    3622:	81 e2       	ldi	r24, 0x21	; 33
    3624:	95 e0       	ldi	r25, 0x05	; 5
    3626:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1356
      lcd.setCursor(0, page - 5);
    362a:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <menu()::page>
    362e:	65 50       	subi	r22, 0x05	; 5
    3630:	67 cf       	rjmp	.-306    	; 0x3500 <main+0x350>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1371

        lcd.print("Rescue Team");
        beep(1);
        break;
      }
      battery = analogRead(A7);
    3632:	84 e3       	ldi	r24, 0x34	; 52
    3634:	0e 94 a7 02 	call	0x54e	; 0x54e <analogRead>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1372
      battery = (battery * 5 / 102.3) * 3.1;
    3638:	98 9e       	mul	r9, r24
    363a:	b0 01       	movw	r22, r0
    363c:	99 9e       	mul	r9, r25
    363e:	70 0d       	add	r23, r0
    3640:	11 24       	eor	r1, r1
    3642:	07 2e       	mov	r0, r23
    3644:	00 0c       	add	r0, r0
    3646:	88 0b       	sbc	r24, r24
    3648:	99 0b       	sbc	r25, r25
    364a:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatsisf>
    364e:	2a e9       	ldi	r18, 0x9A	; 154
    3650:	39 e9       	ldi	r19, 0x99	; 153
    3652:	4c ec       	ldi	r20, 0xCC	; 204
    3654:	52 e4       	ldi	r21, 0x42	; 66
    3656:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__divsf3>
    365a:	26 e6       	ldi	r18, 0x66	; 102
    365c:	36 e6       	ldi	r19, 0x66	; 102
    365e:	46 e4       	ldi	r20, 0x46	; 70
    3660:	50 e4       	ldi	r21, 0x40	; 64
    3662:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <__mulsf3>
    3666:	0e 94 13 2b 	call	0x5626	; 0x5626 <__fixsfsi>
    366a:	86 2e       	mov	r8, r22
    366c:	77 2e       	mov	r7, r23
    366e:	c6 2e       	mov	r12, r22
    3670:	d7 2e       	mov	r13, r23
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1373
      lcd.setCursor(8, 0);
    3672:	60 e0       	ldi	r22, 0x00	; 0
    3674:	88 e0       	ldi	r24, 0x08	; 8
    3676:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1374
      lcd.printf("bat=%3d ", battery);
    367a:	7f 92       	push	r7
    367c:	8f 92       	push	r8
    367e:	df 93       	push	r29
    3680:	cf 93       	push	r28
    3682:	1f 93       	push	r17
    3684:	0f 93       	push	r16
    3686:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1376

      if (battery < 105) {
    368a:	0f 90       	pop	r0
    368c:	0f 90       	pop	r0
    368e:	0f 90       	pop	r0
    3690:	0f 90       	pop	r0
    3692:	0f 90       	pop	r0
    3694:	0f 90       	pop	r0
    3696:	39 e6       	ldi	r19, 0x69	; 105
    3698:	c3 16       	cp	r12, r19
    369a:	d1 04       	cpc	r13, r1
    369c:	0c f0       	brlt	.+2      	; 0x36a0 <main+0x4f0>
    369e:	d5 ce       	rjmp	.-598    	; 0x344a <main+0x29a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1377
        LED_on;
    36a0:	61 e0       	ldi	r22, 0x01	; 1
    36a2:	8d e0       	ldi	r24, 0x0D	; 13
    36a4:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1378
        delay(50);
    36a8:	62 e3       	ldi	r22, 0x32	; 50
    36aa:	70 e0       	ldi	r23, 0x00	; 0
    36ac:	80 e0       	ldi	r24, 0x00	; 0
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1379
        LED_off;
    36b4:	60 e0       	ldi	r22, 0x00	; 0
    36b6:	8d e0       	ldi	r24, 0x0D	; 13
    36b8:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1380
        delay(50);
    36bc:	62 e3       	ldi	r22, 0x32	; 50
    36be:	70 e0       	ldi	r23, 0x00	; 0
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
    36c8:	c0 ce       	rjmp	.-640    	; 0x344a <main+0x29a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1382
      }
    } else if (page == 2)  // Test Sensor
    36ca:	82 30       	cpi	r24, 0x02	; 2
    36cc:	09 f0       	breq	.+2      	; 0x36d0 <main+0x520>
    36ce:	37 c4       	rjmp	.+2158   	; 0x3f3e <main+0xd8e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1384
    {
      if (start == 0) {
    36d0:	86 e0       	ldi	r24, 0x06	; 6
    36d2:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    36d6:	89 2b       	or	r24, r25
    36d8:	09 f0       	breq	.+2      	; 0x36dc <main+0x52c>
    36da:	b7 ce       	rjmp	.-658    	; 0x344a <main+0x29a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1385
        while (start == 0)
    36dc:	86 e0       	ldi	r24, 0x06	; 6
    36de:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    36e2:	89 2b       	or	r24, r25
    36e4:	d9 f3       	breq	.-10     	; 0x36dc <main+0x52c>
menu_sensor():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:742
   return microseconds / 29 / 2;

}
void menu_sensor(void) {
  static char page = 1, last_page = 5;
  lcd.clear();
    36e6:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:862
      lcd.setCursor(0, 3);
      lcd.printf("SBL=%d  SBR=%d  ", SBL,SBR);
    }else if (page == 5)  // distance
    {
      lcd.setCursor(0, 0);
      lcd.printf("Front: %d",cm); 
    36ea:	c4 e0       	ldi	r28, 0x04	; 4
    36ec:	da e0       	ldi	r29, 0x0A	; 10
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:836
      lcd.setCursor(0, 3);
      lcd.printf("%02d  %02d  %02d ", VSL9, VSL8, VSL7);
    } else if (page == 3)  // V right
    {
      lcd.setCursor(0, 0);
      lcd.printf("%02d        R11=%02d", VSM, VSR10);
    36ee:	be ee       	ldi	r27, 0xEE	; 238
    36f0:	2b 2e       	mov	r2, r27
    36f2:	b5 e0       	ldi	r27, 0x05	; 5
    36f4:	3b 2e       	mov	r3, r27
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:839

      lcd.setCursor(2, 1);
      lcd.printf("%02d  %02d  %02d ", VSR1, VSR2, VSR3);
    36f6:	1c ed       	ldi	r17, 0xDC	; 220
    36f8:	e1 2e       	mov	r14, r17
    36fa:	15 e0       	ldi	r17, 0x05	; 5
    36fc:	f1 2e       	mov	r15, r17
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:744
}
void menu_sensor(void) {
  static char page = 1, last_page = 5;
  lcd.clear();
  while (1) {
    if (next_page == 0) {
    36fe:	88 e0       	ldi	r24, 0x08	; 8
    3700:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    3704:	89 2b       	or	r24, r25
    3706:	a9 f4       	brne	.+42     	; 0x3732 <main+0x582>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:745
      while (next_page == 0)
    3708:	88 e0       	ldi	r24, 0x08	; 8
    370a:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    370e:	89 2b       	or	r24, r25
    3710:	d9 f3       	breq	.-10     	; 0x3708 <main+0x558>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:747
        ;
      delay(50);
    3712:	62 e3       	ldi	r22, 0x32	; 50
    3714:	70 e0       	ldi	r23, 0x00	; 0
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:748
      page++;
    371e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <menu_sensor()::page>
    3722:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:749
      if (page > last_page)
    3724:	86 30       	cpi	r24, 0x06	; 6
    3726:	0c f0       	brlt	.+2      	; 0x372a <main+0x57a>
    3728:	5b c1       	rjmp	.+694    	; 0x39e0 <main+0x830>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:750
        page = 1;
    372a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <menu_sensor()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:751
      lcd.clear();
    372e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:753
    }
    if (previuse_page == 0) {
    3732:	89 e0       	ldi	r24, 0x09	; 9
    3734:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    3738:	89 2b       	or	r24, r25
    373a:	a9 f4       	brne	.+42     	; 0x3766 <main+0x5b6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:754
      while (previuse_page == 0)
    373c:	89 e0       	ldi	r24, 0x09	; 9
    373e:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    3742:	89 2b       	or	r24, r25
    3744:	d9 f3       	breq	.-10     	; 0x373c <main+0x58c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:756
        ;
      delay(50);
    3746:	62 e3       	ldi	r22, 0x32	; 50
    3748:	70 e0       	ldi	r23, 0x00	; 0
    374a:	80 e0       	ldi	r24, 0x00	; 0
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:757
      page--;
    3752:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <menu_sensor()::page>
    3756:	81 50       	subi	r24, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:758
      if (page < 1)
    3758:	18 16       	cp	r1, r24
    375a:	0c f0       	brlt	.+2      	; 0x375e <main+0x5ae>
    375c:	43 c1       	rjmp	.+646    	; 0x39e4 <main+0x834>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:759
        page = last_page;
    375e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <menu_sensor()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:760
      lcd.clear();
    3762:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:762
    }
    if (increase == 0)
    3766:	8a e0       	ldi	r24, 0x0A	; 10
    3768:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    376c:	89 2b       	or	r24, r25
    376e:	09 f0       	breq	.+2      	; 0x3772 <main+0x5c2>
    3770:	3b c1       	rjmp	.+630    	; 0x39e8 <main+0x838>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:763
      go(40, 40);
    3772:	68 e2       	ldi	r22, 0x28	; 40
    3774:	70 e0       	ldi	r23, 0x00	; 0
    3776:	88 e2       	ldi	r24, 0x28	; 40
    3778:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:767
    else if (decrease == 0)
      go(-40, -40);
    else
      go(0, 0);
    377a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <go(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:771

    ///////////////

    if (page == 1) {
    377e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <menu_sensor()::page>
    3782:	81 30       	cpi	r24, 0x01	; 1
    3784:	09 f0       	breq	.+2      	; 0x3788 <main+0x5d8>
    3786:	93 c1       	rjmp	.+806    	; 0x3aae <main+0x8fe>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:772
      lcd.setCursor(0, 0);
    3788:	60 e0       	ldi	r22, 0x00	; 0
    378a:	80 e0       	ldi	r24, 0x00	; 0
    378c:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:773
      lcd.printf("%d       %d      %d", SL10, SM, SR10);
    3790:	40 e0       	ldi	r20, 0x00	; 0
    3792:	63 e0       	ldi	r22, 0x03	; 3
    3794:	82 e0       	ldi	r24, 0x02	; 2
    3796:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    379a:	d8 2e       	mov	r13, r24
    379c:	c9 2e       	mov	r12, r25
    379e:	40 e0       	ldi	r20, 0x00	; 0
    37a0:	60 e0       	ldi	r22, 0x00	; 0
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    37a8:	18 2f       	mov	r17, r24
    37aa:	09 2f       	mov	r16, r25
    37ac:	40 e0       	ldi	r20, 0x00	; 0
    37ae:	62 e0       	ldi	r22, 0x02	; 2
    37b0:	82 e0       	ldi	r24, 0x02	; 2
    37b2:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    37b6:	cf 92       	push	r12
    37b8:	df 92       	push	r13
    37ba:	0f 93       	push	r16
    37bc:	1f 93       	push	r17
    37be:	9f 93       	push	r25
    37c0:	8f 93       	push	r24
    37c2:	83 e4       	ldi	r24, 0x43	; 67
    37c4:	95 e0       	ldi	r25, 0x05	; 5
    37c6:	9f 93       	push	r25
    37c8:	8f 93       	push	r24
    37ca:	df 93       	push	r29
    37cc:	cf 93       	push	r28
    37ce:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:775

      lcd.setCursor(0, 1);
    37d2:	61 e0       	ldi	r22, 0x01	; 1
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:776
      lcd.printf("   %d%d%d    %d%d%d   ", SL3, SL2, SL1, SR1, SR2, SR3);
    37da:	40 e0       	ldi	r20, 0x00	; 0
    37dc:	61 e0       	ldi	r22, 0x01	; 1
    37de:	83 e0       	ldi	r24, 0x03	; 3
    37e0:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    37e4:	78 2e       	mov	r7, r24
    37e6:	69 2e       	mov	r6, r25
    37e8:	40 e0       	ldi	r20, 0x00	; 0
    37ea:	61 e0       	ldi	r22, 0x01	; 1
    37ec:	82 e0       	ldi	r24, 0x02	; 2
    37ee:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    37f2:	98 2e       	mov	r9, r24
    37f4:	89 2e       	mov	r8, r25
    37f6:	40 e0       	ldi	r20, 0x00	; 0
    37f8:	61 e0       	ldi	r22, 0x01	; 1
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3800:	b8 2e       	mov	r11, r24
    3802:	a9 2e       	mov	r10, r25
    3804:	40 e0       	ldi	r20, 0x00	; 0
    3806:	60 e0       	ldi	r22, 0x00	; 0
    3808:	81 e0       	ldi	r24, 0x01	; 1
    380a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    380e:	d8 2e       	mov	r13, r24
    3810:	c9 2e       	mov	r12, r25
    3812:	40 e0       	ldi	r20, 0x00	; 0
    3814:	60 e0       	ldi	r22, 0x00	; 0
    3816:	82 e0       	ldi	r24, 0x02	; 2
    3818:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    381c:	18 2f       	mov	r17, r24
    381e:	09 2f       	mov	r16, r25
    3820:	40 e0       	ldi	r20, 0x00	; 0
    3822:	60 e0       	ldi	r22, 0x00	; 0
    3824:	83 e0       	ldi	r24, 0x03	; 3
    3826:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    382a:	6f 92       	push	r6
    382c:	7f 92       	push	r7
    382e:	8f 92       	push	r8
    3830:	9f 92       	push	r9
    3832:	af 92       	push	r10
    3834:	bf 92       	push	r11
    3836:	cf 92       	push	r12
    3838:	df 92       	push	r13
    383a:	0f 93       	push	r16
    383c:	1f 93       	push	r17
    383e:	9f 93       	push	r25
    3840:	8f 93       	push	r24
    3842:	87 e5       	ldi	r24, 0x57	; 87
    3844:	95 e0       	ldi	r25, 0x05	; 5
    3846:	9f 93       	push	r25
    3848:	8f 93       	push	r24
    384a:	df 93       	push	r29
    384c:	cf 93       	push	r28
    384e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:778

      lcd.setCursor(0, 2);
    3852:	62 e0       	ldi	r22, 0x02	; 2
    3854:	80 e0       	ldi	r24, 0x00	; 0
    3856:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:779
      lcd.printf("%d%d%d  ENC=%3d %d%d%d", SL6, SL5, SL4, cnt / 100, SR4, SR5, SR6);
    385a:	40 e0       	ldi	r20, 0x00	; 0
    385c:	61 e0       	ldi	r22, 0x01	; 1
    385e:	86 e0       	ldi	r24, 0x06	; 6
    3860:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3864:	58 2e       	mov	r5, r24
    3866:	49 2e       	mov	r4, r25
    3868:	40 e0       	ldi	r20, 0x00	; 0
    386a:	61 e0       	ldi	r22, 0x01	; 1
    386c:	85 e0       	ldi	r24, 0x05	; 5
    386e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3872:	78 2e       	mov	r7, r24
    3874:	69 2e       	mov	r6, r25
    3876:	40 e0       	ldi	r20, 0x00	; 0
    3878:	61 e0       	ldi	r22, 0x01	; 1
    387a:	84 e0       	ldi	r24, 0x04	; 4
    387c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3880:	98 2e       	mov	r9, r24
    3882:	89 2e       	mov	r8, r25
    3884:	ac b4       	in	r10, 0x2c	; 44
    3886:	bd b4       	in	r11, 0x2d	; 45
    3888:	40 e0       	ldi	r20, 0x00	; 0
    388a:	60 e0       	ldi	r22, 0x00	; 0
    388c:	84 e0       	ldi	r24, 0x04	; 4
    388e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3892:	d8 2e       	mov	r13, r24
    3894:	c9 2e       	mov	r12, r25
    3896:	40 e0       	ldi	r20, 0x00	; 0
    3898:	60 e0       	ldi	r22, 0x00	; 0
    389a:	85 e0       	ldi	r24, 0x05	; 5
    389c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    38a0:	18 2f       	mov	r17, r24
    38a2:	09 2f       	mov	r16, r25
    38a4:	40 e0       	ldi	r20, 0x00	; 0
    38a6:	60 e0       	ldi	r22, 0x00	; 0
    38a8:	86 e0       	ldi	r24, 0x06	; 6
    38aa:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    38ae:	9c 01       	movw	r18, r24
    38b0:	4f 92       	push	r4
    38b2:	5f 92       	push	r5
    38b4:	6f 92       	push	r6
    38b6:	7f 92       	push	r7
    38b8:	8f 92       	push	r8
    38ba:	9f 92       	push	r9
    38bc:	c5 01       	movw	r24, r10
    38be:	64 e6       	ldi	r22, 0x64	; 100
    38c0:	70 e0       	ldi	r23, 0x00	; 0
    38c2:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__udivmodhi4>
    38c6:	7f 93       	push	r23
    38c8:	6f 93       	push	r22
    38ca:	cf 92       	push	r12
    38cc:	df 92       	push	r13
    38ce:	0f 93       	push	r16
    38d0:	1f 93       	push	r17
    38d2:	3f 93       	push	r19
    38d4:	2f 93       	push	r18
    38d6:	8e e6       	ldi	r24, 0x6E	; 110
    38d8:	95 e0       	ldi	r25, 0x05	; 5
    38da:	9f 93       	push	r25
    38dc:	8f 93       	push	r24
    38de:	df 93       	push	r29
    38e0:	cf 93       	push	r28
    38e2:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:781

      lcd.setCursor(0, 3);
    38e6:	8d b7       	in	r24, 0x3d	; 61
    38e8:	9e b7       	in	r25, 0x3e	; 62
    38ea:	8c 96       	adiw	r24, 0x2c	; 44
    38ec:	0f b6       	in	r0, 0x3f	; 63
    38ee:	f8 94       	cli
    38f0:	9e bf       	out	0x3e, r25	; 62
    38f2:	0f be       	out	0x3f, r0	; 63
    38f4:	8d bf       	out	0x3d, r24	; 61
    38f6:	63 e0       	ldi	r22, 0x03	; 3
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:782
      lcd.printf("%d%d%d", SL9, SL8, SL7);
    38fe:	40 e0       	ldi	r20, 0x00	; 0
    3900:	60 e0       	ldi	r22, 0x00	; 0
    3902:	87 e0       	ldi	r24, 0x07	; 7
    3904:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3908:	d8 2e       	mov	r13, r24
    390a:	c9 2e       	mov	r12, r25
    390c:	40 e0       	ldi	r20, 0x00	; 0
    390e:	62 e0       	ldi	r22, 0x02	; 2
    3910:	80 e0       	ldi	r24, 0x00	; 0
    3912:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3916:	18 2f       	mov	r17, r24
    3918:	09 2f       	mov	r16, r25
    391a:	40 e0       	ldi	r20, 0x00	; 0
    391c:	62 e0       	ldi	r22, 0x02	; 2
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3924:	cf 92       	push	r12
    3926:	df 92       	push	r13
    3928:	0f 93       	push	r16
    392a:	1f 93       	push	r17
    392c:	9f 93       	push	r25
    392e:	8f 93       	push	r24
    3930:	0e e7       	ldi	r16, 0x7E	; 126
    3932:	15 e0       	ldi	r17, 0x05	; 5
    3934:	1f 93       	push	r17
    3936:	0f 93       	push	r16
    3938:	df 93       	push	r29
    393a:	cf 93       	push	r28
    393c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:784

      lcd.setCursor(13, 3);
    3940:	63 e0       	ldi	r22, 0x03	; 3
    3942:	8d e0       	ldi	r24, 0x0D	; 13
    3944:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:785
      lcd.printf("%d%d%d", SR7, SR8, SR9);
    3948:	40 e0       	ldi	r20, 0x00	; 0
    394a:	63 e0       	ldi	r22, 0x03	; 3
    394c:	81 e0       	ldi	r24, 0x01	; 1
    394e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3952:	b8 2e       	mov	r11, r24
    3954:	a9 2e       	mov	r10, r25
    3956:	40 e0       	ldi	r20, 0x00	; 0
    3958:	63 e0       	ldi	r22, 0x03	; 3
    395a:	80 e0       	ldi	r24, 0x00	; 0
    395c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3960:	d8 2e       	mov	r13, r24
    3962:	c9 2e       	mov	r12, r25
    3964:	40 e0       	ldi	r20, 0x00	; 0
    3966:	61 e0       	ldi	r22, 0x01	; 1
    3968:	87 e0       	ldi	r24, 0x07	; 7
    396a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    396e:	af 92       	push	r10
    3970:	bf 92       	push	r11
    3972:	cf 92       	push	r12
    3974:	df 92       	push	r13
    3976:	9f 93       	push	r25
    3978:	8f 93       	push	r24
    397a:	1f 93       	push	r17
    397c:	0f 93       	push	r16
    397e:	df 93       	push	r29
    3980:	cf 93       	push	r28
    3982:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:787

      lcd.setCursor(4, 3);
    3986:	63 e0       	ldi	r22, 0x03	; 3
    3988:	84 e0       	ldi	r24, 0x04	; 4
    398a:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:788
      if (color_L == RED)
    398e:	81 e0       	ldi	r24, 0x01	; 1
    3990:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    3994:	ed b7       	in	r30, 0x3d	; 61
    3996:	fe b7       	in	r31, 0x3e	; 62
    3998:	74 96       	adiw	r30, 0x14	; 20
    399a:	0f b6       	in	r0, 0x3f	; 63
    399c:	f8 94       	cli
    399e:	fe bf       	out	0x3e, r31	; 62
    39a0:	0f be       	out	0x3f, r0	; 63
    39a2:	ed bf       	out	0x3d, r30	; 61
    39a4:	81 11       	cpse	r24, r1
    39a6:	2f c0       	rjmp	.+94     	; 0x3a06 <main+0x856>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:789
        lcd.print("RED ");
    39a8:	85 e8       	ldi	r24, 0x85	; 133
    39aa:	95 e0       	ldi	r25, 0x05	; 5
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:799
      else if (color_L == YELLOW)
        lcd.print("YEL ");
      else if (color_L==SILVER)
        lcd.print("SIL ");
      else
        lcd.print("WHT ");
    39ac:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:801

      lcd.setCursor(9, 3);
    39b0:	63 e0       	ldi	r22, 0x03	; 3
    39b2:	89 e0       	ldi	r24, 0x09	; 9
    39b4:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:802
      if (color_R == RED)
    39b8:	82 e0       	ldi	r24, 0x02	; 2
    39ba:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    39be:	81 11       	cpse	r24, r1
    39c0:	45 c0       	rjmp	.+138    	; 0x3a4c <main+0x89c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:803
        lcd.print("RED");
    39c2:	8e e9       	ldi	r24, 0x9E	; 158
    39c4:	95 e0       	ldi	r25, 0x05	; 5
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:813
      else if (color_R == YELLOW)
        lcd.print("YEL");
      else if (VSR6 < 0.9)
        lcd.print("SIL");
      else
        lcd.print("WHT");
    39c6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:815

      if (start == 0) {
    39ca:	86 e0       	ldi	r24, 0x06	; 6
    39cc:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    39d0:	89 2b       	or	r24, r25
    39d2:	09 f0       	breq	.+2      	; 0x39d6 <main+0x826>
    39d4:	94 ce       	rjmp	.-728    	; 0x36fe <main+0x54e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:816
        TCNT1 = 0;
    39d6:	1d bc       	out	0x2d, r1	; 45
    39d8:	1c bc       	out	0x2c, r1	; 44
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:817
        cnt = 0;
    39da:	1d bc       	out	0x2d, r1	; 45
    39dc:	1c bc       	out	0x2c, r1	; 44
    39de:	8f ce       	rjmp	.-738    	; 0x36fe <main+0x54e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:750
      while (next_page == 0)
        ;
      delay(50);
      page++;
      if (page > last_page)
        page = 1;
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	a3 ce       	rjmp	.-698    	; 0x372a <main+0x57a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:759
      while (previuse_page == 0)
        ;
      delay(50);
      page--;
      if (page < 1)
        page = last_page;
    39e4:	85 e0       	ldi	r24, 0x05	; 5
    39e6:	bb ce       	rjmp	.-650    	; 0x375e <main+0x5ae>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:764
      lcd.clear();
    }
    if (increase == 0)
      go(40, 40);
    else if (decrease == 0)
    39e8:	8b e0       	ldi	r24, 0x0B	; 11
    39ea:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    39ee:	89 2b       	or	r24, r25
    39f0:	29 f4       	brne	.+10     	; 0x39fc <main+0x84c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:765
      go(-40, -40);
    39f2:	68 ed       	ldi	r22, 0xD8	; 216
    39f4:	7f ef       	ldi	r23, 0xFF	; 255
    39f6:	88 ed       	ldi	r24, 0xD8	; 216
    39f8:	9f ef       	ldi	r25, 0xFF	; 255
    39fa:	bf ce       	rjmp	.-642    	; 0x377a <main+0x5ca>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:767
    else
      go(0, 0);
    39fc:	70 e0       	ldi	r23, 0x00	; 0
    39fe:	60 e0       	ldi	r22, 0x00	; 0
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	80 e0       	ldi	r24, 0x00	; 0
    3a04:	ba ce       	rjmp	.-652    	; 0x377a <main+0x5ca>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:790
      lcd.printf("%d%d%d", SR7, SR8, SR9);

      lcd.setCursor(4, 3);
      if (color_L == RED)
        lcd.print("RED ");
      else if (color_L == GREEN)
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    3a0c:	81 30       	cpi	r24, 0x01	; 1
    3a0e:	19 f4       	brne	.+6      	; 0x3a16 <main+0x866>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:791
        lcd.print("GRN ");
    3a10:	8a e8       	ldi	r24, 0x8A	; 138
    3a12:	95 e0       	ldi	r25, 0x05	; 5
    3a14:	cb cf       	rjmp	.-106    	; 0x39ac <main+0x7fc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:792
      else if (color_L == BLUE)
    3a16:	81 e0       	ldi	r24, 0x01	; 1
    3a18:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    3a1c:	82 30       	cpi	r24, 0x02	; 2
    3a1e:	19 f4       	brne	.+6      	; 0x3a26 <main+0x876>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:793
        lcd.print("BLU ");
    3a20:	8e ef       	ldi	r24, 0xFE	; 254
    3a22:	96 e0       	ldi	r25, 0x06	; 6
    3a24:	c3 cf       	rjmp	.-122    	; 0x39ac <main+0x7fc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:794
      else if (color_L == YELLOW)
    3a26:	81 e0       	ldi	r24, 0x01	; 1
    3a28:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    3a2c:	84 30       	cpi	r24, 0x04	; 4
    3a2e:	19 f4       	brne	.+6      	; 0x3a36 <main+0x886>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:795
        lcd.print("YEL ");
    3a30:	8f e8       	ldi	r24, 0x8F	; 143
    3a32:	95 e0       	ldi	r25, 0x05	; 5
    3a34:	bb cf       	rjmp	.-138    	; 0x39ac <main+0x7fc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:796
      else if (color_L==SILVER)
    3a36:	81 e0       	ldi	r24, 0x01	; 1
    3a38:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    3a3c:	85 30       	cpi	r24, 0x05	; 5
    3a3e:	19 f4       	brne	.+6      	; 0x3a46 <main+0x896>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:797
        lcd.print("SIL ");
    3a40:	84 e9       	ldi	r24, 0x94	; 148
    3a42:	95 e0       	ldi	r25, 0x05	; 5
    3a44:	b3 cf       	rjmp	.-154    	; 0x39ac <main+0x7fc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:799
      else
        lcd.print("WHT ");
    3a46:	89 e9       	ldi	r24, 0x99	; 153
    3a48:	95 e0       	ldi	r25, 0x05	; 5
    3a4a:	b0 cf       	rjmp	.-160    	; 0x39ac <main+0x7fc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:804

      lcd.setCursor(9, 3);
      if (color_R == RED)
        lcd.print("RED");
      else if (color_R == GREEN)
    3a4c:	82 e0       	ldi	r24, 0x02	; 2
    3a4e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    3a52:	81 30       	cpi	r24, 0x01	; 1
    3a54:	19 f4       	brne	.+6      	; 0x3a5c <main+0x8ac>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:805
        lcd.print("GRN");
    3a56:	82 ea       	ldi	r24, 0xA2	; 162
    3a58:	95 e0       	ldi	r25, 0x05	; 5
    3a5a:	b5 cf       	rjmp	.-150    	; 0x39c6 <main+0x816>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:806
      else if (color_R == BLUE)
    3a5c:	82 e0       	ldi	r24, 0x02	; 2
    3a5e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    3a62:	82 30       	cpi	r24, 0x02	; 2
    3a64:	19 f4       	brne	.+6      	; 0x3a6c <main+0x8bc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:807
        lcd.print("BLU");
    3a66:	86 ea       	ldi	r24, 0xA6	; 166
    3a68:	95 e0       	ldi	r25, 0x05	; 5
    3a6a:	ad cf       	rjmp	.-166    	; 0x39c6 <main+0x816>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:808
      else if (color_R == YELLOW)
    3a6c:	82 e0       	ldi	r24, 0x02	; 2
    3a6e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    3a72:	84 30       	cpi	r24, 0x04	; 4
    3a74:	19 f4       	brne	.+6      	; 0x3a7c <main+0x8cc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:809
        lcd.print("YEL");
    3a76:	8a ea       	ldi	r24, 0xAA	; 170
    3a78:	95 e0       	ldi	r25, 0x05	; 5
    3a7a:	a5 cf       	rjmp	.-182    	; 0x39c6 <main+0x816>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:810
      else if (VSR6 < 0.9)
    3a7c:	41 e0       	ldi	r20, 0x01	; 1
    3a7e:	61 e0       	ldi	r22, 0x01	; 1
    3a80:	86 e0       	ldi	r24, 0x06	; 6
    3a82:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3a86:	bc 01       	movw	r22, r24
    3a88:	99 0f       	add	r25, r25
    3a8a:	88 0b       	sbc	r24, r24
    3a8c:	99 0b       	sbc	r25, r25
    3a8e:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatsisf>
    3a92:	26 e6       	ldi	r18, 0x66	; 102
    3a94:	36 e6       	ldi	r19, 0x66	; 102
    3a96:	46 e6       	ldi	r20, 0x66	; 102
    3a98:	5f e3       	ldi	r21, 0x3F	; 63
    3a9a:	0e 94 9c 2a 	call	0x5538	; 0x5538 <__cmpsf2>
    3a9e:	87 ff       	sbrs	r24, 7
    3aa0:	03 c0       	rjmp	.+6      	; 0x3aa8 <main+0x8f8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:811
        lcd.print("SIL");
    3aa2:	8e ea       	ldi	r24, 0xAE	; 174
    3aa4:	95 e0       	ldi	r25, 0x05	; 5
    3aa6:	8f cf       	rjmp	.-226    	; 0x39c6 <main+0x816>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:813
      else
        lcd.print("WHT");
    3aa8:	82 eb       	ldi	r24, 0xB2	; 178
    3aaa:	95 e0       	ldi	r25, 0x05	; 5
    3aac:	8c cf       	rjmp	.-232    	; 0x39c6 <main+0x816>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:820
      if (start == 0) {
        TCNT1 = 0;
        cnt = 0;
        //puls_cnt = 0;
      }
    } else if (page == 2)  // V left
    3aae:	82 30       	cpi	r24, 0x02	; 2
    3ab0:	09 f0       	breq	.+2      	; 0x3ab4 <main+0x904>
    3ab2:	90 c0       	rjmp	.+288    	; 0x3bd4 <main+0xa24>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:822
    {
      lcd.setCursor(0, 0);
    3ab4:	60 e0       	ldi	r22, 0x00	; 0
    3ab6:	80 e0       	ldi	r24, 0x00	; 0
    3ab8:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:823
      lcd.printf("L11=%02d        %02d", VSL10, VSM);
    3abc:	41 e0       	ldi	r20, 0x01	; 1
    3abe:	60 e0       	ldi	r22, 0x00	; 0
    3ac0:	80 e0       	ldi	r24, 0x00	; 0
    3ac2:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3ac6:	18 2f       	mov	r17, r24
    3ac8:	09 2f       	mov	r16, r25
    3aca:	41 e0       	ldi	r20, 0x01	; 1
    3acc:	62 e0       	ldi	r22, 0x02	; 2
    3ace:	82 e0       	ldi	r24, 0x02	; 2
    3ad0:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3ad4:	0f 93       	push	r16
    3ad6:	1f 93       	push	r17
    3ad8:	9f 93       	push	r25
    3ada:	8f 93       	push	r24
    3adc:	86 eb       	ldi	r24, 0xB6	; 182
    3ade:	95 e0       	ldi	r25, 0x05	; 5
    3ae0:	9f 93       	push	r25
    3ae2:	8f 93       	push	r24
    3ae4:	df 93       	push	r29
    3ae6:	cf 93       	push	r28
    3ae8:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:825

      lcd.setCursor(5, 1);
    3aec:	61 e0       	ldi	r22, 0x01	; 1
    3aee:	85 e0       	ldi	r24, 0x05	; 5
    3af0:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:826
      lcd.printf("%02d  %02d  %02d", VSL3, VSL2, VSL1);
    3af4:	41 e0       	ldi	r20, 0x01	; 1
    3af6:	60 e0       	ldi	r22, 0x00	; 0
    3af8:	81 e0       	ldi	r24, 0x01	; 1
    3afa:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3afe:	d8 2e       	mov	r13, r24
    3b00:	c9 2e       	mov	r12, r25
    3b02:	41 e0       	ldi	r20, 0x01	; 1
    3b04:	60 e0       	ldi	r22, 0x00	; 0
    3b06:	82 e0       	ldi	r24, 0x02	; 2
    3b08:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3b0c:	18 2f       	mov	r17, r24
    3b0e:	09 2f       	mov	r16, r25
    3b10:	41 e0       	ldi	r20, 0x01	; 1
    3b12:	60 e0       	ldi	r22, 0x00	; 0
    3b14:	83 e0       	ldi	r24, 0x03	; 3
    3b16:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3b1a:	cf 92       	push	r12
    3b1c:	df 92       	push	r13
    3b1e:	0f 93       	push	r16
    3b20:	1f 93       	push	r17
    3b22:	9f 93       	push	r25
    3b24:	8f 93       	push	r24
    3b26:	8b ec       	ldi	r24, 0xCB	; 203
    3b28:	95 e0       	ldi	r25, 0x05	; 5
    3b2a:	9f 93       	push	r25
    3b2c:	8f 93       	push	r24
    3b2e:	df 93       	push	r29
    3b30:	cf 93       	push	r28
    3b32:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:828

      lcd.setCursor(2, 2);
    3b36:	62 e0       	ldi	r22, 0x02	; 2
    3b38:	82 e0       	ldi	r24, 0x02	; 2
    3b3a:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:829
      lcd.printf("%02d  %02d  %02d ", VSL6, VSL5, VSL4);
    3b3e:	41 e0       	ldi	r20, 0x01	; 1
    3b40:	60 e0       	ldi	r22, 0x00	; 0
    3b42:	84 e0       	ldi	r24, 0x04	; 4
    3b44:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3b48:	d8 2e       	mov	r13, r24
    3b4a:	c9 2e       	mov	r12, r25
    3b4c:	41 e0       	ldi	r20, 0x01	; 1
    3b4e:	60 e0       	ldi	r22, 0x00	; 0
    3b50:	85 e0       	ldi	r24, 0x05	; 5
    3b52:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3b56:	18 2f       	mov	r17, r24
    3b58:	09 2f       	mov	r16, r25
    3b5a:	41 e0       	ldi	r20, 0x01	; 1
    3b5c:	60 e0       	ldi	r22, 0x00	; 0
    3b5e:	86 e0       	ldi	r24, 0x06	; 6
    3b60:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3b64:	cf 92       	push	r12
    3b66:	df 92       	push	r13
    3b68:	0f 93       	push	r16
    3b6a:	1f 93       	push	r17
    3b6c:	9f 93       	push	r25
    3b6e:	8f 93       	push	r24
    3b70:	ff 92       	push	r15
    3b72:	ef 92       	push	r14
    3b74:	df 93       	push	r29
    3b76:	cf 93       	push	r28
    3b78:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:831

      lcd.setCursor(0, 3);
    3b7c:	63 e0       	ldi	r22, 0x03	; 3
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
    3b80:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:832
      lcd.printf("%02d  %02d  %02d ", VSL9, VSL8, VSL7);
    3b84:	41 e0       	ldi	r20, 0x01	; 1
    3b86:	60 e0       	ldi	r22, 0x00	; 0
    3b88:	87 e0       	ldi	r24, 0x07	; 7
    3b8a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3b8e:	d8 2e       	mov	r13, r24
    3b90:	c9 2e       	mov	r12, r25
    3b92:	41 e0       	ldi	r20, 0x01	; 1
    3b94:	62 e0       	ldi	r22, 0x02	; 2
    3b96:	80 e0       	ldi	r24, 0x00	; 0
    3b98:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3b9c:	18 2f       	mov	r17, r24
    3b9e:	09 2f       	mov	r16, r25
    3ba0:	41 e0       	ldi	r20, 0x01	; 1
    3ba2:	62 e0       	ldi	r22, 0x02	; 2
    3ba4:	81 e0       	ldi	r24, 0x01	; 1
    3ba6:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3baa:	cf 92       	push	r12
    3bac:	df 92       	push	r13
    3bae:	0f 93       	push	r16
    3bb0:	1f 93       	push	r17
    3bb2:	9f 93       	push	r25
    3bb4:	8f 93       	push	r24
    3bb6:	ff 92       	push	r15
    3bb8:	ef 92       	push	r14
    3bba:	df 93       	push	r29
    3bbc:	cf 93       	push	r28
    3bbe:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
    3bc2:	8d b7       	in	r24, 0x3d	; 61
    3bc4:	9e b7       	in	r25, 0x3e	; 62
    3bc6:	86 96       	adiw	r24, 0x26	; 38
    3bc8:	0f b6       	in	r0, 0x3f	; 63
    3bca:	f8 94       	cli
    3bcc:	9e bf       	out	0x3e, r25	; 62
    3bce:	0f be       	out	0x3f, r0	; 63
    3bd0:	8d bf       	out	0x3d, r24	; 61
    3bd2:	95 cd       	rjmp	.-1238   	; 0x36fe <main+0x54e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:833
    } else if (page == 3)  // V right
    3bd4:	83 30       	cpi	r24, 0x03	; 3
    3bd6:	09 f0       	breq	.+2      	; 0x3bda <main+0xa2a>
    3bd8:	8d c0       	rjmp	.+282    	; 0x3cf4 <main+0xb44>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:835
    {
      lcd.setCursor(0, 0);
    3bda:	60 e0       	ldi	r22, 0x00	; 0
    3bdc:	80 e0       	ldi	r24, 0x00	; 0
    3bde:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:836
      lcd.printf("%02d        R11=%02d", VSM, VSR10);
    3be2:	41 e0       	ldi	r20, 0x01	; 1
    3be4:	63 e0       	ldi	r22, 0x03	; 3
    3be6:	82 e0       	ldi	r24, 0x02	; 2
    3be8:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3bec:	18 2f       	mov	r17, r24
    3bee:	09 2f       	mov	r16, r25
    3bf0:	41 e0       	ldi	r20, 0x01	; 1
    3bf2:	60 e0       	ldi	r22, 0x00	; 0
    3bf4:	80 e0       	ldi	r24, 0x00	; 0
    3bf6:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3bfa:	0f 93       	push	r16
    3bfc:	1f 93       	push	r17
    3bfe:	9f 93       	push	r25
    3c00:	8f 93       	push	r24
    3c02:	3f 92       	push	r3
    3c04:	2f 92       	push	r2
    3c06:	df 93       	push	r29
    3c08:	cf 93       	push	r28
    3c0a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:838

      lcd.setCursor(2, 1);
    3c0e:	61 e0       	ldi	r22, 0x01	; 1
    3c10:	82 e0       	ldi	r24, 0x02	; 2
    3c12:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:839
      lcd.printf("%02d  %02d  %02d ", VSR1, VSR2, VSR3);
    3c16:	41 e0       	ldi	r20, 0x01	; 1
    3c18:	61 e0       	ldi	r22, 0x01	; 1
    3c1a:	83 e0       	ldi	r24, 0x03	; 3
    3c1c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3c20:	d8 2e       	mov	r13, r24
    3c22:	c9 2e       	mov	r12, r25
    3c24:	41 e0       	ldi	r20, 0x01	; 1
    3c26:	61 e0       	ldi	r22, 0x01	; 1
    3c28:	82 e0       	ldi	r24, 0x02	; 2
    3c2a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3c2e:	18 2f       	mov	r17, r24
    3c30:	09 2f       	mov	r16, r25
    3c32:	41 e0       	ldi	r20, 0x01	; 1
    3c34:	61 e0       	ldi	r22, 0x01	; 1
    3c36:	81 e0       	ldi	r24, 0x01	; 1
    3c38:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3c3c:	cf 92       	push	r12
    3c3e:	df 92       	push	r13
    3c40:	0f 93       	push	r16
    3c42:	1f 93       	push	r17
    3c44:	9f 93       	push	r25
    3c46:	8f 93       	push	r24
    3c48:	ff 92       	push	r15
    3c4a:	ef 92       	push	r14
    3c4c:	df 93       	push	r29
    3c4e:	cf 93       	push	r28
    3c50:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:841

      lcd.setCursor(4, 2);
    3c54:	62 e0       	ldi	r22, 0x02	; 2
    3c56:	84 e0       	ldi	r24, 0x04	; 4
    3c58:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:842
      lcd.printf("%02d  %02d  %02d ", VSR4, VSR5, VSR6);
    3c5c:	41 e0       	ldi	r20, 0x01	; 1
    3c5e:	61 e0       	ldi	r22, 0x01	; 1
    3c60:	86 e0       	ldi	r24, 0x06	; 6
    3c62:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3c66:	d8 2e       	mov	r13, r24
    3c68:	c9 2e       	mov	r12, r25
    3c6a:	41 e0       	ldi	r20, 0x01	; 1
    3c6c:	61 e0       	ldi	r22, 0x01	; 1
    3c6e:	85 e0       	ldi	r24, 0x05	; 5
    3c70:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3c74:	18 2f       	mov	r17, r24
    3c76:	09 2f       	mov	r16, r25
    3c78:	41 e0       	ldi	r20, 0x01	; 1
    3c7a:	61 e0       	ldi	r22, 0x01	; 1
    3c7c:	84 e0       	ldi	r24, 0x04	; 4
    3c7e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3c82:	cf 92       	push	r12
    3c84:	df 92       	push	r13
    3c86:	0f 93       	push	r16
    3c88:	1f 93       	push	r17
    3c8a:	9f 93       	push	r25
    3c8c:	8f 93       	push	r24
    3c8e:	ff 92       	push	r15
    3c90:	ef 92       	push	r14
    3c92:	df 93       	push	r29
    3c94:	cf 93       	push	r28
    3c96:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:844

      lcd.setCursor(6, 3);
    3c9a:	63 e0       	ldi	r22, 0x03	; 3
    3c9c:	86 e0       	ldi	r24, 0x06	; 6
    3c9e:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:845
      lcd.printf("%02d  %02d  %02d ", VSR7, VSR8, VSR9);
    3ca2:	41 e0       	ldi	r20, 0x01	; 1
    3ca4:	63 e0       	ldi	r22, 0x03	; 3
    3ca6:	81 e0       	ldi	r24, 0x01	; 1
    3ca8:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3cac:	d8 2e       	mov	r13, r24
    3cae:	c9 2e       	mov	r12, r25
    3cb0:	41 e0       	ldi	r20, 0x01	; 1
    3cb2:	63 e0       	ldi	r22, 0x03	; 3
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3cba:	18 2f       	mov	r17, r24
    3cbc:	09 2f       	mov	r16, r25
    3cbe:	41 e0       	ldi	r20, 0x01	; 1
    3cc0:	61 e0       	ldi	r22, 0x01	; 1
    3cc2:	87 e0       	ldi	r24, 0x07	; 7
    3cc4:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3cc8:	cf 92       	push	r12
    3cca:	df 92       	push	r13
    3ccc:	0f 93       	push	r16
    3cce:	1f 93       	push	r17
    3cd0:	9f 93       	push	r25
    3cd2:	8f 93       	push	r24
    3cd4:	ff 92       	push	r15
    3cd6:	ef 92       	push	r14
    3cd8:	df 93       	push	r29
    3cda:	cf 93       	push	r28
    3cdc:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
    3ce0:	2d b7       	in	r18, 0x3d	; 61
    3ce2:	3e b7       	in	r19, 0x3e	; 62
    3ce4:	2a 5d       	subi	r18, 0xDA	; 218
    3ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce8:	0f b6       	in	r0, 0x3f	; 63
    3cea:	f8 94       	cli
    3cec:	3e bf       	out	0x3e, r19	; 62
    3cee:	0f be       	out	0x3f, r0	; 63
    3cf0:	2d bf       	out	0x3d, r18	; 61
    3cf2:	05 cd       	rjmp	.-1526   	; 0x36fe <main+0x54e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:846
    } else if (page == 4)  // switches
    3cf4:	84 30       	cpi	r24, 0x04	; 4
    3cf6:	09 f0       	breq	.+2      	; 0x3cfa <main+0xb4a>
    3cf8:	7e c0       	rjmp	.+252    	; 0x3df6 <main+0xc46>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:848
    {
      lcd.setCursor(0, 0);
    3cfa:	60 e0       	ldi	r22, 0x00	; 0
    3cfc:	80 e0       	ldi	r24, 0x00	; 0
    3cfe:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:849
      lcd.printf("SL=%d con=%d SR=%d", SFL, con, SFR);
    3d02:	40 e0       	ldi	r20, 0x00	; 0
    3d04:	63 e0       	ldi	r22, 0x03	; 3
    3d06:	84 e0       	ldi	r24, 0x04	; 4
    3d08:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3d0c:	d8 2e       	mov	r13, r24
    3d0e:	c9 2e       	mov	r12, r25
    3d10:	40 e0       	ldi	r20, 0x00	; 0
    3d12:	63 e0       	ldi	r22, 0x03	; 3
    3d14:	83 e0       	ldi	r24, 0x03	; 3
    3d16:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3d1a:	18 2f       	mov	r17, r24
    3d1c:	09 2f       	mov	r16, r25
    3d1e:	40 e0       	ldi	r20, 0x00	; 0
    3d20:	62 e0       	ldi	r22, 0x02	; 2
    3d22:	84 e0       	ldi	r24, 0x04	; 4
    3d24:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3d28:	cf 92       	push	r12
    3d2a:	df 92       	push	r13
    3d2c:	0f 93       	push	r16
    3d2e:	1f 93       	push	r17
    3d30:	9f 93       	push	r25
    3d32:	8f 93       	push	r24
    3d34:	83 e0       	ldi	r24, 0x03	; 3
    3d36:	96 e0       	ldi	r25, 0x06	; 6
    3d38:	9f 93       	push	r25
    3d3a:	8f 93       	push	r24
    3d3c:	df 93       	push	r29
    3d3e:	cf 93       	push	r28
    3d40:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:851

      lcd.setCursor(0, 1);
    3d44:	61 e0       	ldi	r22, 0x01	; 1
    3d46:	80 e0       	ldi	r24, 0x00	; 0
    3d48:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:852
      lcd.printf("obs = %d = %02d ", obs, Vobs);
    3d4c:	41 e0       	ldi	r20, 0x01	; 1
    3d4e:	62 e0       	ldi	r22, 0x02	; 2
    3d50:	86 e0       	ldi	r24, 0x06	; 6
    3d52:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3d56:	18 2f       	mov	r17, r24
    3d58:	09 2f       	mov	r16, r25
    3d5a:	40 e0       	ldi	r20, 0x00	; 0
    3d5c:	62 e0       	ldi	r22, 0x02	; 2
    3d5e:	86 e0       	ldi	r24, 0x06	; 6
    3d60:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3d64:	0f 93       	push	r16
    3d66:	1f 93       	push	r17
    3d68:	9f 93       	push	r25
    3d6a:	8f 93       	push	r24
    3d6c:	86 e1       	ldi	r24, 0x16	; 22
    3d6e:	96 e0       	ldi	r25, 0x06	; 6
    3d70:	9f 93       	push	r25
    3d72:	8f 93       	push	r24
    3d74:	df 93       	push	r29
    3d76:	cf 93       	push	r28
    3d78:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:854

      lcd.setCursor(0, 2);
    3d7c:	62 e0       	ldi	r22, 0x02	; 2
    3d7e:	80 e0       	ldi	r24, 0x00	; 0
    3d80:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:855
      lcd.printf("ball=%d = %02d ", ball, Vball);
    3d84:	41 e0       	ldi	r20, 0x01	; 1
    3d86:	62 e0       	ldi	r22, 0x02	; 2
    3d88:	85 e0       	ldi	r24, 0x05	; 5
    3d8a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3d8e:	18 2f       	mov	r17, r24
    3d90:	09 2f       	mov	r16, r25
    3d92:	40 e0       	ldi	r20, 0x00	; 0
    3d94:	62 e0       	ldi	r22, 0x02	; 2
    3d96:	85 e0       	ldi	r24, 0x05	; 5
    3d98:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    3d9c:	0f 93       	push	r16
    3d9e:	1f 93       	push	r17
    3da0:	9f 93       	push	r25
    3da2:	8f 93       	push	r24
    3da4:	87 e2       	ldi	r24, 0x27	; 39
    3da6:	96 e0       	ldi	r25, 0x06	; 6
    3da8:	9f 93       	push	r25
    3daa:	8f 93       	push	r24
    3dac:	df 93       	push	r29
    3dae:	cf 93       	push	r28
    3db0:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:857

      lcd.setCursor(0, 3);
    3db4:	63 e0       	ldi	r22, 0x03	; 3
    3db6:	80 e0       	ldi	r24, 0x00	; 0
    3db8:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:858
      lcd.printf("SBL=%d  SBR=%d  ", SBL,SBR);
    3dbc:	86 e2       	ldi	r24, 0x26	; 38
    3dbe:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    3dc2:	18 2f       	mov	r17, r24
    3dc4:	09 2f       	mov	r16, r25
    3dc6:	85 e2       	ldi	r24, 0x25	; 37
    3dc8:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    3dcc:	0f 93       	push	r16
    3dce:	1f 93       	push	r17
    3dd0:	9f 93       	push	r25
    3dd2:	8f 93       	push	r24
    3dd4:	87 e3       	ldi	r24, 0x37	; 55
    3dd6:	96 e0       	ldi	r25, 0x06	; 6
    3dd8:	9f 93       	push	r25
    3dda:	8f 93       	push	r24
    3ddc:	df 93       	push	r29
    3dde:	cf 93       	push	r28
    3de0:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
    3de4:	8d b7       	in	r24, 0x3d	; 61
    3de6:	9e b7       	in	r25, 0x3e	; 62
    3de8:	82 96       	adiw	r24, 0x22	; 34
    3dea:	0f b6       	in	r0, 0x3f	; 63
    3dec:	f8 94       	cli
    3dee:	9e bf       	out	0x3e, r25	; 62
    3df0:	0f be       	out	0x3f, r0	; 63
    3df2:	8d bf       	out	0x3d, r24	; 61
    3df4:	84 cc       	rjmp	.-1784   	; 0x36fe <main+0x54e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:859
    }else if (page == 5)  // distance
    3df6:	85 30       	cpi	r24, 0x05	; 5
    3df8:	09 f0       	breq	.+2      	; 0x3dfc <main+0xc4c>
    3dfa:	81 cc       	rjmp	.-1790   	; 0x36fe <main+0x54e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:861
    {
      lcd.setCursor(0, 0);
    3dfc:	60 e0       	ldi	r22, 0x00	; 0
    3dfe:	80 e0       	ldi	r24, 0x00	; 0
    3e00:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:862
      lcd.printf("Front: %d",cm); 
    3e04:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <cm+0x3>
    3e08:	8f 93       	push	r24
    3e0a:	80 91 0f 08 	lds	r24, 0x080F	; 0x80080f <cm+0x2>
    3e0e:	8f 93       	push	r24
    3e10:	80 91 0e 08 	lds	r24, 0x080E	; 0x80080e <cm+0x1>
    3e14:	8f 93       	push	r24
    3e16:	80 91 0d 08 	lds	r24, 0x080D	; 0x80080d <cm>
    3e1a:	8f 93       	push	r24
    3e1c:	e8 e4       	ldi	r30, 0x48	; 72
    3e1e:	f6 e0       	ldi	r31, 0x06	; 6
    3e20:	ff 93       	push	r31
    3e22:	ef 93       	push	r30
    3e24:	df 93       	push	r29
    3e26:	cf 93       	push	r28
    3e28:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:863
      pinMode(pingPin, OUTPUT);
    3e2c:	61 e0       	ldi	r22, 0x01	; 1
    3e2e:	89 e1       	ldi	r24, 0x19	; 25
    3e30:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:864
      digitalWrite(pingPin, LOW);
    3e34:	60 e0       	ldi	r22, 0x00	; 0
    3e36:	89 e1       	ldi	r24, 0x19	; 25
    3e38:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:865
      delayMicroseconds(2);
    3e3c:	82 e0       	ldi	r24, 0x02	; 2
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	0e 94 b0 02 	call	0x560	; 0x560 <delayMicroseconds>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:866
      digitalWrite(pingPin, HIGH);
    3e44:	61 e0       	ldi	r22, 0x01	; 1
    3e46:	89 e1       	ldi	r24, 0x19	; 25
    3e48:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:867
      delayMicroseconds(10);
    3e4c:	8a e0       	ldi	r24, 0x0A	; 10
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	0e 94 b0 02 	call	0x560	; 0x560 <delayMicroseconds>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:868
      digitalWrite(pingPin, LOW);
    3e54:	60 e0       	ldi	r22, 0x00	; 0
    3e56:	89 e1       	ldi	r24, 0x19	; 25
    3e58:	0e 94 c9 01 	call	0x392	; 0x392 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:869
      pinMode(echoPin, INPUT);
    3e5c:	60 e0       	ldi	r22, 0x00	; 0
    3e5e:	80 e1       	ldi	r24, 0x10	; 16
    3e60:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pinMode>
pulseIn():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.c:38
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
  // cache the port and bit of the pin in order to speed up the
  // pulse width measuring loop and achieve finer resolution.  calling
  // digitalRead() instead yields much coarser resolution.
  uint8_t bit = digitalPinToBitMask(pin);
    3e64:	e1 e0       	ldi	r30, 0x01	; 1
    3e66:	f1 e0       	ldi	r31, 0x01	; 1
    3e68:	64 91       	lpm	r22, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.c:39
  uint8_t port = digitalPinToPort(pin);
    3e6a:	ec ec       	ldi	r30, 0xCC	; 204
    3e6c:	f0 e0       	ldi	r31, 0x00	; 0
    3e6e:	84 91       	lpm	r24, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.c:46

  // convert the timeout from microseconds to a number of times through
  // the initial loop; it takes approximately 16 clock cycles per iteration
  unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

  unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
    3e70:	e8 2f       	mov	r30, r24
    3e72:	f0 e0       	ldi	r31, 0x00	; 0
    3e74:	ee 0f       	add	r30, r30
    3e76:	ff 1f       	adc	r31, r31
    3e78:	e4 55       	subi	r30, 0x54	; 84
    3e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7c:	85 91       	lpm	r24, Z+
    3e7e:	94 91       	lpm	r25, Z
    3e80:	00 eb       	ldi	r16, 0xB0	; 176
    3e82:	11 e7       	ldi	r17, 0x71	; 113
    3e84:	2b e0       	ldi	r18, 0x0B	; 11
    3e86:	30 e0       	ldi	r19, 0x00	; 0
    3e88:	46 2f       	mov	r20, r22
    3e8a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <countPulseASM>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.c:49

  // prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
  if (width)
    3e8e:	2d b7       	in	r18, 0x3d	; 61
    3e90:	3e b7       	in	r19, 0x3e	; 62
    3e92:	28 5f       	subi	r18, 0xF8	; 248
    3e94:	3f 4f       	sbci	r19, 0xFF	; 255
    3e96:	0f b6       	in	r0, 0x3f	; 63
    3e98:	f8 94       	cli
    3e9a:	3e bf       	out	0x3e, r19	; 62
    3e9c:	0f be       	out	0x3f, r0	; 63
    3e9e:	2d bf       	out	0x3d, r18	; 61
    3ea0:	61 15       	cp	r22, r1
    3ea2:	71 05       	cpc	r23, r1
    3ea4:	81 05       	cpc	r24, r1
    3ea6:	91 05       	cpc	r25, r1
    3ea8:	99 f0       	breq	.+38     	; 0x3ed0 <main+0xd20>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_pulse.c:50
    return clockCyclesToMicroseconds(width * 16 + 16);
    3eaa:	6f 5f       	subi	r22, 0xFF	; 255
    3eac:	7f 4f       	sbci	r23, 0xFF	; 255
    3eae:	8f 4f       	sbci	r24, 0xFF	; 255
    3eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    3eb2:	e4 e0       	ldi	r30, 0x04	; 4
    3eb4:	66 0f       	add	r22, r22
    3eb6:	77 1f       	adc	r23, r23
    3eb8:	88 1f       	adc	r24, r24
    3eba:	99 1f       	adc	r25, r25
    3ebc:	ea 95       	dec	r30
    3ebe:	d1 f7       	brne	.-12     	; 0x3eb4 <main+0xd04>
    3ec0:	2c e0       	ldi	r18, 0x0C	; 12
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	40 e0       	ldi	r20, 0x00	; 0
    3ec6:	50 e0       	ldi	r21, 0x00	; 0
    3ec8:	0e 94 90 2c 	call	0x5920	; 0x5920 <__udivmodsi4>
    3ecc:	ca 01       	movw	r24, r20
    3ece:	b9 01       	movw	r22, r18
microsecondsToCentimeters():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:737
      }
    }
  }
}
long microsecondsToCentimeters(long microseconds) {
   return microseconds / 29 / 2;
    3ed0:	2a e3       	ldi	r18, 0x3A	; 58
    3ed2:	30 e0       	ldi	r19, 0x00	; 0
    3ed4:	40 e0       	ldi	r20, 0x00	; 0
    3ed6:	50 e0       	ldi	r21, 0x00	; 0
    3ed8:	0e 94 b2 2c 	call	0x5964	; 0x5964 <__divmodsi4>
menu_sensor():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:871
      digitalWrite(pingPin, HIGH);
      delayMicroseconds(10);
      digitalWrite(pingPin, LOW);
      pinMode(echoPin, INPUT);
      duration = pulseIn(echoPin, HIGH);
      cm = microsecondsToCentimeters(duration);
    3edc:	20 93 0d 08 	sts	0x080D, r18	; 0x80080d <cm>
    3ee0:	30 93 0e 08 	sts	0x080E, r19	; 0x80080e <cm+0x1>
    3ee4:	40 93 0f 08 	sts	0x080F, r20	; 0x80080f <cm+0x2>
    3ee8:	50 93 10 08 	sts	0x0810, r21	; 0x800810 <cm+0x3>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:872
      lcd.setCursor(0, 1);
    3eec:	61 e0       	ldi	r22, 0x01	; 1
    3eee:	80 e0       	ldi	r24, 0x00	; 0
    3ef0:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:873
      lcd.printf("VL_L=%d VL_R=%d ", VL_Left, VL_Right);
    3ef4:	81 e0       	ldi	r24, 0x01	; 1
    3ef6:	0e 94 3d 12 	call	0x247a	; 0x247a <vl(char)>
    3efa:	18 2f       	mov	r17, r24
    3efc:	09 2f       	mov	r16, r25
    3efe:	82 e0       	ldi	r24, 0x02	; 2
    3f00:	0e 94 3d 12 	call	0x247a	; 0x247a <vl(char)>
    3f04:	0f 93       	push	r16
    3f06:	1f 93       	push	r17
    3f08:	9f 93       	push	r25
    3f0a:	8f 93       	push	r24
    3f0c:	82 e5       	ldi	r24, 0x52	; 82
    3f0e:	96 e0       	ldi	r25, 0x06	; 6
    3f10:	9f 93       	push	r25
    3f12:	8f 93       	push	r24
    3f14:	df 93       	push	r29
    3f16:	cf 93       	push	r28
    3f18:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:874
      delay(200);
    3f1c:	68 ec       	ldi	r22, 0xC8	; 200
    3f1e:	70 e0       	ldi	r23, 0x00	; 0
    3f20:	80 e0       	ldi	r24, 0x00	; 0
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:875
      lcd.clear();
    3f28:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
    3f2c:	8d b7       	in	r24, 0x3d	; 61
    3f2e:	9e b7       	in	r25, 0x3e	; 62
    3f30:	08 96       	adiw	r24, 0x08	; 8
    3f32:	0f b6       	in	r0, 0x3f	; 63
    3f34:	f8 94       	cli
    3f36:	9e bf       	out	0x3e, r25	; 62
    3f38:	0f be       	out	0x3f, r0	; 63
    3f3a:	8d bf       	out	0x3d, r24	; 61
    3f3c:	e0 cb       	rjmp	.-2112   	; 0x36fe <main+0x54e>
menu():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1389
      if (start == 0) {
        while (start == 0)
          ;
        menu_sensor();
      }
    } else if (page == 3)  // Setup
    3f3e:	83 30       	cpi	r24, 0x03	; 3
    3f40:	69 f4       	brne	.+26     	; 0x3f5c <main+0xdac>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1391
    {
      if (start == 0) {
    3f42:	86 e0       	ldi	r24, 0x06	; 6
    3f44:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    3f48:	89 2b       	or	r24, r25
    3f4a:	09 f0       	breq	.+2      	; 0x3f4e <main+0xd9e>
    3f4c:	7e ca       	rjmp	.-2820   	; 0x344a <main+0x29a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1392
        while (start == 0)
    3f4e:	86 e0       	ldi	r24, 0x06	; 6
    3f50:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    3f54:	89 2b       	or	r24, r25
    3f56:	d9 f3       	breq	.-10     	; 0x3f4e <main+0xd9e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1394
          ;
        menu_setup();
    3f58:	0e 94 6d 08 	call	0x10da	; 0x10da <menu_setup()>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1396
      }
    } else if (page == 4)  // Test Color
    3f5c:	84 30       	cpi	r24, 0x04	; 4
    3f5e:	09 f0       	breq	.+2      	; 0x3f62 <main+0xdb2>
    3f60:	6a c5       	rjmp	.+2772   	; 0x4a36 <main+0x1886>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1398
    {
      if (start == 0) {
    3f62:	86 e0       	ldi	r24, 0x06	; 6
    3f64:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    3f68:	89 2b       	or	r24, r25
    3f6a:	09 f0       	breq	.+2      	; 0x3f6e <main+0xdbe>
    3f6c:	6e ca       	rjmp	.-2852   	; 0x344a <main+0x29a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1399
        lcd.clear();
    3f6e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1400
        while (start == 0)
    3f72:	86 e0       	ldi	r24, 0x06	; 6
    3f74:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    3f78:	89 2b       	or	r24, r25
    3f7a:	d9 f3       	breq	.-10     	; 0x3f72 <main+0xdc2>
menu_color():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1129
  }
}

void menu_color(void) {
  static char page = 1, last_page = 7;
  lcd.clear();
    3f7c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1298

      lcd.setCursor(0, 1);
      lcd.print("  RED  GRN  BLU ");

      lcd.setCursor(0, 2);
      lcd.printf("L%4d %4d %4d %4d", EEPROM_read_int(silver_left_r), EEPROM_read_int(silver_left_g), EEPROM_read_int(silver_left_b),EEPROM_read_int(silver_left_c));
    3f80:	c4 e0       	ldi	r28, 0x04	; 4
    3f82:	da e0       	ldi	r29, 0x0A	; 10
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1285

      lcd.setCursor(0, 1);
      lcd.print("  RED  GRN  BLU ");

      lcd.setCursor(0, 2);
      lcd.printf("L%4d %4d %4d ", EEPROM_read_int(yellow_left_r), EEPROM_read_int(yellow_left_g), EEPROM_read_int(yellow_left_b));
    3f84:	26 e3       	ldi	r18, 0x36	; 54
    3f86:	e2 2e       	mov	r14, r18
    3f88:	27 e0       	ldi	r18, 0x07	; 7
    3f8a:	f2 2e       	mov	r15, r18
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1288

      lcd.setCursor(0, 3);
      lcd.printf("R%4d %4d %4d ", EEPROM_read_int(yellow_right_r), EEPROM_read_int(yellow_right_g), EEPROM_read_int(yellow_right_b));
    3f8c:	34 e4       	ldi	r19, 0x44	; 68
    3f8e:	c3 2e       	mov	r12, r19
    3f90:	37 e0       	ldi	r19, 0x07	; 7
    3f92:	d3 2e       	mov	r13, r19
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1203
      lcd.print("APDS Right: ");
      lcd.setCursor(0, 1);
      lcd.print("  RED  GRN  BLU ");

      lcd.setCursor(0, 2);
      lcd.printf(" %4d %4d %4d %4d", red, green, blue, clear);
    3f94:	44 e8       	ldi	r20, 0x84	; 132
    3f96:	84 2e       	mov	r8, r20
    3f98:	46 e0       	ldi	r20, 0x06	; 6
    3f9a:	94 2e       	mov	r9, r20
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1230
        lcd.printf("M%4d %4d %4d ", EEPROM_read_int(yellow_right_r), EEPROM_read_int(yellow_right_g), EEPROM_read_int(yellow_right_b),EEPROM_read_int(yellow_right_c));
      } else if (color_R == SILVER) {
        lcd.setCursor(12, 0);
        lcd.print("SIL ");
        lcd.setCursor(0, 3);
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(silver_right_r), EEPROM_read_int(silver_right_g), EEPROM_read_int(silver_right_b),EEPROM_read_int(silver_right_c));
    3f9c:	0c e9       	ldi	r16, 0x9C	; 156
    3f9e:	16 e0       	ldi	r17, 0x06	; 6
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1215
        lcd.printf("M%4d %4d %4d %4d ", EEPROM_read_int(red_right_r), EEPROM_read_int(red_right_g), EEPROM_read_int(red_right_b),EEPROM_read_int(red_right_c));
      } else if (color_R == GREEN) {
        lcd.setCursor(12, 0);
        lcd.print("GRN ");
        lcd.setCursor(0, 3);
        lcd.printf("M%4d %4d %4d %4d ", EEPROM_read_int(green_right_r), EEPROM_read_int(green_right_g), EEPROM_read_int(green_right_b),EEPROM_read_int(green_right_c));
    3fa0:	53 e0       	ldi	r21, 0x03	; 3
    3fa2:	a5 2e       	mov	r10, r21
    3fa4:	57 e0       	ldi	r21, 0x07	; 7
    3fa6:	b5 2e       	mov	r11, r21
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1131

void menu_color(void) {
  static char page = 1, last_page = 7;
  lcd.clear();
  while (1) {
    if (next_page == 0) {
    3fa8:	88 e0       	ldi	r24, 0x08	; 8
    3faa:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    3fae:	89 2b       	or	r24, r25
    3fb0:	79 f4       	brne	.+30     	; 0x3fd0 <main+0xe20>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1132
      while (next_page == 0)
    3fb2:	88 e0       	ldi	r24, 0x08	; 8
    3fb4:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    3fb8:	89 2b       	or	r24, r25
    3fba:	d9 f3       	breq	.-10     	; 0x3fb2 <main+0xe02>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1134
        ;
      page++;
    3fbc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <menu_color()::page>
    3fc0:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1135
      if (page > last_page)
    3fc2:	88 30       	cpi	r24, 0x08	; 8
    3fc4:	0c f0       	brlt	.+2      	; 0x3fc8 <main+0xe18>
    3fc6:	a6 c0       	rjmp	.+332    	; 0x4114 <main+0xf64>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1134
  lcd.clear();
  while (1) {
    if (next_page == 0) {
      while (next_page == 0)
        ;
      page++;
    3fc8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <menu_color()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1137
      if (page > last_page)
        page = 1;
      lcd.clear();
    3fcc:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1139
    }
    if (previuse_page == 0) {
    3fd0:	89 e0       	ldi	r24, 0x09	; 9
    3fd2:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    3fd6:	89 2b       	or	r24, r25
    3fd8:	71 f4       	brne	.+28     	; 0x3ff6 <main+0xe46>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1140
      while (previuse_page == 0)
    3fda:	89 e0       	ldi	r24, 0x09	; 9
    3fdc:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    3fe0:	89 2b       	or	r24, r25
    3fe2:	d9 f3       	breq	.-10     	; 0x3fda <main+0xe2a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1142
        ;
      page--;
    3fe4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <menu_color()::page>
    3fe8:	81 50       	subi	r24, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1143
      if (page == 0)
    3fea:	09 f4       	brne	.+2      	; 0x3fee <main+0xe3e>
    3fec:	97 c0       	rjmp	.+302    	; 0x411c <main+0xf6c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1142
      lcd.clear();
    }
    if (previuse_page == 0) {
      while (previuse_page == 0)
        ;
      page--;
    3fee:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <menu_color()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1145
      if (page == 0)
        page = last_page;
      lcd.clear();
    3ff2:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1147
    }
    if (increase == 0)
    3ff6:	8a e0       	ldi	r24, 0x0A	; 10
    3ff8:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    3ffc:	89 2b       	or	r24, r25
    3ffe:	09 f0       	breq	.+2      	; 0x4002 <main+0xe52>
    4000:	91 c0       	rjmp	.+290    	; 0x4124 <main+0xf74>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1148
      go(40, 40);
    4002:	68 e2       	ldi	r22, 0x28	; 40
    4004:	70 e0       	ldi	r23, 0x00	; 0
    4006:	88 e2       	ldi	r24, 0x28	; 40
    4008:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1152
    else if (decrease == 0)
      go(-40, -40);
    else
      go(0, 0);
    400a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <go(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1154

    if (page == 1) {
    400e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <menu_color()::page>
    4012:	81 30       	cpi	r24, 0x01	; 1
    4014:	09 f0       	breq	.+2      	; 0x4018 <main+0xe68>
    4016:	a6 c1       	rjmp	.+844    	; 0x4364 <main+0x11b4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1155
      lcd.setCursor(0, 0);
    4018:	60 e0       	ldi	r22, 0x00	; 0
    401a:	80 e0       	ldi	r24, 0x00	; 0
    401c:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1156
      lcd.print("APDS left: ");
    4020:	83 e6       	ldi	r24, 0x63	; 99
    4022:	96 e0       	ldi	r25, 0x06	; 6
    4024:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1158

      lcd.setCursor(0, 1);
    4028:	61 e0       	ldi	r22, 0x01	; 1
    402a:	80 e0       	ldi	r24, 0x00	; 0
    402c:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1159
      lcd.print("  RED  GRN  BLU  CLR");
    4030:	8f e6       	ldi	r24, 0x6F	; 111
    4032:	96 e0       	ldi	r25, 0x06	; 6
    4034:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1161

      lcd.setCursor(0, 2);
    4038:	62 e0       	ldi	r22, 0x02	; 2
    403a:	80 e0       	ldi	r24, 0x00	; 0
    403c:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1162
      lcd.printf(" %4d %4d %4d %4d", red, green, blue, clear);
    4040:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <clear+0x1>
    4044:	8f 93       	push	r24
    4046:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <clear>
    404a:	8f 93       	push	r24
    404c:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <blue+0x1>
    4050:	8f 93       	push	r24
    4052:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <blue>
    4056:	8f 93       	push	r24
    4058:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <green+0x1>
    405c:	8f 93       	push	r24
    405e:	80 91 13 08 	lds	r24, 0x0813	; 0x800813 <green>
    4062:	8f 93       	push	r24
    4064:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <red+0x1>
    4068:	8f 93       	push	r24
    406a:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <red>
    406e:	8f 93       	push	r24
    4070:	9f 92       	push	r9
    4072:	8f 92       	push	r8
    4074:	df 93       	push	r29
    4076:	cf 93       	push	r28
    4078:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1163
      delay(100);
    407c:	64 e6       	ldi	r22, 0x64	; 100
    407e:	70 e0       	ldi	r23, 0x00	; 0
    4080:	80 e0       	ldi	r24, 0x00	; 0
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1164
      if (color_L == RED) {
    4088:	81 e0       	ldi	r24, 0x01	; 1
    408a:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    408e:	ed b7       	in	r30, 0x3d	; 61
    4090:	fe b7       	in	r31, 0x3e	; 62
    4092:	3c 96       	adiw	r30, 0x0c	; 12
    4094:	0f b6       	in	r0, 0x3f	; 63
    4096:	f8 94       	cli
    4098:	fe bf       	out	0x3e, r31	; 62
    409a:	0f be       	out	0x3f, r0	; 63
    409c:	ed bf       	out	0x3d, r30	; 61
    409e:	81 11       	cpse	r24, r1
    40a0:	50 c0       	rjmp	.+160    	; 0x4142 <main+0xf92>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1165
        lcd.setCursor(12, 0);
    40a2:	60 e0       	ldi	r22, 0x00	; 0
    40a4:	8c e0       	ldi	r24, 0x0C	; 12
    40a6:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1166
        lcd.print("RED   ");
    40aa:	85 e9       	ldi	r24, 0x95	; 149
    40ac:	96 e0       	ldi	r25, 0x06	; 6
    40ae:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1167
        lcd.setCursor(0, 3);
    40b2:	63 e0       	ldi	r22, 0x03	; 3
    40b4:	80 e0       	ldi	r24, 0x00	; 0
    40b6:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1168
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(red_left_r), EEPROM_read_int(red_left_g), EEPROM_read_int(red_left_b), EEPROM_read_int(red_left_c));
    40ba:	8a e1       	ldi	r24, 0x1A	; 26
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    40c2:	38 2e       	mov	r3, r24
    40c4:	29 2e       	mov	r2, r25
    40c6:	88 e1       	ldi	r24, 0x18	; 24
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    40ce:	58 2e       	mov	r5, r24
    40d0:	49 2e       	mov	r4, r25
    40d2:	86 e1       	ldi	r24, 0x16	; 22
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    40da:	78 2e       	mov	r7, r24
    40dc:	69 2e       	mov	r6, r25
    40de:	84 e1       	ldi	r24, 0x14	; 20
    40e0:	90 e0       	ldi	r25, 0x00	; 0
    40e2:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    40e6:	2f 92       	push	r2
    40e8:	3f 92       	push	r3
    40ea:	4f 92       	push	r4
    40ec:	5f 92       	push	r5
    40ee:	6f 92       	push	r6
    40f0:	7f 92       	push	r7
    40f2:	9f 93       	push	r25
    40f4:	8f 93       	push	r24
    40f6:	1f 93       	push	r17
    40f8:	0f 93       	push	r16
    40fa:	df 93       	push	r29
    40fc:	cf 93       	push	r28
    40fe:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
    4102:	8d b7       	in	r24, 0x3d	; 61
    4104:	9e b7       	in	r25, 0x3e	; 62
    4106:	0c 96       	adiw	r24, 0x0c	; 12
    4108:	0f b6       	in	r0, 0x3f	; 63
    410a:	f8 94       	cli
    410c:	9e bf       	out	0x3e, r25	; 62
    410e:	0f be       	out	0x3f, r0	; 63
    4110:	8d bf       	out	0x3d, r24	; 61
    4112:	4a cf       	rjmp	.-364    	; 0x3fa8 <main+0xdf8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1136
    if (next_page == 0) {
      while (next_page == 0)
        ;
      page++;
      if (page > last_page)
        page = 1;
    4114:	91 e0       	ldi	r25, 0x01	; 1
    4116:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <menu_color()::page>
    411a:	58 cf       	rjmp	.-336    	; 0x3fcc <main+0xe1c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1144
    if (previuse_page == 0) {
      while (previuse_page == 0)
        ;
      page--;
      if (page == 0)
        page = last_page;
    411c:	e7 e0       	ldi	r30, 0x07	; 7
    411e:	e0 93 04 01 	sts	0x0104, r30	; 0x800104 <menu_color()::page>
    4122:	67 cf       	rjmp	.-306    	; 0x3ff2 <main+0xe42>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1149
      lcd.clear();
    }
    if (increase == 0)
      go(40, 40);
    else if (decrease == 0)
    4124:	8b e0       	ldi	r24, 0x0B	; 11
    4126:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    412a:	89 2b       	or	r24, r25
    412c:	29 f4       	brne	.+10     	; 0x4138 <main+0xf88>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1150
      go(-40, -40);
    412e:	68 ed       	ldi	r22, 0xD8	; 216
    4130:	7f ef       	ldi	r23, 0xFF	; 255
    4132:	88 ed       	ldi	r24, 0xD8	; 216
    4134:	9f ef       	ldi	r25, 0xFF	; 255
    4136:	69 cf       	rjmp	.-302    	; 0x400a <main+0xe5a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1152
    else
      go(0, 0);
    4138:	70 e0       	ldi	r23, 0x00	; 0
    413a:	60 e0       	ldi	r22, 0x00	; 0
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	80 e0       	ldi	r24, 0x00	; 0
    4140:	64 cf       	rjmp	.-312    	; 0x400a <main+0xe5a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1169
      if (color_L == RED) {
        lcd.setCursor(12, 0);
        lcd.print("RED   ");
        lcd.setCursor(0, 3);
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(red_left_r), EEPROM_read_int(red_left_g), EEPROM_read_int(red_left_b), EEPROM_read_int(red_left_c));
      } else if (color_L == GREEN) {
    4142:	81 e0       	ldi	r24, 0x01	; 1
    4144:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    4148:	81 30       	cpi	r24, 0x01	; 1
    414a:	d1 f5       	brne	.+116    	; 0x41c0 <main+0x1010>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1170
        lcd.setCursor(12, 0);
    414c:	60 e0       	ldi	r22, 0x00	; 0
    414e:	8c e0       	ldi	r24, 0x0C	; 12
    4150:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1171
        lcd.print("GREEN ");
    4154:	8d ea       	ldi	r24, 0xAD	; 173
    4156:	96 e0       	ldi	r25, 0x06	; 6
    4158:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1172
        lcd.setCursor(0, 3);
    415c:	63 e0       	ldi	r22, 0x03	; 3
    415e:	80 e0       	ldi	r24, 0x00	; 0
    4160:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1173
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(green_left_r), EEPROM_read_int(green_left_g), EEPROM_read_int(green_left_b), EEPROM_read_int(green_left_c));
    4164:	82 e2       	ldi	r24, 0x22	; 34
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    416c:	38 2e       	mov	r3, r24
    416e:	29 2e       	mov	r2, r25
    4170:	80 e2       	ldi	r24, 0x20	; 32
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4178:	58 2e       	mov	r5, r24
    417a:	49 2e       	mov	r4, r25
    417c:	8e e1       	ldi	r24, 0x1E	; 30
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4184:	78 2e       	mov	r7, r24
    4186:	69 2e       	mov	r6, r25
    4188:	8c e1       	ldi	r24, 0x1C	; 28
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4190:	2f 92       	push	r2
    4192:	3f 92       	push	r3
    4194:	4f 92       	push	r4
    4196:	5f 92       	push	r5
    4198:	6f 92       	push	r6
    419a:	7f 92       	push	r7
    419c:	9f 93       	push	r25
    419e:	8f 93       	push	r24
    41a0:	1f 93       	push	r17
    41a2:	0f 93       	push	r16
    41a4:	df 93       	push	r29
    41a6:	cf 93       	push	r28
    41a8:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
    41ac:	2d b7       	in	r18, 0x3d	; 61
    41ae:	3e b7       	in	r19, 0x3e	; 62
    41b0:	24 5f       	subi	r18, 0xF4	; 244
    41b2:	3f 4f       	sbci	r19, 0xFF	; 255
    41b4:	0f b6       	in	r0, 0x3f	; 63
    41b6:	f8 94       	cli
    41b8:	3e bf       	out	0x3e, r19	; 62
    41ba:	0f be       	out	0x3f, r0	; 63
    41bc:	2d bf       	out	0x3d, r18	; 61
    41be:	f4 ce       	rjmp	.-536    	; 0x3fa8 <main+0xdf8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1174
      } else if (color_L == BLUE) {
    41c0:	81 e0       	ldi	r24, 0x01	; 1
    41c2:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    41c6:	82 30       	cpi	r24, 0x02	; 2
    41c8:	c9 f5       	brne	.+114    	; 0x423c <main+0x108c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1175
        lcd.setCursor(12, 0);
    41ca:	60 e0       	ldi	r22, 0x00	; 0
    41cc:	8c e0       	ldi	r24, 0x0C	; 12
    41ce:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1176
        lcd.print("BLUE  ");
    41d2:	84 eb       	ldi	r24, 0xB4	; 180
    41d4:	96 e0       	ldi	r25, 0x06	; 6
    41d6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1177
        lcd.setCursor(0, 3);
    41da:	63 e0       	ldi	r22, 0x03	; 3
    41dc:	80 e0       	ldi	r24, 0x00	; 0
    41de:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1178
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(blue_left_r), EEPROM_read_int(blue_left_g), EEPROM_read_int(blue_left_b), EEPROM_read_int(blue_left_c));
    41e2:	8a e2       	ldi	r24, 0x2A	; 42
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    41ea:	38 2e       	mov	r3, r24
    41ec:	29 2e       	mov	r2, r25
    41ee:	88 e2       	ldi	r24, 0x28	; 40
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    41f6:	58 2e       	mov	r5, r24
    41f8:	49 2e       	mov	r4, r25
    41fa:	86 e2       	ldi	r24, 0x26	; 38
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4202:	78 2e       	mov	r7, r24
    4204:	69 2e       	mov	r6, r25
    4206:	84 e2       	ldi	r24, 0x24	; 36
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    420e:	2f 92       	push	r2
    4210:	3f 92       	push	r3
    4212:	4f 92       	push	r4
    4214:	5f 92       	push	r5
    4216:	6f 92       	push	r6
    4218:	7f 92       	push	r7
    421a:	9f 93       	push	r25
    421c:	8f 93       	push	r24
    421e:	1f 93       	push	r17
    4220:	0f 93       	push	r16
    4222:	df 93       	push	r29
    4224:	cf 93       	push	r28
    4226:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
    422a:	ed b7       	in	r30, 0x3d	; 61
    422c:	fe b7       	in	r31, 0x3e	; 62
    422e:	3c 96       	adiw	r30, 0x0c	; 12
    4230:	0f b6       	in	r0, 0x3f	; 63
    4232:	f8 94       	cli
    4234:	fe bf       	out	0x3e, r31	; 62
    4236:	0f be       	out	0x3f, r0	; 63
    4238:	ed bf       	out	0x3d, r30	; 61
    423a:	b6 ce       	rjmp	.-660    	; 0x3fa8 <main+0xdf8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1179
      } else if (color_L == YELLOW) {
    423c:	81 e0       	ldi	r24, 0x01	; 1
    423e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    4242:	84 30       	cpi	r24, 0x04	; 4
    4244:	c9 f5       	brne	.+114    	; 0x42b8 <main+0x1108>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1180
        lcd.setCursor(12, 0);
    4246:	60 e0       	ldi	r22, 0x00	; 0
    4248:	8c e0       	ldi	r24, 0x0C	; 12
    424a:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1181
        lcd.print("YELLOW");
    424e:	8b eb       	ldi	r24, 0xBB	; 187
    4250:	96 e0       	ldi	r25, 0x06	; 6
    4252:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1182
        lcd.setCursor(0, 3);
    4256:	63 e0       	ldi	r22, 0x03	; 3
    4258:	80 e0       	ldi	r24, 0x00	; 0
    425a:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1183
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(yellow_left_r), EEPROM_read_int(yellow_left_g), EEPROM_read_int(yellow_left_b), EEPROM_read_int(yellow_left_c));
    425e:	82 e3       	ldi	r24, 0x32	; 50
    4260:	90 e0       	ldi	r25, 0x00	; 0
    4262:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4266:	38 2e       	mov	r3, r24
    4268:	29 2e       	mov	r2, r25
    426a:	80 e3       	ldi	r24, 0x30	; 48
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4272:	58 2e       	mov	r5, r24
    4274:	49 2e       	mov	r4, r25
    4276:	8e e2       	ldi	r24, 0x2E	; 46
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    427e:	78 2e       	mov	r7, r24
    4280:	69 2e       	mov	r6, r25
    4282:	8c e2       	ldi	r24, 0x2C	; 44
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    428a:	2f 92       	push	r2
    428c:	3f 92       	push	r3
    428e:	4f 92       	push	r4
    4290:	5f 92       	push	r5
    4292:	6f 92       	push	r6
    4294:	7f 92       	push	r7
    4296:	9f 93       	push	r25
    4298:	8f 93       	push	r24
    429a:	1f 93       	push	r17
    429c:	0f 93       	push	r16
    429e:	df 93       	push	r29
    42a0:	cf 93       	push	r28
    42a2:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
    42a6:	8d b7       	in	r24, 0x3d	; 61
    42a8:	9e b7       	in	r25, 0x3e	; 62
    42aa:	0c 96       	adiw	r24, 0x0c	; 12
    42ac:	0f b6       	in	r0, 0x3f	; 63
    42ae:	f8 94       	cli
    42b0:	9e bf       	out	0x3e, r25	; 62
    42b2:	0f be       	out	0x3f, r0	; 63
    42b4:	8d bf       	out	0x3d, r24	; 61
    42b6:	78 ce       	rjmp	.-784    	; 0x3fa8 <main+0xdf8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1184
      } else if (color_L == SILVER) {
    42b8:	81 e0       	ldi	r24, 0x01	; 1
    42ba:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    42be:	85 30       	cpi	r24, 0x05	; 5
    42c0:	d1 f5       	brne	.+116    	; 0x4336 <main+0x1186>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1185
        lcd.setCursor(12, 0);
    42c2:	60 e0       	ldi	r22, 0x00	; 0
    42c4:	8c e0       	ldi	r24, 0x0C	; 12
    42c6:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1186
        lcd.print("SILVER");
    42ca:	82 ec       	ldi	r24, 0xC2	; 194
    42cc:	96 e0       	ldi	r25, 0x06	; 6
    42ce:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1187
        lcd.setCursor(0, 3);
    42d2:	63 e0       	ldi	r22, 0x03	; 3
    42d4:	80 e0       	ldi	r24, 0x00	; 0
    42d6:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1188
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(silver_left_r), EEPROM_read_int(silver_left_g), EEPROM_read_int(silver_left_b), EEPROM_read_int(silver_left_c));
    42da:	8a e3       	ldi	r24, 0x3A	; 58
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    42e2:	38 2e       	mov	r3, r24
    42e4:	29 2e       	mov	r2, r25
    42e6:	88 e3       	ldi	r24, 0x38	; 56
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    42ee:	58 2e       	mov	r5, r24
    42f0:	49 2e       	mov	r4, r25
    42f2:	86 e3       	ldi	r24, 0x36	; 54
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    42fa:	78 2e       	mov	r7, r24
    42fc:	69 2e       	mov	r6, r25
    42fe:	84 e3       	ldi	r24, 0x34	; 52
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4306:	2f 92       	push	r2
    4308:	3f 92       	push	r3
    430a:	4f 92       	push	r4
    430c:	5f 92       	push	r5
    430e:	6f 92       	push	r6
    4310:	7f 92       	push	r7
    4312:	9f 93       	push	r25
    4314:	8f 93       	push	r24
    4316:	1f 93       	push	r17
    4318:	0f 93       	push	r16
    431a:	df 93       	push	r29
    431c:	cf 93       	push	r28
    431e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
    4322:	2d b7       	in	r18, 0x3d	; 61
    4324:	3e b7       	in	r19, 0x3e	; 62
    4326:	24 5f       	subi	r18, 0xF4	; 244
    4328:	3f 4f       	sbci	r19, 0xFF	; 255
    432a:	0f b6       	in	r0, 0x3f	; 63
    432c:	f8 94       	cli
    432e:	3e bf       	out	0x3e, r19	; 62
    4330:	0f be       	out	0x3f, r0	; 63
    4332:	2d bf       	out	0x3d, r18	; 61
    4334:	39 ce       	rjmp	.-910    	; 0x3fa8 <main+0xdf8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1189
      } else if (color_L == WHITE) {
    4336:	81 e0       	ldi	r24, 0x01	; 1
    4338:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    433c:	87 30       	cpi	r24, 0x07	; 7
    433e:	09 f0       	breq	.+2      	; 0x4342 <main+0x1192>
    4340:	33 ce       	rjmp	.-922    	; 0x3fa8 <main+0xdf8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1190
        lcd.setCursor(12, 0);
    4342:	60 e0       	ldi	r22, 0x00	; 0
    4344:	8c e0       	ldi	r24, 0x0C	; 12
    4346:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1191
        lcd.print("WHITE ");
    434a:	89 ec       	ldi	r24, 0xC9	; 201
    434c:	96 e0       	ldi	r25, 0x06	; 6
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1233
        lcd.print("SIL ");
        lcd.setCursor(0, 3);
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(silver_right_r), EEPROM_read_int(silver_right_g), EEPROM_read_int(silver_right_b),EEPROM_read_int(silver_right_c));
      } else if (color_R == WHITE) {
        lcd.setCursor(12, 0);
        lcd.print("WHT ");
    434e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1234
        lcd.setCursor(0, 3);
    4352:	63 e0       	ldi	r22, 0x03	; 3
    4354:	80 e0       	ldi	r24, 0x00	; 0
    4356:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1235
        lcd.print("                    ");
    435a:	80 ed       	ldi	r24, 0xD0	; 208
    435c:	96 e0       	ldi	r25, 0x06	; 6
    435e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
    4362:	22 ce       	rjmp	.-956    	; 0x3fa8 <main+0xdf8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1195
        lcd.setCursor(12, 0);
        lcd.print("WHITE ");
        lcd.setCursor(0, 3);
        lcd.print("                    ");
      }
    } else if (page == 2)  // APDS Right
    4364:	82 30       	cpi	r24, 0x02	; 2
    4366:	09 f0       	breq	.+2      	; 0x436a <main+0x11ba>
    4368:	85 c1       	rjmp	.+778    	; 0x4674 <main+0x14c4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1197
    {
      lcd.setCursor(0, 0);
    436a:	60 e0       	ldi	r22, 0x00	; 0
    436c:	80 e0       	ldi	r24, 0x00	; 0
    436e:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1198
      lcd.print("APDS Right: ");
    4372:	85 ee       	ldi	r24, 0xE5	; 229
    4374:	96 e0       	ldi	r25, 0x06	; 6
    4376:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1199
      lcd.setCursor(0, 1);
    437a:	61 e0       	ldi	r22, 0x01	; 1
    437c:	80 e0       	ldi	r24, 0x00	; 0
    437e:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1200
      lcd.print("  RED  GRN  BLU ");
    4382:	82 ef       	ldi	r24, 0xF2	; 242
    4384:	96 e0       	ldi	r25, 0x06	; 6
    4386:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1202

      lcd.setCursor(0, 2);
    438a:	62 e0       	ldi	r22, 0x02	; 2
    438c:	80 e0       	ldi	r24, 0x00	; 0
    438e:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1203
      lcd.printf(" %4d %4d %4d %4d", red, green, blue, clear);
    4392:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <clear+0x1>
    4396:	8f 93       	push	r24
    4398:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <clear>
    439c:	8f 93       	push	r24
    439e:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <blue+0x1>
    43a2:	8f 93       	push	r24
    43a4:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <blue>
    43a8:	8f 93       	push	r24
    43aa:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <green+0x1>
    43ae:	8f 93       	push	r24
    43b0:	80 91 13 08 	lds	r24, 0x0813	; 0x800813 <green>
    43b4:	8f 93       	push	r24
    43b6:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <red+0x1>
    43ba:	8f 93       	push	r24
    43bc:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <red>
    43c0:	8f 93       	push	r24
    43c2:	9f 92       	push	r9
    43c4:	8f 92       	push	r8
    43c6:	df 93       	push	r29
    43c8:	cf 93       	push	r28
    43ca:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1205

      lcd.setCursor(12, 0);
    43ce:	60 e0       	ldi	r22, 0x00	; 0
    43d0:	8c e0       	ldi	r24, 0x0C	; 12
    43d2:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1206
      if (color_R == RED) {
    43d6:	82 e0       	ldi	r24, 0x02	; 2
    43d8:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    43dc:	ed b7       	in	r30, 0x3d	; 61
    43de:	fe b7       	in	r31, 0x3e	; 62
    43e0:	3c 96       	adiw	r30, 0x0c	; 12
    43e2:	0f b6       	in	r0, 0x3f	; 63
    43e4:	f8 94       	cli
    43e6:	fe bf       	out	0x3e, r31	; 62
    43e8:	0f be       	out	0x3f, r0	; 63
    43ea:	ed bf       	out	0x3d, r30	; 61
    43ec:	81 11       	cpse	r24, r1
    43ee:	39 c0       	rjmp	.+114    	; 0x4462 <main+0x12b2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1207
        lcd.setCursor(12, 0);
    43f0:	60 e0       	ldi	r22, 0x00	; 0
    43f2:	8c e0       	ldi	r24, 0x0C	; 12
    43f4:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1208
        lcd.print("RED ");
    43f8:	85 e8       	ldi	r24, 0x85	; 133
    43fa:	95 e0       	ldi	r25, 0x05	; 5
    43fc:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1209
        lcd.setCursor(0, 3);
    4400:	63 e0       	ldi	r22, 0x03	; 3
    4402:	80 e0       	ldi	r24, 0x00	; 0
    4404:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1210
        lcd.printf("M%4d %4d %4d %4d ", EEPROM_read_int(red_right_r), EEPROM_read_int(red_right_g), EEPROM_read_int(red_right_b),EEPROM_read_int(red_right_c));
    4408:	82 e4       	ldi	r24, 0x42	; 66
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4410:	38 2e       	mov	r3, r24
    4412:	29 2e       	mov	r2, r25
    4414:	80 e4       	ldi	r24, 0x40	; 64
    4416:	90 e0       	ldi	r25, 0x00	; 0
    4418:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    441c:	58 2e       	mov	r5, r24
    441e:	49 2e       	mov	r4, r25
    4420:	8e e3       	ldi	r24, 0x3E	; 62
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4428:	78 2e       	mov	r7, r24
    442a:	69 2e       	mov	r6, r25
    442c:	8c e3       	ldi	r24, 0x3C	; 60
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4434:	2f 92       	push	r2
    4436:	3f 92       	push	r3
    4438:	4f 92       	push	r4
    443a:	5f 92       	push	r5
    443c:	6f 92       	push	r6
    443e:	7f 92       	push	r7
    4440:	9f 93       	push	r25
    4442:	8f 93       	push	r24
    4444:	bf 92       	push	r11
    4446:	af 92       	push	r10
    4448:	df 93       	push	r29
    444a:	cf 93       	push	r28
    444c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
    4450:	8d b7       	in	r24, 0x3d	; 61
    4452:	9e b7       	in	r25, 0x3e	; 62
    4454:	0c 96       	adiw	r24, 0x0c	; 12
    4456:	0f b6       	in	r0, 0x3f	; 63
    4458:	f8 94       	cli
    445a:	9e bf       	out	0x3e, r25	; 62
    445c:	0f be       	out	0x3f, r0	; 63
    445e:	8d bf       	out	0x3d, r24	; 61
    4460:	a3 cd       	rjmp	.-1210   	; 0x3fa8 <main+0xdf8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1211
      } else if (color_R == GREEN) {
    4462:	82 e0       	ldi	r24, 0x02	; 2
    4464:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    4468:	81 30       	cpi	r24, 0x01	; 1
    446a:	d1 f5       	brne	.+116    	; 0x44e0 <main+0x1330>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1212
        lcd.setCursor(12, 0);
    446c:	60 e0       	ldi	r22, 0x00	; 0
    446e:	8c e0       	ldi	r24, 0x0C	; 12
    4470:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1213
        lcd.print("GRN ");
    4474:	8a e8       	ldi	r24, 0x8A	; 138
    4476:	95 e0       	ldi	r25, 0x05	; 5
    4478:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1214
        lcd.setCursor(0, 3);
    447c:	63 e0       	ldi	r22, 0x03	; 3
    447e:	80 e0       	ldi	r24, 0x00	; 0
    4480:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1215
        lcd.printf("M%4d %4d %4d %4d ", EEPROM_read_int(green_right_r), EEPROM_read_int(green_right_g), EEPROM_read_int(green_right_b),EEPROM_read_int(green_right_c));
    4484:	8a e4       	ldi	r24, 0x4A	; 74
    4486:	90 e0       	ldi	r25, 0x00	; 0
    4488:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    448c:	38 2e       	mov	r3, r24
    448e:	29 2e       	mov	r2, r25
    4490:	88 e4       	ldi	r24, 0x48	; 72
    4492:	90 e0       	ldi	r25, 0x00	; 0
    4494:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4498:	58 2e       	mov	r5, r24
    449a:	49 2e       	mov	r4, r25
    449c:	86 e4       	ldi	r24, 0x46	; 70
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    44a4:	78 2e       	mov	r7, r24
    44a6:	69 2e       	mov	r6, r25
    44a8:	84 e4       	ldi	r24, 0x44	; 68
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    44b0:	2f 92       	push	r2
    44b2:	3f 92       	push	r3
    44b4:	4f 92       	push	r4
    44b6:	5f 92       	push	r5
    44b8:	6f 92       	push	r6
    44ba:	7f 92       	push	r7
    44bc:	9f 93       	push	r25
    44be:	8f 93       	push	r24
    44c0:	bf 92       	push	r11
    44c2:	af 92       	push	r10
    44c4:	df 93       	push	r29
    44c6:	cf 93       	push	r28
    44c8:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
    44cc:	2d b7       	in	r18, 0x3d	; 61
    44ce:	3e b7       	in	r19, 0x3e	; 62
    44d0:	24 5f       	subi	r18, 0xF4	; 244
    44d2:	3f 4f       	sbci	r19, 0xFF	; 255
    44d4:	0f b6       	in	r0, 0x3f	; 63
    44d6:	f8 94       	cli
    44d8:	3e bf       	out	0x3e, r19	; 62
    44da:	0f be       	out	0x3f, r0	; 63
    44dc:	2d bf       	out	0x3d, r18	; 61
    44de:	64 cd       	rjmp	.-1336   	; 0x3fa8 <main+0xdf8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1216
      } else if (color_R == BLUE) {
    44e0:	82 e0       	ldi	r24, 0x02	; 2
    44e2:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    44e6:	82 30       	cpi	r24, 0x02	; 2
    44e8:	c9 f5       	brne	.+114    	; 0x455c <main+0x13ac>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1217
        lcd.setCursor(12, 0);
    44ea:	60 e0       	ldi	r22, 0x00	; 0
    44ec:	8c e0       	ldi	r24, 0x0C	; 12
    44ee:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1218
        lcd.print("BLUE");
    44f2:	85 e1       	ldi	r24, 0x15	; 21
    44f4:	97 e0       	ldi	r25, 0x07	; 7
    44f6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1219
        lcd.setCursor(0, 3);
    44fa:	63 e0       	ldi	r22, 0x03	; 3
    44fc:	80 e0       	ldi	r24, 0x00	; 0
    44fe:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1220
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(blue_right_r), EEPROM_read_int(blue_right_g), EEPROM_read_int(blue_right_b),EEPROM_read_int(blue_right_c));
    4502:	82 e5       	ldi	r24, 0x52	; 82
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    450a:	38 2e       	mov	r3, r24
    450c:	29 2e       	mov	r2, r25
    450e:	80 e5       	ldi	r24, 0x50	; 80
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4516:	58 2e       	mov	r5, r24
    4518:	49 2e       	mov	r4, r25
    451a:	8e e4       	ldi	r24, 0x4E	; 78
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4522:	78 2e       	mov	r7, r24
    4524:	69 2e       	mov	r6, r25
    4526:	8c e4       	ldi	r24, 0x4C	; 76
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    452e:	2f 92       	push	r2
    4530:	3f 92       	push	r3
    4532:	4f 92       	push	r4
    4534:	5f 92       	push	r5
    4536:	6f 92       	push	r6
    4538:	7f 92       	push	r7
    453a:	9f 93       	push	r25
    453c:	8f 93       	push	r24
    453e:	1f 93       	push	r17
    4540:	0f 93       	push	r16
    4542:	df 93       	push	r29
    4544:	cf 93       	push	r28
    4546:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
    454a:	ed b7       	in	r30, 0x3d	; 61
    454c:	fe b7       	in	r31, 0x3e	; 62
    454e:	3c 96       	adiw	r30, 0x0c	; 12
    4550:	0f b6       	in	r0, 0x3f	; 63
    4552:	f8 94       	cli
    4554:	fe bf       	out	0x3e, r31	; 62
    4556:	0f be       	out	0x3f, r0	; 63
    4558:	ed bf       	out	0x3d, r30	; 61
    455a:	26 cd       	rjmp	.-1460   	; 0x3fa8 <main+0xdf8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1221
      } else if (color_R == YELLOW) {
    455c:	82 e0       	ldi	r24, 0x02	; 2
    455e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    4562:	84 30       	cpi	r24, 0x04	; 4
    4564:	e1 f5       	brne	.+120    	; 0x45de <main+0x142e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1222
        lcd.setCursor(12, 0);
    4566:	60 e0       	ldi	r22, 0x00	; 0
    4568:	8c e0       	ldi	r24, 0x0C	; 12
    456a:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1223
        lcd.print("YELLOW");
    456e:	8b eb       	ldi	r24, 0xBB	; 187
    4570:	96 e0       	ldi	r25, 0x06	; 6
    4572:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1224
        lcd.setCursor(0, 3);
    4576:	63 e0       	ldi	r22, 0x03	; 3
    4578:	80 e0       	ldi	r24, 0x00	; 0
    457a:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1225
        lcd.printf("M%4d %4d %4d ", EEPROM_read_int(yellow_right_r), EEPROM_read_int(yellow_right_g), EEPROM_read_int(yellow_right_b),EEPROM_read_int(yellow_right_c));
    457e:	8a e5       	ldi	r24, 0x5A	; 90
    4580:	90 e0       	ldi	r25, 0x00	; 0
    4582:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4586:	38 2e       	mov	r3, r24
    4588:	29 2e       	mov	r2, r25
    458a:	88 e5       	ldi	r24, 0x58	; 88
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4592:	58 2e       	mov	r5, r24
    4594:	49 2e       	mov	r4, r25
    4596:	86 e5       	ldi	r24, 0x56	; 86
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    459e:	78 2e       	mov	r7, r24
    45a0:	69 2e       	mov	r6, r25
    45a2:	84 e5       	ldi	r24, 0x54	; 84
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    45aa:	2f 92       	push	r2
    45ac:	3f 92       	push	r3
    45ae:	4f 92       	push	r4
    45b0:	5f 92       	push	r5
    45b2:	6f 92       	push	r6
    45b4:	7f 92       	push	r7
    45b6:	9f 93       	push	r25
    45b8:	8f 93       	push	r24
    45ba:	2a e1       	ldi	r18, 0x1A	; 26
    45bc:	37 e0       	ldi	r19, 0x07	; 7
    45be:	3f 93       	push	r19
    45c0:	2f 93       	push	r18
    45c2:	df 93       	push	r29
    45c4:	cf 93       	push	r28
    45c6:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
    45ca:	2d b7       	in	r18, 0x3d	; 61
    45cc:	3e b7       	in	r19, 0x3e	; 62
    45ce:	24 5f       	subi	r18, 0xF4	; 244
    45d0:	3f 4f       	sbci	r19, 0xFF	; 255
    45d2:	0f b6       	in	r0, 0x3f	; 63
    45d4:	f8 94       	cli
    45d6:	3e bf       	out	0x3e, r19	; 62
    45d8:	0f be       	out	0x3f, r0	; 63
    45da:	2d bf       	out	0x3d, r18	; 61
    45dc:	e5 cc       	rjmp	.-1590   	; 0x3fa8 <main+0xdf8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1226
      } else if (color_R == SILVER) {
    45de:	82 e0       	ldi	r24, 0x02	; 2
    45e0:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    45e4:	85 30       	cpi	r24, 0x05	; 5
    45e6:	c9 f5       	brne	.+114    	; 0x465a <main+0x14aa>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1227
        lcd.setCursor(12, 0);
    45e8:	60 e0       	ldi	r22, 0x00	; 0
    45ea:	8c e0       	ldi	r24, 0x0C	; 12
    45ec:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1228
        lcd.print("SIL ");
    45f0:	84 e9       	ldi	r24, 0x94	; 148
    45f2:	95 e0       	ldi	r25, 0x05	; 5
    45f4:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1229
        lcd.setCursor(0, 3);
    45f8:	63 e0       	ldi	r22, 0x03	; 3
    45fa:	80 e0       	ldi	r24, 0x00	; 0
    45fc:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1230
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(silver_right_r), EEPROM_read_int(silver_right_g), EEPROM_read_int(silver_right_b),EEPROM_read_int(silver_right_c));
    4600:	82 e6       	ldi	r24, 0x62	; 98
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4608:	38 2e       	mov	r3, r24
    460a:	29 2e       	mov	r2, r25
    460c:	80 e6       	ldi	r24, 0x60	; 96
    460e:	90 e0       	ldi	r25, 0x00	; 0
    4610:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4614:	58 2e       	mov	r5, r24
    4616:	49 2e       	mov	r4, r25
    4618:	8e e5       	ldi	r24, 0x5E	; 94
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4620:	78 2e       	mov	r7, r24
    4622:	69 2e       	mov	r6, r25
    4624:	8c e5       	ldi	r24, 0x5C	; 92
    4626:	90 e0       	ldi	r25, 0x00	; 0
    4628:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    462c:	2f 92       	push	r2
    462e:	3f 92       	push	r3
    4630:	4f 92       	push	r4
    4632:	5f 92       	push	r5
    4634:	6f 92       	push	r6
    4636:	7f 92       	push	r7
    4638:	9f 93       	push	r25
    463a:	8f 93       	push	r24
    463c:	1f 93       	push	r17
    463e:	0f 93       	push	r16
    4640:	df 93       	push	r29
    4642:	cf 93       	push	r28
    4644:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
    4648:	ed b7       	in	r30, 0x3d	; 61
    464a:	fe b7       	in	r31, 0x3e	; 62
    464c:	3c 96       	adiw	r30, 0x0c	; 12
    464e:	0f b6       	in	r0, 0x3f	; 63
    4650:	f8 94       	cli
    4652:	fe bf       	out	0x3e, r31	; 62
    4654:	0f be       	out	0x3f, r0	; 63
    4656:	ed bf       	out	0x3d, r30	; 61
    4658:	a7 cc       	rjmp	.-1714   	; 0x3fa8 <main+0xdf8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1231
      } else if (color_R == WHITE) {
    465a:	82 e0       	ldi	r24, 0x02	; 2
    465c:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    4660:	87 30       	cpi	r24, 0x07	; 7
    4662:	09 f0       	breq	.+2      	; 0x4666 <main+0x14b6>
    4664:	a1 cc       	rjmp	.-1726   	; 0x3fa8 <main+0xdf8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1232
        lcd.setCursor(12, 0);
    4666:	60 e0       	ldi	r22, 0x00	; 0
    4668:	8c e0       	ldi	r24, 0x0C	; 12
    466a:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1233
        lcd.print("WHT ");
    466e:	89 e9       	ldi	r24, 0x99	; 153
    4670:	95 e0       	ldi	r25, 0x05	; 5
    4672:	6d ce       	rjmp	.-806    	; 0x434e <main+0x119e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1237
        lcd.setCursor(0, 3);
        lcd.print("                    ");
      }
    } else if (page == 3)  // memory RED
    4674:	83 30       	cpi	r24, 0x03	; 3
    4676:	09 f0       	breq	.+2      	; 0x467a <main+0x14ca>
    4678:	59 c0       	rjmp	.+178    	; 0x472c <main+0x157c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1239
    {
      lcd.setCursor(0, 0);
    467a:	60 e0       	ldi	r22, 0x00	; 0
    467c:	80 e0       	ldi	r24, 0x00	; 0
    467e:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1240
      lcd.print("memory RED:  ");
    4682:	88 e2       	ldi	r24, 0x28	; 40
    4684:	97 e0       	ldi	r25, 0x07	; 7
    4686:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1242

      lcd.setCursor(0, 1);
    468a:	61 e0       	ldi	r22, 0x01	; 1
    468c:	80 e0       	ldi	r24, 0x00	; 0
    468e:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1243
      lcd.print("  RED  GRN  BLU ");
    4692:	82 ef       	ldi	r24, 0xF2	; 242
    4694:	96 e0       	ldi	r25, 0x06	; 6
    4696:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1245

      lcd.setCursor(0, 2);
    469a:	62 e0       	ldi	r22, 0x02	; 2
    469c:	80 e0       	ldi	r24, 0x00	; 0
    469e:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1246
      lcd.printf("L%4d %4d %4d ", EEPROM_read_int(red_left_r), EEPROM_read_int(red_left_g), EEPROM_read_int(red_left_b));
    46a2:	88 e1       	ldi	r24, 0x18	; 24
    46a4:	90 e0       	ldi	r25, 0x00	; 0
    46a6:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    46aa:	58 2e       	mov	r5, r24
    46ac:	49 2e       	mov	r4, r25
    46ae:	86 e1       	ldi	r24, 0x16	; 22
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    46b6:	78 2e       	mov	r7, r24
    46b8:	69 2e       	mov	r6, r25
    46ba:	84 e1       	ldi	r24, 0x14	; 20
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    46c2:	4f 92       	push	r4
    46c4:	5f 92       	push	r5
    46c6:	6f 92       	push	r6
    46c8:	7f 92       	push	r7
    46ca:	9f 93       	push	r25
    46cc:	8f 93       	push	r24
    46ce:	ff 92       	push	r15
    46d0:	ef 92       	push	r14
    46d2:	df 93       	push	r29
    46d4:	cf 93       	push	r28
    46d6:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1248

      lcd.setCursor(0, 3);
    46da:	63 e0       	ldi	r22, 0x03	; 3
    46dc:	80 e0       	ldi	r24, 0x00	; 0
    46de:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1249
      lcd.printf("R%4d %4d %4d ", EEPROM_read_int(red_right_r), EEPROM_read_int(red_right_g), EEPROM_read_int(red_right_b));
    46e2:	80 e4       	ldi	r24, 0x40	; 64
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    46ea:	58 2e       	mov	r5, r24
    46ec:	49 2e       	mov	r4, r25
    46ee:	8e e3       	ldi	r24, 0x3E	; 62
    46f0:	90 e0       	ldi	r25, 0x00	; 0
    46f2:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    46f6:	78 2e       	mov	r7, r24
    46f8:	69 2e       	mov	r6, r25
    46fa:	8c e3       	ldi	r24, 0x3C	; 60
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4702:	4f 92       	push	r4
    4704:	5f 92       	push	r5
    4706:	6f 92       	push	r6
    4708:	7f 92       	push	r7
    470a:	9f 93       	push	r25
    470c:	8f 93       	push	r24
    470e:	df 92       	push	r13
    4710:	cf 92       	push	r12
    4712:	df 93       	push	r29
    4714:	cf 93       	push	r28
    4716:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
    471a:	ed b7       	in	r30, 0x3d	; 61
    471c:	fe b7       	in	r31, 0x3e	; 62
    471e:	74 96       	adiw	r30, 0x14	; 20
    4720:	0f b6       	in	r0, 0x3f	; 63
    4722:	f8 94       	cli
    4724:	fe bf       	out	0x3e, r31	; 62
    4726:	0f be       	out	0x3f, r0	; 63
    4728:	ed bf       	out	0x3d, r30	; 61
    472a:	3e cc       	rjmp	.-1924   	; 0x3fa8 <main+0xdf8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1250
    } else if (page == 4)  // memory GREEN
    472c:	84 30       	cpi	r24, 0x04	; 4
    472e:	09 f0       	breq	.+2      	; 0x4732 <main+0x1582>
    4730:	59 c0       	rjmp	.+178    	; 0x47e4 <main+0x1634>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1252
    {
      lcd.setCursor(0, 0);
    4732:	60 e0       	ldi	r22, 0x00	; 0
    4734:	80 e0       	ldi	r24, 0x00	; 0
    4736:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1253
      lcd.print("memory GRN:  ");
    473a:	82 e5       	ldi	r24, 0x52	; 82
    473c:	97 e0       	ldi	r25, 0x07	; 7
    473e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1255

      lcd.setCursor(0, 1);
    4742:	61 e0       	ldi	r22, 0x01	; 1
    4744:	80 e0       	ldi	r24, 0x00	; 0
    4746:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1256
      lcd.print("  RED  GRN  BLU ");
    474a:	82 ef       	ldi	r24, 0xF2	; 242
    474c:	96 e0       	ldi	r25, 0x06	; 6
    474e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1258

      lcd.setCursor(0, 2);
    4752:	62 e0       	ldi	r22, 0x02	; 2
    4754:	80 e0       	ldi	r24, 0x00	; 0
    4756:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1259
      lcd.printf("L%4d %4d %4d ", EEPROM_read_int(green_left_r), EEPROM_read_int(green_left_g), EEPROM_read_int(green_left_b));
    475a:	80 e2       	ldi	r24, 0x20	; 32
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4762:	58 2e       	mov	r5, r24
    4764:	49 2e       	mov	r4, r25
    4766:	8e e1       	ldi	r24, 0x1E	; 30
    4768:	90 e0       	ldi	r25, 0x00	; 0
    476a:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    476e:	78 2e       	mov	r7, r24
    4770:	69 2e       	mov	r6, r25
    4772:	8c e1       	ldi	r24, 0x1C	; 28
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    477a:	4f 92       	push	r4
    477c:	5f 92       	push	r5
    477e:	6f 92       	push	r6
    4780:	7f 92       	push	r7
    4782:	9f 93       	push	r25
    4784:	8f 93       	push	r24
    4786:	ff 92       	push	r15
    4788:	ef 92       	push	r14
    478a:	df 93       	push	r29
    478c:	cf 93       	push	r28
    478e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1261

      lcd.setCursor(0, 3);
    4792:	63 e0       	ldi	r22, 0x03	; 3
    4794:	80 e0       	ldi	r24, 0x00	; 0
    4796:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1262
      lcd.printf("R%4d %4d %4d ", EEPROM_read_int(green_right_r), EEPROM_read_int(green_right_g), EEPROM_read_int(green_right_b));
    479a:	88 e4       	ldi	r24, 0x48	; 72
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    47a2:	58 2e       	mov	r5, r24
    47a4:	49 2e       	mov	r4, r25
    47a6:	86 e4       	ldi	r24, 0x46	; 70
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    47ae:	78 2e       	mov	r7, r24
    47b0:	69 2e       	mov	r6, r25
    47b2:	84 e4       	ldi	r24, 0x44	; 68
    47b4:	90 e0       	ldi	r25, 0x00	; 0
    47b6:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    47ba:	4f 92       	push	r4
    47bc:	5f 92       	push	r5
    47be:	6f 92       	push	r6
    47c0:	7f 92       	push	r7
    47c2:	9f 93       	push	r25
    47c4:	8f 93       	push	r24
    47c6:	df 92       	push	r13
    47c8:	cf 92       	push	r12
    47ca:	df 93       	push	r29
    47cc:	cf 93       	push	r28
    47ce:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
    47d2:	ed b7       	in	r30, 0x3d	; 61
    47d4:	fe b7       	in	r31, 0x3e	; 62
    47d6:	74 96       	adiw	r30, 0x14	; 20
    47d8:	0f b6       	in	r0, 0x3f	; 63
    47da:	f8 94       	cli
    47dc:	fe bf       	out	0x3e, r31	; 62
    47de:	0f be       	out	0x3f, r0	; 63
    47e0:	ed bf       	out	0x3d, r30	; 61
    47e2:	e2 cb       	rjmp	.-2108   	; 0x3fa8 <main+0xdf8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1263
    } else if (page == 5)  // memory BLUE
    47e4:	85 30       	cpi	r24, 0x05	; 5
    47e6:	09 f0       	breq	.+2      	; 0x47ea <main+0x163a>
    47e8:	59 c0       	rjmp	.+178    	; 0x489c <main+0x16ec>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1265
    {
      lcd.setCursor(0, 0);
    47ea:	60 e0       	ldi	r22, 0x00	; 0
    47ec:	80 e0       	ldi	r24, 0x00	; 0
    47ee:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1266
      lcd.print("memory BLU:  ");
    47f2:	80 e6       	ldi	r24, 0x60	; 96
    47f4:	97 e0       	ldi	r25, 0x07	; 7
    47f6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1268

      lcd.setCursor(0, 1);
    47fa:	61 e0       	ldi	r22, 0x01	; 1
    47fc:	80 e0       	ldi	r24, 0x00	; 0
    47fe:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1269
      lcd.print("  RED  GRN  BLU ");
    4802:	82 ef       	ldi	r24, 0xF2	; 242
    4804:	96 e0       	ldi	r25, 0x06	; 6
    4806:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1271

      lcd.setCursor(0, 2);
    480a:	62 e0       	ldi	r22, 0x02	; 2
    480c:	80 e0       	ldi	r24, 0x00	; 0
    480e:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1272
      lcd.printf("L%4d %4d %4d ", EEPROM_read_int(blue_left_r), EEPROM_read_int(blue_left_g), EEPROM_read_int(blue_left_b));
    4812:	88 e2       	ldi	r24, 0x28	; 40
    4814:	90 e0       	ldi	r25, 0x00	; 0
    4816:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    481a:	58 2e       	mov	r5, r24
    481c:	49 2e       	mov	r4, r25
    481e:	86 e2       	ldi	r24, 0x26	; 38
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4826:	78 2e       	mov	r7, r24
    4828:	69 2e       	mov	r6, r25
    482a:	84 e2       	ldi	r24, 0x24	; 36
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4832:	4f 92       	push	r4
    4834:	5f 92       	push	r5
    4836:	6f 92       	push	r6
    4838:	7f 92       	push	r7
    483a:	9f 93       	push	r25
    483c:	8f 93       	push	r24
    483e:	ff 92       	push	r15
    4840:	ef 92       	push	r14
    4842:	df 93       	push	r29
    4844:	cf 93       	push	r28
    4846:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1274

      lcd.setCursor(0, 3);
    484a:	63 e0       	ldi	r22, 0x03	; 3
    484c:	80 e0       	ldi	r24, 0x00	; 0
    484e:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1275
      lcd.printf("R%4d %4d %4d ", EEPROM_read_int(blue_right_r), EEPROM_read_int(blue_right_g), EEPROM_read_int(blue_right_b));
    4852:	80 e5       	ldi	r24, 0x50	; 80
    4854:	90 e0       	ldi	r25, 0x00	; 0
    4856:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    485a:	58 2e       	mov	r5, r24
    485c:	49 2e       	mov	r4, r25
    485e:	8e e4       	ldi	r24, 0x4E	; 78
    4860:	90 e0       	ldi	r25, 0x00	; 0
    4862:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4866:	78 2e       	mov	r7, r24
    4868:	69 2e       	mov	r6, r25
    486a:	8c e4       	ldi	r24, 0x4C	; 76
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4872:	4f 92       	push	r4
    4874:	5f 92       	push	r5
    4876:	6f 92       	push	r6
    4878:	7f 92       	push	r7
    487a:	9f 93       	push	r25
    487c:	8f 93       	push	r24
    487e:	df 92       	push	r13
    4880:	cf 92       	push	r12
    4882:	df 93       	push	r29
    4884:	cf 93       	push	r28
    4886:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
    488a:	ed b7       	in	r30, 0x3d	; 61
    488c:	fe b7       	in	r31, 0x3e	; 62
    488e:	74 96       	adiw	r30, 0x14	; 20
    4890:	0f b6       	in	r0, 0x3f	; 63
    4892:	f8 94       	cli
    4894:	fe bf       	out	0x3e, r31	; 62
    4896:	0f be       	out	0x3f, r0	; 63
    4898:	ed bf       	out	0x3d, r30	; 61
    489a:	86 cb       	rjmp	.-2292   	; 0x3fa8 <main+0xdf8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1276
    } else if (page == 6)  // memory Yellow
    489c:	86 30       	cpi	r24, 0x06	; 6
    489e:	09 f0       	breq	.+2      	; 0x48a2 <main+0x16f2>
    48a0:	59 c0       	rjmp	.+178    	; 0x4954 <main+0x17a4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1278
    {
      lcd.setCursor(0, 0);
    48a2:	60 e0       	ldi	r22, 0x00	; 0
    48a4:	80 e0       	ldi	r24, 0x00	; 0
    48a6:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1279
      lcd.print("memory Yel:  ");
    48aa:	8e e6       	ldi	r24, 0x6E	; 110
    48ac:	97 e0       	ldi	r25, 0x07	; 7
    48ae:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1281

      lcd.setCursor(0, 1);
    48b2:	61 e0       	ldi	r22, 0x01	; 1
    48b4:	80 e0       	ldi	r24, 0x00	; 0
    48b6:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1282
      lcd.print("  RED  GRN  BLU ");
    48ba:	82 ef       	ldi	r24, 0xF2	; 242
    48bc:	96 e0       	ldi	r25, 0x06	; 6
    48be:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1284

      lcd.setCursor(0, 2);
    48c2:	62 e0       	ldi	r22, 0x02	; 2
    48c4:	80 e0       	ldi	r24, 0x00	; 0
    48c6:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1285
      lcd.printf("L%4d %4d %4d ", EEPROM_read_int(yellow_left_r), EEPROM_read_int(yellow_left_g), EEPROM_read_int(yellow_left_b));
    48ca:	80 e3       	ldi	r24, 0x30	; 48
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    48d2:	58 2e       	mov	r5, r24
    48d4:	49 2e       	mov	r4, r25
    48d6:	8e e2       	ldi	r24, 0x2E	; 46
    48d8:	90 e0       	ldi	r25, 0x00	; 0
    48da:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    48de:	78 2e       	mov	r7, r24
    48e0:	69 2e       	mov	r6, r25
    48e2:	8c e2       	ldi	r24, 0x2C	; 44
    48e4:	90 e0       	ldi	r25, 0x00	; 0
    48e6:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    48ea:	4f 92       	push	r4
    48ec:	5f 92       	push	r5
    48ee:	6f 92       	push	r6
    48f0:	7f 92       	push	r7
    48f2:	9f 93       	push	r25
    48f4:	8f 93       	push	r24
    48f6:	ff 92       	push	r15
    48f8:	ef 92       	push	r14
    48fa:	df 93       	push	r29
    48fc:	cf 93       	push	r28
    48fe:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1287

      lcd.setCursor(0, 3);
    4902:	63 e0       	ldi	r22, 0x03	; 3
    4904:	80 e0       	ldi	r24, 0x00	; 0
    4906:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1288
      lcd.printf("R%4d %4d %4d ", EEPROM_read_int(yellow_right_r), EEPROM_read_int(yellow_right_g), EEPROM_read_int(yellow_right_b));
    490a:	88 e5       	ldi	r24, 0x58	; 88
    490c:	90 e0       	ldi	r25, 0x00	; 0
    490e:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4912:	58 2e       	mov	r5, r24
    4914:	49 2e       	mov	r4, r25
    4916:	86 e5       	ldi	r24, 0x56	; 86
    4918:	90 e0       	ldi	r25, 0x00	; 0
    491a:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    491e:	78 2e       	mov	r7, r24
    4920:	69 2e       	mov	r6, r25
    4922:	84 e5       	ldi	r24, 0x54	; 84
    4924:	90 e0       	ldi	r25, 0x00	; 0
    4926:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    492a:	4f 92       	push	r4
    492c:	5f 92       	push	r5
    492e:	6f 92       	push	r6
    4930:	7f 92       	push	r7
    4932:	9f 93       	push	r25
    4934:	8f 93       	push	r24
    4936:	df 92       	push	r13
    4938:	cf 92       	push	r12
    493a:	df 93       	push	r29
    493c:	cf 93       	push	r28
    493e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
    4942:	ed b7       	in	r30, 0x3d	; 61
    4944:	fe b7       	in	r31, 0x3e	; 62
    4946:	74 96       	adiw	r30, 0x14	; 20
    4948:	0f b6       	in	r0, 0x3f	; 63
    494a:	f8 94       	cli
    494c:	fe bf       	out	0x3e, r31	; 62
    494e:	0f be       	out	0x3f, r0	; 63
    4950:	ed bf       	out	0x3d, r30	; 61
    4952:	2a cb       	rjmp	.-2476   	; 0x3fa8 <main+0xdf8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1289
    } else if (page == 7)  // memory Silver
    4954:	87 30       	cpi	r24, 0x07	; 7
    4956:	09 f0       	breq	.+2      	; 0x495a <main+0x17aa>
    4958:	27 cb       	rjmp	.-2482   	; 0x3fa8 <main+0xdf8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1291
    {
      lcd.setCursor(0, 0);
    495a:	60 e0       	ldi	r22, 0x00	; 0
    495c:	80 e0       	ldi	r24, 0x00	; 0
    495e:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1292
      lcd.print("memory Silver:  ");
    4962:	8c e7       	ldi	r24, 0x7C	; 124
    4964:	97 e0       	ldi	r25, 0x07	; 7
    4966:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1294

      lcd.setCursor(0, 1);
    496a:	61 e0       	ldi	r22, 0x01	; 1
    496c:	80 e0       	ldi	r24, 0x00	; 0
    496e:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1295
      lcd.print("  RED  GRN  BLU ");
    4972:	82 ef       	ldi	r24, 0xF2	; 242
    4974:	96 e0       	ldi	r25, 0x06	; 6
    4976:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1297

      lcd.setCursor(0, 2);
    497a:	62 e0       	ldi	r22, 0x02	; 2
    497c:	80 e0       	ldi	r24, 0x00	; 0
    497e:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1298
      lcd.printf("L%4d %4d %4d %4d", EEPROM_read_int(silver_left_r), EEPROM_read_int(silver_left_g), EEPROM_read_int(silver_left_b),EEPROM_read_int(silver_left_c));
    4982:	8a e3       	ldi	r24, 0x3A	; 58
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    498a:	38 2e       	mov	r3, r24
    498c:	29 2e       	mov	r2, r25
    498e:	88 e3       	ldi	r24, 0x38	; 56
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4996:	58 2e       	mov	r5, r24
    4998:	49 2e       	mov	r4, r25
    499a:	86 e3       	ldi	r24, 0x36	; 54
    499c:	90 e0       	ldi	r25, 0x00	; 0
    499e:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    49a2:	78 2e       	mov	r7, r24
    49a4:	69 2e       	mov	r6, r25
    49a6:	84 e3       	ldi	r24, 0x34	; 52
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    49ae:	2f 92       	push	r2
    49b0:	3f 92       	push	r3
    49b2:	4f 92       	push	r4
    49b4:	5f 92       	push	r5
    49b6:	6f 92       	push	r6
    49b8:	7f 92       	push	r7
    49ba:	9f 93       	push	r25
    49bc:	8f 93       	push	r24
    49be:	2d e8       	ldi	r18, 0x8D	; 141
    49c0:	37 e0       	ldi	r19, 0x07	; 7
    49c2:	3f 93       	push	r19
    49c4:	2f 93       	push	r18
    49c6:	df 93       	push	r29
    49c8:	cf 93       	push	r28
    49ca:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1300

      lcd.setCursor(0, 3);
    49ce:	63 e0       	ldi	r22, 0x03	; 3
    49d0:	80 e0       	ldi	r24, 0x00	; 0
    49d2:	0e 94 92 06 	call	0xd24	; 0xd24 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.19]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1301
      lcd.printf("R%4d %4d %4d %4d", EEPROM_read_int(silver_right_r), EEPROM_read_int(silver_right_g), EEPROM_read_int(silver_right_b),EEPROM_read_int(silver_right_c));
    49d6:	82 e6       	ldi	r24, 0x62	; 98
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    49de:	38 2e       	mov	r3, r24
    49e0:	29 2e       	mov	r2, r25
    49e2:	80 e6       	ldi	r24, 0x60	; 96
    49e4:	90 e0       	ldi	r25, 0x00	; 0
    49e6:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    49ea:	58 2e       	mov	r5, r24
    49ec:	49 2e       	mov	r4, r25
    49ee:	8e e5       	ldi	r24, 0x5E	; 94
    49f0:	90 e0       	ldi	r25, 0x00	; 0
    49f2:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    49f6:	78 2e       	mov	r7, r24
    49f8:	69 2e       	mov	r6, r25
    49fa:	8c e5       	ldi	r24, 0x5C	; 92
    49fc:	90 e0       	ldi	r25, 0x00	; 0
    49fe:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4a02:	2f 92       	push	r2
    4a04:	3f 92       	push	r3
    4a06:	4f 92       	push	r4
    4a08:	5f 92       	push	r5
    4a0a:	6f 92       	push	r6
    4a0c:	7f 92       	push	r7
    4a0e:	9f 93       	push	r25
    4a10:	8f 93       	push	r24
    4a12:	2e e9       	ldi	r18, 0x9E	; 158
    4a14:	37 e0       	ldi	r19, 0x07	; 7
    4a16:	3f 93       	push	r19
    4a18:	2f 93       	push	r18
    4a1a:	df 93       	push	r29
    4a1c:	cf 93       	push	r28
    4a1e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Print::printf(char const*, ...) [clone .constprop.18]>
    4a22:	2d b7       	in	r18, 0x3d	; 61
    4a24:	3e b7       	in	r19, 0x3e	; 62
    4a26:	28 5e       	subi	r18, 0xE8	; 232
    4a28:	3f 4f       	sbci	r19, 0xFF	; 255
    4a2a:	0f b6       	in	r0, 0x3f	; 63
    4a2c:	f8 94       	cli
    4a2e:	3e bf       	out	0x3e, r19	; 62
    4a30:	0f be       	out	0x3f, r0	; 63
    4a32:	2d bf       	out	0x3d, r18	; 61
    4a34:	b9 ca       	rjmp	.-2702   	; 0x3fa8 <main+0xdf8>
menu():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1404
        lcd.clear();
        while (start == 0)
          ;
        menu_color();
      }
    } else if (page == 5)  // Test Motor
    4a36:	85 30       	cpi	r24, 0x05	; 5
    4a38:	71 f4       	brne	.+28     	; 0x4a56 <main+0x18a6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1406
    {
      if (start == 0) {
    4a3a:	86 e0       	ldi	r24, 0x06	; 6
    4a3c:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    4a40:	89 2b       	or	r24, r25
    4a42:	11 f0       	breq	.+4      	; 0x4a48 <main+0x1898>
    4a44:	0c 94 25 1a 	jmp	0x344a	; 0x344a <main+0x29a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1407
        while (start == 0)
    4a48:	86 e0       	ldi	r24, 0x06	; 6
    4a4a:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    4a4e:	89 2b       	or	r24, r25
    4a50:	d9 f3       	breq	.-10     	; 0x4a48 <main+0x1898>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1409
          ;
        menu_motor();
    4a52:	0e 94 ad 12 	call	0x255a	; 0x255a <menu_motor()>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1411
      }
    } else if (page == 6)  // color calibration
    4a56:	86 30       	cpi	r24, 0x06	; 6
    4a58:	11 f0       	breq	.+4      	; 0x4a5e <main+0x18ae>
    4a5a:	0c 94 25 1a 	jmp	0x344a	; 0x344a <main+0x29a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1413
    {
      if (start == 0) {
    4a5e:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    4a62:	89 2b       	or	r24, r25
    4a64:	11 f0       	breq	.+4      	; 0x4a6a <main+0x18ba>
    4a66:	0c 94 25 1a 	jmp	0x344a	; 0x344a <main+0x29a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1414
        lcd.clear();
    4a6a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1415
        while (start == 0)
    4a6e:	86 e0       	ldi	r24, 0x06	; 6
    4a70:	0e 94 a0 01 	call	0x340	; 0x340 <digitalRead>
    4a74:	89 2b       	or	r24, r25
    4a76:	d9 f3       	breq	.-10     	; 0x4a6e <main+0x18be>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1417
          ;
        delay(200);
    4a78:	68 ec       	ldi	r22, 0xC8	; 200
    4a7a:	70 e0       	ldi	r23, 0x00	; 0
    4a7c:	80 e0       	ldi	r24, 0x00	; 0
    4a7e:	90 e0       	ldi	r25, 0x00	; 0
    4a80:	0e 94 0f 03 	call	0x61e	; 0x61e <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1418
        color_calib();
    4a84:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <color_calib()>
linefollow():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:25
void linefollow() {
  int spd = EEPROM_read_int(spd_address);
  if (SM == 1) go(spd, spd);

  else if (SL1) go(spd * 0.5, spd*1.1);
  else if (SR1) go(spd*1.1, spd * 0.5);
    4a88:	40 e0       	ldi	r20, 0x00	; 0
    4a8a:	61 e0       	ldi	r22, 0x01	; 1
    4a8c:	81 e0       	ldi	r24, 0x01	; 1
    4a8e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4a92:	89 2b       	or	r24, r25
    4a94:	b9 f0       	breq	.+46     	; 0x4ac4 <main+0x1914>
    4a96:	be 01       	movw	r22, r28
    4a98:	dd 0f       	add	r29, r29
    4a9a:	88 0b       	sbc	r24, r24
    4a9c:	99 0b       	sbc	r25, r25
    4a9e:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatsisf>
    4aa2:	4b 01       	movw	r8, r22
    4aa4:	5c 01       	movw	r10, r24
    4aa6:	20 e0       	ldi	r18, 0x00	; 0
    4aa8:	30 e0       	ldi	r19, 0x00	; 0
    4aaa:	40 e0       	ldi	r20, 0x00	; 0
    4aac:	5f e3       	ldi	r21, 0x3F	; 63
    4aae:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <__mulsf3>
    4ab2:	0e 94 13 2b 	call	0x5626	; 0x5626 <__fixsfsi>
    4ab6:	2b 01       	movw	r4, r22
    4ab8:	2d ec       	ldi	r18, 0xCD	; 205
    4aba:	3c ec       	ldi	r19, 0xCC	; 204
    4abc:	4c e8       	ldi	r20, 0x8C	; 140
    4abe:	5f e3       	ldi	r21, 0x3F	; 63
    4ac0:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <main+0x406>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:27

  else if (SL2) go(-spd * 0.5, spd*1.2);
    4ac4:	40 e0       	ldi	r20, 0x00	; 0
    4ac6:	60 e0       	ldi	r22, 0x00	; 0
    4ac8:	82 e0       	ldi	r24, 0x02	; 2
    4aca:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4ace:	89 2b       	or	r24, r25
    4ad0:	31 f1       	breq	.+76     	; 0x4b1e <main+0x196e>
    4ad2:	be 01       	movw	r22, r28
    4ad4:	0d 2e       	mov	r0, r29
    4ad6:	00 0c       	add	r0, r0
    4ad8:	88 0b       	sbc	r24, r24
    4ada:	99 0b       	sbc	r25, r25
    4adc:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatsisf>
    4ae0:	2a e9       	ldi	r18, 0x9A	; 154
    4ae2:	39 e9       	ldi	r19, 0x99	; 153
    4ae4:	49 e9       	ldi	r20, 0x99	; 153
    4ae6:	5f e3       	ldi	r21, 0x3F	; 63
    4ae8:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <__mulsf3>
    4aec:	0e 94 13 2b 	call	0x5626	; 0x5626 <__fixsfsi>
    4af0:	4b 01       	movw	r8, r22
    4af2:	66 27       	eor	r22, r22
    4af4:	77 27       	eor	r23, r23
    4af6:	6c 1b       	sub	r22, r28
    4af8:	7d 0b       	sbc	r23, r29
    4afa:	07 2e       	mov	r0, r23
    4afc:	00 0c       	add	r0, r0
    4afe:	88 0b       	sbc	r24, r24
    4b00:	99 0b       	sbc	r25, r25
    4b02:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatsisf>
    4b06:	20 e0       	ldi	r18, 0x00	; 0
    4b08:	30 e0       	ldi	r19, 0x00	; 0
    4b0a:	40 e0       	ldi	r20, 0x00	; 0
    4b0c:	5f e3       	ldi	r21, 0x3F	; 63
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:28
  else if (SR2) go(spd*1.2, -spd * 0.5);
    4b0e:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <__mulsf3>
    4b12:	0e 94 13 2b 	call	0x5626	; 0x5626 <__fixsfsi>
    4b16:	cb 01       	movw	r24, r22
    4b18:	b4 01       	movw	r22, r8
    4b1a:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <main+0x416>
    4b1e:	40 e0       	ldi	r20, 0x00	; 0
    4b20:	61 e0       	ldi	r22, 0x01	; 1
    4b22:	82 e0       	ldi	r24, 0x02	; 2
    4b24:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4b28:	89 2b       	or	r24, r25
    4b2a:	f1 f0       	breq	.+60     	; 0x4b68 <main+0x19b8>
    4b2c:	66 27       	eor	r22, r22
    4b2e:	77 27       	eor	r23, r23
    4b30:	6c 1b       	sub	r22, r28
    4b32:	7d 0b       	sbc	r23, r29
    4b34:	07 2e       	mov	r0, r23
    4b36:	00 0c       	add	r0, r0
    4b38:	88 0b       	sbc	r24, r24
    4b3a:	99 0b       	sbc	r25, r25
    4b3c:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatsisf>
    4b40:	20 e0       	ldi	r18, 0x00	; 0
    4b42:	30 e0       	ldi	r19, 0x00	; 0
    4b44:	40 e0       	ldi	r20, 0x00	; 0
    4b46:	5f e3       	ldi	r21, 0x3F	; 63
    4b48:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <__mulsf3>
    4b4c:	0e 94 13 2b 	call	0x5626	; 0x5626 <__fixsfsi>
    4b50:	4b 01       	movw	r8, r22
    4b52:	be 01       	movw	r22, r28
    4b54:	dd 0f       	add	r29, r29
    4b56:	88 0b       	sbc	r24, r24
    4b58:	99 0b       	sbc	r25, r25
    4b5a:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatsisf>
    4b5e:	2a e9       	ldi	r18, 0x9A	; 154
    4b60:	39 e9       	ldi	r19, 0x99	; 153
    4b62:	49 e9       	ldi	r20, 0x99	; 153
    4b64:	5f e3       	ldi	r21, 0x3F	; 63
    4b66:	d3 cf       	rjmp	.-90     	; 0x4b0e <main+0x195e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:30

  else if (SL3) go(-spd * 0.7, spd);
    4b68:	40 e0       	ldi	r20, 0x00	; 0
    4b6a:	60 e0       	ldi	r22, 0x00	; 0
    4b6c:	83 e0       	ldi	r24, 0x03	; 3
    4b6e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4b72:	89 2b       	or	r24, r25
    4b74:	b1 f0       	breq	.+44     	; 0x4ba2 <main+0x19f2>
    4b76:	66 27       	eor	r22, r22
    4b78:	77 27       	eor	r23, r23
    4b7a:	6c 1b       	sub	r22, r28
    4b7c:	7d 0b       	sbc	r23, r29
    4b7e:	07 2e       	mov	r0, r23
    4b80:	00 0c       	add	r0, r0
    4b82:	88 0b       	sbc	r24, r24
    4b84:	99 0b       	sbc	r25, r25
    4b86:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatsisf>
    4b8a:	23 e3       	ldi	r18, 0x33	; 51
    4b8c:	33 e3       	ldi	r19, 0x33	; 51
    4b8e:	43 e3       	ldi	r20, 0x33	; 51
    4b90:	5f e3       	ldi	r21, 0x3F	; 63
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:33
  else if (SR3) go(spd, -spd * 0.7);

  else if (SL4) go(-spd * 0.9, spd);
    4b92:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <__mulsf3>
    4b96:	0e 94 13 2b 	call	0x5626	; 0x5626 <__fixsfsi>
    4b9a:	cb 01       	movw	r24, r22
    4b9c:	be 01       	movw	r22, r28
    4b9e:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <main+0x416>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:31

  else if (SL2) go(-spd * 0.5, spd*1.2);
  else if (SR2) go(spd*1.2, -spd * 0.5);

  else if (SL3) go(-spd * 0.7, spd);
  else if (SR3) go(spd, -spd * 0.7);
    4ba2:	40 e0       	ldi	r20, 0x00	; 0
    4ba4:	61 e0       	ldi	r22, 0x01	; 1
    4ba6:	83 e0       	ldi	r24, 0x03	; 3
    4ba8:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4bac:	89 2b       	or	r24, r25
    4bae:	a9 f0       	breq	.+42     	; 0x4bda <main+0x1a2a>
    4bb0:	66 27       	eor	r22, r22
    4bb2:	77 27       	eor	r23, r23
    4bb4:	6c 1b       	sub	r22, r28
    4bb6:	7d 0b       	sbc	r23, r29
    4bb8:	07 2e       	mov	r0, r23
    4bba:	00 0c       	add	r0, r0
    4bbc:	88 0b       	sbc	r24, r24
    4bbe:	99 0b       	sbc	r25, r25
    4bc0:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatsisf>
    4bc4:	23 e3       	ldi	r18, 0x33	; 51
    4bc6:	33 e3       	ldi	r19, 0x33	; 51
    4bc8:	43 e3       	ldi	r20, 0x33	; 51
    4bca:	5f e3       	ldi	r21, 0x3F	; 63
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:34

  else if (SL4) go(-spd * 0.9, spd);
  else if (SR4) go(spd, -spd * 0.9);
    4bcc:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <__mulsf3>
    4bd0:	0e 94 13 2b 	call	0x5626	; 0x5626 <__fixsfsi>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:49

  else if (SL8) go(-spd, spd);
  else if (SR8) go(spd, -spd);

  else if (SL9) go(-spd, spd);
  else if (SR9) go(spd, -spd);
    4bd4:	ce 01       	movw	r24, r28
    4bd6:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <main+0x416>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:33
  else if (SR2) go(spd*1.2, -spd * 0.5);

  else if (SL3) go(-spd * 0.7, spd);
  else if (SR3) go(spd, -spd * 0.7);

  else if (SL4) go(-spd * 0.9, spd);
    4bda:	40 e0       	ldi	r20, 0x00	; 0
    4bdc:	60 e0       	ldi	r22, 0x00	; 0
    4bde:	84 e0       	ldi	r24, 0x04	; 4
    4be0:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4be4:	89 2b       	or	r24, r25
    4be6:	79 f0       	breq	.+30     	; 0x4c06 <main+0x1a56>
    4be8:	66 27       	eor	r22, r22
    4bea:	77 27       	eor	r23, r23
    4bec:	6c 1b       	sub	r22, r28
    4bee:	7d 0b       	sbc	r23, r29
    4bf0:	07 2e       	mov	r0, r23
    4bf2:	00 0c       	add	r0, r0
    4bf4:	88 0b       	sbc	r24, r24
    4bf6:	99 0b       	sbc	r25, r25
    4bf8:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatsisf>
    4bfc:	26 e6       	ldi	r18, 0x66	; 102
    4bfe:	36 e6       	ldi	r19, 0x66	; 102
    4c00:	46 e6       	ldi	r20, 0x66	; 102
    4c02:	5f e3       	ldi	r21, 0x3F	; 63
    4c04:	c6 cf       	rjmp	.-116    	; 0x4b92 <main+0x19e2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:34
  else if (SR4) go(spd, -spd * 0.9);
    4c06:	40 e0       	ldi	r20, 0x00	; 0
    4c08:	61 e0       	ldi	r22, 0x01	; 1
    4c0a:	84 e0       	ldi	r24, 0x04	; 4
    4c0c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4c10:	89 2b       	or	r24, r25
    4c12:	79 f0       	breq	.+30     	; 0x4c32 <main+0x1a82>
    4c14:	66 27       	eor	r22, r22
    4c16:	77 27       	eor	r23, r23
    4c18:	6c 1b       	sub	r22, r28
    4c1a:	7d 0b       	sbc	r23, r29
    4c1c:	07 2e       	mov	r0, r23
    4c1e:	00 0c       	add	r0, r0
    4c20:	88 0b       	sbc	r24, r24
    4c22:	99 0b       	sbc	r25, r25
    4c24:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatsisf>
    4c28:	26 e6       	ldi	r18, 0x66	; 102
    4c2a:	36 e6       	ldi	r19, 0x66	; 102
    4c2c:	46 e6       	ldi	r20, 0x66	; 102
    4c2e:	5f e3       	ldi	r21, 0x3F	; 63
    4c30:	cd cf       	rjmp	.-102    	; 0x4bcc <main+0x1a1c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:36

  else if (SL5) go(-spd, spd);
    4c32:	40 e0       	ldi	r20, 0x00	; 0
    4c34:	60 e0       	ldi	r22, 0x00	; 0
    4c36:	85 e0       	ldi	r24, 0x05	; 5
    4c38:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4c3c:	89 2b       	or	r24, r25
    4c3e:	39 f0       	breq	.+14     	; 0x4c4e <main+0x1a9e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:48
  else if (SR7) go(spd, -spd);

  else if (SL8) go(-spd, spd);
  else if (SR8) go(spd, -spd);

  else if (SL9) go(-spd, spd);
    4c40:	be 01       	movw	r22, r28
    4c42:	88 27       	eor	r24, r24
    4c44:	99 27       	eor	r25, r25
    4c46:	8c 1b       	sub	r24, r28
    4c48:	9d 0b       	sbc	r25, r29
    4c4a:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <main+0x416>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:37

  else if (SL4) go(-spd * 0.9, spd);
  else if (SR4) go(spd, -spd * 0.9);

  else if (SL5) go(-spd, spd);
  else if (SR5) go(spd, -spd);
    4c4e:	40 e0       	ldi	r20, 0x00	; 0
    4c50:	61 e0       	ldi	r22, 0x01	; 1
    4c52:	85 e0       	ldi	r24, 0x05	; 5
    4c54:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4c58:	89 2b       	or	r24, r25
    4c5a:	29 f0       	breq	.+10     	; 0x4c66 <main+0x1ab6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:49

  else if (SL8) go(-spd, spd);
  else if (SR8) go(spd, -spd);

  else if (SL9) go(-spd, spd);
  else if (SR9) go(spd, -spd);
    4c5c:	66 27       	eor	r22, r22
    4c5e:	77 27       	eor	r23, r23
    4c60:	6c 1b       	sub	r22, r28
    4c62:	7d 0b       	sbc	r23, r29
    4c64:	b7 cf       	rjmp	.-146    	; 0x4bd4 <main+0x1a24>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:39
  else if (SR4) go(spd, -spd * 0.9);

  else if (SL5) go(-spd, spd);
  else if (SR5) go(spd, -spd);

  else if (SL6) go(-spd, spd);
    4c66:	40 e0       	ldi	r20, 0x00	; 0
    4c68:	60 e0       	ldi	r22, 0x00	; 0
    4c6a:	86 e0       	ldi	r24, 0x06	; 6
    4c6c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4c70:	89 2b       	or	r24, r25
    4c72:	31 f7       	brne	.-52     	; 0x4c40 <main+0x1a90>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:40
  else if (SR6) go(spd, -spd);
    4c74:	40 e0       	ldi	r20, 0x00	; 0
    4c76:	61 e0       	ldi	r22, 0x01	; 1
    4c78:	86 e0       	ldi	r24, 0x06	; 6
    4c7a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4c7e:	89 2b       	or	r24, r25
    4c80:	69 f7       	brne	.-38     	; 0x4c5c <main+0x1aac>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:42

  else if (SL7) go(-spd, spd);
    4c82:	40 e0       	ldi	r20, 0x00	; 0
    4c84:	60 e0       	ldi	r22, 0x00	; 0
    4c86:	87 e0       	ldi	r24, 0x07	; 7
    4c88:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4c8c:	89 2b       	or	r24, r25
    4c8e:	c1 f6       	brne	.-80     	; 0x4c40 <main+0x1a90>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:43
  else if (SR7) go(spd, -spd);
    4c90:	40 e0       	ldi	r20, 0x00	; 0
    4c92:	61 e0       	ldi	r22, 0x01	; 1
    4c94:	87 e0       	ldi	r24, 0x07	; 7
    4c96:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4c9a:	89 2b       	or	r24, r25
    4c9c:	f9 f6       	brne	.-66     	; 0x4c5c <main+0x1aac>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:45

  else if (SL8) go(-spd, spd);
    4c9e:	40 e0       	ldi	r20, 0x00	; 0
    4ca0:	62 e0       	ldi	r22, 0x02	; 2
    4ca2:	80 e0       	ldi	r24, 0x00	; 0
    4ca4:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4ca8:	89 2b       	or	r24, r25
    4caa:	51 f6       	brne	.-108    	; 0x4c40 <main+0x1a90>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:46
  else if (SR8) go(spd, -spd);
    4cac:	40 e0       	ldi	r20, 0x00	; 0
    4cae:	63 e0       	ldi	r22, 0x03	; 3
    4cb0:	80 e0       	ldi	r24, 0x00	; 0
    4cb2:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4cb6:	89 2b       	or	r24, r25
    4cb8:	89 f6       	brne	.-94     	; 0x4c5c <main+0x1aac>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:48

  else if (SL9) go(-spd, spd);
    4cba:	40 e0       	ldi	r20, 0x00	; 0
    4cbc:	62 e0       	ldi	r22, 0x02	; 2
    4cbe:	81 e0       	ldi	r24, 0x01	; 1
    4cc0:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4cc4:	89 2b       	or	r24, r25
    4cc6:	09 f0       	breq	.+2      	; 0x4cca <main+0x1b1a>
    4cc8:	bb cf       	rjmp	.-138    	; 0x4c40 <main+0x1a90>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:49
  else if (SR9) go(spd, -spd);
    4cca:	40 e0       	ldi	r20, 0x00	; 0
    4ccc:	63 e0       	ldi	r22, 0x03	; 3
    4cce:	81 e0       	ldi	r24, 0x01	; 1
    4cd0:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4cd4:	89 2b       	or	r24, r25
    4cd6:	11 f6       	brne	.-124    	; 0x4c5c <main+0x1aac>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:50
  if((SM+SL1+SL2+SL3+SL4+SL5+SL6+SR1+SR2+SR3+SR4+SR5+SR6)>9){
    4cd8:	40 e0       	ldi	r20, 0x00	; 0
    4cda:	60 e0       	ldi	r22, 0x00	; 0
    4cdc:	80 e0       	ldi	r24, 0x00	; 0
    4cde:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4ce2:	ec 01       	movw	r28, r24
    4ce4:	40 e0       	ldi	r20, 0x00	; 0
    4ce6:	60 e0       	ldi	r22, 0x00	; 0
    4ce8:	81 e0       	ldi	r24, 0x01	; 1
    4cea:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4cee:	c8 0f       	add	r28, r24
    4cf0:	d9 1f       	adc	r29, r25
    4cf2:	40 e0       	ldi	r20, 0x00	; 0
    4cf4:	60 e0       	ldi	r22, 0x00	; 0
    4cf6:	82 e0       	ldi	r24, 0x02	; 2
    4cf8:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4cfc:	c8 0f       	add	r28, r24
    4cfe:	d9 1f       	adc	r29, r25
    4d00:	40 e0       	ldi	r20, 0x00	; 0
    4d02:	60 e0       	ldi	r22, 0x00	; 0
    4d04:	83 e0       	ldi	r24, 0x03	; 3
    4d06:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4d0a:	c8 0f       	add	r28, r24
    4d0c:	d9 1f       	adc	r29, r25
    4d0e:	40 e0       	ldi	r20, 0x00	; 0
    4d10:	60 e0       	ldi	r22, 0x00	; 0
    4d12:	84 e0       	ldi	r24, 0x04	; 4
    4d14:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4d18:	c8 0f       	add	r28, r24
    4d1a:	d9 1f       	adc	r29, r25
    4d1c:	40 e0       	ldi	r20, 0x00	; 0
    4d1e:	60 e0       	ldi	r22, 0x00	; 0
    4d20:	85 e0       	ldi	r24, 0x05	; 5
    4d22:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4d26:	c8 0f       	add	r28, r24
    4d28:	d9 1f       	adc	r29, r25
    4d2a:	40 e0       	ldi	r20, 0x00	; 0
    4d2c:	60 e0       	ldi	r22, 0x00	; 0
    4d2e:	86 e0       	ldi	r24, 0x06	; 6
    4d30:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4d34:	c8 0f       	add	r28, r24
    4d36:	d9 1f       	adc	r29, r25
    4d38:	40 e0       	ldi	r20, 0x00	; 0
    4d3a:	61 e0       	ldi	r22, 0x01	; 1
    4d3c:	81 e0       	ldi	r24, 0x01	; 1
    4d3e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4d42:	c8 0f       	add	r28, r24
    4d44:	d9 1f       	adc	r29, r25
    4d46:	40 e0       	ldi	r20, 0x00	; 0
    4d48:	61 e0       	ldi	r22, 0x01	; 1
    4d4a:	82 e0       	ldi	r24, 0x02	; 2
    4d4c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4d50:	c8 0f       	add	r28, r24
    4d52:	d9 1f       	adc	r29, r25
    4d54:	40 e0       	ldi	r20, 0x00	; 0
    4d56:	61 e0       	ldi	r22, 0x01	; 1
    4d58:	83 e0       	ldi	r24, 0x03	; 3
    4d5a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4d5e:	c8 0f       	add	r28, r24
    4d60:	d9 1f       	adc	r29, r25
    4d62:	40 e0       	ldi	r20, 0x00	; 0
    4d64:	61 e0       	ldi	r22, 0x01	; 1
    4d66:	84 e0       	ldi	r24, 0x04	; 4
    4d68:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4d6c:	c8 0f       	add	r28, r24
    4d6e:	d9 1f       	adc	r29, r25
    4d70:	40 e0       	ldi	r20, 0x00	; 0
    4d72:	61 e0       	ldi	r22, 0x01	; 1
    4d74:	85 e0       	ldi	r24, 0x05	; 5
    4d76:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4d7a:	c8 0f       	add	r28, r24
    4d7c:	d9 1f       	adc	r29, r25
    4d7e:	40 e0       	ldi	r20, 0x00	; 0
    4d80:	61 e0       	ldi	r22, 0x01	; 1
    4d82:	86 e0       	ldi	r24, 0x06	; 6
    4d84:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4d88:	8c 0f       	add	r24, r28
    4d8a:	9d 1f       	adc	r25, r29
    4d8c:	0a 97       	sbiw	r24, 0x0a	; 10
    4d8e:	8c f0       	brlt	.+34     	; 0x4db2 <main+0x1c02>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:51
    lcd.clear();
    4d90:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:52
    lcd.print("End");
    4d94:	8f ea       	ldi	r24, 0xAF	; 175
    4d96:	97 e0       	ldi	r25, 0x07	; 7
    4d98:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:54
    while(true){
      go(0,0);beep(10);
    4d9c:	70 e0       	ldi	r23, 0x00	; 0
    4d9e:	60 e0       	ldi	r22, 0x00	; 0
    4da0:	90 e0       	ldi	r25, 0x00	; 0
    4da2:	80 e0       	ldi	r24, 0x00	; 0
    4da4:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <go(int, int)>
    4da8:	8a e0       	ldi	r24, 0x0A	; 10
    4daa:	90 e0       	ldi	r25, 0x00	; 0
    4dac:	0e 94 b7 07 	call	0xf6e	; 0xf6e <beep(int)>
    4db0:	f5 cf       	rjmp	.-22     	; 0x4d9c <main+0x1bec>
handle_color():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1845

  inter_detected=false;
  item=WHITE; 
}
void handle_color() {
  int T90 = EEPROM_read_int(T90_address);
    4db2:	88 e9       	ldi	r24, 0x98	; 152
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	0e 94 57 08 	call	0x10ae	; 0x10ae <EEPROM_read_int(int)>
    4dba:	ec 01       	movw	r28, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1848
  int inter_detected=false;
  int deadend_detected=false;
  left_card = color_L;  //left side
    4dbc:	81 e0       	ldi	r24, 0x01	; 1
    4dbe:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1849
  right_card = color_R;  //right side
    4dc2:	82 e0       	ldi	r24, 0x02	; 2
    4dc4:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1851

  if(color_L==GREEN){
    4dc8:	81 e0       	ldi	r24, 0x01	; 1
    4dca:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    4dce:	81 30       	cpi	r24, 0x01	; 1
    4dd0:	09 f0       	breq	.+2      	; 0x4dd4 <main+0x1c24>
    4dd2:	5a c0       	rjmp	.+180    	; 0x4e88 <main+0x1cd8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1852
    cnt=0;
    4dd4:	1d bc       	out	0x2d, r1	; 45
    4dd6:	1c bc       	out	0x2c, r1	; 44
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1853
    go(80,80);
    4dd8:	60 e5       	ldi	r22, 0x50	; 80
    4dda:	70 e0       	ldi	r23, 0x00	; 0
    4ddc:	80 e5       	ldi	r24, 0x50	; 80
    4dde:	90 e0       	ldi	r25, 0x00	; 0
    4de0:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <go(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1854
    while (cnt / 100 < T90/5) {
    4de4:	ce 01       	movw	r24, r28
    4de6:	b8 01       	movw	r22, r16
    4de8:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <__divmodhi4>
    4dec:	5b 01       	movw	r10, r22
    4dee:	8c b5       	in	r24, 0x2c	; 44
    4df0:	9d b5       	in	r25, 0x2d	; 45
    4df2:	b7 01       	movw	r22, r14
    4df4:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__udivmodhi4>
    4df8:	6a 15       	cp	r22, r10
    4dfa:	7b 05       	cpc	r23, r11
    4dfc:	08 f0       	brcs	.+2      	; 0x4e00 <main+0x1c50>
    4dfe:	85 c0       	rjmp	.+266    	; 0x4f0a <main+0x1d5a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1855
      if(color_R==GREEN){
    4e00:	82 e0       	ldi	r24, 0x02	; 2
    4e02:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    4e06:	81 30       	cpi	r24, 0x01	; 1
    4e08:	01 f1       	breq	.+64     	; 0x4e4a <main+0x1c9a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1859
        deadend_detected=true;
        break;
      }
      if(SR7||SR8||SL7||SL8){
    4e0a:	40 e0       	ldi	r20, 0x00	; 0
    4e0c:	61 e0       	ldi	r22, 0x01	; 1
    4e0e:	87 e0       	ldi	r24, 0x07	; 7
    4e10:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4e14:	89 2b       	or	r24, r25
    4e16:	a9 f4       	brne	.+42     	; 0x4e42 <main+0x1c92>
    4e18:	40 e0       	ldi	r20, 0x00	; 0
    4e1a:	63 e0       	ldi	r22, 0x03	; 3
    4e1c:	80 e0       	ldi	r24, 0x00	; 0
    4e1e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4e22:	89 2b       	or	r24, r25
    4e24:	71 f4       	brne	.+28     	; 0x4e42 <main+0x1c92>
    4e26:	40 e0       	ldi	r20, 0x00	; 0
    4e28:	60 e0       	ldi	r22, 0x00	; 0
    4e2a:	87 e0       	ldi	r24, 0x07	; 7
    4e2c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4e30:	89 2b       	or	r24, r25
    4e32:	39 f4       	brne	.+14     	; 0x4e42 <main+0x1c92>
    4e34:	40 e0       	ldi	r20, 0x00	; 0
    4e36:	62 e0       	ldi	r22, 0x02	; 2
    4e38:	80 e0       	ldi	r24, 0x00	; 0
    4e3a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4e3e:	89 2b       	or	r24, r25
    4e40:	b1 f2       	breq	.-84     	; 0x4dee <main+0x1c3e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1869
    if(deadend_detected){
      move(Right,T90*2.3,150);
      move(forward,T90/3,150);
    }
    else if(inter_detected){
      move(forward,T90/5,150);
    4e42:	46 e9       	ldi	r20, 0x96	; 150
    4e44:	50 e0       	ldi	r21, 0x00	; 0
    4e46:	b5 01       	movw	r22, r10
    4e48:	1b c0       	rjmp	.+54     	; 0x4e80 <main+0x1cd0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1865
        inter_detected=true;
        break;
      }
    }
    if(deadend_detected){
      move(Right,T90*2.3,150);
    4e4a:	be 01       	movw	r22, r28
    4e4c:	0d 2e       	mov	r0, r29
    4e4e:	00 0c       	add	r0, r0
    4e50:	88 0b       	sbc	r24, r24
    4e52:	99 0b       	sbc	r25, r25
    4e54:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatsisf>
    4e58:	23 e3       	ldi	r18, 0x33	; 51
    4e5a:	33 e3       	ldi	r19, 0x33	; 51
    4e5c:	43 e1       	ldi	r20, 0x13	; 19
    4e5e:	50 e4       	ldi	r21, 0x40	; 64
    4e60:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <__mulsf3>
    4e64:	0e 94 13 2b 	call	0x5626	; 0x5626 <__fixsfsi>
    4e68:	46 e9       	ldi	r20, 0x96	; 150
    4e6a:	50 e0       	ldi	r21, 0x00	; 0
    4e6c:	8c e0       	ldi	r24, 0x0C	; 12
    4e6e:	90 e0       	ldi	r25, 0x00	; 0
    4e70:	0e 94 60 07 	call	0xec0	; 0xec0 <move(int, int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1866
      move(forward,T90/3,150);
    4e74:	ce 01       	movw	r24, r28
    4e76:	b6 01       	movw	r22, r12
    4e78:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <__divmodhi4>
    4e7c:	46 e9       	ldi	r20, 0x96	; 150
    4e7e:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1869
    }
    else if(inter_detected){
      move(forward,T90/5,150);
    4e80:	8a e0       	ldi	r24, 0x0A	; 10
    4e82:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1875
    }
    else{
      lcd.clear();
      lcd.print("green left");
      move(forward,T90/8,150);
      move(Left,T90,150);
    4e84:	0e 94 60 07 	call	0xec0	; 0xec0 <move(int, int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1881
    }
    inter_detected=false;
    deadend_detected=false;
  }

  if(color_R==GREEN){
    4e88:	82 e0       	ldi	r24, 0x02	; 2
    4e8a:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    4e8e:	81 30       	cpi	r24, 0x01	; 1
    4e90:	09 f0       	breq	.+2      	; 0x4e94 <main+0x1ce4>
    4e92:	76 c0       	rjmp	.+236    	; 0x4f80 <main+0x1dd0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1882
    cnt=0;
    4e94:	1d bc       	out	0x2d, r1	; 45
    4e96:	1c bc       	out	0x2c, r1	; 44
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1883
    go(80,80);
    4e98:	60 e5       	ldi	r22, 0x50	; 80
    4e9a:	70 e0       	ldi	r23, 0x00	; 0
    4e9c:	80 e5       	ldi	r24, 0x50	; 80
    4e9e:	90 e0       	ldi	r25, 0x00	; 0
    4ea0:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <go(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1884
    while (cnt / 100 < T90/5) {
    4ea4:	ce 01       	movw	r24, r28
    4ea6:	b8 01       	movw	r22, r16
    4ea8:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <__divmodhi4>
    4eac:	5b 01       	movw	r10, r22
    4eae:	8c b5       	in	r24, 0x2c	; 44
    4eb0:	9d b5       	in	r25, 0x2d	; 45
    4eb2:	b7 01       	movw	r22, r14
    4eb4:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__udivmodhi4>
    4eb8:	6a 15       	cp	r22, r10
    4eba:	7b 05       	cpc	r23, r11
    4ebc:	08 f0       	brcs	.+2      	; 0x4ec0 <main+0x1d10>
    4ebe:	64 c0       	rjmp	.+200    	; 0x4f88 <main+0x1dd8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1885
      if(color_R==GREEN){
    4ec0:	82 e0       	ldi	r24, 0x02	; 2
    4ec2:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <color(char)>
    4ec6:	81 30       	cpi	r24, 0x01	; 1
    4ec8:	e1 f1       	breq	.+120    	; 0x4f42 <main+0x1d92>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1889
        deadend_detected=true;
        break;
      }
      if(SR7||SR8||SL7||SL8){
    4eca:	40 e0       	ldi	r20, 0x00	; 0
    4ecc:	61 e0       	ldi	r22, 0x01	; 1
    4ece:	87 e0       	ldi	r24, 0x07	; 7
    4ed0:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4ed4:	89 2b       	or	r24, r25
    4ed6:	a9 f4       	brne	.+42     	; 0x4f02 <main+0x1d52>
    4ed8:	40 e0       	ldi	r20, 0x00	; 0
    4eda:	63 e0       	ldi	r22, 0x03	; 3
    4edc:	80 e0       	ldi	r24, 0x00	; 0
    4ede:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4ee2:	89 2b       	or	r24, r25
    4ee4:	71 f4       	brne	.+28     	; 0x4f02 <main+0x1d52>
    4ee6:	40 e0       	ldi	r20, 0x00	; 0
    4ee8:	60 e0       	ldi	r22, 0x00	; 0
    4eea:	87 e0       	ldi	r24, 0x07	; 7
    4eec:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4ef0:	89 2b       	or	r24, r25
    4ef2:	39 f4       	brne	.+14     	; 0x4f02 <main+0x1d52>
    4ef4:	40 e0       	ldi	r20, 0x00	; 0
    4ef6:	62 e0       	ldi	r22, 0x02	; 2
    4ef8:	80 e0       	ldi	r24, 0x00	; 0
    4efa:	0e 94 ae 06 	call	0xd5c	; 0xd5c <read_sensor(char, char, char)>
    4efe:	89 2b       	or	r24, r25
    4f00:	b1 f2       	breq	.-84     	; 0x4eae <main+0x1cfe>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1899
    if(deadend_detected){
      move(Right,T90*2.3,150);
      move(forward,T90/3,150);
    }
    else if(inter_detected){
      move(forward,T90/5,150);
    4f02:	46 e9       	ldi	r20, 0x96	; 150
    4f04:	50 e0       	ldi	r21, 0x00	; 0
    4f06:	b5 01       	movw	r22, r10
    4f08:	37 c0       	rjmp	.+110    	; 0x4f78 <main+0x1dc8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1872
    }
    else if(inter_detected){
      move(forward,T90/5,150);
    }
    else{
      lcd.clear();
    4f0a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1873
      lcd.print("green left");
    4f0e:	83 eb       	ldi	r24, 0xB3	; 179
    4f10:	97 e0       	ldi	r25, 0x07	; 7
    4f12:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1874
      move(forward,T90/8,150);
    4f16:	be 01       	movw	r22, r28
    4f18:	d7 ff       	sbrs	r29, 7
    4f1a:	02 c0       	rjmp	.+4      	; 0x4f20 <main+0x1d70>
    4f1c:	69 5f       	subi	r22, 0xF9	; 249
    4f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    4f20:	93 e0       	ldi	r25, 0x03	; 3
    4f22:	75 95       	asr	r23
    4f24:	67 95       	ror	r22
    4f26:	9a 95       	dec	r25
    4f28:	e1 f7       	brne	.-8      	; 0x4f22 <main+0x1d72>
    4f2a:	46 e9       	ldi	r20, 0x96	; 150
    4f2c:	50 e0       	ldi	r21, 0x00	; 0
    4f2e:	8a e0       	ldi	r24, 0x0A	; 10
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	0e 94 60 07 	call	0xec0	; 0xec0 <move(int, int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1875
      move(Left,T90,150);
    4f36:	46 e9       	ldi	r20, 0x96	; 150
    4f38:	50 e0       	ldi	r21, 0x00	; 0
    4f3a:	be 01       	movw	r22, r28
    4f3c:	8b e0       	ldi	r24, 0x0B	; 11
    4f3e:	90 e0       	ldi	r25, 0x00	; 0
    4f40:	a1 cf       	rjmp	.-190    	; 0x4e84 <main+0x1cd4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1895
        inter_detected=true;
        break;
      }
    }
    if(deadend_detected){
      move(Right,T90*2.3,150);
    4f42:	be 01       	movw	r22, r28
    4f44:	0d 2e       	mov	r0, r29
    4f46:	00 0c       	add	r0, r0
    4f48:	88 0b       	sbc	r24, r24
    4f4a:	99 0b       	sbc	r25, r25
    4f4c:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatsisf>
    4f50:	23 e3       	ldi	r18, 0x33	; 51
    4f52:	33 e3       	ldi	r19, 0x33	; 51
    4f54:	43 e1       	ldi	r20, 0x13	; 19
    4f56:	50 e4       	ldi	r21, 0x40	; 64
    4f58:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <__mulsf3>
    4f5c:	0e 94 13 2b 	call	0x5626	; 0x5626 <__fixsfsi>
    4f60:	46 e9       	ldi	r20, 0x96	; 150
    4f62:	50 e0       	ldi	r21, 0x00	; 0
    4f64:	8c e0       	ldi	r24, 0x0C	; 12
    4f66:	90 e0       	ldi	r25, 0x00	; 0
    4f68:	0e 94 60 07 	call	0xec0	; 0xec0 <move(int, int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1896
      move(forward,T90/3,150);
    4f6c:	ce 01       	movw	r24, r28
    4f6e:	b6 01       	movw	r22, r12
    4f70:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <__divmodhi4>
    4f74:	46 e9       	ldi	r20, 0x96	; 150
    4f76:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1899
    }
    else if(inter_detected){
      move(forward,T90/5,150);
    4f78:	8a e0       	ldi	r24, 0x0A	; 10
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1905
    }
    else{
      lcd.clear();
      lcd.print("green left");
      move(forward,T90/8,150);
      move(Right,T90,150);
    4f7c:	0e 94 60 07 	call	0xec0	; 0xec0 <move(int, int, int)>
main():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    4f80:	0e 94 90 04 	call	0x920	; 0x920 <serialEventRun()>
    4f84:	0c 94 ae 1a 	jmp	0x355c	; 0x355c <main+0x3ac>
handle_color():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1902
    }
    else if(inter_detected){
      move(forward,T90/5,150);
    }
    else{
      lcd.clear();
    4f88:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1903
      lcd.print("green left");
    4f8c:	83 eb       	ldi	r24, 0xB3	; 179
    4f8e:	97 e0       	ldi	r25, 0x07	; 7
    4f90:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Print::print(char const*) [clone .constprop.20]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1904
      move(forward,T90/8,150);
    4f94:	be 01       	movw	r22, r28
    4f96:	d7 ff       	sbrs	r29, 7
    4f98:	02 c0       	rjmp	.+4      	; 0x4f9e <main+0x1dee>
    4f9a:	69 5f       	subi	r22, 0xF9	; 249
    4f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    4f9e:	83 e0       	ldi	r24, 0x03	; 3
    4fa0:	75 95       	asr	r23
    4fa2:	67 95       	ror	r22
    4fa4:	8a 95       	dec	r24
    4fa6:	e1 f7       	brne	.-8      	; 0x4fa0 <main+0x1df0>
    4fa8:	46 e9       	ldi	r20, 0x96	; 150
    4faa:	50 e0       	ldi	r21, 0x00	; 0
    4fac:	8a e0       	ldi	r24, 0x0A	; 10
    4fae:	90 e0       	ldi	r25, 0x00	; 0
    4fb0:	0e 94 60 07 	call	0xec0	; 0xec0 <move(int, int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\sport_main_code_2023/sport_menu.h:1905
      move(Right,T90,150);
    4fb4:	46 e9       	ldi	r20, 0x96	; 150
    4fb6:	50 e0       	ldi	r21, 0x00	; 0
    4fb8:	be 01       	movw	r22, r28
    4fba:	8c e0       	ldi	r24, 0x0C	; 12
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	de cf       	rjmp	.-68     	; 0x4f7c <main+0x1dcc>

00004fc0 <vfprintf>:
vfprintf():
    4fc0:	2f 92       	push	r2
    4fc2:	3f 92       	push	r3
    4fc4:	4f 92       	push	r4
    4fc6:	5f 92       	push	r5
    4fc8:	6f 92       	push	r6
    4fca:	7f 92       	push	r7
    4fcc:	8f 92       	push	r8
    4fce:	9f 92       	push	r9
    4fd0:	af 92       	push	r10
    4fd2:	bf 92       	push	r11
    4fd4:	cf 92       	push	r12
    4fd6:	df 92       	push	r13
    4fd8:	ef 92       	push	r14
    4fda:	ff 92       	push	r15
    4fdc:	0f 93       	push	r16
    4fde:	1f 93       	push	r17
    4fe0:	cf 93       	push	r28
    4fe2:	df 93       	push	r29
    4fe4:	cd b7       	in	r28, 0x3d	; 61
    4fe6:	de b7       	in	r29, 0x3e	; 62
    4fe8:	2b 97       	sbiw	r28, 0x0b	; 11
    4fea:	0f b6       	in	r0, 0x3f	; 63
    4fec:	f8 94       	cli
    4fee:	de bf       	out	0x3e, r29	; 62
    4ff0:	0f be       	out	0x3f, r0	; 63
    4ff2:	cd bf       	out	0x3d, r28	; 61
    4ff4:	7c 01       	movw	r14, r24
    4ff6:	3b 01       	movw	r6, r22
    4ff8:	8a 01       	movw	r16, r20
    4ffa:	fc 01       	movw	r30, r24
    4ffc:	17 82       	std	Z+7, r1	; 0x07
    4ffe:	16 82       	std	Z+6, r1	; 0x06
    5000:	83 81       	ldd	r24, Z+3	; 0x03
    5002:	81 ff       	sbrs	r24, 1
    5004:	dd c1       	rjmp	.+954    	; 0x53c0 <vfprintf+0x400>
    5006:	ce 01       	movw	r24, r28
    5008:	01 96       	adiw	r24, 0x01	; 1
    500a:	5c 01       	movw	r10, r24
    500c:	f7 01       	movw	r30, r14
    500e:	93 81       	ldd	r25, Z+3	; 0x03
    5010:	f3 01       	movw	r30, r6
    5012:	93 fd       	sbrc	r25, 3
    5014:	85 91       	lpm	r24, Z+
    5016:	93 ff       	sbrs	r25, 3
    5018:	81 91       	ld	r24, Z+
    501a:	3f 01       	movw	r6, r30
    501c:	88 23       	and	r24, r24
    501e:	09 f4       	brne	.+2      	; 0x5022 <vfprintf+0x62>
    5020:	53 c1       	rjmp	.+678    	; 0x52c8 <vfprintf+0x308>
    5022:	85 32       	cpi	r24, 0x25	; 37
    5024:	39 f4       	brne	.+14     	; 0x5034 <vfprintf+0x74>
    5026:	93 fd       	sbrc	r25, 3
    5028:	85 91       	lpm	r24, Z+
    502a:	93 ff       	sbrs	r25, 3
    502c:	81 91       	ld	r24, Z+
    502e:	3f 01       	movw	r6, r30
    5030:	85 32       	cpi	r24, 0x25	; 37
    5032:	29 f4       	brne	.+10     	; 0x503e <vfprintf+0x7e>
    5034:	b7 01       	movw	r22, r14
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <fputc>
    503c:	e7 cf       	rjmp	.-50     	; 0x500c <vfprintf+0x4c>
    503e:	91 2c       	mov	r9, r1
    5040:	21 2c       	mov	r2, r1
    5042:	31 2c       	mov	r3, r1
    5044:	ff e1       	ldi	r31, 0x1F	; 31
    5046:	f3 15       	cp	r31, r3
    5048:	38 f0       	brcs	.+14     	; 0x5058 <vfprintf+0x98>
    504a:	8b 32       	cpi	r24, 0x2B	; 43
    504c:	11 f1       	breq	.+68     	; 0x5092 <vfprintf+0xd2>
    504e:	90 f4       	brcc	.+36     	; 0x5074 <vfprintf+0xb4>
    5050:	80 32       	cpi	r24, 0x20	; 32
    5052:	09 f1       	breq	.+66     	; 0x5096 <vfprintf+0xd6>
    5054:	83 32       	cpi	r24, 0x23	; 35
    5056:	29 f1       	breq	.+74     	; 0x50a2 <vfprintf+0xe2>
    5058:	37 fc       	sbrc	r3, 7
    505a:	3c c0       	rjmp	.+120    	; 0x50d4 <vfprintf+0x114>
    505c:	20 ed       	ldi	r18, 0xD0	; 208
    505e:	28 0f       	add	r18, r24
    5060:	2a 30       	cpi	r18, 0x0A	; 10
    5062:	50 f5       	brcc	.+84     	; 0x50b8 <vfprintf+0xf8>
    5064:	36 fe       	sbrs	r3, 6
    5066:	20 c0       	rjmp	.+64     	; 0x50a8 <vfprintf+0xe8>
    5068:	8a e0       	ldi	r24, 0x0A	; 10
    506a:	98 9e       	mul	r9, r24
    506c:	20 0d       	add	r18, r0
    506e:	11 24       	eor	r1, r1
    5070:	92 2e       	mov	r9, r18
    5072:	06 c0       	rjmp	.+12     	; 0x5080 <vfprintf+0xc0>
    5074:	8d 32       	cpi	r24, 0x2D	; 45
    5076:	91 f0       	breq	.+36     	; 0x509c <vfprintf+0xdc>
    5078:	80 33       	cpi	r24, 0x30	; 48
    507a:	71 f7       	brne	.-36     	; 0x5058 <vfprintf+0x98>
    507c:	68 94       	set
    507e:	30 f8       	bld	r3, 0
    5080:	f3 01       	movw	r30, r6
    5082:	93 fd       	sbrc	r25, 3
    5084:	85 91       	lpm	r24, Z+
    5086:	93 ff       	sbrs	r25, 3
    5088:	81 91       	ld	r24, Z+
    508a:	3f 01       	movw	r6, r30
    508c:	81 11       	cpse	r24, r1
    508e:	da cf       	rjmp	.-76     	; 0x5044 <vfprintf+0x84>
    5090:	21 c0       	rjmp	.+66     	; 0x50d4 <vfprintf+0x114>
    5092:	68 94       	set
    5094:	31 f8       	bld	r3, 1
    5096:	68 94       	set
    5098:	32 f8       	bld	r3, 2
    509a:	f2 cf       	rjmp	.-28     	; 0x5080 <vfprintf+0xc0>
    509c:	68 94       	set
    509e:	33 f8       	bld	r3, 3
    50a0:	ef cf       	rjmp	.-34     	; 0x5080 <vfprintf+0xc0>
    50a2:	68 94       	set
    50a4:	34 f8       	bld	r3, 4
    50a6:	ec cf       	rjmp	.-40     	; 0x5080 <vfprintf+0xc0>
    50a8:	ea e0       	ldi	r30, 0x0A	; 10
    50aa:	2e 9e       	mul	r2, r30
    50ac:	20 0d       	add	r18, r0
    50ae:	11 24       	eor	r1, r1
    50b0:	22 2e       	mov	r2, r18
    50b2:	68 94       	set
    50b4:	35 f8       	bld	r3, 5
    50b6:	e4 cf       	rjmp	.-56     	; 0x5080 <vfprintf+0xc0>
    50b8:	8e 32       	cpi	r24, 0x2E	; 46
    50ba:	29 f4       	brne	.+10     	; 0x50c6 <vfprintf+0x106>
    50bc:	36 fc       	sbrc	r3, 6
    50be:	04 c1       	rjmp	.+520    	; 0x52c8 <vfprintf+0x308>
    50c0:	68 94       	set
    50c2:	36 f8       	bld	r3, 6
    50c4:	dd cf       	rjmp	.-70     	; 0x5080 <vfprintf+0xc0>
    50c6:	8c 36       	cpi	r24, 0x6C	; 108
    50c8:	19 f4       	brne	.+6      	; 0x50d0 <vfprintf+0x110>
    50ca:	68 94       	set
    50cc:	37 f8       	bld	r3, 7
    50ce:	d8 cf       	rjmp	.-80     	; 0x5080 <vfprintf+0xc0>
    50d0:	88 36       	cpi	r24, 0x68	; 104
    50d2:	b1 f2       	breq	.-84     	; 0x5080 <vfprintf+0xc0>
    50d4:	98 2f       	mov	r25, r24
    50d6:	9f 7d       	andi	r25, 0xDF	; 223
    50d8:	95 54       	subi	r25, 0x45	; 69
    50da:	93 30       	cpi	r25, 0x03	; 3
    50dc:	e0 f0       	brcs	.+56     	; 0x5116 <vfprintf+0x156>
    50de:	83 36       	cpi	r24, 0x63	; 99
    50e0:	a1 f1       	breq	.+104    	; 0x514a <vfprintf+0x18a>
    50e2:	83 37       	cpi	r24, 0x73	; 115
    50e4:	c1 f1       	breq	.+112    	; 0x5156 <vfprintf+0x196>
    50e6:	83 35       	cpi	r24, 0x53	; 83
    50e8:	09 f0       	breq	.+2      	; 0x50ec <vfprintf+0x12c>
    50ea:	63 c0       	rjmp	.+198    	; 0x51b2 <vfprintf+0x1f2>
    50ec:	28 01       	movw	r4, r16
    50ee:	f2 e0       	ldi	r31, 0x02	; 2
    50f0:	4f 0e       	add	r4, r31
    50f2:	51 1c       	adc	r5, r1
    50f4:	f8 01       	movw	r30, r16
    50f6:	c0 80       	ld	r12, Z
    50f8:	d1 80       	ldd	r13, Z+1	; 0x01
    50fa:	69 2d       	mov	r22, r9
    50fc:	70 e0       	ldi	r23, 0x00	; 0
    50fe:	36 fc       	sbrc	r3, 6
    5100:	02 c0       	rjmp	.+4      	; 0x5106 <vfprintf+0x146>
    5102:	6f ef       	ldi	r22, 0xFF	; 255
    5104:	7f ef       	ldi	r23, 0xFF	; 255
    5106:	c6 01       	movw	r24, r12
    5108:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <strnlen_P>
    510c:	4c 01       	movw	r8, r24
    510e:	68 94       	set
    5110:	37 f8       	bld	r3, 7
    5112:	82 01       	movw	r16, r4
    5114:	0a c0       	rjmp	.+20     	; 0x512a <vfprintf+0x16a>
    5116:	0c 5f       	subi	r16, 0xFC	; 252
    5118:	1f 4f       	sbci	r17, 0xFF	; 255
    511a:	ff e3       	ldi	r31, 0x3F	; 63
    511c:	f9 83       	std	Y+1, r31	; 0x01
    511e:	88 24       	eor	r8, r8
    5120:	83 94       	inc	r8
    5122:	91 2c       	mov	r9, r1
    5124:	65 01       	movw	r12, r10
    5126:	e8 94       	clt
    5128:	37 f8       	bld	r3, 7
    512a:	33 fe       	sbrs	r3, 3
    512c:	2d c0       	rjmp	.+90     	; 0x5188 <vfprintf+0x1c8>
    512e:	52 2c       	mov	r5, r2
    5130:	81 14       	cp	r8, r1
    5132:	91 04       	cpc	r9, r1
    5134:	71 f5       	brne	.+92     	; 0x5192 <vfprintf+0x1d2>
    5136:	55 20       	and	r5, r5
    5138:	09 f4       	brne	.+2      	; 0x513c <vfprintf+0x17c>
    513a:	68 cf       	rjmp	.-304    	; 0x500c <vfprintf+0x4c>
    513c:	b7 01       	movw	r22, r14
    513e:	80 e2       	ldi	r24, 0x20	; 32
    5140:	90 e0       	ldi	r25, 0x00	; 0
    5142:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <fputc>
    5146:	5a 94       	dec	r5
    5148:	f6 cf       	rjmp	.-20     	; 0x5136 <vfprintf+0x176>
    514a:	f8 01       	movw	r30, r16
    514c:	80 81       	ld	r24, Z
    514e:	89 83       	std	Y+1, r24	; 0x01
    5150:	0e 5f       	subi	r16, 0xFE	; 254
    5152:	1f 4f       	sbci	r17, 0xFF	; 255
    5154:	e4 cf       	rjmp	.-56     	; 0x511e <vfprintf+0x15e>
    5156:	28 01       	movw	r4, r16
    5158:	f2 e0       	ldi	r31, 0x02	; 2
    515a:	4f 0e       	add	r4, r31
    515c:	51 1c       	adc	r5, r1
    515e:	f8 01       	movw	r30, r16
    5160:	c0 80       	ld	r12, Z
    5162:	d1 80       	ldd	r13, Z+1	; 0x01
    5164:	69 2d       	mov	r22, r9
    5166:	70 e0       	ldi	r23, 0x00	; 0
    5168:	36 fc       	sbrc	r3, 6
    516a:	02 c0       	rjmp	.+4      	; 0x5170 <vfprintf+0x1b0>
    516c:	6f ef       	ldi	r22, 0xFF	; 255
    516e:	7f ef       	ldi	r23, 0xFF	; 255
    5170:	c6 01       	movw	r24, r12
    5172:	0e 94 ee 29 	call	0x53dc	; 0x53dc <strnlen>
    5176:	4c 01       	movw	r8, r24
    5178:	82 01       	movw	r16, r4
    517a:	d5 cf       	rjmp	.-86     	; 0x5126 <vfprintf+0x166>
    517c:	b7 01       	movw	r22, r14
    517e:	80 e2       	ldi	r24, 0x20	; 32
    5180:	90 e0       	ldi	r25, 0x00	; 0
    5182:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <fputc>
    5186:	2a 94       	dec	r2
    5188:	28 14       	cp	r2, r8
    518a:	19 04       	cpc	r1, r9
    518c:	09 f0       	breq	.+2      	; 0x5190 <vfprintf+0x1d0>
    518e:	b0 f7       	brcc	.-20     	; 0x517c <vfprintf+0x1bc>
    5190:	ce cf       	rjmp	.-100    	; 0x512e <vfprintf+0x16e>
    5192:	f6 01       	movw	r30, r12
    5194:	37 fc       	sbrc	r3, 7
    5196:	85 91       	lpm	r24, Z+
    5198:	37 fe       	sbrs	r3, 7
    519a:	81 91       	ld	r24, Z+
    519c:	6f 01       	movw	r12, r30
    519e:	b7 01       	movw	r22, r14
    51a0:	90 e0       	ldi	r25, 0x00	; 0
    51a2:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <fputc>
    51a6:	51 10       	cpse	r5, r1
    51a8:	5a 94       	dec	r5
    51aa:	f1 e0       	ldi	r31, 0x01	; 1
    51ac:	8f 1a       	sub	r8, r31
    51ae:	91 08       	sbc	r9, r1
    51b0:	bf cf       	rjmp	.-130    	; 0x5130 <vfprintf+0x170>
    51b2:	84 36       	cpi	r24, 0x64	; 100
    51b4:	19 f0       	breq	.+6      	; 0x51bc <vfprintf+0x1fc>
    51b6:	89 36       	cpi	r24, 0x69	; 105
    51b8:	09 f0       	breq	.+2      	; 0x51bc <vfprintf+0x1fc>
    51ba:	77 c0       	rjmp	.+238    	; 0x52aa <vfprintf+0x2ea>
    51bc:	f8 01       	movw	r30, r16
    51be:	37 fe       	sbrs	r3, 7
    51c0:	6b c0       	rjmp	.+214    	; 0x5298 <vfprintf+0x2d8>
    51c2:	60 81       	ld	r22, Z
    51c4:	71 81       	ldd	r23, Z+1	; 0x01
    51c6:	82 81       	ldd	r24, Z+2	; 0x02
    51c8:	93 81       	ldd	r25, Z+3	; 0x03
    51ca:	0c 5f       	subi	r16, 0xFC	; 252
    51cc:	1f 4f       	sbci	r17, 0xFF	; 255
    51ce:	f3 2d       	mov	r31, r3
    51d0:	ff 76       	andi	r31, 0x6F	; 111
    51d2:	3f 2e       	mov	r3, r31
    51d4:	97 ff       	sbrs	r25, 7
    51d6:	09 c0       	rjmp	.+18     	; 0x51ea <vfprintf+0x22a>
    51d8:	90 95       	com	r25
    51da:	80 95       	com	r24
    51dc:	70 95       	com	r23
    51de:	61 95       	neg	r22
    51e0:	7f 4f       	sbci	r23, 0xFF	; 255
    51e2:	8f 4f       	sbci	r24, 0xFF	; 255
    51e4:	9f 4f       	sbci	r25, 0xFF	; 255
    51e6:	68 94       	set
    51e8:	37 f8       	bld	r3, 7
    51ea:	2a e0       	ldi	r18, 0x0A	; 10
    51ec:	30 e0       	ldi	r19, 0x00	; 0
    51ee:	a5 01       	movw	r20, r10
    51f0:	0e 94 29 2a 	call	0x5452	; 0x5452 <__ultoa_invert>
    51f4:	c8 2e       	mov	r12, r24
    51f6:	ca 18       	sub	r12, r10
    51f8:	8c 2c       	mov	r8, r12
    51fa:	43 2c       	mov	r4, r3
    51fc:	36 fe       	sbrs	r3, 6
    51fe:	0c c0       	rjmp	.+24     	; 0x5218 <vfprintf+0x258>
    5200:	e8 94       	clt
    5202:	40 f8       	bld	r4, 0
    5204:	c9 14       	cp	r12, r9
    5206:	40 f4       	brcc	.+16     	; 0x5218 <vfprintf+0x258>
    5208:	34 fe       	sbrs	r3, 4
    520a:	05 c0       	rjmp	.+10     	; 0x5216 <vfprintf+0x256>
    520c:	32 fc       	sbrc	r3, 2
    520e:	03 c0       	rjmp	.+6      	; 0x5216 <vfprintf+0x256>
    5210:	f3 2d       	mov	r31, r3
    5212:	fe 7e       	andi	r31, 0xEE	; 238
    5214:	4f 2e       	mov	r4, r31
    5216:	89 2c       	mov	r8, r9
    5218:	44 fe       	sbrs	r4, 4
    521a:	aa c0       	rjmp	.+340    	; 0x5370 <vfprintf+0x3b0>
    521c:	fe 01       	movw	r30, r28
    521e:	ec 0d       	add	r30, r12
    5220:	f1 1d       	adc	r31, r1
    5222:	80 81       	ld	r24, Z
    5224:	80 33       	cpi	r24, 0x30	; 48
    5226:	09 f0       	breq	.+2      	; 0x522a <vfprintf+0x26a>
    5228:	9c c0       	rjmp	.+312    	; 0x5362 <vfprintf+0x3a2>
    522a:	24 2d       	mov	r18, r4
    522c:	29 7e       	andi	r18, 0xE9	; 233
    522e:	42 2e       	mov	r4, r18
    5230:	84 2d       	mov	r24, r4
    5232:	88 70       	andi	r24, 0x08	; 8
    5234:	58 2e       	mov	r5, r24
    5236:	43 fc       	sbrc	r4, 3
    5238:	aa c0       	rjmp	.+340    	; 0x538e <vfprintf+0x3ce>
    523a:	40 fe       	sbrs	r4, 0
    523c:	a4 c0       	rjmp	.+328    	; 0x5386 <vfprintf+0x3c6>
    523e:	9c 2c       	mov	r9, r12
    5240:	82 14       	cp	r8, r2
    5242:	18 f4       	brcc	.+6      	; 0x524a <vfprintf+0x28a>
    5244:	2c 0c       	add	r2, r12
    5246:	92 2c       	mov	r9, r2
    5248:	98 18       	sub	r9, r8
    524a:	44 fe       	sbrs	r4, 4
    524c:	a6 c0       	rjmp	.+332    	; 0x539a <vfprintf+0x3da>
    524e:	b7 01       	movw	r22, r14
    5250:	80 e3       	ldi	r24, 0x30	; 48
    5252:	90 e0       	ldi	r25, 0x00	; 0
    5254:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <fputc>
    5258:	42 fe       	sbrs	r4, 2
    525a:	09 c0       	rjmp	.+18     	; 0x526e <vfprintf+0x2ae>
    525c:	88 e7       	ldi	r24, 0x78	; 120
    525e:	90 e0       	ldi	r25, 0x00	; 0
    5260:	41 fe       	sbrs	r4, 1
    5262:	02 c0       	rjmp	.+4      	; 0x5268 <vfprintf+0x2a8>
    5264:	88 e5       	ldi	r24, 0x58	; 88
    5266:	90 e0       	ldi	r25, 0x00	; 0
    5268:	b7 01       	movw	r22, r14
    526a:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <fputc>
    526e:	c9 14       	cp	r12, r9
    5270:	08 f4       	brcc	.+2      	; 0x5274 <vfprintf+0x2b4>
    5272:	9f c0       	rjmp	.+318    	; 0x53b2 <vfprintf+0x3f2>
    5274:	ca 94       	dec	r12
    5276:	d1 2c       	mov	r13, r1
    5278:	9f ef       	ldi	r25, 0xFF	; 255
    527a:	c9 1a       	sub	r12, r25
    527c:	d9 0a       	sbc	r13, r25
    527e:	ca 0c       	add	r12, r10
    5280:	db 1c       	adc	r13, r11
    5282:	f6 01       	movw	r30, r12
    5284:	82 91       	ld	r24, -Z
    5286:	6f 01       	movw	r12, r30
    5288:	b7 01       	movw	r22, r14
    528a:	90 e0       	ldi	r25, 0x00	; 0
    528c:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <fputc>
    5290:	ac 14       	cp	r10, r12
    5292:	bd 04       	cpc	r11, r13
    5294:	b1 f7       	brne	.-20     	; 0x5282 <vfprintf+0x2c2>
    5296:	4f cf       	rjmp	.-354    	; 0x5136 <vfprintf+0x176>
    5298:	60 81       	ld	r22, Z
    529a:	71 81       	ldd	r23, Z+1	; 0x01
    529c:	07 2e       	mov	r0, r23
    529e:	00 0c       	add	r0, r0
    52a0:	88 0b       	sbc	r24, r24
    52a2:	99 0b       	sbc	r25, r25
    52a4:	0e 5f       	subi	r16, 0xFE	; 254
    52a6:	1f 4f       	sbci	r17, 0xFF	; 255
    52a8:	92 cf       	rjmp	.-220    	; 0x51ce <vfprintf+0x20e>
    52aa:	d3 2c       	mov	r13, r3
    52ac:	e8 94       	clt
    52ae:	d4 f8       	bld	r13, 4
    52b0:	2a e0       	ldi	r18, 0x0A	; 10
    52b2:	30 e0       	ldi	r19, 0x00	; 0
    52b4:	85 37       	cpi	r24, 0x75	; 117
    52b6:	e1 f1       	breq	.+120    	; 0x5330 <vfprintf+0x370>
    52b8:	23 2d       	mov	r18, r3
    52ba:	29 7f       	andi	r18, 0xF9	; 249
    52bc:	d2 2e       	mov	r13, r18
    52be:	8f 36       	cpi	r24, 0x6F	; 111
    52c0:	a9 f1       	breq	.+106    	; 0x532c <vfprintf+0x36c>
    52c2:	f0 f4       	brcc	.+60     	; 0x5300 <vfprintf+0x340>
    52c4:	88 35       	cpi	r24, 0x58	; 88
    52c6:	51 f1       	breq	.+84     	; 0x531c <vfprintf+0x35c>
    52c8:	f7 01       	movw	r30, r14
    52ca:	86 81       	ldd	r24, Z+6	; 0x06
    52cc:	97 81       	ldd	r25, Z+7	; 0x07
    52ce:	2b 96       	adiw	r28, 0x0b	; 11
    52d0:	0f b6       	in	r0, 0x3f	; 63
    52d2:	f8 94       	cli
    52d4:	de bf       	out	0x3e, r29	; 62
    52d6:	0f be       	out	0x3f, r0	; 63
    52d8:	cd bf       	out	0x3d, r28	; 61
    52da:	df 91       	pop	r29
    52dc:	cf 91       	pop	r28
    52de:	1f 91       	pop	r17
    52e0:	0f 91       	pop	r16
    52e2:	ff 90       	pop	r15
    52e4:	ef 90       	pop	r14
    52e6:	df 90       	pop	r13
    52e8:	cf 90       	pop	r12
    52ea:	bf 90       	pop	r11
    52ec:	af 90       	pop	r10
    52ee:	9f 90       	pop	r9
    52f0:	8f 90       	pop	r8
    52f2:	7f 90       	pop	r7
    52f4:	6f 90       	pop	r6
    52f6:	5f 90       	pop	r5
    52f8:	4f 90       	pop	r4
    52fa:	3f 90       	pop	r3
    52fc:	2f 90       	pop	r2
    52fe:	08 95       	ret
    5300:	80 37       	cpi	r24, 0x70	; 112
    5302:	49 f0       	breq	.+18     	; 0x5316 <vfprintf+0x356>
    5304:	88 37       	cpi	r24, 0x78	; 120
    5306:	01 f7       	brne	.-64     	; 0x52c8 <vfprintf+0x308>
    5308:	d4 fe       	sbrs	r13, 4
    530a:	02 c0       	rjmp	.+4      	; 0x5310 <vfprintf+0x350>
    530c:	68 94       	set
    530e:	d2 f8       	bld	r13, 2
    5310:	20 e1       	ldi	r18, 0x10	; 16
    5312:	30 e0       	ldi	r19, 0x00	; 0
    5314:	0d c0       	rjmp	.+26     	; 0x5330 <vfprintf+0x370>
    5316:	68 94       	set
    5318:	d4 f8       	bld	r13, 4
    531a:	f6 cf       	rjmp	.-20     	; 0x5308 <vfprintf+0x348>
    531c:	34 fe       	sbrs	r3, 4
    531e:	03 c0       	rjmp	.+6      	; 0x5326 <vfprintf+0x366>
    5320:	82 2f       	mov	r24, r18
    5322:	86 60       	ori	r24, 0x06	; 6
    5324:	d8 2e       	mov	r13, r24
    5326:	20 e1       	ldi	r18, 0x10	; 16
    5328:	32 e0       	ldi	r19, 0x02	; 2
    532a:	02 c0       	rjmp	.+4      	; 0x5330 <vfprintf+0x370>
    532c:	28 e0       	ldi	r18, 0x08	; 8
    532e:	30 e0       	ldi	r19, 0x00	; 0
    5330:	f8 01       	movw	r30, r16
    5332:	d7 fe       	sbrs	r13, 7
    5334:	0f c0       	rjmp	.+30     	; 0x5354 <vfprintf+0x394>
    5336:	60 81       	ld	r22, Z
    5338:	71 81       	ldd	r23, Z+1	; 0x01
    533a:	82 81       	ldd	r24, Z+2	; 0x02
    533c:	93 81       	ldd	r25, Z+3	; 0x03
    533e:	0c 5f       	subi	r16, 0xFC	; 252
    5340:	1f 4f       	sbci	r17, 0xFF	; 255
    5342:	a5 01       	movw	r20, r10
    5344:	0e 94 29 2a 	call	0x5452	; 0x5452 <__ultoa_invert>
    5348:	c8 2e       	mov	r12, r24
    534a:	ca 18       	sub	r12, r10
    534c:	3d 2c       	mov	r3, r13
    534e:	e8 94       	clt
    5350:	37 f8       	bld	r3, 7
    5352:	52 cf       	rjmp	.-348    	; 0x51f8 <vfprintf+0x238>
    5354:	60 81       	ld	r22, Z
    5356:	71 81       	ldd	r23, Z+1	; 0x01
    5358:	90 e0       	ldi	r25, 0x00	; 0
    535a:	80 e0       	ldi	r24, 0x00	; 0
    535c:	0e 5f       	subi	r16, 0xFE	; 254
    535e:	1f 4f       	sbci	r17, 0xFF	; 255
    5360:	f0 cf       	rjmp	.-32     	; 0x5342 <vfprintf+0x382>
    5362:	42 fc       	sbrc	r4, 2
    5364:	02 c0       	rjmp	.+4      	; 0x536a <vfprintf+0x3aa>
    5366:	83 94       	inc	r8
    5368:	63 cf       	rjmp	.-314    	; 0x5230 <vfprintf+0x270>
    536a:	83 94       	inc	r8
    536c:	83 94       	inc	r8
    536e:	60 cf       	rjmp	.-320    	; 0x5230 <vfprintf+0x270>
    5370:	84 2d       	mov	r24, r4
    5372:	86 78       	andi	r24, 0x86	; 134
    5374:	09 f4       	brne	.+2      	; 0x5378 <vfprintf+0x3b8>
    5376:	5c cf       	rjmp	.-328    	; 0x5230 <vfprintf+0x270>
    5378:	f6 cf       	rjmp	.-20     	; 0x5366 <vfprintf+0x3a6>
    537a:	b7 01       	movw	r22, r14
    537c:	80 e2       	ldi	r24, 0x20	; 32
    537e:	90 e0       	ldi	r25, 0x00	; 0
    5380:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <fputc>
    5384:	83 94       	inc	r8
    5386:	82 14       	cp	r8, r2
    5388:	c0 f3       	brcs	.-16     	; 0x537a <vfprintf+0x3ba>
    538a:	51 2c       	mov	r5, r1
    538c:	5e cf       	rjmp	.-324    	; 0x524a <vfprintf+0x28a>
    538e:	52 2c       	mov	r5, r2
    5390:	58 18       	sub	r5, r8
    5392:	82 14       	cp	r8, r2
    5394:	08 f4       	brcc	.+2      	; 0x5398 <vfprintf+0x3d8>
    5396:	59 cf       	rjmp	.-334    	; 0x524a <vfprintf+0x28a>
    5398:	f8 cf       	rjmp	.-16     	; 0x538a <vfprintf+0x3ca>
    539a:	84 2d       	mov	r24, r4
    539c:	86 78       	andi	r24, 0x86	; 134
    539e:	09 f4       	brne	.+2      	; 0x53a2 <vfprintf+0x3e2>
    53a0:	66 cf       	rjmp	.-308    	; 0x526e <vfprintf+0x2ae>
    53a2:	8b e2       	ldi	r24, 0x2B	; 43
    53a4:	41 fe       	sbrs	r4, 1
    53a6:	80 e2       	ldi	r24, 0x20	; 32
    53a8:	47 fc       	sbrc	r4, 7
    53aa:	8d e2       	ldi	r24, 0x2D	; 45
    53ac:	b7 01       	movw	r22, r14
    53ae:	90 e0       	ldi	r25, 0x00	; 0
    53b0:	5c cf       	rjmp	.-328    	; 0x526a <vfprintf+0x2aa>
    53b2:	b7 01       	movw	r22, r14
    53b4:	80 e3       	ldi	r24, 0x30	; 48
    53b6:	90 e0       	ldi	r25, 0x00	; 0
    53b8:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <fputc>
    53bc:	9a 94       	dec	r9
    53be:	57 cf       	rjmp	.-338    	; 0x526e <vfprintf+0x2ae>
    53c0:	8f ef       	ldi	r24, 0xFF	; 255
    53c2:	9f ef       	ldi	r25, 0xFF	; 255
    53c4:	84 cf       	rjmp	.-248    	; 0x52ce <vfprintf+0x30e>

000053c6 <strnlen_P>:
strnlen_P():
    53c6:	fc 01       	movw	r30, r24
    53c8:	05 90       	lpm	r0, Z+
    53ca:	61 50       	subi	r22, 0x01	; 1
    53cc:	70 40       	sbci	r23, 0x00	; 0
    53ce:	01 10       	cpse	r0, r1
    53d0:	d8 f7       	brcc	.-10     	; 0x53c8 <strnlen_P+0x2>
    53d2:	80 95       	com	r24
    53d4:	90 95       	com	r25
    53d6:	8e 0f       	add	r24, r30
    53d8:	9f 1f       	adc	r25, r31
    53da:	08 95       	ret

000053dc <strnlen>:
strnlen():
    53dc:	fc 01       	movw	r30, r24
    53de:	61 50       	subi	r22, 0x01	; 1
    53e0:	70 40       	sbci	r23, 0x00	; 0
    53e2:	01 90       	ld	r0, Z+
    53e4:	01 10       	cpse	r0, r1
    53e6:	d8 f7       	brcc	.-10     	; 0x53de <strnlen+0x2>
    53e8:	80 95       	com	r24
    53ea:	90 95       	com	r25
    53ec:	8e 0f       	add	r24, r30
    53ee:	9f 1f       	adc	r25, r31
    53f0:	08 95       	ret

000053f2 <fputc>:
fputc():
    53f2:	0f 93       	push	r16
    53f4:	1f 93       	push	r17
    53f6:	cf 93       	push	r28
    53f8:	df 93       	push	r29
    53fa:	18 2f       	mov	r17, r24
    53fc:	09 2f       	mov	r16, r25
    53fe:	eb 01       	movw	r28, r22
    5400:	8b 81       	ldd	r24, Y+3	; 0x03
    5402:	81 fd       	sbrc	r24, 1
    5404:	09 c0       	rjmp	.+18     	; 0x5418 <fputc+0x26>
    5406:	1f ef       	ldi	r17, 0xFF	; 255
    5408:	0f ef       	ldi	r16, 0xFF	; 255
    540a:	81 2f       	mov	r24, r17
    540c:	90 2f       	mov	r25, r16
    540e:	df 91       	pop	r29
    5410:	cf 91       	pop	r28
    5412:	1f 91       	pop	r17
    5414:	0f 91       	pop	r16
    5416:	08 95       	ret
    5418:	82 ff       	sbrs	r24, 2
    541a:	14 c0       	rjmp	.+40     	; 0x5444 <fputc+0x52>
    541c:	2e 81       	ldd	r18, Y+6	; 0x06
    541e:	3f 81       	ldd	r19, Y+7	; 0x07
    5420:	8c 81       	ldd	r24, Y+4	; 0x04
    5422:	9d 81       	ldd	r25, Y+5	; 0x05
    5424:	28 17       	cp	r18, r24
    5426:	39 07       	cpc	r19, r25
    5428:	3c f4       	brge	.+14     	; 0x5438 <fputc+0x46>
    542a:	e8 81       	ld	r30, Y
    542c:	f9 81       	ldd	r31, Y+1	; 0x01
    542e:	cf 01       	movw	r24, r30
    5430:	01 96       	adiw	r24, 0x01	; 1
    5432:	99 83       	std	Y+1, r25	; 0x01
    5434:	88 83       	st	Y, r24
    5436:	10 83       	st	Z, r17
    5438:	8e 81       	ldd	r24, Y+6	; 0x06
    543a:	9f 81       	ldd	r25, Y+7	; 0x07
    543c:	01 96       	adiw	r24, 0x01	; 1
    543e:	9f 83       	std	Y+7, r25	; 0x07
    5440:	8e 83       	std	Y+6, r24	; 0x06
    5442:	e3 cf       	rjmp	.-58     	; 0x540a <fputc+0x18>
    5444:	e8 85       	ldd	r30, Y+8	; 0x08
    5446:	f9 85       	ldd	r31, Y+9	; 0x09
    5448:	81 2f       	mov	r24, r17
    544a:	09 95       	icall
    544c:	89 2b       	or	r24, r25
    544e:	a1 f3       	breq	.-24     	; 0x5438 <fputc+0x46>
    5450:	da cf       	rjmp	.-76     	; 0x5406 <fputc+0x14>

00005452 <__ultoa_invert>:
__ultoa_invert():
    5452:	fa 01       	movw	r30, r20
    5454:	aa 27       	eor	r26, r26
    5456:	28 30       	cpi	r18, 0x08	; 8
    5458:	51 f1       	breq	.+84     	; 0x54ae <__ultoa_invert+0x5c>
    545a:	20 31       	cpi	r18, 0x10	; 16
    545c:	81 f1       	breq	.+96     	; 0x54be <__ultoa_invert+0x6c>
    545e:	e8 94       	clt
    5460:	6f 93       	push	r22
    5462:	6e 7f       	andi	r22, 0xFE	; 254
    5464:	6e 5f       	subi	r22, 0xFE	; 254
    5466:	7f 4f       	sbci	r23, 0xFF	; 255
    5468:	8f 4f       	sbci	r24, 0xFF	; 255
    546a:	9f 4f       	sbci	r25, 0xFF	; 255
    546c:	af 4f       	sbci	r26, 0xFF	; 255
    546e:	b1 e0       	ldi	r27, 0x01	; 1
    5470:	3e d0       	rcall	.+124    	; 0x54ee <__ultoa_invert+0x9c>
    5472:	b4 e0       	ldi	r27, 0x04	; 4
    5474:	3c d0       	rcall	.+120    	; 0x54ee <__ultoa_invert+0x9c>
    5476:	67 0f       	add	r22, r23
    5478:	78 1f       	adc	r23, r24
    547a:	89 1f       	adc	r24, r25
    547c:	9a 1f       	adc	r25, r26
    547e:	a1 1d       	adc	r26, r1
    5480:	68 0f       	add	r22, r24
    5482:	79 1f       	adc	r23, r25
    5484:	8a 1f       	adc	r24, r26
    5486:	91 1d       	adc	r25, r1
    5488:	a1 1d       	adc	r26, r1
    548a:	6a 0f       	add	r22, r26
    548c:	71 1d       	adc	r23, r1
    548e:	81 1d       	adc	r24, r1
    5490:	91 1d       	adc	r25, r1
    5492:	a1 1d       	adc	r26, r1
    5494:	20 d0       	rcall	.+64     	; 0x54d6 <__ultoa_invert+0x84>
    5496:	09 f4       	brne	.+2      	; 0x549a <__ultoa_invert+0x48>
    5498:	68 94       	set
    549a:	3f 91       	pop	r19
    549c:	2a e0       	ldi	r18, 0x0A	; 10
    549e:	26 9f       	mul	r18, r22
    54a0:	11 24       	eor	r1, r1
    54a2:	30 19       	sub	r19, r0
    54a4:	30 5d       	subi	r19, 0xD0	; 208
    54a6:	31 93       	st	Z+, r19
    54a8:	de f6       	brtc	.-74     	; 0x5460 <__ultoa_invert+0xe>
    54aa:	cf 01       	movw	r24, r30
    54ac:	08 95       	ret
    54ae:	46 2f       	mov	r20, r22
    54b0:	47 70       	andi	r20, 0x07	; 7
    54b2:	40 5d       	subi	r20, 0xD0	; 208
    54b4:	41 93       	st	Z+, r20
    54b6:	b3 e0       	ldi	r27, 0x03	; 3
    54b8:	0f d0       	rcall	.+30     	; 0x54d8 <__ultoa_invert+0x86>
    54ba:	c9 f7       	brne	.-14     	; 0x54ae <__ultoa_invert+0x5c>
    54bc:	f6 cf       	rjmp	.-20     	; 0x54aa <__ultoa_invert+0x58>
    54be:	46 2f       	mov	r20, r22
    54c0:	4f 70       	andi	r20, 0x0F	; 15
    54c2:	40 5d       	subi	r20, 0xD0	; 208
    54c4:	4a 33       	cpi	r20, 0x3A	; 58
    54c6:	18 f0       	brcs	.+6      	; 0x54ce <__ultoa_invert+0x7c>
    54c8:	49 5d       	subi	r20, 0xD9	; 217
    54ca:	31 fd       	sbrc	r19, 1
    54cc:	40 52       	subi	r20, 0x20	; 32
    54ce:	41 93       	st	Z+, r20
    54d0:	02 d0       	rcall	.+4      	; 0x54d6 <__ultoa_invert+0x84>
    54d2:	a9 f7       	brne	.-22     	; 0x54be <__ultoa_invert+0x6c>
    54d4:	ea cf       	rjmp	.-44     	; 0x54aa <__ultoa_invert+0x58>
    54d6:	b4 e0       	ldi	r27, 0x04	; 4
    54d8:	a6 95       	lsr	r26
    54da:	97 95       	ror	r25
    54dc:	87 95       	ror	r24
    54de:	77 95       	ror	r23
    54e0:	67 95       	ror	r22
    54e2:	ba 95       	dec	r27
    54e4:	c9 f7       	brne	.-14     	; 0x54d8 <__ultoa_invert+0x86>
    54e6:	00 97       	sbiw	r24, 0x00	; 0
    54e8:	61 05       	cpc	r22, r1
    54ea:	71 05       	cpc	r23, r1
    54ec:	08 95       	ret
    54ee:	9b 01       	movw	r18, r22
    54f0:	ac 01       	movw	r20, r24
    54f2:	0a 2e       	mov	r0, r26
    54f4:	06 94       	lsr	r0
    54f6:	57 95       	ror	r21
    54f8:	47 95       	ror	r20
    54fa:	37 95       	ror	r19
    54fc:	27 95       	ror	r18
    54fe:	ba 95       	dec	r27
    5500:	c9 f7       	brne	.-14     	; 0x54f4 <__ultoa_invert+0xa2>
    5502:	62 0f       	add	r22, r18
    5504:	73 1f       	adc	r23, r19
    5506:	84 1f       	adc	r24, r20
    5508:	95 1f       	adc	r25, r21
    550a:	a0 1d       	adc	r26, r0
    550c:	08 95       	ret

0000550e <eeprom_read_byte>:
eeprom_read_byte():
    550e:	e1 99       	sbic	0x1c, 1	; 28
    5510:	fe cf       	rjmp	.-4      	; 0x550e <eeprom_read_byte>
    5512:	9f bb       	out	0x1f, r25	; 31
    5514:	8e bb       	out	0x1e, r24	; 30
    5516:	e0 9a       	sbi	0x1c, 0	; 28
    5518:	99 27       	eor	r25, r25
    551a:	8d b3       	in	r24, 0x1d	; 29
    551c:	08 95       	ret

0000551e <eeprom_write_byte>:
eeprom_write_byte():
    551e:	26 2f       	mov	r18, r22

00005520 <eeprom_write_r18>:
    5520:	e1 99       	sbic	0x1c, 1	; 28
    5522:	fe cf       	rjmp	.-4      	; 0x5520 <eeprom_write_r18>
    5524:	9f bb       	out	0x1f, r25	; 31
    5526:	8e bb       	out	0x1e, r24	; 30
    5528:	2d bb       	out	0x1d, r18	; 29
    552a:	0f b6       	in	r0, 0x3f	; 63
    552c:	f8 94       	cli
    552e:	e2 9a       	sbi	0x1c, 2	; 28
    5530:	e1 9a       	sbi	0x1c, 1	; 28
    5532:	0f be       	out	0x3f, r0	; 63
    5534:	01 96       	adiw	r24, 0x01	; 1
    5536:	08 95       	ret

00005538 <__cmpsf2>:
__cmpsf2():
    5538:	0e 94 86 2b 	call	0x570c	; 0x570c <__fp_cmp>
    553c:	08 f4       	brcc	.+2      	; 0x5540 <__cmpsf2+0x8>
    553e:	81 e0       	ldi	r24, 0x01	; 1
    5540:	08 95       	ret

00005542 <__divsf3>:
__divsf3():
    5542:	0e 94 b5 2a 	call	0x556a	; 0x556a <__divsf3x>
    5546:	0c 94 c1 2b 	jmp	0x5782	; 0x5782 <__fp_round>
    554a:	0e 94 ba 2b 	call	0x5774	; 0x5774 <__fp_pscB>
    554e:	58 f0       	brcs	.+22     	; 0x5566 <__divsf3+0x24>
    5550:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__fp_pscA>
    5554:	40 f0       	brcs	.+16     	; 0x5566 <__divsf3+0x24>
    5556:	29 f4       	brne	.+10     	; 0x5562 <__divsf3+0x20>
    5558:	5f 3f       	cpi	r21, 0xFF	; 255
    555a:	29 f0       	breq	.+10     	; 0x5566 <__divsf3+0x24>
    555c:	0c 94 aa 2b 	jmp	0x5754	; 0x5754 <__fp_inf>
    5560:	51 11       	cpse	r21, r1
    5562:	0c 94 f5 2b 	jmp	0x57ea	; 0x57ea <__fp_szero>
    5566:	0c 94 b0 2b 	jmp	0x5760	; 0x5760 <__fp_nan>

0000556a <__divsf3x>:
__divsf3x():
    556a:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <__fp_split3>
    556e:	68 f3       	brcs	.-38     	; 0x554a <__divsf3+0x8>

00005570 <__divsf3_pse>:
    5570:	99 23       	and	r25, r25
    5572:	b1 f3       	breq	.-20     	; 0x5560 <__divsf3+0x1e>
    5574:	55 23       	and	r21, r21
    5576:	91 f3       	breq	.-28     	; 0x555c <__divsf3+0x1a>
    5578:	95 1b       	sub	r25, r21
    557a:	55 0b       	sbc	r21, r21
    557c:	bb 27       	eor	r27, r27
    557e:	aa 27       	eor	r26, r26
    5580:	62 17       	cp	r22, r18
    5582:	73 07       	cpc	r23, r19
    5584:	84 07       	cpc	r24, r20
    5586:	38 f0       	brcs	.+14     	; 0x5596 <__divsf3_pse+0x26>
    5588:	9f 5f       	subi	r25, 0xFF	; 255
    558a:	5f 4f       	sbci	r21, 0xFF	; 255
    558c:	22 0f       	add	r18, r18
    558e:	33 1f       	adc	r19, r19
    5590:	44 1f       	adc	r20, r20
    5592:	aa 1f       	adc	r26, r26
    5594:	a9 f3       	breq	.-22     	; 0x5580 <__divsf3_pse+0x10>
    5596:	35 d0       	rcall	.+106    	; 0x5602 <__divsf3_pse+0x92>
    5598:	0e 2e       	mov	r0, r30
    559a:	3a f0       	brmi	.+14     	; 0x55aa <__divsf3_pse+0x3a>
    559c:	e0 e8       	ldi	r30, 0x80	; 128
    559e:	32 d0       	rcall	.+100    	; 0x5604 <__divsf3_pse+0x94>
    55a0:	91 50       	subi	r25, 0x01	; 1
    55a2:	50 40       	sbci	r21, 0x00	; 0
    55a4:	e6 95       	lsr	r30
    55a6:	00 1c       	adc	r0, r0
    55a8:	ca f7       	brpl	.-14     	; 0x559c <__divsf3_pse+0x2c>
    55aa:	2b d0       	rcall	.+86     	; 0x5602 <__divsf3_pse+0x92>
    55ac:	fe 2f       	mov	r31, r30
    55ae:	29 d0       	rcall	.+82     	; 0x5602 <__divsf3_pse+0x92>
    55b0:	66 0f       	add	r22, r22
    55b2:	77 1f       	adc	r23, r23
    55b4:	88 1f       	adc	r24, r24
    55b6:	bb 1f       	adc	r27, r27
    55b8:	26 17       	cp	r18, r22
    55ba:	37 07       	cpc	r19, r23
    55bc:	48 07       	cpc	r20, r24
    55be:	ab 07       	cpc	r26, r27
    55c0:	b0 e8       	ldi	r27, 0x80	; 128
    55c2:	09 f0       	breq	.+2      	; 0x55c6 <__divsf3_pse+0x56>
    55c4:	bb 0b       	sbc	r27, r27
    55c6:	80 2d       	mov	r24, r0
    55c8:	bf 01       	movw	r22, r30
    55ca:	ff 27       	eor	r31, r31
    55cc:	93 58       	subi	r25, 0x83	; 131
    55ce:	5f 4f       	sbci	r21, 0xFF	; 255
    55d0:	3a f0       	brmi	.+14     	; 0x55e0 <__divsf3_pse+0x70>
    55d2:	9e 3f       	cpi	r25, 0xFE	; 254
    55d4:	51 05       	cpc	r21, r1
    55d6:	78 f0       	brcs	.+30     	; 0x55f6 <__divsf3_pse+0x86>
    55d8:	0c 94 aa 2b 	jmp	0x5754	; 0x5754 <__fp_inf>
    55dc:	0c 94 f5 2b 	jmp	0x57ea	; 0x57ea <__fp_szero>
    55e0:	5f 3f       	cpi	r21, 0xFF	; 255
    55e2:	e4 f3       	brlt	.-8      	; 0x55dc <__divsf3_pse+0x6c>
    55e4:	98 3e       	cpi	r25, 0xE8	; 232
    55e6:	d4 f3       	brlt	.-12     	; 0x55dc <__divsf3_pse+0x6c>
    55e8:	86 95       	lsr	r24
    55ea:	77 95       	ror	r23
    55ec:	67 95       	ror	r22
    55ee:	b7 95       	ror	r27
    55f0:	f7 95       	ror	r31
    55f2:	9f 5f       	subi	r25, 0xFF	; 255
    55f4:	c9 f7       	brne	.-14     	; 0x55e8 <__divsf3_pse+0x78>
    55f6:	88 0f       	add	r24, r24
    55f8:	91 1d       	adc	r25, r1
    55fa:	96 95       	lsr	r25
    55fc:	87 95       	ror	r24
    55fe:	97 f9       	bld	r25, 7
    5600:	08 95       	ret
    5602:	e1 e0       	ldi	r30, 0x01	; 1
    5604:	66 0f       	add	r22, r22
    5606:	77 1f       	adc	r23, r23
    5608:	88 1f       	adc	r24, r24
    560a:	bb 1f       	adc	r27, r27
    560c:	62 17       	cp	r22, r18
    560e:	73 07       	cpc	r23, r19
    5610:	84 07       	cpc	r24, r20
    5612:	ba 07       	cpc	r27, r26
    5614:	20 f0       	brcs	.+8      	; 0x561e <__divsf3_pse+0xae>
    5616:	62 1b       	sub	r22, r18
    5618:	73 0b       	sbc	r23, r19
    561a:	84 0b       	sbc	r24, r20
    561c:	ba 0b       	sbc	r27, r26
    561e:	ee 1f       	adc	r30, r30
    5620:	88 f7       	brcc	.-30     	; 0x5604 <__divsf3_pse+0x94>
    5622:	e0 95       	com	r30
    5624:	08 95       	ret

00005626 <__fixsfsi>:
    5626:	0e 94 1a 2b 	call	0x5634	; 0x5634 <__fixunssfsi>
    562a:	68 94       	set
    562c:	b1 11       	cpse	r27, r1
    562e:	0c 94 f5 2b 	jmp	0x57ea	; 0x57ea <__fp_szero>
    5632:	08 95       	ret

00005634 <__fixunssfsi>:
    5634:	0e 94 da 2b 	call	0x57b4	; 0x57b4 <__fp_splitA>
    5638:	88 f0       	brcs	.+34     	; 0x565c <__fixunssfsi+0x28>
    563a:	9f 57       	subi	r25, 0x7F	; 127
    563c:	98 f0       	brcs	.+38     	; 0x5664 <__fixunssfsi+0x30>
    563e:	b9 2f       	mov	r27, r25
    5640:	99 27       	eor	r25, r25
    5642:	b7 51       	subi	r27, 0x17	; 23
    5644:	b0 f0       	brcs	.+44     	; 0x5672 <__fixunssfsi+0x3e>
__fixunssfsi():
    5646:	e1 f0       	breq	.+56     	; 0x5680 <__fixunssfsi+0x4c>
    5648:	66 0f       	add	r22, r22
    564a:	77 1f       	adc	r23, r23
    564c:	88 1f       	adc	r24, r24
    564e:	99 1f       	adc	r25, r25
    5650:	1a f0       	brmi	.+6      	; 0x5658 <__fixunssfsi+0x24>
    5652:	ba 95       	dec	r27
    5654:	c9 f7       	brne	.-14     	; 0x5648 <__fixunssfsi+0x14>
    5656:	14 c0       	rjmp	.+40     	; 0x5680 <__fixunssfsi+0x4c>
    5658:	b1 30       	cpi	r27, 0x01	; 1
    565a:	91 f0       	breq	.+36     	; 0x5680 <__fixunssfsi+0x4c>
    565c:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <__fp_zero>
    5660:	b1 e0       	ldi	r27, 0x01	; 1
    5662:	08 95       	ret
    5664:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__fp_zero>
    5668:	67 2f       	mov	r22, r23
    566a:	78 2f       	mov	r23, r24
    566c:	88 27       	eor	r24, r24
    566e:	b8 5f       	subi	r27, 0xF8	; 248
    5670:	39 f0       	breq	.+14     	; 0x5680 <__fixunssfsi+0x4c>
    5672:	b9 3f       	cpi	r27, 0xF9	; 249
    5674:	cc f3       	brlt	.-14     	; 0x5668 <__fixunssfsi+0x34>
    5676:	86 95       	lsr	r24
    5678:	77 95       	ror	r23
    567a:	67 95       	ror	r22
    567c:	b3 95       	inc	r27
    567e:	d9 f7       	brne	.-10     	; 0x5676 <__fixunssfsi+0x42>
    5680:	3e f4       	brtc	.+14     	; 0x5690 <__fixunssfsi+0x5c>
    5682:	90 95       	com	r25
    5684:	80 95       	com	r24
    5686:	70 95       	com	r23
    5688:	61 95       	neg	r22
    568a:	7f 4f       	sbci	r23, 0xFF	; 255
    568c:	8f 4f       	sbci	r24, 0xFF	; 255
    568e:	9f 4f       	sbci	r25, 0xFF	; 255
    5690:	08 95       	ret

00005692 <__floatunsisf>:
__floatunsisf():
    5692:	e8 94       	clt
    5694:	09 c0       	rjmp	.+18     	; 0x56a8 <__floatsisf+0x12>

00005696 <__floatsisf>:
    5696:	97 fb       	bst	r25, 7
    5698:	3e f4       	brtc	.+14     	; 0x56a8 <__floatsisf+0x12>
    569a:	90 95       	com	r25
    569c:	80 95       	com	r24
    569e:	70 95       	com	r23
    56a0:	61 95       	neg	r22
    56a2:	7f 4f       	sbci	r23, 0xFF	; 255
    56a4:	8f 4f       	sbci	r24, 0xFF	; 255
    56a6:	9f 4f       	sbci	r25, 0xFF	; 255
    56a8:	99 23       	and	r25, r25
    56aa:	a9 f0       	breq	.+42     	; 0x56d6 <__floatsisf+0x40>
    56ac:	f9 2f       	mov	r31, r25
    56ae:	96 e9       	ldi	r25, 0x96	; 150
    56b0:	bb 27       	eor	r27, r27
    56b2:	93 95       	inc	r25
    56b4:	f6 95       	lsr	r31
    56b6:	87 95       	ror	r24
    56b8:	77 95       	ror	r23
    56ba:	67 95       	ror	r22
    56bc:	b7 95       	ror	r27
    56be:	f1 11       	cpse	r31, r1
    56c0:	f8 cf       	rjmp	.-16     	; 0x56b2 <__floatsisf+0x1c>
    56c2:	fa f4       	brpl	.+62     	; 0x5702 <__floatsisf+0x6c>
    56c4:	bb 0f       	add	r27, r27
    56c6:	11 f4       	brne	.+4      	; 0x56cc <__floatsisf+0x36>
    56c8:	60 ff       	sbrs	r22, 0
    56ca:	1b c0       	rjmp	.+54     	; 0x5702 <__floatsisf+0x6c>
    56cc:	6f 5f       	subi	r22, 0xFF	; 255
    56ce:	7f 4f       	sbci	r23, 0xFF	; 255
    56d0:	8f 4f       	sbci	r24, 0xFF	; 255
    56d2:	9f 4f       	sbci	r25, 0xFF	; 255
    56d4:	16 c0       	rjmp	.+44     	; 0x5702 <__floatsisf+0x6c>
    56d6:	88 23       	and	r24, r24
    56d8:	11 f0       	breq	.+4      	; 0x56de <__floatsisf+0x48>
    56da:	96 e9       	ldi	r25, 0x96	; 150
    56dc:	11 c0       	rjmp	.+34     	; 0x5700 <__floatsisf+0x6a>
    56de:	77 23       	and	r23, r23
    56e0:	21 f0       	breq	.+8      	; 0x56ea <__floatsisf+0x54>
    56e2:	9e e8       	ldi	r25, 0x8E	; 142
    56e4:	87 2f       	mov	r24, r23
    56e6:	76 2f       	mov	r23, r22
    56e8:	05 c0       	rjmp	.+10     	; 0x56f4 <__floatsisf+0x5e>
    56ea:	66 23       	and	r22, r22
    56ec:	71 f0       	breq	.+28     	; 0x570a <__floatsisf+0x74>
    56ee:	96 e8       	ldi	r25, 0x86	; 134
    56f0:	86 2f       	mov	r24, r22
    56f2:	70 e0       	ldi	r23, 0x00	; 0
    56f4:	60 e0       	ldi	r22, 0x00	; 0
    56f6:	2a f0       	brmi	.+10     	; 0x5702 <__floatsisf+0x6c>
    56f8:	9a 95       	dec	r25
    56fa:	66 0f       	add	r22, r22
    56fc:	77 1f       	adc	r23, r23
    56fe:	88 1f       	adc	r24, r24
    5700:	da f7       	brpl	.-10     	; 0x56f8 <__floatsisf+0x62>
    5702:	88 0f       	add	r24, r24
    5704:	96 95       	lsr	r25
    5706:	87 95       	ror	r24
    5708:	97 f9       	bld	r25, 7
    570a:	08 95       	ret

0000570c <__fp_cmp>:
__fp_cmp():
    570c:	99 0f       	add	r25, r25
    570e:	00 08       	sbc	r0, r0
    5710:	55 0f       	add	r21, r21
    5712:	aa 0b       	sbc	r26, r26
    5714:	e0 e8       	ldi	r30, 0x80	; 128
    5716:	fe ef       	ldi	r31, 0xFE	; 254
    5718:	16 16       	cp	r1, r22
    571a:	17 06       	cpc	r1, r23
    571c:	e8 07       	cpc	r30, r24
    571e:	f9 07       	cpc	r31, r25
    5720:	c0 f0       	brcs	.+48     	; 0x5752 <__fp_cmp+0x46>
    5722:	12 16       	cp	r1, r18
    5724:	13 06       	cpc	r1, r19
    5726:	e4 07       	cpc	r30, r20
    5728:	f5 07       	cpc	r31, r21
    572a:	98 f0       	brcs	.+38     	; 0x5752 <__fp_cmp+0x46>
    572c:	62 1b       	sub	r22, r18
    572e:	73 0b       	sbc	r23, r19
    5730:	84 0b       	sbc	r24, r20
    5732:	95 0b       	sbc	r25, r21
    5734:	39 f4       	brne	.+14     	; 0x5744 <__fp_cmp+0x38>
    5736:	0a 26       	eor	r0, r26
    5738:	61 f0       	breq	.+24     	; 0x5752 <__fp_cmp+0x46>
    573a:	23 2b       	or	r18, r19
    573c:	24 2b       	or	r18, r20
    573e:	25 2b       	or	r18, r21
    5740:	21 f4       	brne	.+8      	; 0x574a <__fp_cmp+0x3e>
    5742:	08 95       	ret
    5744:	0a 26       	eor	r0, r26
    5746:	09 f4       	brne	.+2      	; 0x574a <__fp_cmp+0x3e>
    5748:	a1 40       	sbci	r26, 0x01	; 1
    574a:	a6 95       	lsr	r26
    574c:	8f ef       	ldi	r24, 0xFF	; 255
    574e:	81 1d       	adc	r24, r1
    5750:	81 1d       	adc	r24, r1
    5752:	08 95       	ret

00005754 <__fp_inf>:
__fp_inf():
    5754:	97 f9       	bld	r25, 7
    5756:	9f 67       	ori	r25, 0x7F	; 127
    5758:	80 e8       	ldi	r24, 0x80	; 128
    575a:	70 e0       	ldi	r23, 0x00	; 0
    575c:	60 e0       	ldi	r22, 0x00	; 0
    575e:	08 95       	ret

00005760 <__fp_nan>:
__fp_nan():
    5760:	9f ef       	ldi	r25, 0xFF	; 255
    5762:	80 ec       	ldi	r24, 0xC0	; 192
    5764:	08 95       	ret

00005766 <__fp_pscA>:
__fp_pscA():
    5766:	00 24       	eor	r0, r0
    5768:	0a 94       	dec	r0
    576a:	16 16       	cp	r1, r22
    576c:	17 06       	cpc	r1, r23
    576e:	18 06       	cpc	r1, r24
    5770:	09 06       	cpc	r0, r25
    5772:	08 95       	ret

00005774 <__fp_pscB>:
__fp_pscB():
    5774:	00 24       	eor	r0, r0
    5776:	0a 94       	dec	r0
    5778:	12 16       	cp	r1, r18
    577a:	13 06       	cpc	r1, r19
    577c:	14 06       	cpc	r1, r20
    577e:	05 06       	cpc	r0, r21
    5780:	08 95       	ret

00005782 <__fp_round>:
__fp_round():
    5782:	09 2e       	mov	r0, r25
    5784:	03 94       	inc	r0
    5786:	00 0c       	add	r0, r0
    5788:	11 f4       	brne	.+4      	; 0x578e <__fp_round+0xc>
    578a:	88 23       	and	r24, r24
    578c:	52 f0       	brmi	.+20     	; 0x57a2 <__fp_round+0x20>
    578e:	bb 0f       	add	r27, r27
    5790:	40 f4       	brcc	.+16     	; 0x57a2 <__fp_round+0x20>
    5792:	bf 2b       	or	r27, r31
    5794:	11 f4       	brne	.+4      	; 0x579a <__fp_round+0x18>
    5796:	60 ff       	sbrs	r22, 0
    5798:	04 c0       	rjmp	.+8      	; 0x57a2 <__fp_round+0x20>
    579a:	6f 5f       	subi	r22, 0xFF	; 255
    579c:	7f 4f       	sbci	r23, 0xFF	; 255
    579e:	8f 4f       	sbci	r24, 0xFF	; 255
    57a0:	9f 4f       	sbci	r25, 0xFF	; 255
    57a2:	08 95       	ret

000057a4 <__fp_split3>:
__fp_split3():
    57a4:	57 fd       	sbrc	r21, 7
    57a6:	90 58       	subi	r25, 0x80	; 128
    57a8:	44 0f       	add	r20, r20
    57aa:	55 1f       	adc	r21, r21
    57ac:	59 f0       	breq	.+22     	; 0x57c4 <__fp_splitA+0x10>
    57ae:	5f 3f       	cpi	r21, 0xFF	; 255
    57b0:	71 f0       	breq	.+28     	; 0x57ce <__fp_splitA+0x1a>
    57b2:	47 95       	ror	r20

000057b4 <__fp_splitA>:
    57b4:	88 0f       	add	r24, r24
    57b6:	97 fb       	bst	r25, 7
    57b8:	99 1f       	adc	r25, r25
    57ba:	61 f0       	breq	.+24     	; 0x57d4 <__fp_splitA+0x20>
    57bc:	9f 3f       	cpi	r25, 0xFF	; 255
    57be:	79 f0       	breq	.+30     	; 0x57de <__fp_splitA+0x2a>
    57c0:	87 95       	ror	r24
    57c2:	08 95       	ret
    57c4:	12 16       	cp	r1, r18
    57c6:	13 06       	cpc	r1, r19
    57c8:	14 06       	cpc	r1, r20
    57ca:	55 1f       	adc	r21, r21
    57cc:	f2 cf       	rjmp	.-28     	; 0x57b2 <__fp_split3+0xe>
    57ce:	46 95       	lsr	r20
    57d0:	f1 df       	rcall	.-30     	; 0x57b4 <__fp_splitA>
    57d2:	08 c0       	rjmp	.+16     	; 0x57e4 <__fp_splitA+0x30>
    57d4:	16 16       	cp	r1, r22
    57d6:	17 06       	cpc	r1, r23
    57d8:	18 06       	cpc	r1, r24
    57da:	99 1f       	adc	r25, r25
    57dc:	f1 cf       	rjmp	.-30     	; 0x57c0 <__fp_splitA+0xc>
    57de:	86 95       	lsr	r24
    57e0:	71 05       	cpc	r23, r1
    57e2:	61 05       	cpc	r22, r1
    57e4:	08 94       	sec
    57e6:	08 95       	ret

000057e8 <__fp_zero>:
__fp_zero():
    57e8:	e8 94       	clt

000057ea <__fp_szero>:
    57ea:	bb 27       	eor	r27, r27
    57ec:	66 27       	eor	r22, r22
    57ee:	77 27       	eor	r23, r23
    57f0:	cb 01       	movw	r24, r22
    57f2:	97 f9       	bld	r25, 7
    57f4:	08 95       	ret

000057f6 <__mulsf3>:
__mulsf3():
    57f6:	0e 94 0e 2c 	call	0x581c	; 0x581c <__mulsf3x>
    57fa:	0c 94 c1 2b 	jmp	0x5782	; 0x5782 <__fp_round>
    57fe:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__fp_pscA>
    5802:	38 f0       	brcs	.+14     	; 0x5812 <__mulsf3+0x1c>
    5804:	0e 94 ba 2b 	call	0x5774	; 0x5774 <__fp_pscB>
    5808:	20 f0       	brcs	.+8      	; 0x5812 <__mulsf3+0x1c>
    580a:	95 23       	and	r25, r21
    580c:	11 f0       	breq	.+4      	; 0x5812 <__mulsf3+0x1c>
    580e:	0c 94 aa 2b 	jmp	0x5754	; 0x5754 <__fp_inf>
    5812:	0c 94 b0 2b 	jmp	0x5760	; 0x5760 <__fp_nan>
    5816:	11 24       	eor	r1, r1
    5818:	0c 94 f5 2b 	jmp	0x57ea	; 0x57ea <__fp_szero>

0000581c <__mulsf3x>:
__mulsf3x():
    581c:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <__fp_split3>
    5820:	70 f3       	brcs	.-36     	; 0x57fe <__mulsf3+0x8>

00005822 <__mulsf3_pse>:
    5822:	95 9f       	mul	r25, r21
    5824:	c1 f3       	breq	.-16     	; 0x5816 <__mulsf3+0x20>
    5826:	95 0f       	add	r25, r21
    5828:	50 e0       	ldi	r21, 0x00	; 0
    582a:	55 1f       	adc	r21, r21
    582c:	62 9f       	mul	r22, r18
    582e:	f0 01       	movw	r30, r0
    5830:	72 9f       	mul	r23, r18
    5832:	bb 27       	eor	r27, r27
    5834:	f0 0d       	add	r31, r0
    5836:	b1 1d       	adc	r27, r1
    5838:	63 9f       	mul	r22, r19
    583a:	aa 27       	eor	r26, r26
    583c:	f0 0d       	add	r31, r0
    583e:	b1 1d       	adc	r27, r1
    5840:	aa 1f       	adc	r26, r26
    5842:	64 9f       	mul	r22, r20
    5844:	66 27       	eor	r22, r22
    5846:	b0 0d       	add	r27, r0
    5848:	a1 1d       	adc	r26, r1
    584a:	66 1f       	adc	r22, r22
    584c:	82 9f       	mul	r24, r18
    584e:	22 27       	eor	r18, r18
    5850:	b0 0d       	add	r27, r0
    5852:	a1 1d       	adc	r26, r1
    5854:	62 1f       	adc	r22, r18
    5856:	73 9f       	mul	r23, r19
    5858:	b0 0d       	add	r27, r0
    585a:	a1 1d       	adc	r26, r1
    585c:	62 1f       	adc	r22, r18
    585e:	83 9f       	mul	r24, r19
    5860:	a0 0d       	add	r26, r0
    5862:	61 1d       	adc	r22, r1
    5864:	22 1f       	adc	r18, r18
    5866:	74 9f       	mul	r23, r20
    5868:	33 27       	eor	r19, r19
    586a:	a0 0d       	add	r26, r0
    586c:	61 1d       	adc	r22, r1
    586e:	23 1f       	adc	r18, r19
    5870:	84 9f       	mul	r24, r20
    5872:	60 0d       	add	r22, r0
    5874:	21 1d       	adc	r18, r1
    5876:	82 2f       	mov	r24, r18
    5878:	76 2f       	mov	r23, r22
    587a:	6a 2f       	mov	r22, r26
    587c:	11 24       	eor	r1, r1
    587e:	9f 57       	subi	r25, 0x7F	; 127
    5880:	50 40       	sbci	r21, 0x00	; 0
    5882:	9a f0       	brmi	.+38     	; 0x58aa <__mulsf3_pse+0x88>
    5884:	f1 f0       	breq	.+60     	; 0x58c2 <__mulsf3_pse+0xa0>
    5886:	88 23       	and	r24, r24
    5888:	4a f0       	brmi	.+18     	; 0x589c <__mulsf3_pse+0x7a>
    588a:	ee 0f       	add	r30, r30
    588c:	ff 1f       	adc	r31, r31
    588e:	bb 1f       	adc	r27, r27
    5890:	66 1f       	adc	r22, r22
    5892:	77 1f       	adc	r23, r23
    5894:	88 1f       	adc	r24, r24
    5896:	91 50       	subi	r25, 0x01	; 1
    5898:	50 40       	sbci	r21, 0x00	; 0
    589a:	a9 f7       	brne	.-22     	; 0x5886 <__mulsf3_pse+0x64>
    589c:	9e 3f       	cpi	r25, 0xFE	; 254
    589e:	51 05       	cpc	r21, r1
    58a0:	80 f0       	brcs	.+32     	; 0x58c2 <__mulsf3_pse+0xa0>
    58a2:	0c 94 aa 2b 	jmp	0x5754	; 0x5754 <__fp_inf>
    58a6:	0c 94 f5 2b 	jmp	0x57ea	; 0x57ea <__fp_szero>
    58aa:	5f 3f       	cpi	r21, 0xFF	; 255
    58ac:	e4 f3       	brlt	.-8      	; 0x58a6 <__mulsf3_pse+0x84>
    58ae:	98 3e       	cpi	r25, 0xE8	; 232
    58b0:	d4 f3       	brlt	.-12     	; 0x58a6 <__mulsf3_pse+0x84>
    58b2:	86 95       	lsr	r24
    58b4:	77 95       	ror	r23
    58b6:	67 95       	ror	r22
    58b8:	b7 95       	ror	r27
    58ba:	f7 95       	ror	r31
    58bc:	e7 95       	ror	r30
    58be:	9f 5f       	subi	r25, 0xFF	; 255
    58c0:	c1 f7       	brne	.-16     	; 0x58b2 <__mulsf3_pse+0x90>
    58c2:	fe 2b       	or	r31, r30
    58c4:	88 0f       	add	r24, r24
    58c6:	91 1d       	adc	r25, r1
    58c8:	96 95       	lsr	r25
    58ca:	87 95       	ror	r24
    58cc:	97 f9       	bld	r25, 7
    58ce:	08 95       	ret

000058d0 <__udivmodhi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    58d0:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    58d2:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    58d4:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    58d6:	07 c0       	rjmp	.+14     	; 0x58e6 <__udivmodhi4_ep>

000058d8 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    58d8:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    58da:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    58dc:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    58de:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    58e0:	10 f0       	brcs	.+4      	; 0x58e6 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    58e2:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    58e4:	b7 0b       	sbc	r27, r23

000058e6 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    58e6:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    58e8:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    58ea:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    58ec:	a9 f7       	brne	.-22     	; 0x58d8 <__udivmodhi4_loop>
__udivmodhi4_ep():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    58ee:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    58f0:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    58f2:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    58f4:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    58f6:	08 95       	ret

000058f8 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    58f8:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    58fa:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    58fc:	16 f4       	brtc	.+4      	; 0x5902 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    58fe:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    5900:	07 d0       	rcall	.+14     	; 0x5910 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    5902:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    5904:	09 d0       	rcall	.+18     	; 0x5918 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    5906:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    590a:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    590c:	05 d0       	rcall	.+10     	; 0x5918 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    590e:	3e f4       	brtc	.+14     	; 0x591e <__divmodhi4_exit>

00005910 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    5910:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    5912:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    5914:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    5916:	08 95       	ret

00005918 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    5918:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    591a:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    591c:	7f 4f       	sbci	r23, 0xFF	; 255

0000591e <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    591e:	08 95       	ret

00005920 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    5920:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    5922:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    5924:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    5926:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    5928:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    592a:	0d c0       	rjmp	.+26     	; 0x5946 <__udivmodsi4_ep>

0000592c <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    592c:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    592e:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    5930:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    5932:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    5934:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    5936:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    5938:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    593a:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    593c:	20 f0       	brcs	.+8      	; 0x5946 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    593e:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    5940:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    5942:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    5944:	f5 0b       	sbc	r31, r21

00005946 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    5946:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    5948:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    594a:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    594c:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    594e:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    5950:	69 f7       	brne	.-38     	; 0x592c <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    5952:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    5954:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    5956:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    5958:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    595a:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    595c:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    595e:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    5960:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    5962:	08 95       	ret

00005964 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    5964:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    5966:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    5968:	1e f4       	brtc	.+6      	; 0x5970 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    596a:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    596c:	0e 94 c9 2c 	call	0x5992	; 0x5992 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    5970:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    5972:	07 d0       	rcall	.+14     	; 0x5982 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    5974:	0e 94 90 2c 	call	0x5920	; 0x5920 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    5978:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    597a:	03 d0       	rcall	.+6      	; 0x5982 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    597c:	4e f4       	brtc	.+18     	; 0x5990 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    597e:	0c 94 c9 2c 	jmp	0x5992	; 0x5992 <__negsi2>

00005982 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    5982:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    5984:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    5986:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    5988:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    598a:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    598c:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    598e:	5f 4f       	sbci	r21, 0xFF	; 255

00005990 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    5990:	08 95       	ret

00005992 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    5992:	90 95       	com	r25
    5994:	80 95       	com	r24
    5996:	70 95       	com	r23
    5998:	61 95       	neg	r22
    599a:	7f 4f       	sbci	r23, 0xFF	; 255
    599c:	8f 4f       	sbci	r24, 0xFF	; 255
    599e:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    59a0:	08 95       	ret

000059a2 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    59a2:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    59a4:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    59a6:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    59a8:	00 1c       	adc	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    59aa:	0b be       	out	0x3b, r0	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    59ac:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    59ae:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    59b0:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    59b2:	09 94       	ijmp

000059b4 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    59b4:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    59b6:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    59b8:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    59ba:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    59bc:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    59be:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    59c0:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    59c2:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    59c4:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    59c6:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    59c8:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    59ca:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    59cc:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    59ce:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    59d0:	08 95       	ret

000059d2 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    59d2:	f8 94       	cli

000059d4 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    59d4:	ff cf       	rjmp	.-2      	; 0x59d4 <__stop_program>
