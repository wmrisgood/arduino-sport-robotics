
C:\Users\Ryan\AppData\Local\arduino\sketches\9178477E1167E5DC5A573C5D448AEA18/sport_main_code_2023.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__vector_16>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__vector_18>
      4c:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <__vector_19>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <__vector_30>
      7c:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__vector_31>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__vector_33>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	00 00       	nop
      8e:	3a 00       	.word	0x003a	; ????
      90:	37 00       	.word	0x0037	; ????
      92:	34 00       	.word	0x0034	; ????
      94:	31 00       	.word	0x0031	; ????
      96:	22 00       	.word	0x0022	; ????
      98:	61 00       	.word	0x0061	; ????
      9a:	64 00       	.word	0x0064	; ????

0000009c <port_to_output_PGM>:
      9c:	00 00 3b 00 38 00 35 00 32 00 23 00 62 00 65 00     ..;.8.5.2.#.b.e.

000000ac <port_to_input_PGM>:
      ac:	00 00 39 00 36 00 33 00 30 00 21 00 20 00 63 00     ..9.6.3.0.!. .c.

000000bc <digital_pin_to_port_PGM>:
      bc:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
      cc:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
      dc:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
      ec:	06 06 06 06 06                                      .....

000000f1 <digital_pin_to_bit_mask_PGM>:
      f1:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     101:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
     111:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
     121:	08 10 20 40 80                                      .. @.

00000126 <digital_pin_to_timer_PGM>:
     126:	00 00 00 0a 0b 0c 00 00 00 00 00 00 01 04 05 06     ................
	...

0000015c <__ctors_start>:
__ctors_start():
     15c:	9b 21       	and	r25, r11

0000015e <__ctors_end>:
__dtors_end():
     15e:	11 24       	eor	r1, r1
     160:	1f be       	out	0x3f, r1	; 63
     162:	cf ef       	ldi	r28, 0xFF	; 255
     164:	d0 e1       	ldi	r29, 0x10	; 16
     166:	de bf       	out	0x3e, r29	; 62
     168:	cd bf       	out	0x3d, r28	; 61

0000016a <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     16a:	18 e0       	ldi	r17, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     16c:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     16e:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     170:	e0 e3       	ldi	r30, 0x30	; 48
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     172:	fd e6       	ldi	r31, 0x6D	; 109
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     174:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     176:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     17a:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     17c:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     17e:	a4 36       	cpi	r26, 0x64	; 100
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     180:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0x10>

00000184 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     184:	2a e0       	ldi	r18, 0x0A	; 10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     186:	a4 e6       	ldi	r26, 0x64	; 100
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     188:	b8 e0       	ldi	r27, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     18e:	a6 3d       	cpi	r26, 0xD6	; 214
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     190:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>

00000194 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     194:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     196:	cf ea       	ldi	r28, 0xAF	; 175
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     198:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     19a:	04 c0       	rjmp	.+8      	; 0x1a4 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     19c:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     19e:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     1a0:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     1a4:	ce 3a       	cpi	r28, 0xAE	; 174
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     1a6:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     1a8:	c9 f7       	brne	.-14     	; 0x19c <__do_global_ctors+0x8>
     1aa:	0e 94 18 22 	call	0x4430	; 0x4430 <main>
     1ae:	0c 94 96 36 	jmp	0x6d2c	; 0x6d2c <_exit>

000001b2 <__bad_interrupt>:
__vector_22():
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <update_crc(unsigned short, unsigned short*, unsigned short) [clone .constprop.32]>:
update_crc():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:40
unsigned int puls_cnt;

unsigned char TxBuffer[20];
unsigned short gbpTxBuffer[20], gbpParameter[20], packet[30];

unsigned short update_crc(unsigned short crc_accum, unsigned short *data_blk_ptr, unsigned short data_blk_size)
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	d2 50       	subi	r29, 0x02	; 2
     1c0:	0f b6       	in	r0, 0x3f	; 63
     1c2:	f8 94       	cli
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	0f be       	out	0x3f, r0	; 63
     1c8:	cd bf       	out	0x3d, r28	; 61
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:43
{
    unsigned short i, j;
    unsigned short crc_table[256] = {
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	92 e0       	ldi	r25, 0x02	; 2
     1ce:	ec e0       	ldi	r30, 0x0C	; 12
     1d0:	f1 e0       	ldi	r31, 0x01	; 1
     1d2:	de 01       	movw	r26, r28
     1d4:	11 96       	adiw	r26, 0x01	; 1
     1d6:	01 90       	ld	r0, Z+
     1d8:	0d 92       	st	X+, r0
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <update_crc(unsigned short, unsigned short*, unsigned short) [clone .constprop.32]+0x20>
     1de:	ac e3       	ldi	r26, 0x3C	; 60
     1e0:	b9 e0       	ldi	r27, 0x09	; 9
     1e2:	28 e5       	ldi	r18, 0x58	; 88
     1e4:	39 e0       	ldi	r19, 0x09	; 9
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:79
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202};

    for (j = 0; j < data_blk_size; j++)
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
     1ea:	6d 91       	ld	r22, X+
     1ec:	7d 91       	ld	r23, X+
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:80
        crc_accum = (crc_accum << 8) ^ crc_table[i];
     1ee:	58 2f       	mov	r21, r24
     1f0:	44 27       	eor	r20, r20
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:79
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202};

    for (j = 0; j < data_blk_size; j++)
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
     1f2:	e9 2f       	mov	r30, r25
     1f4:	ff 27       	eor	r31, r31
     1f6:	e6 27       	eor	r30, r22
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:80
        crc_accum = (crc_accum << 8) ^ crc_table[i];
     1f8:	ee 0f       	add	r30, r30
     1fa:	ff 1f       	adc	r31, r31
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	8c 0f       	add	r24, r28
     202:	9d 1f       	adc	r25, r29
     204:	e8 0f       	add	r30, r24
     206:	f9 1f       	adc	r31, r25
     208:	80 81       	ld	r24, Z
     20a:	91 81       	ldd	r25, Z+1	; 0x01
     20c:	84 27       	eor	r24, r20
     20e:	95 27       	eor	r25, r21
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:77
        0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252,
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202};

    for (j = 0; j < data_blk_size; j++)
     210:	2a 17       	cp	r18, r26
     212:	3b 07       	cpc	r19, r27
     214:	51 f7       	brne	.-44     	; 0x1ea <update_crc(unsigned short, unsigned short*, unsigned short) [clone .constprop.32]+0x34>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:83
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
        crc_accum = (crc_accum << 8) ^ crc_table[i];
    }
    return crc_accum;
}
     216:	de 5f       	subi	r29, 0xFE	; 254
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret

00000228 <printf_putchar(char, __file*)>:
printf_putchar():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:204
}

// Custom implementation of printf borrowed from the teensy core files
static int16_t printf_putchar(char c, FILE *fp)
{
  ((class Print *)(fdev_get_udata(fp)))->write((uint8_t)c);
     228:	fb 01       	movw	r30, r22
     22a:	a4 85       	ldd	r26, Z+12	; 0x0c
     22c:	b5 85       	ldd	r27, Z+13	; 0x0d
     22e:	ed 91       	ld	r30, X+
     230:	fc 91       	ld	r31, X
     232:	11 97       	sbiw	r26, 0x01	; 1
     234:	01 90       	ld	r0, Z+
     236:	f0 81       	ld	r31, Z
     238:	e0 2d       	mov	r30, r0
     23a:	68 2f       	mov	r22, r24
     23c:	cd 01       	movw	r24, r26
     23e:	09 95       	icall
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:206
  return 0;
}
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	08 95       	ret

00000246 <TwoWire::read()>:
read():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:303
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     246:	90 91 3b 09 	lds	r25, 0x093B	; 0x80093b <TwoWire::rxBufferIndex>
     24a:	80 91 3a 09 	lds	r24, 0x093A	; 0x80093a <TwoWire::rxBufferLength>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:300
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     24e:	2f ef       	ldi	r18, 0xFF	; 255
     250:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:303

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     252:	98 17       	cp	r25, r24
     254:	48 f4       	brcc	.+18     	; 0x268 <TwoWire::read()+0x22>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:304
    value = rxBuffer[rxBufferIndex];
     256:	e9 2f       	mov	r30, r25
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	e6 5e       	subi	r30, 0xE6	; 230
     25c:	f6 4f       	sbci	r31, 0xF6	; 246
     25e:	20 81       	ld	r18, Z
     260:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:305
    ++rxBufferIndex;
     262:	9f 5f       	subi	r25, 0xFF	; 255
     264:	90 93 3b 09 	sts	0x093B, r25	; 0x80093b <TwoWire::rxBufferIndex>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:309
  }

  return value;
}
     268:	c9 01       	movw	r24, r18
     26a:	08 95       	ret

0000026c <TwoWire::read() [clone .constprop.22]>:
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:303
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     26c:	90 91 3b 09 	lds	r25, 0x093B	; 0x80093b <TwoWire::rxBufferIndex>
     270:	80 91 3a 09 	lds	r24, 0x093A	; 0x80093a <TwoWire::rxBufferLength>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:300
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     274:	2f ef       	ldi	r18, 0xFF	; 255
     276:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:303

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     278:	98 17       	cp	r25, r24
     27a:	48 f4       	brcc	.+18     	; 0x28e <TwoWire::read() [clone .constprop.22]+0x22>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:304
    value = rxBuffer[rxBufferIndex];
     27c:	e9 2f       	mov	r30, r25
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	e6 5e       	subi	r30, 0xE6	; 230
     282:	f6 4f       	sbci	r31, 0xF6	; 246
     284:	20 81       	ld	r18, Z
     286:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:305
    ++rxBufferIndex;
     288:	9f 5f       	subi	r25, 0xFF	; 255
     28a:	90 93 3b 09 	sts	0x093B, r25	; 0x80093b <TwoWire::rxBufferIndex>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:309
  }

  return value;
}
     28e:	c9 01       	movw	r24, r18
     290:	08 95       	ret

00000292 <TwoWire::endTransmission(unsigned char) [clone .constprop.18]>:
endTransmission():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:224
//  the bus tenure has been properly ended with a STOP. It
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
     292:	28 2f       	mov	r18, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:227
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     294:	90 91 19 09 	lds	r25, 0x0919	; 0x800919 <TwoWire::txBufferLength>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:263
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
     298:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:262
 *          5 .. timeout
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
     29a:	91 32       	cpi	r25, 0x21	; 33
     29c:	08 f0       	brcs	.+2      	; 0x2a0 <TwoWire::endTransmission(unsigned char) [clone .constprop.18]+0xe>
     29e:	42 c0       	rjmp	.+132    	; 0x324 <TwoWire::endTransmission(unsigned char) [clone .constprop.18]+0x92>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:276
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(TWI_READY != twi_state){
     2a0:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <twi_state>
     2a4:	81 11       	cpse	r24, r1
     2a6:	fc cf       	rjmp	.-8      	; 0x2a0 <TwoWire::endTransmission(unsigned char) [clone .constprop.18]+0xe>
endTransmission():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:227
     2a8:	80 91 18 09 	lds	r24, 0x0918	; 0x800918 <TwoWire::txAddress>
twi_writeTo():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:281
      continue;
    }
  #endif

  twi_state = TWI_MTX;
     2ac:	32 e0       	ldi	r19, 0x02	; 2
     2ae:	30 93 f5 08 	sts	0x08F5, r19	; 0x8008f5 <twi_state>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:282
  twi_sendStop = sendStop;
     2b2:	20 93 f4 08 	sts	0x08F4, r18	; 0x8008f4 <twi_sendStop>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:284
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
     2b6:	2f ef       	ldi	r18, 0xFF	; 255
     2b8:	20 93 f3 08 	sts	0x08F3, r18	; 0x8008f3 <twi_error>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:287

  // initialize buffer iteration vars
  twi_masterBuffer = data;
     2bc:	28 ef       	ldi	r18, 0xF8	; 248
     2be:	38 e0       	ldi	r19, 0x08	; 8
     2c0:	30 93 f2 08 	sts	0x08F2, r19	; 0x8008f2 <twi_masterBuffer+0x1>
     2c4:	20 93 f1 08 	sts	0x08F1, r18	; 0x8008f1 <twi_masterBuffer>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:288
  twi_masterBufferIndex = 0;
     2c8:	10 92 f0 08 	sts	0x08F0, r1	; 0x8008f0 <twi_masterBufferIndex>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:289
  twi_masterBufferLength = length;
     2cc:	90 93 ef 08 	sts	0x08EF, r25	; 0x8008ef <twi_masterBufferLength>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:292

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     2d0:	10 92 ee 08 	sts	0x08EE, r1	; 0x8008ee <twi_slarw>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:293
  twi_slarw |= address << 1;
     2d4:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <twi_slarw>
     2d8:	88 0f       	add	r24, r24
     2da:	89 2b       	or	r24, r25
     2dc:	80 93 ee 08 	sts	0x08EE, r24	; 0x8008ee <twi_slarw>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:298

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     2e0:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <twi_inRepStart>
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	29 f5       	brne	.+74     	; 0x332 <TwoWire::endTransmission(unsigned char) [clone .constprop.18]+0xa0>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:305
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
     2e8:	10 92 ed 08 	sts	0x08ED, r1	; 0x8008ed <twi_inRepStart>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:316
          return (5);
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
     2ec:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <twi_slarw>
     2f0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:317
      } while(TWCR & _BV(TWWC));
     2f4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     2f8:	83 fd       	sbrc	r24, 3
     2fa:	f8 cf       	rjmp	.-16     	; 0x2ec <TwoWire::endTransmission(unsigned char) [clone .constprop.18]+0x5a>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:319
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     2fc:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:323
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     2fe:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:335
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(wait && (TWI_MTX == twi_state)){
     302:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <twi_state>
     306:	82 30       	cpi	r24, 0x02	; 2
     308:	e1 f3       	breq	.-8      	; 0x302 <TwoWire::endTransmission(unsigned char) [clone .constprop.18]+0x70>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:340
      continue;
    }
  #endif

  if (twi_error == 0xFF)
     30a:	80 91 f3 08 	lds	r24, 0x08F3	; 0x8008f3 <twi_error>
     30e:	8f 3f       	cpi	r24, 0xFF	; 255
     310:	91 f0       	breq	.+36     	; 0x336 <TwoWire::endTransmission(unsigned char) [clone .constprop.18]+0xa4>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:342
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
     312:	80 91 f3 08 	lds	r24, 0x08F3	; 0x8008f3 <twi_error>
     316:	80 32       	cpi	r24, 0x20	; 32
     318:	81 f0       	breq	.+32     	; 0x33a <TwoWire::endTransmission(unsigned char) [clone .constprop.18]+0xa8>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:344
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     31a:	80 91 f3 08 	lds	r24, 0x08F3	; 0x8008f3 <twi_error>
     31e:	80 33       	cpi	r24, 0x30	; 48
     320:	71 f0       	breq	.+28     	; 0x33e <TwoWire::endTransmission(unsigned char) [clone .constprop.18]+0xac>
endTransmission():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:347
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
     322:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:229
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     324:	10 92 f7 08 	sts	0x08F7, r1	; 0x8008f7 <TwoWire::txBufferIndex>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:230
  txBufferLength = 0;
     328:	10 92 19 09 	sts	0x0919, r1	; 0x800919 <TwoWire::txBufferLength>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:232
  // indicate that we are done transmitting
  transmitting = 0;
     32c:	10 92 f6 08 	sts	0x08F6, r1	; 0x8008f6 <TwoWire::transmitting>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:234
  return ret;
}
     330:	08 95       	ret
twi_writeTo():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:323
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     332:	85 ee       	ldi	r24, 0xE5	; 229
     334:	e4 cf       	rjmp	.-56     	; 0x2fe <TwoWire::endTransmission(unsigned char) [clone .constprop.18]+0x6c>
endTransmission():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:341
      continue;
    }
  #endif

  if (twi_error == 0xFF)
    return 0; // success
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	f5 cf       	rjmp	.-22     	; 0x324 <TwoWire::endTransmission(unsigned char) [clone .constprop.18]+0x92>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:343
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	f3 cf       	rjmp	.-26     	; 0x324 <TwoWire::endTransmission(unsigned char) [clone .constprop.18]+0x92>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:345
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
     33e:	83 e0       	ldi	r24, 0x03	; 3
     340:	f1 cf       	rjmp	.-30     	; 0x324 <TwoWire::endTransmission(unsigned char) [clone .constprop.18]+0x92>

00000342 <TwoWire::beginTransmission(unsigned char) [clone .constprop.17]>:
beginTransmission():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:198
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	90 93 f6 08 	sts	0x08F6, r25	; 0x8008f6 <TwoWire::transmitting>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:200
  // set address of targeted slave
  txAddress = address;
     348:	80 93 18 09 	sts	0x0918, r24	; 0x800918 <TwoWire::txAddress>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:202
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     34c:	10 92 f7 08 	sts	0x08F7, r1	; 0x8008f7 <TwoWire::txBufferIndex>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:203
  txBufferLength = 0;
     350:	10 92 19 09 	sts	0x0919, r1	; 0x800919 <TwoWire::txBufferLength>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:204
}
     354:	08 95       	ret

00000356 <TwoWire::endTransmission() [clone .constprop.13]>:
endTransmission():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:241
//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	0c 94 49 01 	jmp	0x292	; 0x292 <TwoWire::endTransmission(unsigned char) [clone .constprop.18]>

0000035c <turnOffPWM>:
turnOffPWM():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     35c:	81 50       	subi	r24, 0x01	; 1
     35e:	8c 30       	cpi	r24, 0x0C	; 12
     360:	88 f5       	brcc	.+98     	; 0x3c4 <turnOffPWM+0x68>
     362:	e8 2f       	mov	r30, r24
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	e9 54       	subi	r30, 0x49	; 73
     368:	fe 4f       	sbci	r31, 0xFE	; 254
     36a:	0c 94 73 36 	jmp	0x6ce6	; 0x6ce6 <__tablejump2__>
     36e:	df 01       	movw	r26, r30
     370:	df 01       	movw	r26, r30
     372:	e2 01       	movw	r28, r4
     374:	c3 01       	movw	r24, r6
     376:	c7 01       	movw	r24, r14
     378:	ca 01       	movw	r24, r20
     37a:	cd 01       	movw	r24, r26
     37c:	e2 01       	movw	r28, r4
     37e:	e2 01       	movw	r28, r4
     380:	d1 01       	movw	r26, r2
     382:	d7 01       	movw	r26, r14
     384:	db 01       	movw	r26, r22
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     386:	8f b5       	in	r24, 0x2f	; 47
     388:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     38a:	8f bd       	out	0x2f, r24	; 47
     38c:	08 95       	ret
     38e:	8f b5       	in	r24, 0x2f	; 47
     390:	8f 7d       	andi	r24, 0xDF	; 223
     392:	fb cf       	rjmp	.-10     	; 0x38a <turnOffPWM+0x2e>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
     394:	8f b5       	in	r24, 0x2f	; 47
     396:	87 7f       	andi	r24, 0xF7	; 247
     398:	f8 cf       	rjmp	.-16     	; 0x38a <turnOffPWM+0x2e>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
     39a:	85 b5       	in	r24, 0x25	; 37
     39c:	8f 7d       	andi	r24, 0xDF	; 223
     39e:	85 bd       	out	0x25, r24	; 37
     3a0:	08 95       	ret
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
     3a2:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     3a6:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
     3a8:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     3ac:	08 95       	ret
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
     3ae:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     3b2:	8f 7d       	andi	r24, 0xDF	; 223
     3b4:	f9 cf       	rjmp	.-14     	; 0x3a8 <turnOffPWM+0x4c>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
     3b6:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     3ba:	87 7f       	andi	r24, 0xF7	; 247
     3bc:	f5 cf       	rjmp	.-22     	; 0x3a8 <turnOffPWM+0x4c>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:171
    #if defined(TCCR0) && defined(COM01)
      case TIMER0:
        TCCR0 &= ~_BV(COM01);
        break;
      case TIMER0A:
        TCCR0 &= ~_BV(COM01);
     3be:	83 b7       	in	r24, 0x33	; 51
     3c0:	8f 7d       	andi	r24, 0xDF	; 223
     3c2:	83 bf       	out	0x33, r24	; 51
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
     3c4:	08 95       	ret

000003c6 <digitalRead>:
digitalRead():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     3ca:	28 2f       	mov	r18, r24
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	f9 01       	movw	r30, r18
     3d0:	ea 5d       	subi	r30, 0xDA	; 218
     3d2:	fe 4f       	sbci	r31, 0xFE	; 254
     3d4:	84 91       	lpm	r24, Z
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     3d6:	f9 01       	movw	r30, r18
     3d8:	ef 50       	subi	r30, 0x0F	; 15
     3da:	ff 4f       	sbci	r31, 0xFF	; 255
     3dc:	d4 91       	lpm	r29, Z
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     3de:	f9 01       	movw	r30, r18
     3e0:	e4 54       	subi	r30, 0x44	; 68
     3e2:	ff 4f       	sbci	r31, 0xFF	; 255
     3e4:	c4 91       	lpm	r28, Z
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     3e6:	cc 23       	and	r28, r28
     3e8:	a1 f0       	breq	.+40     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     3ea:	81 11       	cpse	r24, r1
     3ec:	0e 94 ae 01 	call	0x35c	; 0x35c <turnOffPWM>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     3f0:	ec 2f       	mov	r30, r28
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	ee 0f       	add	r30, r30
     3f6:	ff 1f       	adc	r31, r31
     3f8:	e4 55       	subi	r30, 0x54	; 84
     3fa:	ff 4f       	sbci	r31, 0xFF	; 255
     3fc:	a5 91       	lpm	r26, Z+
     3fe:	b4 91       	lpm	r27, Z
     400:	ec 91       	ld	r30, X
     402:	ed 23       	and	r30, r29
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	09 f4       	brne	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	08 95       	ret
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	fa cf       	rjmp	.-12     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>

00000418 <digitalWrite>:
digitalWrite():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     41e:	28 2f       	mov	r18, r24
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	f9 01       	movw	r30, r18
     424:	ea 5d       	subi	r30, 0xDA	; 218
     426:	fe 4f       	sbci	r31, 0xFE	; 254
     428:	84 91       	lpm	r24, Z
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     42a:	f9 01       	movw	r30, r18
     42c:	ef 50       	subi	r30, 0x0F	; 15
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	d4 91       	lpm	r29, Z
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     432:	f9 01       	movw	r30, r18
     434:	e4 54       	subi	r30, 0x44	; 68
     436:	ff 4f       	sbci	r31, 0xFF	; 255
     438:	c4 91       	lpm	r28, Z
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     43a:	cc 23       	and	r28, r28
     43c:	a9 f0       	breq	.+42     	; 0x468 <digitalWrite+0x50>
     43e:	16 2f       	mov	r17, r22
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     440:	81 11       	cpse	r24, r1
     442:	0e 94 ae 01 	call	0x35c	; 0x35c <turnOffPWM>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     446:	ec 2f       	mov	r30, r28
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	ee 0f       	add	r30, r30
     44c:	ff 1f       	adc	r31, r31
     44e:	e4 56       	subi	r30, 0x64	; 100
     450:	ff 4f       	sbci	r31, 0xFF	; 255
     452:	a5 91       	lpm	r26, Z+
     454:	b4 91       	lpm	r27, Z
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     456:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     458:	f8 94       	cli
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     45a:	ec 91       	ld	r30, X
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     45c:	11 11       	cpse	r17, r1
     45e:	08 c0       	rjmp	.+16     	; 0x470 <digitalWrite+0x58>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     460:	d0 95       	com	r29
     462:	de 23       	and	r29, r30
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     464:	dc 93       	st	X, r29
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     466:	8f bf       	out	0x3f, r24	; 63
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	1f 91       	pop	r17
     46e:	08 95       	ret
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     470:	de 2b       	or	r29, r30
     472:	f8 cf       	rjmp	.-16     	; 0x464 <digitalWrite+0x4c>

00000474 <pinMode>:
pinMode():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	fc 01       	movw	r30, r24
     47c:	ef 50       	subi	r30, 0x0F	; 15
     47e:	ff 4f       	sbci	r31, 0xFF	; 255
     480:	24 91       	lpm	r18, Z
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     482:	84 54       	subi	r24, 0x44	; 68
     484:	9f 4f       	sbci	r25, 0xFF	; 255
     486:	fc 01       	movw	r30, r24
     488:	84 91       	lpm	r24, Z
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     48a:	88 23       	and	r24, r24
     48c:	c9 f0       	breq	.+50     	; 0x4c0 <pinMode+0x4c>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	fc 01       	movw	r30, r24
     496:	e4 57       	subi	r30, 0x74	; 116
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	a5 91       	lpm	r26, Z+
     49c:	b4 91       	lpm	r27, Z
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     49e:	fc 01       	movw	r30, r24
     4a0:	e4 56       	subi	r30, 0x64	; 100
     4a2:	ff 4f       	sbci	r31, 0xFF	; 255
     4a4:	c5 91       	lpm	r28, Z+
     4a6:	d4 91       	lpm	r29, Z
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     4a8:	61 11       	cpse	r22, r1
     4aa:	0d c0       	rjmp	.+26     	; 0x4c6 <pinMode+0x52>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     4ac:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     4ae:	f8 94       	cli
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     4b0:	8c 91       	ld	r24, X
     4b2:	20 95       	com	r18
     4b4:	82 23       	and	r24, r18
     4b6:	8c 93       	st	X, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     4b8:	88 81       	ld	r24, Y
     4ba:	28 23       	and	r18, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
     4bc:	28 83       	st	Y, r18
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
     4be:	9f bf       	out	0x3f, r25	; 63
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	08 95       	ret
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     4c6:	62 30       	cpi	r22, 0x02	; 2
     4c8:	51 f4       	brne	.+20     	; 0x4de <pinMode+0x6a>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
     4ca:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
     4cc:	f8 94       	cli
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
     4ce:	3c 91       	ld	r19, X
     4d0:	82 2f       	mov	r24, r18
     4d2:	80 95       	com	r24
     4d4:	83 23       	and	r24, r19
     4d6:	8c 93       	st	X, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
     4d8:	e8 81       	ld	r30, Y
     4da:	2e 2b       	or	r18, r30
     4dc:	ef cf       	rjmp	.-34     	; 0x4bc <pinMode+0x48>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     4de:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     4e0:	f8 94       	cli
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     4e2:	ec 91       	ld	r30, X
     4e4:	2e 2b       	or	r18, r30
     4e6:	2c 93       	st	X, r18
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     4e8:	8f bf       	out	0x3f, r24	; 63
     4ea:	ea cf       	rjmp	.-44     	; 0x4c0 <pinMode+0x4c>

000004ec <analogWrite>:
analogWrite():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:95
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	18 2f       	mov	r17, r24
     4f4:	eb 01       	movw	r28, r22
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:102
  if (val == 0)
     4fc:	20 97       	sbiw	r28, 0x00	; 0
     4fe:	39 f4       	brne	.+14     	; 0x50e <analogWrite+0x22>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:104
  {
    digitalWrite(pin, LOW);
     500:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:108
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
     502:	81 2f       	mov	r24, r17
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:299
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	1f 91       	pop	r17
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:108
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
     50a:	0c 94 0c 02 	jmp	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:106
  pinMode(pin, OUTPUT);
  if (val == 0)
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
     50e:	cf 3f       	cpi	r28, 0xFF	; 255
     510:	d1 05       	cpc	r29, r1
     512:	11 f4       	brne	.+4      	; 0x518 <analogWrite+0x2c>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:108
  {
    digitalWrite(pin, HIGH);
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	f5 cf       	rjmp	.-22     	; 0x502 <analogWrite+0x16>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:112
  }
  else
  {
    switch(digitalPinToTimer(pin))
     518:	e1 2f       	mov	r30, r17
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	ea 5d       	subi	r30, 0xDA	; 218
     51e:	fe 4f       	sbci	r31, 0xFE	; 254
     520:	e4 91       	lpm	r30, Z
     522:	e1 50       	subi	r30, 0x01	; 1
     524:	ec 30       	cpi	r30, 0x0C	; 12
     526:	08 f0       	brcs	.+2      	; 0x52a <analogWrite+0x3e>
     528:	50 c0       	rjmp	.+160    	; 0x5ca <analogWrite+0xde>
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	e6 56       	subi	r30, 0x66	; 102
     52e:	fd 4f       	sbci	r31, 0xFD	; 253
     530:	0c 94 73 36 	jmp	0x6ce6	; 0x6ce6 <__tablejump2__>
     534:	a6 02       	muls	r26, r22
     536:	a6 02       	muls	r26, r22
     538:	e5 02       	muls	r30, r21
     53a:	ae 02       	muls	r26, r30
     53c:	b4 02       	muls	r27, r20
     53e:	ba 02       	muls	r27, r26
     540:	c2 02       	muls	r28, r18
     542:	e5 02       	muls	r30, r21
     544:	e5 02       	muls	r30, r21
     546:	c7 02       	muls	r28, r23
     548:	d1 02       	muls	r29, r17
     54a:	db 02       	muls	r29, r27
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:124
        break;
        
      case TIMER0A:
        // connect pwm to pin on timer 0
        // this combination is for the ATmega8535, ATmega16 and ATmega32
        TCCR0 |= _BV(COM01);
     54c:	83 b7       	in	r24, 0x33	; 51
     54e:	80 62       	ori	r24, 0x20	; 32
     550:	83 bf       	out	0x33, r24	; 51
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:125
        OCR0 = val; // set pwm duty
     552:	c1 bf       	out	0x31, r28	; 49
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:299
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	1f 91       	pop	r17
     55a:	08 95       	ret
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:148
      #endif

      #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        // connect pwm to pin on timer 1, channel A
        TCCR1A |= _BV(COM1A1);
     55c:	8f b5       	in	r24, 0x2f	; 47
     55e:	80 68       	ori	r24, 0x80	; 128
     560:	8f bd       	out	0x2f, r24	; 47
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:149
        OCR1A = val; // set pwm duty
     562:	db bd       	out	0x2b, r29	; 43
     564:	ca bd       	out	0x2a, r28	; 42
     566:	f6 cf       	rjmp	.-20     	; 0x554 <analogWrite+0x68>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:156
      #endif

      #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1B1);
     568:	8f b5       	in	r24, 0x2f	; 47
     56a:	80 62       	ori	r24, 0x20	; 32
     56c:	8f bd       	out	0x2f, r24	; 47
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:157
        OCR1B = val; // set pwm duty
     56e:	d9 bd       	out	0x29, r29	; 41
     570:	c8 bd       	out	0x28, r28	; 40
     572:	f0 cf       	rjmp	.-32     	; 0x554 <analogWrite+0x68>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:164
      #endif

      #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1C1);
     574:	8f b5       	in	r24, 0x2f	; 47
     576:	88 60       	ori	r24, 0x08	; 8
     578:	8f bd       	out	0x2f, r24	; 47
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:165
        OCR1C = val; // set pwm duty
     57a:	d0 93 79 00 	sts	0x0079, r29	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     57e:	c0 93 78 00 	sts	0x0078, r28	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     582:	e8 cf       	rjmp	.-48     	; 0x554 <analogWrite+0x68>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:172
      #endif

      #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        // connect pwm to pin on timer 2
        TCCR2 |= _BV(COM21);
     584:	85 b5       	in	r24, 0x25	; 37
     586:	80 62       	ori	r24, 0x20	; 32
     588:	85 bd       	out	0x25, r24	; 37
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:173
        OCR2 = val; // set pwm duty
     58a:	c3 bd       	out	0x23, r28	; 35
     58c:	e3 cf       	rjmp	.-58     	; 0x554 <analogWrite+0x68>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:196
      #endif

      #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        // connect pwm to pin on timer 3, channel A
        TCCR3A |= _BV(COM3A1);
     58e:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     592:	80 68       	ori	r24, 0x80	; 128
     594:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:197
        OCR3A = val; // set pwm duty
     598:	d0 93 87 00 	sts	0x0087, r29	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     59c:	c0 93 86 00 	sts	0x0086, r28	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     5a0:	d9 cf       	rjmp	.-78     	; 0x554 <analogWrite+0x68>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:209
        #if defined(__AVR_ATmega328PB__) // Fix 324PB/328PB silicon bug
          PORTD |= _BV(PD2);
        #elif defined(__AVR_ATmega324PB__)
          PORTB |= _BV(PB7);
        #endif
        TCCR3A |= _BV(COM3B1);
     5a2:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     5a6:	80 62       	ori	r24, 0x20	; 32
     5a8:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:210
        OCR3B = val; // set pwm duty
     5ac:	d0 93 85 00 	sts	0x0085, r29	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     5b0:	c0 93 84 00 	sts	0x0084, r28	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     5b4:	cf cf       	rjmp	.-98     	; 0x554 <analogWrite+0x68>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:217
      #endif

      #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        // connect pwm to pin on timer 3, channel C
        TCCR3A |= _BV(COM3C1);
     5b6:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     5ba:	88 60       	ori	r24, 0x08	; 8
     5bc:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:218
        OCR3C = val; // set pwm duty
     5c0:	d0 93 83 00 	sts	0x0083, r29	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     5c4:	c0 93 82 00 	sts	0x0082, r28	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     5c8:	c5 cf       	rjmp	.-118    	; 0x554 <analogWrite+0x68>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:292
        break;
      #endif

      case NOT_ON_TIMER:
      default:
        if (val < 128) {
     5ca:	c0 38       	cpi	r28, 0x80	; 128
     5cc:	d1 05       	cpc	r29, r1
     5ce:	0c f0       	brlt	.+2      	; 0x5d2 <analogWrite+0xe6>
     5d0:	a1 cf       	rjmp	.-190    	; 0x514 <analogWrite+0x28>
     5d2:	96 cf       	rjmp	.-212    	; 0x500 <analogWrite+0x14>

000005d4 <analogRead>:
analogRead():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:49
int analogRead(uint8_t pin)
{

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
     5d4:	8d 52       	subi	r24, 0x2D	; 45
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
     5d6:	80 64       	ori	r24, 0x40	; 64
     5d8:	87 b9       	out	0x07, r24	; 7
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
     5da:	36 9a       	sbi	0x06, 6	; 6
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
     5dc:	36 99       	sbic	0x06, 6	; 6
     5de:	fe cf       	rjmp	.-4      	; 0x5dc <analogRead+0x8>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
     5e0:	84 b1       	in	r24, 0x04	; 4
     5e2:	95 b1       	in	r25, 0x05	; 5
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_analog.c:87
#else
  return 0;
#endif
}
     5e4:	08 95       	ret

000005e6 <delayMicroseconds>:
delayMicroseconds():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:679
  // us is at least 6 so we can substract 5
  us -= 5; // = 2 cycles

#elif F_CPU >= 11059200L
  // the overhead of the function call is 14 (16) cycles which is ~1.3 us
  if (us <= 2) return; // = 3 cycles, (4 when true)
     5e6:	83 30       	cpi	r24, 0x03	; 3
     5e8:	91 05       	cpc	r25, r1
     5ea:	88 f0       	brcs	.+34     	; 0x60e <delayMicroseconds+0x28>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:681

  us = (us << 1) + us; // x3 us, = 5 cycles
     5ec:	9c 01       	movw	r18, r24
     5ee:	22 0f       	add	r18, r18
     5f0:	33 1f       	adc	r19, r19
     5f2:	28 0f       	add	r18, r24
     5f4:	39 1f       	adc	r19, r25
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:703
    // account for the time taken in the preceeding commands.
    // we just burned 27 (29) cycles above, remove 7 (7*4=28),
    // us is at least 9, so we may subtract without rollunder

             // 1 cycle when if jump here
    us -= 7; // 2 cycles
     5f6:	c9 01       	movw	r24, r18
     5f8:	07 97       	sbiw	r24, 0x07	; 7
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:685

  us = (us << 1) + us; // x3 us, = 5 cycles

                       // +1 cycle (register save)
  // user wants to wait longer than 5 us
  if (us > 15) // = 3 cycles
     5fa:	20 31       	cpi	r18, 0x10	; 16
     5fc:	31 05       	cpc	r19, r1
     5fe:	28 f0       	brcs	.+10     	; 0x60a <delayMicroseconds+0x24>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:689
  {
    // since the loop is not accurately 1/3 of a microsecond we need
    // to multiply us by 0.9216 (11.0592 / 12)
    us = (us * 60398UL) >> 16;  // x0.9216 us = 29 cycles (60398 = 0.9216 x 0x10000L)
     600:	ae ee       	ldi	r26, 0xEE	; 238
     602:	bb ee       	ldi	r27, 0xEB	; 235
     604:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <__umulhisi3>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:694
    // this drops us to at least 14

    // account for the time taken in the preceeding commands.
    // we just burned 53 (55) cycles above, remove 13, (13*4=52)
    us -= 13; // = 2 cycles
     608:	0d 97       	sbiw	r24, 0x0d	; 13
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	f1 f7       	brne	.-4      	; 0x60a <delayMicroseconds+0x24>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     60e:	08 95       	ret

00000610 <micros>:
micros():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:229
  SREG = oldSREG;

  return m;
}

unsigned long micros() {
     610:	cf 92       	push	r12
     612:	df 92       	push	r13
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     618:	6f b7       	in	r22, 0x3f	; 63
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     61a:	f8 94       	cli
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:244

#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
     61c:	80 91 e9 08 	lds	r24, 0x08E9	; 0x8008e9 <timer0_millis>
     620:	90 91 ea 08 	lds	r25, 0x08EA	; 0x8008ea <timer0_millis+0x1>
     624:	a0 91 eb 08 	lds	r26, 0x08EB	; 0x8008eb <timer0_millis+0x2>
     628:	b0 91 ec 08 	lds	r27, 0x08EC	; 0x8008ec <timer0_millis+0x3>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:245
  f = timer0_fract;
     62c:	50 91 e8 08 	lds	r21, 0x08E8	; 0x8008e8 <timer0_fract>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:252
  m = timer0_overflow_count;
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     630:	22 b7       	in	r18, 0x32	; 50
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:268
    m++;
#else
    q = 1;
#endif
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
     632:	36 b7       	in	r19, 0x36	; 54
     634:	43 2f       	mov	r20, r19
     636:	41 70       	andi	r20, 0x01	; 1
     638:	30 ff       	sbrs	r19, 0
     63a:	04 c0       	rjmp	.+8      	; 0x644 <micros+0x34>
     63c:	41 e0       	ldi	r20, 0x01	; 1
     63e:	2f 3f       	cpi	r18, 0xFF	; 255
     640:	09 f4       	brne	.+2      	; 0x644 <micros+0x34>
     642:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     644:	6f bf       	out	0x3f, r22	; 63
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:286
     Basically we multiply by 1000 and add the scaled timer.

     The leading part by m and f is long-term accurate.
     For the timer we just need to be close from below.
     Must never be too high, or micros jumps backwards. */
  m = (((m << 7) - (m << 1) - m + f) << 3) +
     646:	6c 01       	movw	r12, r24
     648:	7d 01       	movw	r14, r26
     64a:	37 e0       	ldi	r19, 0x07	; 7
     64c:	cc 0c       	add	r12, r12
     64e:	dd 1c       	adc	r13, r13
     650:	ee 1c       	adc	r14, r14
     652:	ff 1c       	adc	r15, r15
     654:	3a 95       	dec	r19
     656:	d1 f7       	brne	.-12     	; 0x64c <micros+0x3c>
     658:	c5 0e       	add	r12, r21
     65a:	d1 1c       	adc	r13, r1
     65c:	e1 1c       	adc	r14, r1
     65e:	f1 1c       	adc	r15, r1
     660:	c8 1a       	sub	r12, r24
     662:	d9 0a       	sbc	r13, r25
     664:	ea 0a       	sbc	r14, r26
     666:	fb 0a       	sbc	r15, r27
     668:	88 0f       	add	r24, r24
     66a:	99 1f       	adc	r25, r25
     66c:	aa 1f       	adc	r26, r26
     66e:	bb 1f       	adc	r27, r27
     670:	c8 1a       	sub	r12, r24
     672:	d9 0a       	sbc	r13, r25
     674:	ea 0a       	sbc	r14, r26
     676:	fb 0a       	sbc	r15, r27
     678:	63 e0       	ldi	r22, 0x03	; 3
     67a:	cc 0c       	add	r12, r12
     67c:	dd 1c       	adc	r13, r13
     67e:	ee 1c       	adc	r14, r14
     680:	ff 1c       	adc	r15, r15
     682:	6a 95       	dec	r22
     684:	d1 f7       	brne	.-12     	; 0x67a <micros+0x6a>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:287
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	a9 ec       	ldi	r26, 0xC9	; 201
     68a:	b5 e0       	ldi	r27, 0x05	; 5
     68c:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <__umulhisi3>
     690:	67 2f       	mov	r22, r23
     692:	78 2f       	mov	r23, r24
     694:	89 2f       	mov	r24, r25
     696:	99 27       	eor	r25, r25
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:286
     Basically we multiply by 1000 and add the scaled timer.

     The leading part by m and f is long-term accurate.
     For the timer we just need to be close from below.
     Must never be too high, or micros jumps backwards. */
  m = (((m << 7) - (m << 1) - m + f) << 3) +
     698:	6c 0d       	add	r22, r12
     69a:	7d 1d       	adc	r23, r13
     69c:	8e 1d       	adc	r24, r14
     69e:	9f 1d       	adc	r25, r15
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:288
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
     6a0:	44 23       	and	r20, r20
     6a2:	21 f0       	breq	.+8      	; 0x6ac <micros+0x9c>
     6a4:	67 53       	subi	r22, 0x37	; 55
     6a6:	7a 4f       	sbci	r23, 0xFA	; 250
     6a8:	8f 4f       	sbci	r24, 0xFF	; 255
     6aa:	9f 4f       	sbci	r25, 0xFF	; 255
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	df 90       	pop	r13
     6b2:	cf 90       	pop	r12
     6b4:	08 95       	ret

000006b6 <delay>:
delay():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     6b6:	8f 92       	push	r8
     6b8:	9f 92       	push	r9
     6ba:	af 92       	push	r10
     6bc:	bf 92       	push	r11
     6be:	cf 92       	push	r12
     6c0:	df 92       	push	r13
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	4b 01       	movw	r8, r22
     6c8:	5c 01       	movw	r10, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     6ca:	0e 94 08 03 	call	0x610	; 0x610 <micros>
     6ce:	6b 01       	movw	r12, r22
     6d0:	7c 01       	movw	r14, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     6d2:	0e 94 08 03 	call	0x610	; 0x610 <micros>
     6d6:	6c 19       	sub	r22, r12
     6d8:	7d 09       	sbc	r23, r13
     6da:	8e 09       	sbc	r24, r14
     6dc:	9f 09       	sbc	r25, r15
     6de:	68 3e       	cpi	r22, 0xE8	; 232
     6e0:	73 40       	sbci	r23, 0x03	; 3
     6e2:	81 05       	cpc	r24, r1
     6e4:	91 05       	cpc	r25, r1
     6e6:	a8 f3       	brcs	.-22     	; 0x6d2 <delay+0x1c>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     6e8:	21 e0       	ldi	r18, 0x01	; 1
     6ea:	82 1a       	sub	r8, r18
     6ec:	91 08       	sbc	r9, r1
     6ee:	a1 08       	sbc	r10, r1
     6f0:	b1 08       	sbc	r11, r1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     6f2:	88 ee       	ldi	r24, 0xE8	; 232
     6f4:	c8 0e       	add	r12, r24
     6f6:	83 e0       	ldi	r24, 0x03	; 3
     6f8:	d8 1e       	adc	r13, r24
     6fa:	e1 1c       	adc	r14, r1
     6fc:	f1 1c       	adc	r15, r1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     6fe:	81 14       	cp	r8, r1
     700:	91 04       	cpc	r9, r1
     702:	a1 04       	cpc	r10, r1
     704:	b1 04       	cpc	r11, r1
     706:	29 f7       	brne	.-54     	; 0x6d2 <delay+0x1c>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	df 90       	pop	r13
     70e:	cf 90       	pop	r12
     710:	bf 90       	pop	r11
     712:	af 90       	pop	r10
     714:	9f 90       	pop	r9
     716:	8f 90       	pop	r8
     718:	08 95       	ret

0000071a <TwoWire::onRequestService()>:
onRequestService():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:368
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
     71a:	08 95       	ret

0000071c <TwoWire::onReceiveService(unsigned char*, int)>:
onReceiveService():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:353
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
     71c:	08 95       	ret

0000071e <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     71e:	af 92       	push	r10
     720:	bf 92       	push	r11
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	6c 01       	movw	r12, r24
     734:	7b 01       	movw	r14, r22
     736:	8b 01       	movw	r16, r22
     738:	04 0f       	add	r16, r20
     73a:	15 1f       	adc	r17, r21
     73c:	eb 01       	movw	r28, r22
     73e:	5e 01       	movw	r10, r28
     740:	ae 18       	sub	r10, r14
     742:	bf 08       	sbc	r11, r15
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     744:	c0 17       	cp	r28, r16
     746:	d1 07       	cpc	r29, r17
     748:	59 f0       	breq	.+22     	; 0x760 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     74a:	69 91       	ld	r22, Y+
     74c:	d6 01       	movw	r26, r12
     74e:	ed 91       	ld	r30, X+
     750:	fc 91       	ld	r31, X
     752:	01 90       	ld	r0, Z+
     754:	f0 81       	ld	r31, Z
     756:	e0 2d       	mov	r30, r0
     758:	c6 01       	movw	r24, r12
     75a:	09 95       	icall
     75c:	89 2b       	or	r24, r25
     75e:	79 f7       	brne	.-34     	; 0x73e <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     760:	c5 01       	movw	r24, r10
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	ff 90       	pop	r15
     76c:	ef 90       	pop	r14
     76e:	df 90       	pop	r13
     770:	cf 90       	pop	r12
     772:	bf 90       	pop	r11
     774:	af 90       	pop	r10
     776:	08 95       	ret

00000778 <HardwareSerial::availableForWrite()>:
availableForWrite():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     778:	fc 01       	movw	r30, r24
     77a:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     77c:	44 8d       	ldd	r20, Z+28	; 0x1c
     77e:	25 2f       	mov	r18, r21
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	84 2f       	mov	r24, r20
     784:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     786:	82 1b       	sub	r24, r18
     788:	93 0b       	sbc	r25, r19
     78a:	54 17       	cp	r21, r20
     78c:	10 f0       	brcs	.+4      	; 0x792 <HardwareSerial::availableForWrite()+0x1a>
     78e:	cf 96       	adiw	r24, 0x3f	; 63
     790:	08 95       	ret
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     792:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     794:	08 95       	ret

00000796 <HardwareSerial::read()>:
read():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     796:	fc 01       	movw	r30, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     798:	91 8d       	ldd	r25, Z+25	; 0x19
     79a:	82 8d       	ldd	r24, Z+26	; 0x1a
     79c:	98 17       	cp	r25, r24
     79e:	61 f0       	breq	.+24     	; 0x7b8 <HardwareSerial::read()+0x22>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     7a0:	a2 8d       	ldd	r26, Z+26	; 0x1a
     7a2:	ae 0f       	add	r26, r30
     7a4:	bf 2f       	mov	r27, r31
     7a6:	b1 1d       	adc	r27, r1
     7a8:	5d 96       	adiw	r26, 0x1d	; 29
     7aa:	8c 91       	ld	r24, X
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     7ac:	92 8d       	ldd	r25, Z+26	; 0x1a
     7ae:	9f 5f       	subi	r25, 0xFF	; 255
     7b0:	9f 73       	andi	r25, 0x3F	; 63
     7b2:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	08 95       	ret
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     7b8:	8f ef       	ldi	r24, 0xFF	; 255
     7ba:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     7bc:	08 95       	ret

000007be <HardwareSerial::peek()>:
peek():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     7be:	fc 01       	movw	r30, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     7c0:	91 8d       	ldd	r25, Z+25	; 0x19
     7c2:	82 8d       	ldd	r24, Z+26	; 0x1a
     7c4:	98 17       	cp	r25, r24
     7c6:	31 f0       	breq	.+12     	; 0x7d4 <HardwareSerial::peek()+0x16>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     7c8:	82 8d       	ldd	r24, Z+26	; 0x1a
     7ca:	e8 0f       	add	r30, r24
     7cc:	f1 1d       	adc	r31, r1
     7ce:	85 8d       	ldd	r24, Z+29	; 0x1d
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	08 95       	ret
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     7d4:	8f ef       	ldi	r24, 0xFF	; 255
     7d6:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     7d8:	08 95       	ret

000007da <HardwareSerial::available()>:
available():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     7da:	fc 01       	movw	r30, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     7dc:	91 8d       	ldd	r25, Z+25	; 0x19
     7de:	22 8d       	ldd	r18, Z+26	; 0x1a
     7e0:	89 2f       	mov	r24, r25
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	80 5c       	subi	r24, 0xC0	; 192
     7e6:	9f 4f       	sbci	r25, 0xFF	; 255
     7e8:	82 1b       	sub	r24, r18
     7ea:	91 09       	sbc	r25, r1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     7ec:	8f 73       	andi	r24, 0x3F	; 63
     7ee:	99 27       	eor	r25, r25
     7f0:	08 95       	ret

000007f2 <Serial1_available()>:
Serial1_available():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:68
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
     7f2:	88 e7       	ldi	r24, 0x78	; 120
     7f4:	99 e0       	ldi	r25, 0x09	; 9
     7f6:	0e 94 ed 03 	call	0x7da	; 0x7da <HardwareSerial::available()>
     7fa:	21 e0       	ldi	r18, 0x01	; 1
     7fc:	89 2b       	or	r24, r25
     7fe:	09 f4       	brne	.+2      	; 0x802 <Serial1_available()+0x10>
     800:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
}
     802:	82 2f       	mov	r24, r18
     804:	08 95       	ret

00000806 <Serial0_available()>:
Serial0_available():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     806:	85 e1       	ldi	r24, 0x15	; 21
     808:	9a e0       	ldi	r25, 0x0A	; 10
     80a:	0e 94 ed 03 	call	0x7da	; 0x7da <HardwareSerial::available()>
     80e:	21 e0       	ldi	r18, 0x01	; 1
     810:	89 2b       	or	r24, r25
     812:	09 f4       	brne	.+2      	; 0x816 <Serial0_available()+0x10>
     814:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     816:	82 2f       	mov	r24, r18
     818:	08 95       	ret

0000081a <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     81a:	fc 01       	movw	r30, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     81c:	a4 8d       	ldd	r26, Z+28	; 0x1c
     81e:	a8 0f       	add	r26, r24
     820:	b9 2f       	mov	r27, r25
     822:	b1 1d       	adc	r27, r1
     824:	a3 5a       	subi	r26, 0xA3	; 163
     826:	bf 4f       	sbci	r27, 0xFF	; 255
     828:	2c 91       	ld	r18, X
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     82a:	84 8d       	ldd	r24, Z+28	; 0x1c
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	8f 73       	andi	r24, 0x3F	; 63
     832:	99 27       	eor	r25, r25
     834:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     836:	a6 89       	ldd	r26, Z+22	; 0x16
     838:	b7 89       	ldd	r27, Z+23	; 0x17
     83a:	2c 93       	st	X, r18
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     83c:	a0 89       	ldd	r26, Z+16	; 0x10
     83e:	b1 89       	ldd	r27, Z+17	; 0x11
     840:	8c 91       	ld	r24, X
     842:	83 70       	andi	r24, 0x03	; 3
     844:	80 64       	ori	r24, 0x40	; 64
     846:	8c 93       	st	X, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     848:	93 8d       	ldd	r25, Z+27	; 0x1b
     84a:	84 8d       	ldd	r24, Z+28	; 0x1c
     84c:	98 13       	cpse	r25, r24
     84e:	06 c0       	rjmp	.+12     	; 0x85c <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     850:	02 88       	ldd	r0, Z+18	; 0x12
     852:	f3 89       	ldd	r31, Z+19	; 0x13
     854:	e0 2d       	mov	r30, r0
     856:	80 81       	ld	r24, Z
     858:	8f 7d       	andi	r24, 0xDF	; 223
     85a:	80 83       	st	Z, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     85c:	08 95       	ret

0000085e <HardwareSerial::write(unsigned char)>:
write():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     85e:	ef 92       	push	r14
     860:	ff 92       	push	r15
     862:	0f 93       	push	r16
     864:	1f 93       	push	r17
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	ec 01       	movw	r28, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     870:	9b 8d       	ldd	r25, Y+27	; 0x1b
     872:	8c 8d       	ldd	r24, Y+28	; 0x1c
     874:	98 13       	cpse	r25, r24
     876:	1a c0       	rjmp	.+52     	; 0x8ac <HardwareSerial::write(unsigned char)+0x4e>
     878:	e8 89       	ldd	r30, Y+16	; 0x10
     87a:	f9 89       	ldd	r31, Y+17	; 0x11
     87c:	80 81       	ld	r24, Z
     87e:	85 ff       	sbrs	r24, 5
     880:	15 c0       	rjmp	.+42     	; 0x8ac <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     882:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\ryan\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     884:	f8 94       	cli
write():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     886:	ee 89       	ldd	r30, Y+22	; 0x16
     888:	ff 89       	ldd	r31, Y+23	; 0x17
     88a:	60 83       	st	Z, r22
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     88c:	e8 89       	ldd	r30, Y+16	; 0x10
     88e:	f9 89       	ldd	r31, Y+17	; 0x11
     890:	80 81       	ld	r24, Z
     892:	83 70       	andi	r24, 0x03	; 3
     894:	80 64       	ori	r24, 0x40	; 64
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     896:	80 83       	st	Z, r24
__iRestore():
c:\users\ryan\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     898:	9f bf       	out	0x3f, r25	; 63
write():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	ff 90       	pop	r15
     8a8:	ef 90       	pop	r14
     8aa:	08 95       	ret
     8ac:	f6 2e       	mov	r15, r22
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     8ae:	0b 8d       	ldd	r16, Y+27	; 0x1b
     8b0:	10 e0       	ldi	r17, 0x00	; 0
     8b2:	0f 5f       	subi	r16, 0xFF	; 255
     8b4:	1f 4f       	sbci	r17, 0xFF	; 255
     8b6:	0f 73       	andi	r16, 0x3F	; 63
     8b8:	11 27       	eor	r17, r17
     8ba:	e0 2e       	mov	r14, r16
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     8bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8be:	8e 11       	cpse	r24, r14
     8c0:	0c c0       	rjmp	.+24     	; 0x8da <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	07 fc       	sbrc	r0, 7
     8c6:	fa cf       	rjmp	.-12     	; 0x8bc <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     8c8:	e8 89       	ldd	r30, Y+16	; 0x10
     8ca:	f9 89       	ldd	r31, Y+17	; 0x11
     8cc:	80 81       	ld	r24, Z
     8ce:	85 ff       	sbrs	r24, 5
     8d0:	f5 cf       	rjmp	.-22     	; 0x8bc <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     8d2:	ce 01       	movw	r24, r28
     8d4:	0e 94 0d 04 	call	0x81a	; 0x81a <HardwareSerial::_tx_udr_empty_irq()>
     8d8:	f1 cf       	rjmp	.-30     	; 0x8bc <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     8da:	eb 8d       	ldd	r30, Y+27	; 0x1b
     8dc:	ec 0f       	add	r30, r28
     8de:	fd 2f       	mov	r31, r29
     8e0:	f1 1d       	adc	r31, r1
     8e2:	e3 5a       	subi	r30, 0xA3	; 163
     8e4:	ff 4f       	sbci	r31, 0xFF	; 255
     8e6:	f0 82       	st	Z, r15
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     8e8:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\ryan\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8ea:	f8 94       	cli
write():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     8ec:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     8ee:	ea 89       	ldd	r30, Y+18	; 0x12
     8f0:	fb 89       	ldd	r31, Y+19	; 0x13
     8f2:	80 81       	ld	r24, Z
     8f4:	80 62       	ori	r24, 0x20	; 32
     8f6:	cf cf       	rjmp	.-98     	; 0x896 <HardwareSerial::write(unsigned char)+0x38>

000008f8 <HardwareSerial::flush()>:
flush():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	ec 01       	movw	r28, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     8fe:	88 8d       	ldd	r24, Y+24	; 0x18
     900:	88 23       	and	r24, r24
     902:	b9 f0       	breq	.+46     	; 0x932 <HardwareSerial::flush()+0x3a>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     904:	aa 89       	ldd	r26, Y+18	; 0x12
     906:	bb 89       	ldd	r27, Y+19	; 0x13
     908:	e8 89       	ldd	r30, Y+16	; 0x10
     90a:	f9 89       	ldd	r31, Y+17	; 0x11
     90c:	8c 91       	ld	r24, X
     90e:	85 fd       	sbrc	r24, 5
     910:	03 c0       	rjmp	.+6      	; 0x918 <HardwareSerial::flush()+0x20>
     912:	80 81       	ld	r24, Z
     914:	86 fd       	sbrc	r24, 6
     916:	0d c0       	rjmp	.+26     	; 0x932 <HardwareSerial::flush()+0x3a>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	07 fc       	sbrc	r0, 7
     91c:	f7 cf       	rjmp	.-18     	; 0x90c <HardwareSerial::flush()+0x14>
     91e:	8c 91       	ld	r24, X
     920:	85 ff       	sbrs	r24, 5
     922:	f2 cf       	rjmp	.-28     	; 0x908 <HardwareSerial::flush()+0x10>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     924:	80 81       	ld	r24, Z
     926:	85 ff       	sbrs	r24, 5
     928:	ed cf       	rjmp	.-38     	; 0x904 <HardwareSerial::flush()+0xc>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     92a:	ce 01       	movw	r24, r28
     92c:	0e 94 0d 04 	call	0x81a	; 0x81a <HardwareSerial::_tx_udr_empty_irq()>
     930:	e9 cf       	rjmp	.-46     	; 0x904 <HardwareSerial::flush()+0xc>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <serialEventRun()>:
serialEventRun():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	89 2b       	or	r24, r25
     93e:	29 f0       	breq	.+10     	; 0x94a <serialEventRun()+0x12>
     940:	0e 94 03 04 	call	0x806	; 0x806 <Serial0_available()>
     944:	81 11       	cpse	r24, r1
     946:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	89 2b       	or	r24, r25
     950:	29 f0       	breq	.+10     	; 0x95c <serialEventRun()+0x24>
     952:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <Serial1_available()>
     956:	81 11       	cpse	r24, r1
     958:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     95c:	08 95       	ret

0000095e <twi_stop>:
twi_stop():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:430
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     95e:	85 ed       	ldi	r24, 0xD5	; 213
     960:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:450
          return;
        }
      }
    }
  #else
    while(TWCR & _BV(TWSTO)){
     964:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     968:	84 fd       	sbrc	r24, 4
     96a:	fc cf       	rjmp	.-8      	; 0x964 <twi_stop+0x6>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:456
      continue;
    }
  #endif

  // update twi state
  twi_state = TWI_READY;
     96c:	10 92 f5 08 	sts	0x08F5, r1	; 0x8008f5 <twi_state>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:457
}
     970:	08 95       	ret

00000972 <twi_transmit>:
twi_transmit():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:365
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     972:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <twi_txBufferLength>
     976:	26 0f       	add	r18, r22
     978:	33 27       	eor	r19, r19
     97a:	33 1f       	adc	r19, r19
     97c:	21 32       	cpi	r18, 0x21	; 33
     97e:	31 05       	cpc	r19, r1
     980:	ec f4       	brge	.+58     	; 0x9bc <twi_transmit+0x4a>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:370
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     982:	20 91 f5 08 	lds	r18, 0x08F5	; 0x8008f5 <twi_state>
     986:	fc 01       	movw	r30, r24
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	24 30       	cpi	r18, 0x04	; 4
     98e:	69 f0       	breq	.+26     	; 0x9aa <twi_transmit+0x38>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:371
    return 2;
     990:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:381
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     992:	08 95       	ret
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:376
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     994:	a0 91 a0 08 	lds	r26, 0x08A0	; 0x8008a0 <twi_txBufferLength>
     998:	21 91       	ld	r18, Z+
     99a:	ac 01       	movw	r20, r24
     99c:	40 58       	subi	r20, 0x80	; 128
     99e:	57 4f       	sbci	r21, 0xF7	; 247
     9a0:	a4 0f       	add	r26, r20
     9a2:	b5 2f       	mov	r27, r21
     9a4:	b1 1d       	adc	r27, r1
     9a6:	2c 93       	st	X, r18
     9a8:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:375
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     9aa:	86 17       	cp	r24, r22
     9ac:	98 f3       	brcs	.-26     	; 0x994 <twi_transmit+0x22>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:378
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     9ae:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <twi_txBufferLength>
     9b2:	68 0f       	add	r22, r24
     9b4:	60 93 a0 08 	sts	0x08A0, r22	; 0x8008a0 <twi_txBufferLength>
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	08 95       	ret
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:366
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	08 95       	ret

000009c0 <TwoWire::flush()>:
flush():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:328
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     9c0:	08 95       	ret

000009c2 <TwoWire::peek()>:
peek():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:318
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
     9c2:	e0 91 3b 09 	lds	r30, 0x093B	; 0x80093b <TwoWire::rxBufferIndex>
     9c6:	80 91 3a 09 	lds	r24, 0x093A	; 0x80093a <TwoWire::rxBufferLength>
     9ca:	e8 17       	cp	r30, r24
     9cc:	30 f4       	brcc	.+12     	; 0x9da <TwoWire::peek()+0x18>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:319
    value = rxBuffer[rxBufferIndex];
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	e6 5e       	subi	r30, 0xE6	; 230
     9d2:	f6 4f       	sbci	r31, 0xF6	; 246
     9d4:	80 81       	ld	r24, Z
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	08 95       	ret
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:316
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
     9da:	8f ef       	ldi	r24, 0xFF	; 255
     9dc:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:323
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     9de:	08 95       	ret

000009e0 <TwoWire::available()>:
available():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:292
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     9e0:	80 91 3a 09 	lds	r24, 0x093A	; 0x80093a <TwoWire::rxBufferLength>
     9e4:	90 91 3b 09 	lds	r25, 0x093B	; 0x80093b <TwoWire::rxBufferIndex>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:293
}
     9e8:	89 1b       	sub	r24, r25
     9ea:	99 0b       	sbc	r25, r25
     9ec:	08 95       	ret

000009ee <TwoWire::write(unsigned char const*, unsigned int)>:
write():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:273

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     9ee:	cf 92       	push	r12
     9f0:	df 92       	push	r13
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	7c 01       	movw	r14, r24
     a00:	cb 01       	movw	r24, r22
     a02:	8a 01       	movw	r16, r20
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:274
  if(transmitting){
     a04:	20 91 f6 08 	lds	r18, 0x08F6	; 0x8008f6 <TwoWire::transmitting>
     a08:	22 23       	and	r18, r18
     a0a:	89 f0       	breq	.+34     	; 0xa2e <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     a0c:	eb 01       	movw	r28, r22
     a0e:	6b 01       	movw	r12, r22
     a10:	c4 0e       	add	r12, r20
     a12:	d5 1e       	adc	r13, r21
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:276
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     a14:	cc 15       	cp	r28, r12
     a16:	dd 05       	cpc	r29, r13
     a18:	69 f0       	breq	.+26     	; 0xa34 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:277
      write(data[i]);
     a1a:	69 91       	ld	r22, Y+
     a1c:	d7 01       	movw	r26, r14
     a1e:	ed 91       	ld	r30, X+
     a20:	fc 91       	ld	r31, X
     a22:	01 90       	ld	r0, Z+
     a24:	f0 81       	ld	r31, Z
     a26:	e0 2d       	mov	r30, r0
     a28:	c7 01       	movw	r24, r14
     a2a:	09 95       	icall
     a2c:	f3 cf       	rjmp	.-26     	; 0xa14 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:282
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     a2e:	64 2f       	mov	r22, r20
     a30:	0e 94 b9 04 	call	0x972	; 0x972 <twi_transmit>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:285
  }
  return quantity;
}
     a34:	c8 01       	movw	r24, r16
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	ff 90       	pop	r15
     a40:	ef 90       	pop	r14
     a42:	df 90       	pop	r13
     a44:	cf 90       	pop	r12
     a46:	08 95       	ret

00000a48 <TwoWire::write(unsigned char)>:
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:248

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	1f 92       	push	r1
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	69 83       	std	Y+1, r22	; 0x01
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:249
  if(transmitting){
     a54:	20 91 f6 08 	lds	r18, 0x08F6	; 0x8008f6 <TwoWire::transmitting>
     a58:	22 23       	and	r18, r18
     a5a:	f9 f0       	breq	.+62     	; 0xa9a <TwoWire::write(unsigned char)+0x52>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:252
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
     a5c:	20 91 19 09 	lds	r18, 0x0919	; 0x800919 <TwoWire::txBufferLength>
     a60:	20 32       	cpi	r18, 0x20	; 32
     a62:	58 f0       	brcs	.+22     	; 0xa7a <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     a64:	21 e0       	ldi	r18, 0x01	; 1
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	fc 01       	movw	r30, r24
     a6a:	33 83       	std	Z+3, r19	; 0x03
     a6c:	22 83       	std	Z+2, r18	; 0x02
write():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:254
      setWriteError();
      return 0;
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:267
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
     a72:	0f 90       	pop	r0
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	08 95       	ret
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:257
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     a7a:	80 91 f7 08 	lds	r24, 0x08F7	; 0x8008f7 <TwoWire::txBufferIndex>
     a7e:	e8 2f       	mov	r30, r24
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	e8 50       	subi	r30, 0x08	; 8
     a84:	f7 4f       	sbci	r31, 0xF7	; 247
     a86:	99 81       	ldd	r25, Y+1	; 0x01
     a88:	90 83       	st	Z, r25
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:258
    ++txBufferIndex;
     a8a:	8f 5f       	subi	r24, 0xFF	; 255
     a8c:	80 93 f7 08 	sts	0x08F7, r24	; 0x8008f7 <TwoWire::txBufferIndex>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:260
    // update amount in buffer
    txBufferLength = txBufferIndex;
     a90:	80 93 19 09 	sts	0x0919, r24	; 0x800919 <TwoWire::txBufferLength>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:266
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	ec cf       	rjmp	.-40     	; 0xa72 <TwoWire::write(unsigned char)+0x2a>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:264
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     a9a:	61 e0       	ldi	r22, 0x01	; 1
     a9c:	ce 01       	movw	r24, r28
     a9e:	01 96       	adiw	r24, 0x01	; 1
     aa0:	0e 94 b9 04 	call	0x972	; 0x972 <twi_transmit>
     aa4:	f7 cf       	rjmp	.-18     	; 0xa94 <TwoWire::write(unsigned char)+0x4c>

00000aa6 <LiquidCrystal::pulseEnable()>:
pulseEnable():
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:303
    write4bits(value>>4);
    write4bits(value);
  }
}

void LiquidCrystal::pulseEnable(void) {
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	ec 01       	movw	r28, r24
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:304
  digitalWrite(_enable_pin, LOW);
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	8e 81       	ldd	r24, Y+6	; 0x06
     ab0:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:305
  delayMicroseconds(1);    
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <delayMicroseconds>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:306
  digitalWrite(_enable_pin, HIGH);
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	8e 81       	ldd	r24, Y+6	; 0x06
     ac0:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:307
  delayMicroseconds(1);    // enable pulse must be >450ns
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <delayMicroseconds>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:308
  digitalWrite(_enable_pin, LOW);
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	8e 81       	ldd	r24, Y+6	; 0x06
     ad0:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:309
  delayMicroseconds(100);   // commands need > 37us to settle
     ad4:	84 e6       	ldi	r24, 0x64	; 100
     ad6:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:310
}
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:309
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(1);    
  digitalWrite(_enable_pin, HIGH);
  delayMicroseconds(1);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
     adc:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <delayMicroseconds>

00000ae0 <LiquidCrystal::write4bits(unsigned char)>:
write4bits():
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:312
}

void LiquidCrystal::write4bits(uint8_t value) {
     ae0:	cf 92       	push	r12
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	6c 01       	movw	r12, r24
     af2:	7c 01       	movw	r14, r24
     af4:	87 e0       	ldi	r24, 0x07	; 7
     af6:	e8 0e       	add	r14, r24
     af8:	f1 1c       	adc	r15, r1
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:313
  for (int i = 0; i < 4; i++) {
     afa:	d0 e0       	ldi	r29, 0x00	; 0
     afc:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:314
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     afe:	06 2f       	mov	r16, r22
     b00:	10 e0       	ldi	r17, 0x00	; 0
     b02:	b8 01       	movw	r22, r16
     b04:	0c 2e       	mov	r0, r28
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <LiquidCrystal::write4bits(unsigned char)+0x2c>
     b08:	75 95       	asr	r23
     b0a:	67 95       	ror	r22
     b0c:	0a 94       	dec	r0
     b0e:	e2 f7       	brpl	.-8      	; 0xb08 <LiquidCrystal::write4bits(unsigned char)+0x28>
     b10:	61 70       	andi	r22, 0x01	; 1
     b12:	f7 01       	movw	r30, r14
     b14:	81 91       	ld	r24, Z+
     b16:	7f 01       	movw	r14, r30
     b18:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:313
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
     b1c:	21 96       	adiw	r28, 0x01	; 1
     b1e:	c4 30       	cpi	r28, 0x04	; 4
     b20:	d1 05       	cpc	r29, r1
     b22:	79 f7       	brne	.-34     	; 0xb02 <LiquidCrystal::write4bits(unsigned char)+0x22>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:317
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
     b24:	c6 01       	movw	r24, r12
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:318
}
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	ff 90       	pop	r15
     b30:	ef 90       	pop	r14
     b32:	df 90       	pop	r13
     b34:	cf 90       	pop	r12
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:317
void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
     b36:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <LiquidCrystal::pulseEnable()>

00000b3a <LiquidCrystal::send(unsigned char, unsigned char)>:
send():
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:287
}

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
     b3a:	cf 92       	push	r12
     b3c:	df 92       	push	r13
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	ec 01       	movw	r28, r24
     b4c:	f6 2e       	mov	r15, r22
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:288
  digitalWrite(_rs_pin, mode);
     b4e:	64 2f       	mov	r22, r20
     b50:	8c 81       	ldd	r24, Y+4	; 0x04
     b52:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:291

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
     b56:	8d 81       	ldd	r24, Y+5	; 0x05
     b58:	8f 3f       	cpi	r24, 0xFF	; 255
     b5a:	19 f0       	breq	.+6      	; 0xb62 <LiquidCrystal::send(unsigned char, unsigned char)+0x28>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:292
    digitalWrite(_rw_pin, LOW);
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
     b62:	0f 2d       	mov	r16, r15
     b64:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:295
  }
  
  if (_displayfunction & LCD_8BITMODE) {
     b66:	8f 85       	ldd	r24, Y+15	; 0x0f
     b68:	84 ff       	sbrs	r24, 4
     b6a:	25 c0       	rjmp	.+74     	; 0xbb6 <LiquidCrystal::send(unsigned char, unsigned char)+0x7c>
     b6c:	6e 01       	movw	r12, r28
     b6e:	87 e0       	ldi	r24, 0x07	; 7
     b70:	c8 0e       	add	r12, r24
     b72:	d1 1c       	adc	r13, r1
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:321

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
     b74:	f1 2c       	mov	r15, r1
     b76:	e1 2c       	mov	r14, r1
write8bits():
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:322
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     b78:	b8 01       	movw	r22, r16
     b7a:	0e 2c       	mov	r0, r14
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <LiquidCrystal::send(unsigned char, unsigned char)+0x48>
     b7e:	75 95       	asr	r23
     b80:	67 95       	ror	r22
     b82:	0a 94       	dec	r0
     b84:	e2 f7       	brpl	.-8      	; 0xb7e <LiquidCrystal::send(unsigned char, unsigned char)+0x44>
     b86:	61 70       	andi	r22, 0x01	; 1
     b88:	f6 01       	movw	r30, r12
     b8a:	81 91       	ld	r24, Z+
     b8c:	6f 01       	movw	r12, r30
     b8e:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:321

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
     b92:	ff ef       	ldi	r31, 0xFF	; 255
     b94:	ef 1a       	sub	r14, r31
     b96:	ff 0a       	sbc	r15, r31
     b98:	88 e0       	ldi	r24, 0x08	; 8
     b9a:	e8 16       	cp	r14, r24
     b9c:	f1 04       	cpc	r15, r1
     b9e:	61 f7       	brne	.-40     	; 0xb78 <LiquidCrystal::send(unsigned char, unsigned char)+0x3e>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:325
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
     ba0:	ce 01       	movw	r24, r28
send():
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:301
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
write8bits():
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:325
void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
     bb2:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <LiquidCrystal::pulseEnable()>
send():
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:298
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
     bb6:	b8 01       	movw	r22, r16
     bb8:	84 e0       	ldi	r24, 0x04	; 4
     bba:	75 95       	asr	r23
     bbc:	67 95       	ror	r22
     bbe:	8a 95       	dec	r24
     bc0:	e1 f7       	brne	.-8      	; 0xbba <LiquidCrystal::send(unsigned char, unsigned char)+0x80>
     bc2:	ce 01       	movw	r24, r28
     bc4:	0e 94 70 05 	call	0xae0	; 0xae0 <LiquidCrystal::write4bits(unsigned char)>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:299
    write4bits(value);
     bc8:	6f 2d       	mov	r22, r15
     bca:	ce 01       	movw	r24, r28
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:301
  }
}
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	ff 90       	pop	r15
     bd6:	ef 90       	pop	r14
     bd8:	df 90       	pop	r13
     bda:	cf 90       	pop	r12
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:299
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
     bdc:	0c 94 70 05 	jmp	0xae0	; 0xae0 <LiquidCrystal::write4bits(unsigned char)>

00000be0 <LiquidCrystal::command(unsigned char) [clone .constprop.39]>:
command():
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:276
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	68 2f       	mov	r22, r24
     be4:	8e eb       	ldi	r24, 0xBE	; 190
     be6:	9a e0       	ldi	r25, 0x0A	; 10
     be8:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <LiquidCrystal::send(unsigned char, unsigned char)>

00000bec <LiquidCrystal::clear() [clone .constprop.38]>:
clear():
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:178
}

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LiquidCrystal::command(unsigned char) [clone .constprop.39]>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:179
  delayMicroseconds(2000);  // this command takes a long time!
     bf2:	80 ed       	ldi	r24, 0xD0	; 208
     bf4:	97 e0       	ldi	r25, 0x07	; 7
     bf6:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <delayMicroseconds>

00000bfa <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.36]>:
begin():
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:78
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:79
  if (lines > 1) {
     bfe:	61 30       	cpi	r22, 0x01	; 1
     c00:	29 f0       	breq	.+10     	; 0xc0c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.36]+0x12>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:80
    _displayfunction |= LCD_2LINE;
     c02:	90 91 cd 0a 	lds	r25, 0x0ACD	; 0x800acd <lcd+0xf>
     c06:	98 60       	ori	r25, 0x08	; 8
     c08:	90 93 cd 0a 	sts	0x0ACD, r25	; 0x800acd <lcd+0xf>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:82
  }
  _numlines = lines;
     c0c:	60 93 d1 0a 	sts	0x0AD1, r22	; 0x800ad1 <lcd+0x13>
setRowOffsets():
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:169

}

void LiquidCrystal::setRowOffsets(int row0, int row1, int row2, int row3)
{
  _row_offsets[0] = row0;
     c10:	10 92 d2 0a 	sts	0x0AD2, r1	; 0x800ad2 <lcd+0x14>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:170
  _row_offsets[1] = row1;
     c14:	90 e4       	ldi	r25, 0x40	; 64
     c16:	90 93 d3 0a 	sts	0x0AD3, r25	; 0x800ad3 <lcd+0x15>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:171
  _row_offsets[2] = row2;
     c1a:	80 93 d4 0a 	sts	0x0AD4, r24	; 0x800ad4 <lcd+0x16>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:172
  _row_offsets[3] = row3;
     c1e:	80 5c       	subi	r24, 0xC0	; 192
     c20:	80 93 d5 0a 	sts	0x0AD5, r24	; 0x800ad5 <lcd+0x17>
begin():
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:91
  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
    _displayfunction |= LCD_5x10DOTS;
  }

  pinMode(_rs_pin, OUTPUT);
     c24:	61 e0       	ldi	r22, 0x01	; 1
     c26:	80 91 c2 0a 	lds	r24, 0x0AC2	; 0x800ac2 <lcd+0x4>
     c2a:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:93
  // we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
  if (_rw_pin != 255) { 
     c2e:	80 91 c3 0a 	lds	r24, 0x0AC3	; 0x800ac3 <lcd+0x5>
     c32:	8f 3f       	cpi	r24, 0xFF	; 255
     c34:	19 f0       	breq	.+6      	; 0xc3c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.36]+0x42>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:94
    pinMode(_rw_pin, OUTPUT);
     c36:	61 e0       	ldi	r22, 0x01	; 1
     c38:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:96
  }
  pinMode(_enable_pin, OUTPUT);
     c3c:	61 e0       	ldi	r22, 0x01	; 1
     c3e:	80 91 c4 0a 	lds	r24, 0x0AC4	; 0x800ac4 <lcd+0x6>
     c42:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
     c46:	ce eb       	ldi	r28, 0xBE	; 190
     c48:	da e0       	ldi	r29, 0x0A	; 10
     c4a:	9e 01       	movw	r18, r28
     c4c:	2e 5b       	subi	r18, 0xBE	; 190
     c4e:	3a 40       	sbci	r19, 0x0A	; 10
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:99
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
     c50:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <lcd+0xf>
     c54:	84 fd       	sbrc	r24, 4
     c56:	0b c0       	rjmp	.+22     	; 0xc6e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.36]+0x74>
     c58:	84 e0       	ldi	r24, 0x04	; 4
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	21 96       	adiw	r28, 0x01	; 1
     c5e:	28 17       	cp	r18, r24
     c60:	39 07       	cpc	r19, r25
     c62:	44 f4       	brge	.+16     	; 0xc74 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.36]+0x7a>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:101
  {
    pinMode(_data_pins[i], OUTPUT);
     c64:	61 e0       	ldi	r22, 0x01	; 1
     c66:	8e 81       	ldd	r24, Y+6	; 0x06
     c68:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
     c6c:	ee cf       	rjmp	.-36     	; 0xc4a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.36]+0x50>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:99
    pinMode(_rw_pin, OUTPUT);
  }
  pinMode(_enable_pin, OUTPUT);
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
     c6e:	88 e0       	ldi	r24, 0x08	; 8
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	f4 cf       	rjmp	.-24     	; 0xc5c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.36]+0x62>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:107
   } 

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  delayMicroseconds(50000); 
     c74:	80 e5       	ldi	r24, 0x50	; 80
     c76:	93 ec       	ldi	r25, 0xC3	; 195
     c78:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <delayMicroseconds>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:109
  // Now we pull both RS and R/W low to begin commands
  digitalWrite(_rs_pin, LOW);
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	80 91 c2 0a 	lds	r24, 0x0AC2	; 0x800ac2 <lcd+0x4>
     c82:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:110
  digitalWrite(_enable_pin, LOW);
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	80 91 c4 0a 	lds	r24, 0x0AC4	; 0x800ac4 <lcd+0x6>
     c8c:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:111
  if (_rw_pin != 255) { 
     c90:	80 91 c3 0a 	lds	r24, 0x0AC3	; 0x800ac3 <lcd+0x5>
     c94:	8f 3f       	cpi	r24, 0xFF	; 255
     c96:	19 f0       	breq	.+6      	; 0xc9e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.36]+0xa4>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:112
    digitalWrite(_rw_pin, LOW);
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:116
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
     c9e:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <lcd+0xf>
     ca2:	84 fd       	sbrc	r24, 4
     ca4:	35 c0       	rjmp	.+106    	; 0xd10 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.36]+0x116>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:121
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
     ca6:	63 e0       	ldi	r22, 0x03	; 3
     ca8:	8e eb       	ldi	r24, 0xBE	; 190
     caa:	9a e0       	ldi	r25, 0x0A	; 10
     cac:	0e 94 70 05 	call	0xae0	; 0xae0 <LiquidCrystal::write4bits(unsigned char)>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:122
    delayMicroseconds(4500); // wait min 4.1ms
     cb0:	84 e9       	ldi	r24, 0x94	; 148
     cb2:	91 e1       	ldi	r25, 0x11	; 17
     cb4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <delayMicroseconds>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:125

    // second try
    write4bits(0x03);
     cb8:	63 e0       	ldi	r22, 0x03	; 3
     cba:	8e eb       	ldi	r24, 0xBE	; 190
     cbc:	9a e0       	ldi	r25, 0x0A	; 10
     cbe:	0e 94 70 05 	call	0xae0	; 0xae0 <LiquidCrystal::write4bits(unsigned char)>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:126
    delayMicroseconds(4500); // wait min 4.1ms
     cc2:	84 e9       	ldi	r24, 0x94	; 148
     cc4:	91 e1       	ldi	r25, 0x11	; 17
     cc6:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <delayMicroseconds>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:129
    
    // third go!
    write4bits(0x03); 
     cca:	63 e0       	ldi	r22, 0x03	; 3
     ccc:	8e eb       	ldi	r24, 0xBE	; 190
     cce:	9a e0       	ldi	r25, 0x0A	; 10
     cd0:	0e 94 70 05 	call	0xae0	; 0xae0 <LiquidCrystal::write4bits(unsigned char)>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:130
    delayMicroseconds(150);
     cd4:	86 e9       	ldi	r24, 0x96	; 150
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <delayMicroseconds>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:133

    // finally, set to 4-bit interface
    write4bits(0x02); 
     cdc:	62 e0       	ldi	r22, 0x02	; 2
     cde:	8e eb       	ldi	r24, 0xBE	; 190
     ce0:	9a e0       	ldi	r25, 0x0A	; 10
     ce2:	0e 94 70 05 	call	0xae0	; 0xae0 <LiquidCrystal::write4bits(unsigned char)>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:151
    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
     ce6:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <lcd+0xf>
     cea:	80 62       	ori	r24, 0x20	; 32
     cec:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LiquidCrystal::command(unsigned char) [clone .constprop.39]>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:154

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
     cf0:	84 e0       	ldi	r24, 0x04	; 4
     cf2:	80 93 ce 0a 	sts	0x0ACE, r24	; 0x800ace <lcd+0x10>
display():
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:208
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::display() {
  _displaycontrol |= LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
     cf6:	8c e0       	ldi	r24, 0x0C	; 12
     cf8:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LiquidCrystal::command(unsigned char) [clone .constprop.39]>
begin():
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:158
  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
  display();

  // clear it off
  clear();
     cfc:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:161

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	80 93 cf 0a 	sts	0x0ACF, r24	; 0x800acf <lcd+0x11>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:163
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
     d06:	86 e0       	ldi	r24, 0x06	; 6
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:165

}
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:163
  clear();

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
     d0c:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <LiquidCrystal::command(unsigned char) [clone .constprop.39]>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:139
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
     d10:	80 62       	ori	r24, 0x20	; 32
     d12:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LiquidCrystal::command(unsigned char) [clone .constprop.39]>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:140
    delayMicroseconds(4500);  // wait more than 4.1ms
     d16:	84 e9       	ldi	r24, 0x94	; 148
     d18:	91 e1       	ldi	r25, 0x11	; 17
     d1a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <delayMicroseconds>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:143

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
     d1e:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <lcd+0xf>
     d22:	80 62       	ori	r24, 0x20	; 32
     d24:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LiquidCrystal::command(unsigned char) [clone .constprop.39]>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:144
    delayMicroseconds(150);
     d28:	86 e9       	ldi	r24, 0x96	; 150
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <delayMicroseconds>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:147

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
     d30:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <lcd+0xf>
     d34:	80 62       	ori	r24, 0x20	; 32
     d36:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LiquidCrystal::command(unsigned char) [clone .constprop.39]>
     d3a:	d5 cf       	rjmp	.-86     	; 0xce6 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.36]+0xec>

00000d3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>:
setCursor():
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:188
{
  command(LCD_RETURNHOME);  // set cursor position to zero
  delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal::setCursor(uint8_t col, uint8_t row)
     d3c:	64 30       	cpi	r22, 0x04	; 4
     d3e:	08 f0       	brcs	.+2      	; 0xd42 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]+0x6>
     d40:	63 e0       	ldi	r22, 0x03	; 3
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:194
{
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
  if ( row >= max_lines ) {
    row = max_lines - 1;    // we count rows starting w/0
  }
  if ( row >= _numlines ) {
     d42:	90 91 d1 0a 	lds	r25, 0x0AD1	; 0x800ad1 <lcd+0x13>
     d46:	69 17       	cp	r22, r25
     d48:	10 f0       	brcs	.+4      	; 0xd4e <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]+0x12>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:195
    row = _numlines - 1;    // we count rows starting w/0
     d4a:	6f ef       	ldi	r22, 0xFF	; 255
     d4c:	69 0f       	add	r22, r25
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:198
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
     d4e:	e6 2f       	mov	r30, r22
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	e2 54       	subi	r30, 0x42	; 66
     d54:	f5 4f       	sbci	r31, 0xF5	; 245
     d56:	94 89       	ldd	r25, Z+20	; 0x14
     d58:	89 0f       	add	r24, r25
     d5a:	80 68       	ori	r24, 0x80	; 128
     d5c:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <LiquidCrystal::command(unsigned char) [clone .constprop.39]>

00000d60 <LiquidCrystal::write(unsigned char)>:
write():
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     d60:	41 e0       	ldi	r20, 0x01	; 1
     d62:	0e 94 9d 05 	call	0xb3a	; 0xb3a <LiquidCrystal::send(unsigned char, unsigned char)>
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:282
  return 1; // assume sucess
}
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	08 95       	ret

00000d6c <Print::flush()>:
flush():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     d6c:	08 95       	ret

00000d6e <Print::availableForWrite()>:
availableForWrite():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	08 95       	ret

00000d74 <read_sensor(char, char, char)>:
read_sensor():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:203
  int result = 0;
  result = (EEPROM.read(address) << 8) + EEPROM.read(address + 1);
  return result;
}

int read_sensor(char sensorNum, char pinNum, char outputMode) {
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	d8 2f       	mov	r29, r24
     d7c:	c6 2f       	mov	r28, r22
     d7e:	14 2f       	mov	r17, r20
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:205
  int output = 0;
  byte n1 = sensorNum & 0b0001;
     d80:	68 2f       	mov	r22, r24
     d82:	61 70       	andi	r22, 0x01	; 1
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:209
  byte n2 = (sensorNum & 0b0010) / 2;
  byte n3 = (sensorNum & 0b0100) / 4;

  digitalWrite(MUX_A, n1);
     d84:	8c e2       	ldi	r24, 0x2C	; 44
     d86:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:206
}

int read_sensor(char sensorNum, char pinNum, char outputMode) {
  int output = 0;
  byte n1 = sensorNum & 0b0001;
  byte n2 = (sensorNum & 0b0010) / 2;
     d8a:	d1 fb       	bst	r29, 1
     d8c:	66 27       	eor	r22, r22
     d8e:	60 f9       	bld	r22, 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:210
  byte n3 = (sensorNum & 0b0100) / 4;

  digitalWrite(MUX_A, n1);
  digitalWrite(MUX_B, n2);
     d90:	8b e2       	ldi	r24, 0x2B	; 43
     d92:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:207

int read_sensor(char sensorNum, char pinNum, char outputMode) {
  int output = 0;
  byte n1 = sensorNum & 0b0001;
  byte n2 = (sensorNum & 0b0010) / 2;
  byte n3 = (sensorNum & 0b0100) / 4;
     d96:	6d 2f       	mov	r22, r29
     d98:	65 95       	asr	r22
     d9a:	65 95       	asr	r22
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:211

  digitalWrite(MUX_A, n1);
  digitalWrite(MUX_B, n2);
  digitalWrite(MUX_C, n3);
     d9c:	8a e2       	ldi	r24, 0x2A	; 42
     d9e:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:212
  if (outputMode == 0)  // digital Mode
     da2:	11 11       	cpse	r17, r1
     da4:	0f c0       	rjmp	.+30     	; 0xdc4 <read_sensor(char, char, char)+0x50>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:215
  {
    if (pinNum == 0)
      output = digitalRead(A0);
     da6:	8d e2       	ldi	r24, 0x2D	; 45
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:214
  digitalWrite(MUX_A, n1);
  digitalWrite(MUX_B, n2);
  digitalWrite(MUX_C, n3);
  if (outputMode == 0)  // digital Mode
  {
    if (pinNum == 0)
     da8:	cc 23       	and	r28, r28
     daa:	39 f0       	breq	.+14     	; 0xdba <read_sensor(char, char, char)+0x46>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:217
      output = digitalRead(A0);
    else if (pinNum == 1)
      output = digitalRead(A1);
     dac:	8e e2       	ldi	r24, 0x2E	; 46
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:216
  digitalWrite(MUX_C, n3);
  if (outputMode == 0)  // digital Mode
  {
    if (pinNum == 0)
      output = digitalRead(A0);
    else if (pinNum == 1)
     dae:	c1 30       	cpi	r28, 0x01	; 1
     db0:	21 f0       	breq	.+8      	; 0xdba <read_sensor(char, char, char)+0x46>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:219
      output = digitalRead(A1);
    else if (pinNum == 2)
      output = digitalRead(A2);
     db2:	8f e2       	ldi	r24, 0x2F	; 47
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:218
  {
    if (pinNum == 0)
      output = digitalRead(A0);
    else if (pinNum == 1)
      output = digitalRead(A1);
    else if (pinNum == 2)
     db4:	c2 30       	cpi	r28, 0x02	; 2
     db6:	09 f0       	breq	.+2      	; 0xdba <read_sensor(char, char, char)+0x46>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:221
      output = digitalRead(A2);
    else if (pinNum == 3)
      output = digitalRead(A3);
     db8:	80 e3       	ldi	r24, 0x30	; 48
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:235
    else if (pinNum == 3)
      output = analogRead(A3);
    output = output * 5 / 102.3;
  }
  return output;
}
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:221
    else if (pinNum == 1)
      output = digitalRead(A1);
    else if (pinNum == 2)
      output = digitalRead(A2);
    else if (pinNum == 3)
      output = digitalRead(A3);
     dc0:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <digitalRead>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:225
  } else if (outputMode == 1)  // analog Mode
  {
    if (pinNum == 0)
      output = analogRead(A0);
     dc4:	8d e2       	ldi	r24, 0x2D	; 45
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:224
      output = digitalRead(A2);
    else if (pinNum == 3)
      output = digitalRead(A3);
  } else if (outputMode == 1)  // analog Mode
  {
    if (pinNum == 0)
     dc6:	cc 23       	and	r28, r28
     dc8:	39 f0       	breq	.+14     	; 0xdd8 <read_sensor(char, char, char)+0x64>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:227
      output = analogRead(A0);
    else if (pinNum == 1)
      output = analogRead(A1);
     dca:	8e e2       	ldi	r24, 0x2E	; 46
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:226
      output = digitalRead(A3);
  } else if (outputMode == 1)  // analog Mode
  {
    if (pinNum == 0)
      output = analogRead(A0);
    else if (pinNum == 1)
     dcc:	c1 30       	cpi	r28, 0x01	; 1
     dce:	21 f0       	breq	.+8      	; 0xdd8 <read_sensor(char, char, char)+0x64>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:229
      output = analogRead(A1);
    else if (pinNum == 2)
      output = analogRead(A2);
     dd0:	8f e2       	ldi	r24, 0x2F	; 47
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:228
  {
    if (pinNum == 0)
      output = analogRead(A0);
    else if (pinNum == 1)
      output = analogRead(A1);
    else if (pinNum == 2)
     dd2:	c2 30       	cpi	r28, 0x02	; 2
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <read_sensor(char, char, char)+0x64>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:231
      output = analogRead(A2);
    else if (pinNum == 3)
      output = analogRead(A3);
     dd6:	80 e3       	ldi	r24, 0x30	; 48
     dd8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <analogRead>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:232
    output = output * 5 / 102.3;
     ddc:	25 e0       	ldi	r18, 0x05	; 5
     dde:	28 9f       	mul	r18, r24
     de0:	b0 01       	movw	r22, r0
     de2:	29 9f       	mul	r18, r25
     de4:	70 0d       	add	r23, r0
     de6:	11 24       	eor	r1, r1
     de8:	07 2e       	mov	r0, r23
     dea:	00 0c       	add	r0, r0
     dec:	88 0b       	sbc	r24, r24
     dee:	99 0b       	sbc	r25, r25
     df0:	0e 94 ed 34 	call	0x69da	; 0x69da <__floatsisf>
     df4:	2a e9       	ldi	r18, 0x9A	; 154
     df6:	39 e9       	ldi	r19, 0x99	; 153
     df8:	4c ec       	ldi	r20, 0xCC	; 204
     dfa:	52 e4       	ldi	r21, 0x42	; 66
     dfc:	0e 94 43 34 	call	0x6886	; 0x6886 <__divsf3>
     e00:	0e 94 b5 34 	call	0x696a	; 0x696a <__fixsfsi>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:235
  }
  return output;
}
     e04:	cb 01       	movw	r24, r22
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	08 95       	ret

00000e0e <go(int, int)>:
go():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:159
  else if (SR8) go(spd, -spd);

  else if (SL9) go(-spd, spd);
  else if (SR9) go(spd, -spd);
}
void go(int left, int right) {
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:161
  left = -left;
  right = -right;
     e16:	00 27       	eor	r16, r16
     e18:	11 27       	eor	r17, r17
     e1a:	06 1b       	sub	r16, r22
     e1c:	17 0b       	sbc	r17, r23
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:163

  if (left > 255)
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	2f ef       	ldi	r18, 0xFF	; 255
     e22:	92 07       	cpc	r25, r18
     e24:	0c f4       	brge	.+2      	; 0xe28 <go(int, int)+0x1a>
     e26:	46 c0       	rjmp	.+140    	; 0xeb4 <go(int, int)+0xa6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:165
    left = 255;
  if (left < -255)
     e28:	8f 3f       	cpi	r24, 0xFF	; 255
     e2a:	91 05       	cpc	r25, r1
     e2c:	09 f0       	breq	.+2      	; 0xe30 <go(int, int)+0x22>
     e2e:	cc f5       	brge	.+114    	; 0xea2 <go(int, int)+0x94>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:160

  else if (SL9) go(-spd, spd);
  else if (SR9) go(spd, -spd);
}
void go(int left, int right) {
  left = -left;
     e30:	cc 27       	eor	r28, r28
     e32:	dd 27       	eor	r29, r29
     e34:	c8 1b       	sub	r28, r24
     e36:	d9 0b       	sbc	r29, r25
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:167

  if (left > 255)
    left = 255;
  if (left < -255)
    left = -255;
  if (right > 255)
     e38:	61 30       	cpi	r22, 0x01	; 1
     e3a:	2f ef       	ldi	r18, 0xFF	; 255
     e3c:	72 07       	cpc	r23, r18
     e3e:	2c f1       	brlt	.+74     	; 0xe8a <go(int, int)+0x7c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:169
    right = 255;
  if (right < -255)
     e40:	6f 3f       	cpi	r22, 0xFF	; 255
     e42:	71 05       	cpc	r23, r1
     e44:	09 f0       	breq	.+2      	; 0xe48 <go(int, int)+0x3a>
     e46:	24 f5       	brge	.+72     	; 0xe90 <go(int, int)+0x82>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:172
    right = -255;

  if (left <= 0) {
     e48:	97 fd       	sbrc	r25, 7
     e4a:	29 c0       	rjmp	.+82     	; 0xe9e <go(int, int)+0x90>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:173
    digitalWrite(2, LOW);
     e4c:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:176
    analogWrite(3, -left);
  } else if (left > 0) {
    digitalWrite(2, HIGH);
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:177
    analogWrite(3, -left);
     e54:	66 27       	eor	r22, r22
     e56:	77 27       	eor	r23, r23
     e58:	6c 1b       	sub	r22, r28
     e5a:	7d 0b       	sbc	r23, r29
     e5c:	83 e0       	ldi	r24, 0x03	; 3
     e5e:	0e 94 76 02 	call	0x4ec	; 0x4ec <analogWrite>
     e62:	cc 27       	eor	r28, r28
     e64:	dd 27       	eor	r29, r29
     e66:	c0 1b       	sub	r28, r16
     e68:	d1 0b       	sbc	r29, r17
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:181
  }

  if (right <= 0) {
    digitalWrite(4, LOW);
     e6a:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:180
  } else if (left > 0) {
    digitalWrite(2, HIGH);
    analogWrite(3, -left);
  }

  if (right <= 0) {
     e6c:	10 16       	cp	r1, r16
     e6e:	11 06       	cpc	r1, r17
     e70:	0c f4       	brge	.+2      	; 0xe74 <go(int, int)+0x66>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:186
    digitalWrite(4, LOW);
    analogWrite(5, -right);
  }

  else if (right > 0) {
    digitalWrite(4, HIGH);
     e72:	61 e0       	ldi	r22, 0x01	; 1
     e74:	84 e0       	ldi	r24, 0x04	; 4
     e76:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:187
    analogWrite(5, -right);
     e7a:	be 01       	movw	r22, r28
     e7c:	85 e0       	ldi	r24, 0x05	; 5
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:189
  }
}
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:187
    analogWrite(5, -right);
  }

  else if (right > 0) {
    digitalWrite(4, HIGH);
    analogWrite(5, -right);
     e86:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <analogWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:168
  if (left > 255)
    left = 255;
  if (left < -255)
    left = -255;
  if (right > 255)
    right = 255;
     e8a:	0f ef       	ldi	r16, 0xFF	; 255
     e8c:	10 e0       	ldi	r17, 0x00	; 0
     e8e:	dc cf       	rjmp	.-72     	; 0xe48 <go(int, int)+0x3a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:170
  if (right < -255)
    right = -255;
     e90:	01 e0       	ldi	r16, 0x01	; 1
     e92:	1f ef       	ldi	r17, 0xFF	; 255
     e94:	d9 cf       	rjmp	.-78     	; 0xe48 <go(int, int)+0x3a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:168
  if (left > 255)
    left = 255;
  if (left < -255)
    left = -255;
  if (right > 255)
    right = 255;
     e96:	0f ef       	ldi	r16, 0xFF	; 255
     e98:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:164
void go(int left, int right) {
  left = -left;
  right = -right;

  if (left > 255)
    left = 255;
     e9a:	cf ef       	ldi	r28, 0xFF	; 255
     e9c:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:176

  if (left <= 0) {
    digitalWrite(2, LOW);
    analogWrite(3, -left);
  } else if (left > 0) {
    digitalWrite(2, HIGH);
     e9e:	61 e0       	ldi	r22, 0x01	; 1
     ea0:	d6 cf       	rjmp	.-84     	; 0xe4e <go(int, int)+0x40>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:167

  if (left > 255)
    left = 255;
  if (left < -255)
    left = -255;
  if (right > 255)
     ea2:	61 30       	cpi	r22, 0x01	; 1
     ea4:	8f ef       	ldi	r24, 0xFF	; 255
     ea6:	78 07       	cpc	r23, r24
     ea8:	84 f4       	brge	.+32     	; 0xeca <go(int, int)+0xbc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:168
    right = 255;
     eaa:	0f ef       	ldi	r16, 0xFF	; 255
     eac:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:166
  right = -right;

  if (left > 255)
    left = 255;
  if (left < -255)
    left = -255;
     eae:	c1 e0       	ldi	r28, 0x01	; 1
     eb0:	df ef       	ldi	r29, 0xFF	; 255
     eb2:	cc cf       	rjmp	.-104    	; 0xe4c <go(int, int)+0x3e>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:167
  if (right > 255)
     eb4:	61 30       	cpi	r22, 0x01	; 1
     eb6:	2f ef       	ldi	r18, 0xFF	; 255
     eb8:	72 07       	cpc	r23, r18
     eba:	6c f3       	brlt	.-38     	; 0xe96 <go(int, int)+0x88>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:169
    right = 255;
  if (right < -255)
     ebc:	6f 3f       	cpi	r22, 0xFF	; 255
     ebe:	71 05       	cpc	r23, r1
     ec0:	61 f3       	breq	.-40     	; 0xe9a <go(int, int)+0x8c>
     ec2:	5c f3       	brlt	.-42     	; 0xe9a <go(int, int)+0x8c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:170
    right = -255;
     ec4:	01 e0       	ldi	r16, 0x01	; 1
     ec6:	1f ef       	ldi	r17, 0xFF	; 255
     ec8:	e8 cf       	rjmp	.-48     	; 0xe9a <go(int, int)+0x8c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:169
    left = 255;
  if (left < -255)
    left = -255;
  if (right > 255)
    right = 255;
  if (right < -255)
     eca:	6f 3f       	cpi	r22, 0xFF	; 255
     ecc:	71 05       	cpc	r23, r1
     ece:	79 f3       	breq	.-34     	; 0xeae <go(int, int)+0xa0>
     ed0:	74 f3       	brlt	.-36     	; 0xeae <go(int, int)+0xa0>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:170
    right = -255;
     ed2:	01 e0       	ldi	r16, 0x01	; 1
     ed4:	1f ef       	ldi	r17, 0xFF	; 255
     ed6:	eb cf       	rjmp	.-42     	; 0xeae <go(int, int)+0xa0>

00000ed8 <move(int, int, int)>:
move():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1894
      break;
    }
  }
  get_back();
}
void move(int direction, int lenth, int speed = 180) {
     ed8:	cf 92       	push	r12
     eda:	df 92       	push	r13
     edc:	ef 92       	push	r14
     ede:	ff 92       	push	r15
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	8b 01       	movw	r16, r22
     eea:	ea 01       	movw	r28, r20
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1911
        go(-speed, speed);
      }
      go(0, 0);
      break;
    case Right:
      cnt = 0;
     eec:	1d bc       	out	0x2d, r1	; 45
     eee:	1c bc       	out	0x2c, r1	; 44
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1895
    }
  }
  get_back();
}
void move(int direction, int lenth, int speed = 180) {
  switch (direction) {
     ef0:	8c 30       	cpi	r24, 0x0C	; 12
     ef2:	91 05       	cpc	r25, r1
     ef4:	c1 f1       	breq	.+112    	; 0xf66 <move(int, int, int)+0x8e>
     ef6:	8d 30       	cpi	r24, 0x0D	; 13
     ef8:	91 05       	cpc	r25, r1
     efa:	09 f4       	brne	.+2      	; 0xefe <move(int, int, int)+0x26>
     efc:	48 c0       	rjmp	.+144    	; 0xf8e <move(int, int, int)+0xb6>
     efe:	0b 97       	sbiw	r24, 0x0b	; 11
     f00:	f1 f0       	breq	.+60     	; 0xf3e <move(int, int, int)+0x66>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1898
    case forward:
      cnt = 0;
      while (cnt / 100 < lenth) {
     f02:	34 e6       	ldi	r19, 0x64	; 100
     f04:	e3 2e       	mov	r14, r19
     f06:	f1 2c       	mov	r15, r1
     f08:	8c b5       	in	r24, 0x2c	; 44
     f0a:	9d b5       	in	r25, 0x2d	; 45
     f0c:	b7 01       	movw	r22, r14
     f0e:	0e 94 0a 36 	call	0x6c14	; 0x6c14 <__udivmodhi4>
     f12:	60 17       	cp	r22, r16
     f14:	71 07       	cpc	r23, r17
     f16:	28 f4       	brcc	.+10     	; 0xf22 <move(int, int, int)+0x4a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1899
        go(speed, speed);
     f18:	be 01       	movw	r22, r28
     f1a:	ce 01       	movw	r24, r28
     f1c:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
     f20:	f3 cf       	rjmp	.-26     	; 0xf08 <move(int, int, int)+0x30>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1901
      }
      go(0, 0);
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1925
        go(-speed, -speed);
      }
      go(0, 0);
      break;
  }
}
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	ff 90       	pop	r15
     f34:	ef 90       	pop	r14
     f36:	df 90       	pop	r13
     f38:	cf 90       	pop	r12
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1901
    case forward:
      cnt = 0;
      while (cnt / 100 < lenth) {
        go(speed, speed);
      }
      go(0, 0);
     f3a:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1905
      break;
    case Left:
      cnt = 0;
      while (cnt / 100 < lenth) {
     f3e:	24 e6       	ldi	r18, 0x64	; 100
     f40:	c2 2e       	mov	r12, r18
     f42:	d1 2c       	mov	r13, r1
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1906
        go(-speed, speed);
     f44:	ee 24       	eor	r14, r14
     f46:	ff 24       	eor	r15, r15
     f48:	e4 1a       	sub	r14, r20
     f4a:	f5 0a       	sbc	r15, r21
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1905
      }
      go(0, 0);
      break;
    case Left:
      cnt = 0;
      while (cnt / 100 < lenth) {
     f4c:	8c b5       	in	r24, 0x2c	; 44
     f4e:	9d b5       	in	r25, 0x2d	; 45
     f50:	b6 01       	movw	r22, r12
     f52:	0e 94 0a 36 	call	0x6c14	; 0x6c14 <__udivmodhi4>
     f56:	60 17       	cp	r22, r16
     f58:	71 07       	cpc	r23, r17
     f5a:	18 f7       	brcc	.-58     	; 0xf22 <move(int, int, int)+0x4a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1906
        go(-speed, speed);
     f5c:	be 01       	movw	r22, r28
     f5e:	c7 01       	movw	r24, r14
     f60:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
     f64:	f3 cf       	rjmp	.-26     	; 0xf4c <move(int, int, int)+0x74>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1912
      }
      go(0, 0);
      break;
    case Right:
      cnt = 0;
      while (cnt / 100 < lenth) {
     f66:	94 e6       	ldi	r25, 0x64	; 100
     f68:	c9 2e       	mov	r12, r25
     f6a:	d1 2c       	mov	r13, r1
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1913
        go(speed, -speed);
     f6c:	ee 24       	eor	r14, r14
     f6e:	ff 24       	eor	r15, r15
     f70:	e4 1a       	sub	r14, r20
     f72:	f5 0a       	sbc	r15, r21
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1912
      }
      go(0, 0);
      break;
    case Right:
      cnt = 0;
      while (cnt / 100 < lenth) {
     f74:	8c b5       	in	r24, 0x2c	; 44
     f76:	9d b5       	in	r25, 0x2d	; 45
     f78:	b6 01       	movw	r22, r12
     f7a:	0e 94 0a 36 	call	0x6c14	; 0x6c14 <__udivmodhi4>
     f7e:	60 17       	cp	r22, r16
     f80:	71 07       	cpc	r23, r17
     f82:	78 f6       	brcc	.-98     	; 0xf22 <move(int, int, int)+0x4a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1913
        go(speed, -speed);
     f84:	b7 01       	movw	r22, r14
     f86:	ce 01       	movw	r24, r28
     f88:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
     f8c:	f3 cf       	rjmp	.-26     	; 0xf74 <move(int, int, int)+0x9c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1919
      }
      go(0, 0);
      break;
    case Back:
      cnt = 0;
      while (cnt / 100 < lenth) {
     f8e:	84 e6       	ldi	r24, 0x64	; 100
     f90:	e8 2e       	mov	r14, r24
     f92:	f1 2c       	mov	r15, r1
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1920
        go(-speed, -speed);
     f94:	d1 95       	neg	r29
     f96:	c1 95       	neg	r28
     f98:	d1 09       	sbc	r29, r1
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1919
      }
      go(0, 0);
      break;
    case Back:
      cnt = 0;
      while (cnt / 100 < lenth) {
     f9a:	8c b5       	in	r24, 0x2c	; 44
     f9c:	9d b5       	in	r25, 0x2d	; 45
     f9e:	b7 01       	movw	r22, r14
     fa0:	0e 94 0a 36 	call	0x6c14	; 0x6c14 <__udivmodhi4>
     fa4:	60 17       	cp	r22, r16
     fa6:	71 07       	cpc	r23, r17
     fa8:	08 f0       	brcs	.+2      	; 0xfac <move(int, int, int)+0xd4>
     faa:	bb cf       	rjmp	.-138    	; 0xf22 <move(int, int, int)+0x4a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1920
        go(-speed, -speed);
     fac:	be 01       	movw	r22, r28
     fae:	ce 01       	movw	r24, r28
     fb0:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
     fb4:	f2 cf       	rjmp	.-28     	; 0xf9a <move(int, int, int)+0xc2>

00000fb6 <linefollow()>:
linefollow():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:79
    }
  }
  */
}
void linefollow() {
  if (SM == HIGH) {
     fb6:	40 e0       	ldi	r20, 0x00	; 0
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:80
    go(200, 200);
     fc0:	68 ec       	ldi	r22, 0xC8	; 200
     fc2:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:79
    }
  }
  */
}
void linefollow() {
  if (SM == HIGH) {
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	49 f0       	breq	.+18     	; 0xfda <linefollow()+0x24>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:81
    go(200, 200);
  } else if (SR1 == HIGH) {
     fc8:	40 e0       	ldi	r20, 0x00	; 0
     fca:	61 e0       	ldi	r22, 0x01	; 1
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	31 f4       	brne	.+12     	; 0xfe2 <linefollow()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:82
    go(200, 60);
     fd6:	6c e3       	ldi	r22, 0x3C	; 60
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	88 ec       	ldi	r24, 0xC8	; 200
     fdc:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:102
  } else if (SL3 == HIGH) {
    go(-90, 200);
  } else if (SL4 == HIGH) {
    go(-150, 200);
  } else if (SL5 == HIGH) {
    go(-200, 200);
     fde:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:83
void linefollow() {
  if (SM == HIGH) {
    go(200, 200);
  } else if (SR1 == HIGH) {
    go(200, 60);
  } else if (SR2 == HIGH) {
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	61 e0       	ldi	r22, 0x01	; 1
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:84
    go(200, -30);
     fec:	62 ee       	ldi	r22, 0xE2	; 226
     fee:	7f ef       	ldi	r23, 0xFF	; 255
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:83
void linefollow() {
  if (SM == HIGH) {
    go(200, 200);
  } else if (SR1 == HIGH) {
    go(200, 60);
  } else if (SR2 == HIGH) {
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	99 f3       	breq	.-26     	; 0xfda <linefollow()+0x24>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:85
    go(200, -30);
  } else if (SR3 == HIGH) {
     ff4:	40 e0       	ldi	r20, 0x00	; 0
     ff6:	61 e0       	ldi	r22, 0x01	; 1
     ff8:	83 e0       	ldi	r24, 0x03	; 3
     ffa:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:86
    go(200, -90);
     ffe:	66 ea       	ldi	r22, 0xA6	; 166
    1000:	7f ef       	ldi	r23, 0xFF	; 255
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:85
    go(200, 200);
  } else if (SR1 == HIGH) {
    go(200, 60);
  } else if (SR2 == HIGH) {
    go(200, -30);
  } else if (SR3 == HIGH) {
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	51 f3       	breq	.-44     	; 0xfda <linefollow()+0x24>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:87
    go(200, -90);
  } else if (SR4 == HIGH) {
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	84 e0       	ldi	r24, 0x04	; 4
    100c:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:88
    go(200, -150);
    1010:	6a e6       	ldi	r22, 0x6A	; 106
    1012:	7f ef       	ldi	r23, 0xFF	; 255
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:87
    go(200, 60);
  } else if (SR2 == HIGH) {
    go(200, -30);
  } else if (SR3 == HIGH) {
    go(200, -90);
  } else if (SR4 == HIGH) {
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	09 f3       	breq	.-62     	; 0xfda <linefollow()+0x24>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:89
    go(200, -150);
  } else if (SR5 == HIGH) {
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	61 e0       	ldi	r22, 0x01	; 1
    101c:	85 e0       	ldi	r24, 0x05	; 5
    101e:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	19 f4       	brne	.+6      	; 0x102c <linefollow()+0x76>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:90
    go(200, -200);
    1026:	68 e3       	ldi	r22, 0x38	; 56
    1028:	7f ef       	ldi	r23, 0xFF	; 255
    102a:	d7 cf       	rjmp	.-82     	; 0xfda <linefollow()+0x24>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:91
  } else if (SR6 == HIGH) {
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	86 e0       	ldi	r24, 0x06	; 6
    1032:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	b1 f3       	breq	.-20     	; 0x1026 <linefollow()+0x70>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:93
    go(200, -200);
  } else if (SL1 == HIGH) {
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	29 f4       	brne	.+10     	; 0x1052 <linefollow()+0x9c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:94
    go(60, 200);
    1048:	68 ec       	ldi	r22, 0xC8	; 200
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	8c e3       	ldi	r24, 0x3C	; 60
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	c6 cf       	rjmp	.-116    	; 0xfde <linefollow()+0x28>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:95
  } else if (SL2 == HIGH) {
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	82 e0       	ldi	r24, 0x02	; 2
    1058:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	29 f4       	brne	.+10     	; 0x106a <linefollow()+0xb4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:96
    go(-30, 200);
    1060:	68 ec       	ldi	r22, 0xC8	; 200
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	82 ee       	ldi	r24, 0xE2	; 226
    1066:	9f ef       	ldi	r25, 0xFF	; 255
    1068:	ba cf       	rjmp	.-140    	; 0xfde <linefollow()+0x28>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:97
  } else if (SL3 == HIGH) {
    106a:	40 e0       	ldi	r20, 0x00	; 0
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	83 e0       	ldi	r24, 0x03	; 3
    1070:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	29 f4       	brne	.+10     	; 0x1082 <linefollow()+0xcc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:98
    go(-90, 200);
    1078:	68 ec       	ldi	r22, 0xC8	; 200
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	86 ea       	ldi	r24, 0xA6	; 166
    107e:	9f ef       	ldi	r25, 0xFF	; 255
    1080:	ae cf       	rjmp	.-164    	; 0xfde <linefollow()+0x28>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:99
  } else if (SL4 == HIGH) {
    1082:	40 e0       	ldi	r20, 0x00	; 0
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	84 e0       	ldi	r24, 0x04	; 4
    1088:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	29 f4       	brne	.+10     	; 0x109a <linefollow()+0xe4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:100
    go(-150, 200);
    1090:	68 ec       	ldi	r22, 0xC8	; 200
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	8a e6       	ldi	r24, 0x6A	; 106
    1096:	9f ef       	ldi	r25, 0xFF	; 255
    1098:	a2 cf       	rjmp	.-188    	; 0xfde <linefollow()+0x28>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:101
  } else if (SL5 == HIGH) {
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	85 e0       	ldi	r24, 0x05	; 5
    10a0:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	29 f4       	brne	.+10     	; 0x10b2 <linefollow()+0xfc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:102
    go(-200, 200);
    10a8:	68 ec       	ldi	r22, 0xC8	; 200
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	88 e3       	ldi	r24, 0x38	; 56
    10ae:	9f ef       	ldi	r25, 0xFF	; 255
    10b0:	96 cf       	rjmp	.-212    	; 0xfde <linefollow()+0x28>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:103
  } else if (SL6 == HIGH) {
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	86 e0       	ldi	r24, 0x06	; 6
    10b8:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	a1 f3       	breq	.-24     	; 0x10a8 <linefollow()+0xf2>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:106
    go(-200, 200);
  } 
}
    10c0:	08 95       	ret

000010c2 <beep(int)>:
beep():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:7
void move(int direction, int lenth, int speed);
unsigned int vl(char xv);
void handle_color();
void get_out();

void beep(int num) {
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	8c 01       	movw	r16, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:8
  for (int i = 0; i < num; i++) {
    10cc:	d0 e0       	ldi	r29, 0x00	; 0
    10ce:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:9
    buz_on;
    10d0:	61 e0       	ldi	r22, 0x01	; 1
    10d2:	83 e2       	ldi	r24, 0x23	; 35
    10d4:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:10
    delay(50);
    10d8:	62 e3       	ldi	r22, 0x32	; 50
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:11
    buz_off;
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	83 e2       	ldi	r24, 0x23	; 35
    10e8:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:12
    delay(50);
    10ec:	62 e3       	ldi	r22, 0x32	; 50
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:8
unsigned int vl(char xv);
void handle_color();
void get_out();

void beep(int num) {
  for (int i = 0; i < num; i++) {
    10f8:	21 96       	adiw	r28, 0x01	; 1
    10fa:	0c 17       	cp	r16, r28
    10fc:	1d 07       	cpc	r17, r29
    10fe:	41 f7       	brne	.-48     	; 0x10d0 <beep(int)+0xe>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:14
    buz_on;
    delay(50);
    buz_off;
    delay(50);
  }
}
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	08 95       	ret

0000110a <AX(char, int, int)>:
AX():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:284
    delay(10); // bayad bashe hatman    hade aghal=10  // 1 bazi vaghta error mideh
               //    RXD;
}
void AX(char ID, int position, int speed)
{
    TxBuffer[0] = 0xff;
    110a:	9f ef       	ldi	r25, 0xFF	; 255
    110c:	90 93 6a 08 	sts	0x086A, r25	; 0x80086a <TxBuffer>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:285
    TxBuffer[1] = 0xff;
    1110:	90 93 6b 08 	sts	0x086B, r25	; 0x80086b <TxBuffer+0x1>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:286
    TxBuffer[2] = ID; // ID
    1114:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <TxBuffer+0x2>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:287
    TxBuffer[3] = 7;  // Length(Paramter=5,Instruction=1,Checksum=1)
    1118:	87 e0       	ldi	r24, 0x07	; 7
    111a:	80 93 6d 08 	sts	0x086D, r24	; 0x80086d <TxBuffer+0x3>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:288
    TxBuffer[4] = 3;  // bInstruction;
    111e:	83 e0       	ldi	r24, 0x03	; 3
    1120:	80 93 6e 08 	sts	0x086E, r24	; 0x80086e <TxBuffer+0x4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:290

    TxBuffer[5] = 30;             // Address of position
    1124:	8e e1       	ldi	r24, 0x1E	; 30
    1126:	80 93 6f 08 	sts	0x086F, r24	; 0x80086f <TxBuffer+0x5>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:291
    TxBuffer[6] = position & 255; // Writing Data P_GOAL_POSITION_L2
    112a:	60 93 70 08 	sts	0x0870, r22	; 0x800870 <TxBuffer+0x6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:292
    TxBuffer[7] = position >> 8;  // Writing Data P_GOAL_POSITION_H
    112e:	70 93 71 08 	sts	0x0871, r23	; 0x800871 <TxBuffer+0x7>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:293
    TxBuffer[8] = speed & 255;    // Writing Data P_GOAL_SPEED_L2
    1132:	40 93 72 08 	sts	0x0872, r20	; 0x800872 <TxBuffer+0x8>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:294
    TxBuffer[9] = speed >> 8;     // Writing Data P_GOAL_SPEED_H
    1136:	50 93 73 08 	sts	0x0873, r21	; 0x800873 <TxBuffer+0x9>
_TXsend():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:262
void _TXsend(char last_TXBuffer)
{
    unsigned char CheckSum, Count;
    //    TXD;
    //    DDRD.3=1; ready to send
    send_mode;
    113a:	61 e0       	ldi	r22, 0x01	; 1
    113c:	86 e1       	ldi	r24, 0x16	; 22
    113e:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
    1142:	ec e6       	ldi	r30, 0x6C	; 108
    1144:	f8 e0       	ldi	r31, 0x08	; 8
AX():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:263
    CheckSum = 0;
    1146:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:264
    for (Count = 2; Count <= last_TXBuffer; Count++) // except 0xff,checksum
    1148:	92 e0       	ldi	r25, 0x02	; 2
_TXsend():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:265
        CheckSum += TxBuffer[Count];
    114a:	21 91       	ld	r18, Z+
    114c:	82 0f       	add	r24, r18
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:264
    unsigned char CheckSum, Count;
    //    TXD;
    //    DDRD.3=1; ready to send
    send_mode;
    CheckSum = 0;
    for (Count = 2; Count <= last_TXBuffer; Count++) // except 0xff,checksum
    114e:	9f 5f       	subi	r25, 0xFF	; 255
    1150:	9a 30       	cpi	r25, 0x0A	; 10
    1152:	d9 f7       	brne	.-10     	; 0x114a <AX(char, int, int)+0x40>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:266
        CheckSum += TxBuffer[Count];
    TxBuffer[last_TXBuffer + 1] = ~CheckSum; // Writing Checksum with Bit Inversion
    1154:	80 95       	com	r24
    1156:	80 93 74 08 	sts	0x0874, r24	; 0x800874 <TxBuffer+0xa>
    115a:	ea e6       	ldi	r30, 0x6A	; 106
    115c:	f8 e0       	ldi	r31, 0x08	; 8
AX():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:267
    for (Count = 0; Count <= last_TXBuffer + 1; Count++)
    115e:	80 e0       	ldi	r24, 0x00	; 0
_TXsend():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:271
    {
        // Serial1.write(TxBuffer[Count]);
        // delayMicroseconds(100);
        while (!TXD_READY)
    1160:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1164:	95 ff       	sbrs	r25, 5
    1166:	fc cf       	rjmp	.-8      	; 0x1160 <AX(char, int, int)+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:273
            ;
        M_UDR = TxBuffer[Count];
    1168:	91 91       	ld	r25, Z+
    116a:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:267
    send_mode;
    CheckSum = 0;
    for (Count = 2; Count <= last_TXBuffer; Count++) // except 0xff,checksum
        CheckSum += TxBuffer[Count];
    TxBuffer[last_TXBuffer + 1] = ~CheckSum; // Writing Checksum with Bit Inversion
    for (Count = 0; Count <= last_TXBuffer + 1; Count++)
    116e:	8f 5f       	subi	r24, 0xFF	; 255
    1170:	8b 30       	cpi	r24, 0x0B	; 11
    1172:	b1 f7       	brne	.-20     	; 0x1160 <AX(char, int, int)+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:275
        // delayMicroseconds(100);
        while (!TXD_READY)
            ;
        M_UDR = TxBuffer[Count];
    }
    while (!CHECK_TXD_FINISH)
    1174:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1178:	86 ff       	sbrs	r24, 6
    117a:	fc cf       	rjmp	.-8      	; 0x1174 <AX(char, int, int)+0x6a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:279
        ; // Wait until TXD Shift register empty

    //    DDRD.3=0;
    delay(10); // bayad bashe hatman    hade aghal=10  // 1 bazi vaghta error mideh
    117c:	6a e0       	ldi	r22, 0x0A	; 10
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <delay>

00001188 <move_arm(int, int)>:
move_arm():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:15
void move_arm(int pos, int speed) {
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	8c 01       	movw	r16, r24
    1192:	eb 01       	movw	r28, r22
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:16
  AX(11, pos, speed);
    1194:	ab 01       	movw	r20, r22
    1196:	bc 01       	movw	r22, r24
    1198:	8b e0       	ldi	r24, 0x0B	; 11
    119a:	0e 94 85 08 	call	0x110a	; 0x110a <AX(char, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:17
  AX(10, 1023 - pos, speed);
    119e:	6f ef       	ldi	r22, 0xFF	; 255
    11a0:	73 e0       	ldi	r23, 0x03	; 3
    11a2:	60 1b       	sub	r22, r16
    11a4:	71 0b       	sbc	r23, r17
    11a6:	ae 01       	movw	r20, r28
    11a8:	8a e0       	ldi	r24, 0x0A	; 10
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:18
}
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:17
    delay(50);
  }
}
void move_arm(int pos, int speed) {
  AX(11, pos, speed);
  AX(10, 1023 - pos, speed);
    11b2:	0c 94 85 08 	jmp	0x110a	; 0x110a <AX(char, int, int)>

000011b6 <XL_Gripper(char, int, int)>:
XL_Gripper():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:151
void XL_Gripper(char ID, int position, int speed)
{
    char Count;
    unsigned short CRC;

    packet[0] = 0xFF;
    11b6:	2f ef       	ldi	r18, 0xFF	; 255
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	30 93 3d 09 	sts	0x093D, r19	; 0x80093d <packet+0x1>
    11be:	20 93 3c 09 	sts	0x093C, r18	; 0x80093c <packet>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:152
    packet[1] = 0xFF;
    11c2:	30 93 3f 09 	sts	0x093F, r19	; 0x80093f <packet+0x3>
    11c6:	20 93 3e 09 	sts	0x093E, r18	; 0x80093e <packet+0x2>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:153
    packet[2] = 0xFD;
    11ca:	2d ef       	ldi	r18, 0xFD	; 253
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	30 93 41 09 	sts	0x0941, r19	; 0x800941 <packet+0x5>
    11d2:	20 93 40 09 	sts	0x0940, r18	; 0x800940 <packet+0x4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:154
    packet[3] = 0x00;                   // RESERVED
    11d6:	10 92 43 09 	sts	0x0943, r1	; 0x800943 <packet+0x7>
    11da:	10 92 42 09 	sts	0x0942, r1	; 0x800942 <packet+0x6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:155
    packet[4] = ID;                     // id
    11de:	08 2e       	mov	r0, r24
    11e0:	00 0c       	add	r0, r0
    11e2:	99 0b       	sbc	r25, r25
    11e4:	90 93 45 09 	sts	0x0945, r25	; 0x800945 <packet+0x9>
    11e8:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <packet+0x8>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:156
    packet[5] = 7 + 2;                  // packet lengh L  : packet lengh after packet lengh
    11ec:	89 e0       	ldi	r24, 0x09	; 9
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	90 93 47 09 	sts	0x0947, r25	; 0x800947 <packet+0xb>
    11f4:	80 93 46 09 	sts	0x0946, r24	; 0x800946 <packet+0xa>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:157
    packet[6] = 0;                      // packet lengh H
    11f8:	10 92 49 09 	sts	0x0949, r1	; 0x800949 <packet+0xd>
    11fc:	10 92 48 09 	sts	0x0948, r1	; 0x800948 <packet+0xc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:158
    packet[7] = 3;                      // Instraction
    1200:	83 e0       	ldi	r24, 0x03	; 3
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	90 93 4b 09 	sts	0x094B, r25	; 0x80094b <packet+0xf>
    1208:	80 93 4a 09 	sts	0x094A, r24	; 0x80094a <packet+0xe>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:159
    packet[8] = 30;                     // address L
    120c:	8e e1       	ldi	r24, 0x1E	; 30
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	90 93 4d 09 	sts	0x094D, r25	; 0x80094d <packet+0x11>
    1214:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <packet+0x10>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:160
    packet[9] = 0;                      // address H
    1218:	10 92 4f 09 	sts	0x094F, r1	; 0x80094f <packet+0x13>
    121c:	10 92 4e 09 	sts	0x094E, r1	; 0x80094e <packet+0x12>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:161
    packet[10] = position & 255;        // parameter
    1220:	cb 01       	movw	r24, r22
    1222:	99 27       	eor	r25, r25
    1224:	90 93 51 09 	sts	0x0951, r25	; 0x800951 <packet+0x15>
    1228:	80 93 50 09 	sts	0x0950, r24	; 0x800950 <packet+0x14>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:162
    packet[11] = (position >> 8) & 255; // parameter
    122c:	70 93 52 09 	sts	0x0952, r23	; 0x800952 <packet+0x16>
    1230:	10 92 53 09 	sts	0x0953, r1	; 0x800953 <packet+0x17>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:163
    packet[12] = speed & 255;           // parameter
    1234:	ca 01       	movw	r24, r20
    1236:	99 27       	eor	r25, r25
    1238:	90 93 55 09 	sts	0x0955, r25	; 0x800955 <packet+0x19>
    123c:	80 93 54 09 	sts	0x0954, r24	; 0x800954 <packet+0x18>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:164
    packet[13] = (speed >> 8) & 255;    // parameter
    1240:	50 93 56 09 	sts	0x0956, r21	; 0x800956 <packet+0x1a>
    1244:	10 92 57 09 	sts	0x0957, r1	; 0x800957 <packet+0x1b>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:166

    CRC = update_crc(0, packet, 14);
    1248:	0e 94 db 00 	call	0x1b6	; 0x1b6 <update_crc(unsigned short, unsigned short*, unsigned short) [clone .constprop.32]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:167
    packet[14] = CRC & 0xFF;        // CRC_L
    124c:	9c 01       	movw	r18, r24
    124e:	33 27       	eor	r19, r19
    1250:	30 93 59 09 	sts	0x0959, r19	; 0x800959 <packet+0x1d>
    1254:	20 93 58 09 	sts	0x0958, r18	; 0x800958 <packet+0x1c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:168
    packet[15] = (CRC >> 8) & 0xFF; // CRC_H
    1258:	90 93 5a 09 	sts	0x095A, r25	; 0x80095a <packet+0x1e>
    125c:	10 92 5b 09 	sts	0x095B, r1	; 0x80095b <packet+0x1f>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:169
    send_mode;
    1260:	61 e0       	ldi	r22, 0x01	; 1
    1262:	86 e1       	ldi	r24, 0x16	; 22
    1264:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
    1268:	ec e3       	ldi	r30, 0x3C	; 60
    126a:	f9 e0       	ldi	r31, 0x09	; 9
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:172
    for (Count = 0; Count < 16; Count++)
    {
        while (!TXD_READY)
    126c:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1270:	85 ff       	sbrs	r24, 5
    1272:	fc cf       	rjmp	.-8      	; 0x126c <XL_Gripper(char, int, int)+0xb6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:174
            ;
        M_UDR = packet[Count];
    1274:	80 81       	ld	r24, Z
    1276:	32 96       	adiw	r30, 0x02	; 2
    1278:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:170

    CRC = update_crc(0, packet, 14);
    packet[14] = CRC & 0xFF;        // CRC_L
    packet[15] = (CRC >> 8) & 0xFF; // CRC_H
    send_mode;
    for (Count = 0; Count < 16; Count++)
    127c:	89 e0       	ldi	r24, 0x09	; 9
    127e:	ec 35       	cpi	r30, 0x5C	; 92
    1280:	f8 07       	cpc	r31, r24
    1282:	a1 f7       	brne	.-24     	; 0x126c <XL_Gripper(char, int, int)+0xb6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:176
    {
        while (!TXD_READY)
            ;
        M_UDR = packet[Count];
    }
    while (!CHECK_TXD_FINISH)
    1284:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1288:	86 ff       	sbrs	r24, 6
    128a:	fc cf       	rjmp	.-8      	; 0x1284 <XL_Gripper(char, int, int)+0xce>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:178
        ; // Wait until TXD Shift register empty
    delay(15);
    128c:	6f e0       	ldi	r22, 0x0F	; 15
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <delay>

00001298 <Print::printf(char const*, ...) [clone .constprop.28]>:
printf():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:208
{
  ((class Print *)(fdev_get_udata(fp)))->write((uint8_t)c);
  return 0;
}

int16_t Print::printf(const char *format, ...)
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	2e 97       	sbiw	r28, 0x0e	; 14
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	cd bf       	out	0x3d, r28	; 61
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:213
{
  FILE f;
  va_list ap;

  fdev_setup_stream(&f, printf_putchar, NULL, _FDEV_SETUP_WRITE);
    12ac:	84 e1       	ldi	r24, 0x14	; 20
    12ae:	91 e0       	ldi	r25, 0x01	; 1
    12b0:	9a 87       	std	Y+10, r25	; 0x0a
    12b2:	89 87       	std	Y+9, r24	; 0x09
    12b4:	1c 86       	std	Y+12, r1	; 0x0c
    12b6:	1b 86       	std	Y+11, r1	; 0x0b
    12b8:	82 e0       	ldi	r24, 0x02	; 2
    12ba:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:214
  fdev_set_udata(&f, this);
    12bc:	8e eb       	ldi	r24, 0xBE	; 190
    12be:	9a e0       	ldi	r25, 0x0A	; 10
    12c0:	9e 87       	std	Y+14, r25	; 0x0e
    12c2:	8d 87       	std	Y+13, r24	; 0x0d
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:216
  va_start(ap, format);
  return vfprintf(&f, format, ap);
    12c4:	ae 01       	movw	r20, r28
    12c6:	49 5e       	subi	r20, 0xE9	; 233
    12c8:	5f 4f       	sbci	r21, 0xFF	; 255
    12ca:	6d 89       	ldd	r22, Y+21	; 0x15
    12cc:	7e 89       	ldd	r23, Y+22	; 0x16
    12ce:	ce 01       	movw	r24, r28
    12d0:	01 96       	adiw	r24, 0x01	; 1
    12d2:	0e 94 82 31 	call	0x6304	; 0x6304 <vfprintf>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:217
}
    12d6:	2e 96       	adiw	r28, 0x0e	; 14
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	08 95       	ret

000012e8 <TwoWire::requestFrom(int, int) [clone .constprop.14]>:
requestFrom():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:185
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
    12e8:	ac 01       	movw	r20, r24
twi_readFrom():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:171
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_READY != twi_state){
    12ea:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <twi_state>
    12ee:	81 11       	cpse	r24, r1
    12f0:	fc cf       	rjmp	.-8      	; 0x12ea <TwoWire::requestFrom(int, int) [clone .constprop.14]+0x2>
requestFrom():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:187
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    12f2:	96 2f       	mov	r25, r22
twi_readFrom():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:175
      continue;
    }
  #endif
  twi_state = TWI_MRX;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <twi_state>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:176
  twi_sendStop = sendStop;
    12fa:	80 93 f4 08 	sts	0x08F4, r24	; 0x8008f4 <twi_sendStop>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:178
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    12fe:	2f ef       	ldi	r18, 0xFF	; 255
    1300:	20 93 f3 08 	sts	0x08F3, r18	; 0x8008f3 <twi_error>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:181

  // initialize buffer iteration vars
  twi_masterBuffer = data;
    1304:	2a e1       	ldi	r18, 0x1A	; 26
    1306:	39 e0       	ldi	r19, 0x09	; 9
    1308:	30 93 f2 08 	sts	0x08F2, r19	; 0x8008f2 <twi_masterBuffer+0x1>
    130c:	20 93 f1 08 	sts	0x08F1, r18	; 0x8008f1 <twi_masterBuffer>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:182
  twi_masterBufferIndex = 0;
    1310:	10 92 f0 08 	sts	0x08F0, r1	; 0x8008f0 <twi_masterBufferIndex>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:183
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    1314:	2f ef       	ldi	r18, 0xFF	; 255
    1316:	26 0f       	add	r18, r22
    1318:	20 93 ef 08 	sts	0x08EF, r18	; 0x8008ef <twi_masterBufferLength>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:191
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    131c:	80 93 ee 08 	sts	0x08EE, r24	; 0x8008ee <twi_slarw>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:192
  twi_slarw |= address << 1;
    1320:	20 91 ee 08 	lds	r18, 0x08EE	; 0x8008ee <twi_slarw>
    1324:	44 0f       	add	r20, r20
    1326:	55 1f       	adc	r21, r21
    1328:	82 2f       	mov	r24, r18
    132a:	84 2b       	or	r24, r20
    132c:	80 93 ee 08 	sts	0x08EE, r24	; 0x8008ee <twi_slarw>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:194

  if (true == twi_inRepStart) {
    1330:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <twi_inRepStart>
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	e9 f4       	brne	.+58     	; 0x1372 <TwoWire::requestFrom(int, int) [clone .constprop.14]+0x8a>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:201
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    1338:	10 92 ed 08 	sts	0x08ED, r1	; 0x8008ed <twi_inRepStart>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:213
          return 0;
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
    133c:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <twi_slarw>
    1340:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:214
      } while(TWCR & _BV(TWWC));
    1344:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1348:	83 fd       	sbrc	r24, 3
    134a:	f8 cf       	rjmp	.-16     	; 0x133c <TwoWire::requestFrom(int, int) [clone .constprop.14]+0x54>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:216
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    134c:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:220
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    134e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:232
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_MRX == twi_state){
    1352:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <twi_state>
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	e1 f3       	breq	.-8      	; 0x1352 <TwoWire::requestFrom(int, int) [clone .constprop.14]+0x6a>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:237
      continue;
    }
  #endif

  if (twi_masterBufferIndex < length)
    135a:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <twi_masterBufferIndex>
    135e:	86 17       	cp	r24, r22
    1360:	10 f4       	brcc	.+4      	; 0x1366 <TwoWire::requestFrom(int, int) [clone .constprop.14]+0x7e>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:238
    length = twi_masterBufferIndex;
    1362:	90 91 f0 08 	lds	r25, 0x08F0	; 0x8008f0 <twi_masterBufferIndex>
requestFrom():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:122
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    1366:	10 92 3b 09 	sts	0x093B, r1	; 0x80093b <TwoWire::rxBufferIndex>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:123
  rxBufferLength = read;
    136a:	90 93 3a 09 	sts	0x093A, r25	; 0x80093a <TwoWire::rxBufferLength>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:188
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
    136e:	89 2f       	mov	r24, r25
    1370:	08 95       	ret
twi_readFrom():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:220
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    1372:	85 ee       	ldi	r24, 0xE5	; 229
    1374:	ec cf       	rjmp	.-40     	; 0x134e <TwoWire::requestFrom(int, int) [clone .constprop.14]+0x66>

00001376 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]>:
printNumber():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
    1376:	8f 92       	push	r8
    1378:	9f 92       	push	r9
    137a:	af 92       	push	r10
    137c:	bf 92       	push	r11
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	a1 97       	sbiw	r28, 0x21	; 33
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1396:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1398:	42 30       	cpi	r20, 0x02	; 2
    139a:	08 f4       	brcc	.+2      	; 0x139e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x28>
    139c:	4a e0       	ldi	r20, 0x0A	; 10
    139e:	8e 01       	movw	r16, r28
    13a0:	0f 5d       	subi	r16, 0xDF	; 223
    13a2:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    13a4:	84 2e       	mov	r8, r20
    13a6:	91 2c       	mov	r9, r1
    13a8:	b1 2c       	mov	r11, r1
    13aa:	a1 2c       	mov	r10, r1
    13ac:	a5 01       	movw	r20, r10
    13ae:	94 01       	movw	r18, r8
    13b0:	0e 94 32 36 	call	0x6c64	; 0x6c64 <__udivmodsi4>
    13b4:	e6 2f       	mov	r30, r22
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
    13b6:	b9 01       	movw	r22, r18
    13b8:	ca 01       	movw	r24, r20
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    13ba:	ea 30       	cpi	r30, 0x0A	; 10
    13bc:	44 f5       	brge	.+80     	; 0x140e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x98>
    13be:	e0 5d       	subi	r30, 0xD0	; 208
    13c0:	d8 01       	movw	r26, r16
    13c2:	ee 93       	st	-X, r30
    13c4:	8d 01       	movw	r16, r26
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:247
  } while(n);
    13c6:	23 2b       	or	r18, r19
    13c8:	24 2b       	or	r18, r20
    13ca:	25 2b       	or	r18, r21
    13cc:	79 f7       	brne	.-34     	; 0x13ac <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x36>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	80 e0       	ldi	r24, 0x00	; 0
write():
    13d2:	10 97       	sbiw	r26, 0x00	; 0
    13d4:	69 f0       	breq	.+26     	; 0x13f0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x7a>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    13d6:	fd 01       	movw	r30, r26
    13d8:	01 90       	ld	r0, Z+
    13da:	00 20       	and	r0, r0
    13dc:	e9 f7       	brne	.-6      	; 0x13d8 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x62>
    13de:	31 97       	sbiw	r30, 0x01	; 1
    13e0:	af 01       	movw	r20, r30
    13e2:	4a 1b       	sub	r20, r26
    13e4:	5b 0b       	sbc	r21, r27
    13e6:	bd 01       	movw	r22, r26
    13e8:	8e eb       	ldi	r24, 0xBE	; 190
    13ea:	9a e0       	ldi	r25, 0x0A	; 10
    13ec:	0e 94 8f 03 	call	0x71e	; 0x71e <Print::write(unsigned char const*, unsigned int)>
printNumber():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    13f0:	a1 96       	adiw	r28, 0x21	; 33
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	bf 90       	pop	r11
    1406:	af 90       	pop	r10
    1408:	9f 90       	pop	r9
    140a:	8f 90       	pop	r8
    140c:	08 95       	ret
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    140e:	e9 5c       	subi	r30, 0xC9	; 201
    1410:	d7 cf       	rjmp	.-82     	; 0x13c0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x4a>

00001412 <Print::print(int, int) [clone .constprop.4]>:
print():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:77
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    1412:	cf 92       	push	r12
    1414:	df 92       	push	r13
    1416:	ef 92       	push	r14
    1418:	ff 92       	push	r15
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:79
{
  return print((long) n, base);
    141a:	6c 01       	movw	r12, r24
    141c:	99 0f       	add	r25, r25
    141e:	ee 08       	sbc	r14, r14
    1420:	ff 08       	sbc	r15, r15
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    1422:	f7 fe       	sbrs	r15, 7
    1424:	16 c0       	rjmp	.+44     	; 0x1452 <Print::print(int, int) [clone .constprop.4]+0x40>
write():
C:\Users\Ryan\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    1426:	41 e0       	ldi	r20, 0x01	; 1
    1428:	6d e2       	ldi	r22, 0x2D	; 45
    142a:	8e eb       	ldi	r24, 0xBE	; 190
    142c:	9a e0       	ldi	r25, 0x0A	; 10
    142e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <LiquidCrystal::send(unsigned char, unsigned char)>
print():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:94
      int t = print('-');
      n = -n;
    1432:	66 27       	eor	r22, r22
    1434:	77 27       	eor	r23, r23
    1436:	cb 01       	movw	r24, r22
    1438:	6c 19       	sub	r22, r12
    143a:	7d 09       	sbc	r23, r13
    143c:	8e 09       	sbc	r24, r14
    143e:	9f 09       	sbc	r25, r15
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
    1440:	4a e0       	ldi	r20, 0x0A	; 10
    1442:	0e 94 bb 09 	call	0x1376	; 0x1376 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]>
    1446:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:80
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
}
    1448:	ff 90       	pop	r15
    144a:	ef 90       	pop	r14
    144c:	df 90       	pop	r13
    144e:	cf 90       	pop	r12
    1450:	08 95       	ret
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1452:	4a e0       	ldi	r20, 0x0A	; 10
    1454:	c7 01       	movw	r24, r14
    1456:	b6 01       	movw	r22, r12
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:80
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
}
    1458:	ff 90       	pop	r15
    145a:	ef 90       	pop	r14
    145c:	df 90       	pop	r13
    145e:	cf 90       	pop	r12
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1460:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]>

00001464 <Print::print(char const*) [clone .constprop.9]>:
write():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/Print.h:54
    1464:	fc 01       	movw	r30, r24
    1466:	01 90       	ld	r0, Z+
    1468:	00 20       	and	r0, r0
    146a:	e9 f7       	brne	.-6      	; 0x1466 <Print::print(char const*) [clone .constprop.9]+0x2>
    146c:	31 97       	sbiw	r30, 0x01	; 1
    146e:	af 01       	movw	r20, r30
    1470:	48 1b       	sub	r20, r24
    1472:	59 0b       	sbc	r21, r25
    1474:	bc 01       	movw	r22, r24
    1476:	8e eb       	ldi	r24, 0xBE	; 190
    1478:	9a e0       	ldi	r25, 0x0A	; 10
    147a:	0c 94 8f 03 	jmp	0x71e	; 0x71e <Print::write(unsigned char const*, unsigned int)>

0000147e <EEPROM_write_int(int, int)>:
EEPROM_write_int():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:192
    analogWrite(5, -right);
  }
}


void EEPROM_write_int(int address, int number) {
    147e:	1f 93       	push	r17
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	ec 01       	movw	r28, r24
    1486:	16 2f       	mov	r17, r22
    1488:	67 2f       	mov	r22, r23
operator=():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    148a:	0e 94 31 34 	call	0x6862	; 0x6862 <eeprom_write_byte>
    148e:	61 2f       	mov	r22, r17
    1490:	ce 01       	movw	r24, r28
    1492:	01 96       	adiw	r24, 0x01	; 1
EEPROM_write_int():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:195
  EEPROM.write(address, number >> 8);
  EEPROM.write(address + 1, number & 0xFF);
}
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	1f 91       	pop	r17
operator=():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\EEPROM\src/EEPROM.h:47
    149a:	0c 94 31 34 	jmp	0x6862	; 0x6862 <eeprom_write_byte>

0000149e <EEPROM_read_int(int)>:
EEPROM_read_int():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:197

int EEPROM_read_int(int address) {
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	cf 93       	push	r28
    14a4:	8c 01       	movw	r16, r24
operator*():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    14a6:	0e 94 29 34 	call	0x6852	; 0x6852 <eeprom_read_byte>
    14aa:	c8 2f       	mov	r28, r24
    14ac:	c8 01       	movw	r24, r16
    14ae:	01 96       	adiw	r24, 0x01	; 1
    14b0:	0e 94 29 34 	call	0x6852	; 0x6852 <eeprom_read_byte>
EEPROM_read_int():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:199
  int result = 0;
  result = (EEPROM.read(address) << 8) + EEPROM.read(address + 1);
    14b4:	2c 2f       	mov	r18, r28
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	32 2f       	mov	r19, r18
    14ba:	22 27       	eor	r18, r18
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:201
  return result;
}
    14bc:	82 0f       	add	r24, r18
    14be:	93 2f       	mov	r25, r19
    14c0:	91 1d       	adc	r25, r1
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	08 95       	ret

000014ca <color(char)>:
color():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:287
    delay(1000);
  }
  delay(500);
}

char color(char select) {
    14ca:	af 92       	push	r10
    14cc:	bf 92       	push	r11
    14ce:	cf 92       	push	r12
    14d0:	df 92       	push	r13
    14d2:	ef 92       	push	r14
    14d4:	ff 92       	push	r15
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	d8 2e       	mov	r13, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:289
  unsigned char low_byte, high_byte;
  if (select == 1)  // left
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	d8 12       	cpse	r13, r24
    14e4:	f5 c0       	rjmp	.+490    	; 0x16d0 <color(char)+0x206>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:291
  {
    digitalWrite(MUX_C, LOW);
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	8a e2       	ldi	r24, 0x2A	; 42
    14ea:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:292
    digitalWrite(MUX_B, LOW);
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	8b e2       	ldi	r24, 0x2B	; 43
    14f2:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:293
    digitalWrite(MUX_A, LOW);
    14f6:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:299
    //  Serial.print("left color:  ");
  } else if (select == 2)  // right
  {
    digitalWrite(MUX_C, LOW);
    digitalWrite(MUX_B, LOW);
    digitalWrite(MUX_A, HIGH);
    14f8:	8c e2       	ldi	r24, 0x2C	; 44
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:304
    //  Serial.print("right color:  ");
  } else {
    digitalWrite(MUX_A, HIGH);  //front
    digitalWrite(MUX_B, HIGH);
    digitalWrite(MUX_C, LOW);
    14fa:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:306
  }
  delayMicroseconds(10);
    14fe:	8a e0       	ldi	r24, 0x0A	; 10
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <delayMicroseconds>
beginTransmission():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:208
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    1506:	89 e3       	ldi	r24, 0x39	; 57
    1508:	0e 94 a1 01 	call	0x342	; 0x342 <TwoWire::beginTransmission(unsigned char) [clone .constprop.17]>
color():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:309

  Wire.beginTransmission(57);  // transmit to device #57 (0x39)
  Wire.write(byte(0x80));
    150c:	60 e8       	ldi	r22, 0x80	; 128
    150e:	82 eb       	ldi	r24, 0xB2	; 178
    1510:	9a e0       	ldi	r25, 0x0A	; 10
    1512:	0e 94 24 05 	call	0xa48	; 0xa48 <TwoWire::write(unsigned char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:310
  Wire.write(byte(3));  // power
    1516:	63 e0       	ldi	r22, 0x03	; 3
    1518:	82 eb       	ldi	r24, 0xB2	; 178
    151a:	9a e0       	ldi	r25, 0x0A	; 10
    151c:	0e 94 24 05 	call	0xa48	; 0xa48 <TwoWire::write(unsigned char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:311
  Wire.endTransmission();
    1520:	0e 94 ab 01 	call	0x356	; 0x356 <TwoWire::endTransmission() [clone .constprop.13]>
beginTransmission():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:208
    1524:	89 e3       	ldi	r24, 0x39	; 57
    1526:	0e 94 a1 01 	call	0x342	; 0x342 <TwoWire::beginTransmission(unsigned char) [clone .constprop.17]>
color():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:314

  Wire.beginTransmission(57);  // transmit to device #57 (0x39)
  Wire.write(byte(0x8F));
    152a:	6f e8       	ldi	r22, 0x8F	; 143
    152c:	82 eb       	ldi	r24, 0xB2	; 178
    152e:	9a e0       	ldi	r25, 0x0A	; 10
    1530:	0e 94 24 05 	call	0xa48	; 0xa48 <TwoWire::write(unsigned char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:315
  Wire.write(byte(1));  // gain
    1534:	61 e0       	ldi	r22, 0x01	; 1
    1536:	82 eb       	ldi	r24, 0xB2	; 178
    1538:	9a e0       	ldi	r25, 0x0A	; 10
    153a:	0e 94 24 05 	call	0xa48	; 0xa48 <TwoWire::write(unsigned char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:316
  Wire.endTransmission();
    153e:	0e 94 ab 01 	call	0x356	; 0x356 <TwoWire::endTransmission() [clone .constprop.13]>
beginTransmission():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:208
    1542:	89 e3       	ldi	r24, 0x39	; 57
    1544:	0e 94 a1 01 	call	0x342	; 0x342 <TwoWire::beginTransmission(unsigned char) [clone .constprop.17]>
color():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:319

  Wire.beginTransmission(57);  // transmit to device #57 (0x39)
  Wire.write(byte(0x94));      // address of first data
    1548:	64 e9       	ldi	r22, 0x94	; 148
    154a:	82 eb       	ldi	r24, 0xB2	; 178
    154c:	9a e0       	ldi	r25, 0x0A	; 10
    154e:	0e 94 24 05 	call	0xa48	; 0xa48 <TwoWire::write(unsigned char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:320
  Wire.endTransmission();
    1552:	0e 94 ab 01 	call	0x356	; 0x356 <TwoWire::endTransmission() [clone .constprop.13]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:322

  Wire.requestFrom(57, 8);
    1556:	68 e0       	ldi	r22, 0x08	; 8
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	89 e3       	ldi	r24, 0x39	; 57
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <TwoWire::requestFrom(int, int) [clone .constprop.14]>
available():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:292
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    1562:	80 91 3a 09 	lds	r24, 0x093A	; 0x80093a <TwoWire::rxBufferLength>
    1566:	90 91 3b 09 	lds	r25, 0x093B	; 0x80093b <TwoWire::rxBufferIndex>
    156a:	89 1b       	sub	r24, r25
    156c:	99 0b       	sbc	r25, r25
color():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:323
  if (8 <= Wire.available())  // if 8 bytes were received
    156e:	08 97       	sbiw	r24, 0x08	; 8
    1570:	d4 f1       	brlt	.+116    	; 0x15e6 <color(char)+0x11c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:325
  {
    low_byte = Wire.read();
    1572:	0e 94 36 01 	call	0x26c	; 0x26c <TwoWire::read() [clone .constprop.22]>
    1576:	ec 01       	movw	r28, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:326
    high_byte = Wire.read();
    1578:	0e 94 36 01 	call	0x26c	; 0x26c <TwoWire::read() [clone .constprop.22]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:327
    clear = high_byte * 255 + low_byte;
    157c:	1f ef       	ldi	r17, 0xFF	; 255
    157e:	dd 27       	eor	r29, r29
    1580:	81 9f       	mul	r24, r17
    1582:	c0 0d       	add	r28, r0
    1584:	d1 1d       	adc	r29, r1
    1586:	11 24       	eor	r1, r1
    1588:	d0 93 c8 08 	sts	0x08C8, r29	; 0x8008c8 <clear+0x1>
    158c:	c0 93 c7 08 	sts	0x08C7, r28	; 0x8008c7 <clear>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:329

    low_byte = Wire.read();
    1590:	0e 94 36 01 	call	0x26c	; 0x26c <TwoWire::read() [clone .constprop.22]>
    1594:	ec 01       	movw	r28, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:330
    high_byte = Wire.read();
    1596:	0e 94 36 01 	call	0x26c	; 0x26c <TwoWire::read() [clone .constprop.22]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:331
    red = high_byte * 255 + low_byte;
    159a:	dd 27       	eor	r29, r29
    159c:	81 9f       	mul	r24, r17
    159e:	c0 0d       	add	r28, r0
    15a0:	d1 1d       	adc	r29, r1
    15a2:	11 24       	eor	r1, r1
    15a4:	d0 93 ce 08 	sts	0x08CE, r29	; 0x8008ce <red+0x1>
    15a8:	c0 93 cd 08 	sts	0x08CD, r28	; 0x8008cd <red>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:333

    low_byte = Wire.read();
    15ac:	0e 94 36 01 	call	0x26c	; 0x26c <TwoWire::read() [clone .constprop.22]>
    15b0:	ec 01       	movw	r28, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:334
    high_byte = Wire.read();
    15b2:	0e 94 36 01 	call	0x26c	; 0x26c <TwoWire::read() [clone .constprop.22]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:335
    green = high_byte * 255 + low_byte;
    15b6:	dd 27       	eor	r29, r29
    15b8:	81 9f       	mul	r24, r17
    15ba:	c0 0d       	add	r28, r0
    15bc:	d1 1d       	adc	r29, r1
    15be:	11 24       	eor	r1, r1
    15c0:	d0 93 cc 08 	sts	0x08CC, r29	; 0x8008cc <green+0x1>
    15c4:	c0 93 cb 08 	sts	0x08CB, r28	; 0x8008cb <green>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:337

    low_byte = Wire.read();
    15c8:	0e 94 36 01 	call	0x26c	; 0x26c <TwoWire::read() [clone .constprop.22]>
    15cc:	ec 01       	movw	r28, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:338
    high_byte = Wire.read();
    15ce:	0e 94 36 01 	call	0x26c	; 0x26c <TwoWire::read() [clone .constprop.22]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:339
    blue = (high_byte * 255 + low_byte) - 10;
    15d2:	dd 27       	eor	r29, r29
    15d4:	81 9f       	mul	r24, r17
    15d6:	c0 0d       	add	r28, r0
    15d8:	d1 1d       	adc	r29, r1
    15da:	11 24       	eor	r1, r1
    15dc:	2a 97       	sbiw	r28, 0x0a	; 10
    15de:	d0 93 ca 08 	sts	0x08CA, r29	; 0x8008ca <blue+0x1>
    15e2:	c0 93 c9 08 	sts	0x08C9, r28	; 0x8008c9 <blue>
    15e6:	e0 90 cd 08 	lds	r14, 0x08CD	; 0x8008cd <red>
    15ea:	f0 90 ce 08 	lds	r15, 0x08CE	; 0x8008ce <red+0x1>
    15ee:	00 91 cb 08 	lds	r16, 0x08CB	; 0x8008cb <green>
    15f2:	10 91 cc 08 	lds	r17, 0x08CC	; 0x8008cc <green+0x1>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:342
  }

  if (select == 1)  // left
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	d8 12       	cpse	r13, r24
    15fa:	b1 c1       	rjmp	.+866    	; 0x195e <color(char)+0x494>
    15fc:	c0 90 c9 08 	lds	r12, 0x08C9	; 0x8008c9 <blue>
    1600:	d0 90 ca 08 	lds	r13, 0x08CA	; 0x8008ca <blue+0x1>
    1604:	8a e9       	ldi	r24, 0x9A	; 154
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    160c:	ec 01       	movw	r28, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:344
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_left_r) + range && red > EEPROM_read_int(red_left_r) - range && green < EEPROM_read_int(red_left_g) + range && green > EEPROM_read_int(red_left_g) - range && blue < EEPROM_read_int(red_left_b) + range && blue > EEPROM_read_int(red_left_b) - range && clear < EEPROM_read_int(red_left_c) + range && clear > EEPROM_read_int(red_left_c) - range)
    160e:	0e 15       	cp	r16, r14
    1610:	1f 05       	cpc	r17, r15
    1612:	0c f0       	brlt	.+2      	; 0x1616 <color(char)+0x14c>
    1614:	75 c0       	rjmp	.+234    	; 0x1700 <color(char)+0x236>
    1616:	ce 14       	cp	r12, r14
    1618:	df 04       	cpc	r13, r15
    161a:	0c f0       	brlt	.+2      	; 0x161e <color(char)+0x154>
    161c:	ba c0       	rjmp	.+372    	; 0x1792 <color(char)+0x2c8>
    161e:	84 e1       	ldi	r24, 0x14	; 20
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1626:	9c 01       	movw	r18, r24
    1628:	2c 0f       	add	r18, r28
    162a:	3d 1f       	adc	r19, r29
    162c:	e2 16       	cp	r14, r18
    162e:	f3 06       	cpc	r15, r19
    1630:	0c f0       	brlt	.+2      	; 0x1634 <color(char)+0x16a>
    1632:	b3 c0       	rjmp	.+358    	; 0x179a <color(char)+0x2d0>
    1634:	8c 1b       	sub	r24, r28
    1636:	9d 0b       	sbc	r25, r29
    1638:	8e 15       	cp	r24, r14
    163a:	9f 05       	cpc	r25, r15
    163c:	0c f0       	brlt	.+2      	; 0x1640 <color(char)+0x176>
    163e:	ad c0       	rjmp	.+346    	; 0x179a <color(char)+0x2d0>
    1640:	86 e1       	ldi	r24, 0x16	; 22
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1648:	9c 01       	movw	r18, r24
    164a:	2c 0f       	add	r18, r28
    164c:	3d 1f       	adc	r19, r29
    164e:	02 17       	cp	r16, r18
    1650:	13 07       	cpc	r17, r19
    1652:	0c f0       	brlt	.+2      	; 0x1656 <color(char)+0x18c>
    1654:	a2 c0       	rjmp	.+324    	; 0x179a <color(char)+0x2d0>
    1656:	8c 1b       	sub	r24, r28
    1658:	9d 0b       	sbc	r25, r29
    165a:	80 17       	cp	r24, r16
    165c:	91 07       	cpc	r25, r17
    165e:	0c f0       	brlt	.+2      	; 0x1662 <color(char)+0x198>
    1660:	9c c0       	rjmp	.+312    	; 0x179a <color(char)+0x2d0>
    1662:	88 e1       	ldi	r24, 0x18	; 24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    166a:	9c 01       	movw	r18, r24
    166c:	2c 0f       	add	r18, r28
    166e:	3d 1f       	adc	r19, r29
    1670:	c2 16       	cp	r12, r18
    1672:	d3 06       	cpc	r13, r19
    1674:	0c f0       	brlt	.+2      	; 0x1678 <color(char)+0x1ae>
    1676:	91 c0       	rjmp	.+290    	; 0x179a <color(char)+0x2d0>
    1678:	8c 1b       	sub	r24, r28
    167a:	9d 0b       	sbc	r25, r29
    167c:	8c 15       	cp	r24, r12
    167e:	9d 05       	cpc	r25, r13
    1680:	0c f0       	brlt	.+2      	; 0x1684 <color(char)+0x1ba>
    1682:	8b c0       	rjmp	.+278    	; 0x179a <color(char)+0x2d0>
    1684:	8a e1       	ldi	r24, 0x1A	; 26
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    168c:	20 91 c7 08 	lds	r18, 0x08C7	; 0x8008c7 <clear>
    1690:	30 91 c8 08 	lds	r19, 0x08C8	; 0x8008c8 <clear+0x1>
    1694:	ac 01       	movw	r20, r24
    1696:	4c 0f       	add	r20, r28
    1698:	5d 1f       	adc	r21, r29
    169a:	24 17       	cp	r18, r20
    169c:	35 07       	cpc	r19, r21
    169e:	0c f0       	brlt	.+2      	; 0x16a2 <color(char)+0x1d8>
    16a0:	7c c0       	rjmp	.+248    	; 0x179a <color(char)+0x2d0>
    16a2:	8c 1b       	sub	r24, r28
    16a4:	9d 0b       	sbc	r25, r29
    16a6:	82 17       	cp	r24, r18
    16a8:	93 07       	cpc	r25, r19
    16aa:	0c f0       	brlt	.+2      	; 0x16ae <color(char)+0x1e4>
    16ac:	76 c0       	rjmp	.+236    	; 0x179a <color(char)+0x2d0>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:391

    return color_out;
  } else if (select == 3)  // front
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_front_r) + range && red > EEPROM_read_int(red_front_r) - range && green < EEPROM_read_int(red_front_g) + range && green > EEPROM_read_int(red_front_g) - range && blue < EEPROM_read_int(red_front_b) + range && blue > EEPROM_read_int(red_front_b) - range && clear < EEPROM_read_int(red_front_c) + range && clear > EEPROM_read_int(red_front_c) - range)
      color_out = RED;
    16ae:	10 92 7f 08 	sts	0x087F, r1	; 0x80087f <color_out+0x1>
    16b2:	10 92 7e 08 	sts	0x087E, r1	; 0x80087e <color_out>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:399
      color_out = GREEN;

    else
      color_out = WHITE;

    return color_out;
    16b6:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <color_out>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:402
  }
  // delay(5);
}
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	1f 91       	pop	r17
    16c0:	0f 91       	pop	r16
    16c2:	ff 90       	pop	r15
    16c4:	ef 90       	pop	r14
    16c6:	df 90       	pop	r13
    16c8:	cf 90       	pop	r12
    16ca:	bf 90       	pop	r11
    16cc:	af 90       	pop	r10
    16ce:	08 95       	ret
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:295
  {
    digitalWrite(MUX_C, LOW);
    digitalWrite(MUX_B, LOW);
    digitalWrite(MUX_A, LOW);
    //  Serial.print("left color:  ");
  } else if (select == 2)  // right
    16d0:	82 e0       	ldi	r24, 0x02	; 2
    16d2:	d8 12       	cpse	r13, r24
    16d4:	0a c0       	rjmp	.+20     	; 0x16ea <color(char)+0x220>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:297
  {
    digitalWrite(MUX_C, LOW);
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	8a e2       	ldi	r24, 0x2A	; 42
    16da:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:298
    digitalWrite(MUX_B, LOW);
    16de:	60 e0       	ldi	r22, 0x00	; 0
    16e0:	8b e2       	ldi	r24, 0x2B	; 43
    16e2:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:299
    digitalWrite(MUX_A, HIGH);
    16e6:	61 e0       	ldi	r22, 0x01	; 1
    16e8:	07 cf       	rjmp	.-498    	; 0x14f8 <color(char)+0x2e>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:302
    //  Serial.print("right color:  ");
  } else {
    digitalWrite(MUX_A, HIGH);  //front
    16ea:	61 e0       	ldi	r22, 0x01	; 1
    16ec:	8c e2       	ldi	r24, 0x2C	; 44
    16ee:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:303
    digitalWrite(MUX_B, HIGH);
    16f2:	61 e0       	ldi	r22, 0x01	; 1
    16f4:	8b e2       	ldi	r24, 0x2B	; 43
    16f6:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:304
    digitalWrite(MUX_C, LOW);
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	8a e2       	ldi	r24, 0x2A	; 42
    16fe:	fd ce       	rjmp	.-518    	; 0x14fa <color(char)+0x30>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:348
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_left_r) + range && red > EEPROM_read_int(red_left_r) - range && green < EEPROM_read_int(red_left_g) + range && green > EEPROM_read_int(red_left_g) - range && blue < EEPROM_read_int(red_left_b) + range && blue > EEPROM_read_int(red_left_b) - range && clear < EEPROM_read_int(red_left_c) + range && clear > EEPROM_read_int(red_left_c) - range)
      color_out = RED;

    //else if (green > red && green > blue && red < EEPROM_read_int(green_left_r) + range && red > EEPROM_read_int(green_left_r) - range && green > EEPROM_read_int(green_left_g)-range/2 && green < EEPROM_read_int(green_left_g) + range && blue < EEPROM_read_int(green_left_b) + range && blue > EEPROM_read_int(green_left_b) - range /*&& clear < EEPROM_read_int(green_left_c) + range*/ && clear > EEPROM_read_int(green_left_c) - range/2)
    else if (green > red && green > blue && red < EEPROM_read_int(green_left_r) + range && red > EEPROM_read_int(green_left_r) - range && green < EEPROM_read_int(green_left_g) + range && green > EEPROM_read_int(green_left_g) - range && blue < EEPROM_read_int(green_left_b) + range && blue > EEPROM_read_int(green_left_b) - range && clear < EEPROM_read_int(green_left_c) + range && clear > EEPROM_read_int(green_left_c) - range) { color_out = GREEN; }  //beep(1);}
    1700:	e0 16       	cp	r14, r16
    1702:	f1 06       	cpc	r15, r17
    1704:	0c f0       	brlt	.+2      	; 0x1708 <color(char)+0x23e>
    1706:	45 c0       	rjmp	.+138    	; 0x1792 <color(char)+0x2c8>
    1708:	c0 16       	cp	r12, r16
    170a:	d1 06       	cpc	r13, r17
    170c:	0c f0       	brlt	.+2      	; 0x1710 <color(char)+0x246>
    170e:	41 c0       	rjmp	.+130    	; 0x1792 <color(char)+0x2c8>
    1710:	8c e1       	ldi	r24, 0x1C	; 28
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1718:	9c 01       	movw	r18, r24
    171a:	2c 0f       	add	r18, r28
    171c:	3d 1f       	adc	r19, r29
    171e:	e2 16       	cp	r14, r18
    1720:	f3 06       	cpc	r15, r19
    1722:	bc f5       	brge	.+110    	; 0x1792 <color(char)+0x2c8>
    1724:	8c 1b       	sub	r24, r28
    1726:	9d 0b       	sbc	r25, r29
    1728:	8e 15       	cp	r24, r14
    172a:	9f 05       	cpc	r25, r15
    172c:	94 f5       	brge	.+100    	; 0x1792 <color(char)+0x2c8>
    172e:	8e e1       	ldi	r24, 0x1E	; 30
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1736:	9c 01       	movw	r18, r24
    1738:	2c 0f       	add	r18, r28
    173a:	3d 1f       	adc	r19, r29
    173c:	02 17       	cp	r16, r18
    173e:	13 07       	cpc	r17, r19
    1740:	44 f5       	brge	.+80     	; 0x1792 <color(char)+0x2c8>
    1742:	8c 1b       	sub	r24, r28
    1744:	9d 0b       	sbc	r25, r29
    1746:	80 17       	cp	r24, r16
    1748:	91 07       	cpc	r25, r17
    174a:	1c f5       	brge	.+70     	; 0x1792 <color(char)+0x2c8>
    174c:	80 e2       	ldi	r24, 0x20	; 32
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1754:	9e 01       	movw	r18, r28
    1756:	28 0f       	add	r18, r24
    1758:	39 1f       	adc	r19, r25
    175a:	c2 16       	cp	r12, r18
    175c:	d3 06       	cpc	r13, r19
    175e:	cc f4       	brge	.+50     	; 0x1792 <color(char)+0x2c8>
    1760:	8c 1b       	sub	r24, r28
    1762:	9d 0b       	sbc	r25, r29
    1764:	8c 15       	cp	r24, r12
    1766:	9d 05       	cpc	r25, r13
    1768:	a4 f4       	brge	.+40     	; 0x1792 <color(char)+0x2c8>
    176a:	82 e2       	ldi	r24, 0x22	; 34
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1772:	20 91 c7 08 	lds	r18, 0x08C7	; 0x8008c7 <clear>
    1776:	30 91 c8 08 	lds	r19, 0x08C8	; 0x8008c8 <clear+0x1>
    177a:	ae 01       	movw	r20, r28
    177c:	48 0f       	add	r20, r24
    177e:	59 1f       	adc	r21, r25
    1780:	24 17       	cp	r18, r20
    1782:	35 07       	cpc	r19, r21
    1784:	34 f4       	brge	.+12     	; 0x1792 <color(char)+0x2c8>
    1786:	8c 1b       	sub	r24, r28
    1788:	9d 0b       	sbc	r25, r29
    178a:	82 17       	cp	r24, r18
    178c:	93 07       	cpc	r25, r19
    178e:	0c f4       	brge	.+2      	; 0x1792 <color(char)+0x2c8>
    1790:	1d c2       	rjmp	.+1082   	; 0x1bcc <color(char)+0x702>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:350

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_left_r) + range && red > EEPROM_read_int(blue_left_r) - range && green < EEPROM_read_int(blue_left_g) + range && green > EEPROM_read_int(blue_left_g) - range && blue < EEPROM_read_int(blue_left_b) + range && blue > EEPROM_read_int(blue_left_b) - range && clear < EEPROM_read_int(blue_left_c) + range && clear > EEPROM_read_int(blue_left_c) - range)
    1792:	ec 14       	cp	r14, r12
    1794:	fd 04       	cpc	r15, r13
    1796:	0c f4       	brge	.+2      	; 0x179a <color(char)+0x2d0>
    1798:	4f c0       	rjmp	.+158    	; 0x1838 <color(char)+0x36e>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:353
      color_out = BLUE;

    else if (red < EEPROM_read_int(yellow_left_r) + range && red > EEPROM_read_int(yellow_left_r) - range && green < EEPROM_read_int(yellow_left_g) + range && green > EEPROM_read_int(yellow_left_g) - range && blue < EEPROM_read_int(yellow_left_b) + range && blue > EEPROM_read_int(yellow_left_b) - range && clear < EEPROM_read_int(yellow_left_c) + range && clear > EEPROM_read_int(yellow_left_c) - range)
    179a:	8c e2       	ldi	r24, 0x2C	; 44
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    17a2:	9e 01       	movw	r18, r28
    17a4:	28 0f       	add	r18, r24
    17a6:	39 1f       	adc	r19, r25
    17a8:	e2 16       	cp	r14, r18
    17aa:	f3 06       	cpc	r15, r19
    17ac:	0c f4       	brge	.+2      	; 0x17b0 <color(char)+0x2e6>
    17ae:	97 c0       	rjmp	.+302    	; 0x18de <color(char)+0x414>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:357
      color_out = YELLOW;

    else if (
      red <= (EEPROM_read_int(silver_left_r) + range) && red >= (EEPROM_read_int(silver_left_r) - range) && green >= (EEPROM_read_int(silver_left_g) - range) && green <= (EEPROM_read_int(silver_left_g) + range) && blue >= (EEPROM_read_int(silver_left_b) - range) && blue <= (EEPROM_read_int(silver_left_b) + range) && clear <= (EEPROM_read_int(silver_left_c) + range) && clear >= (EEPROM_read_int(silver_left_c) - range)) {
    17b0:	84 e3       	ldi	r24, 0x34	; 52
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    17b8:	9e 01       	movw	r18, r28
    17ba:	28 0f       	add	r18, r24
    17bc:	39 1f       	adc	r19, r25
    17be:	2e 15       	cp	r18, r14
    17c0:	3f 05       	cpc	r19, r15
    17c2:	bc f1       	brlt	.+110    	; 0x1832 <color(char)+0x368>
    17c4:	8c 1b       	sub	r24, r28
    17c6:	9d 0b       	sbc	r25, r29
    17c8:	e8 16       	cp	r14, r24
    17ca:	f9 06       	cpc	r15, r25
    17cc:	94 f1       	brlt	.+100    	; 0x1832 <color(char)+0x368>
    17ce:	86 e3       	ldi	r24, 0x36	; 54
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    17d6:	9c 01       	movw	r18, r24
    17d8:	2c 1b       	sub	r18, r28
    17da:	3d 0b       	sbc	r19, r29
    17dc:	02 17       	cp	r16, r18
    17de:	13 07       	cpc	r17, r19
    17e0:	44 f1       	brlt	.+80     	; 0x1832 <color(char)+0x368>
    17e2:	8c 0f       	add	r24, r28
    17e4:	9d 1f       	adc	r25, r29
    17e6:	80 17       	cp	r24, r16
    17e8:	91 07       	cpc	r25, r17
    17ea:	1c f1       	brlt	.+70     	; 0x1832 <color(char)+0x368>
    17ec:	88 e3       	ldi	r24, 0x38	; 56
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    17f4:	9c 01       	movw	r18, r24
    17f6:	2c 1b       	sub	r18, r28
    17f8:	3d 0b       	sbc	r19, r29
    17fa:	c2 16       	cp	r12, r18
    17fc:	d3 06       	cpc	r13, r19
    17fe:	cc f0       	brlt	.+50     	; 0x1832 <color(char)+0x368>
    1800:	8c 0f       	add	r24, r28
    1802:	9d 1f       	adc	r25, r29
    1804:	8c 15       	cp	r24, r12
    1806:	9d 05       	cpc	r25, r13
    1808:	a4 f0       	brlt	.+40     	; 0x1832 <color(char)+0x368>
    180a:	8a e3       	ldi	r24, 0x3A	; 58
    180c:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:380

    else if (red < EEPROM_read_int(yellow_right_r) + range && red > EEPROM_read_int(yellow_right_r) - range && green < EEPROM_read_int(yellow_right_g) + range && green > EEPROM_read_int(yellow_right_g) - range && blue < EEPROM_read_int(yellow_right_b) + range && blue > EEPROM_read_int(yellow_right_b) - range && clear < EEPROM_read_int(yellow_right_c) + range && clear > EEPROM_read_int(yellow_right_c) - range)
      color_out = YELLOW;

    else if (
      red <= (EEPROM_read_int(silver_right_r) + range) && red >= (EEPROM_read_int(silver_right_r) - range) && green >= (EEPROM_read_int(silver_right_g) - range) && green <= (EEPROM_read_int(silver_right_g) + range) && blue >= (EEPROM_read_int(silver_right_b) - range) && blue <= (EEPROM_read_int(silver_right_b) + range) && clear <= (EEPROM_read_int(silver_right_c) + range) && clear >= (EEPROM_read_int(silver_right_c) - range)) {
    180e:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1812:	20 91 c7 08 	lds	r18, 0x08C7	; 0x8008c7 <clear>
    1816:	30 91 c8 08 	lds	r19, 0x08C8	; 0x8008c8 <clear+0x1>
    181a:	ae 01       	movw	r20, r28
    181c:	48 0f       	add	r20, r24
    181e:	59 1f       	adc	r21, r25
    1820:	42 17       	cp	r20, r18
    1822:	53 07       	cpc	r21, r19
    1824:	34 f0       	brlt	.+12     	; 0x1832 <color(char)+0x368>
    1826:	8c 1b       	sub	r24, r28
    1828:	9d 0b       	sbc	r25, r29
    182a:	28 17       	cp	r18, r24
    182c:	39 07       	cpc	r19, r25
    182e:	0c f0       	brlt	.+2      	; 0x1832 <color(char)+0x368>
    1830:	0e c2       	rjmp	.+1052   	; 0x1c4e <color(char)+0x784>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:397

    else if (green > red && green > blue && red < EEPROM_read_int(green_front_r) + range && red > EEPROM_read_int(green_front_r) - range && green < EEPROM_read_int(green_front_g) + range && green > EEPROM_read_int(green_front_g) - range && blue < EEPROM_read_int(green_front_b) + range && blue > EEPROM_read_int(green_front_b) - range && clear < EEPROM_read_int(green_front_c) + range && clear > EEPROM_read_int(green_front_c) - range)
      color_out = GREEN;

    else
      color_out = WHITE;
    1832:	87 e0       	ldi	r24, 0x07	; 7
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	4e c0       	rjmp	.+156    	; 0x18d4 <color(char)+0x40a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:350
      color_out = RED;

    //else if (green > red && green > blue && red < EEPROM_read_int(green_left_r) + range && red > EEPROM_read_int(green_left_r) - range && green > EEPROM_read_int(green_left_g)-range/2 && green < EEPROM_read_int(green_left_g) + range && blue < EEPROM_read_int(green_left_b) + range && blue > EEPROM_read_int(green_left_b) - range /*&& clear < EEPROM_read_int(green_left_c) + range*/ && clear > EEPROM_read_int(green_left_c) - range/2)
    else if (green > red && green > blue && red < EEPROM_read_int(green_left_r) + range && red > EEPROM_read_int(green_left_r) - range && green < EEPROM_read_int(green_left_g) + range && green > EEPROM_read_int(green_left_g) - range && blue < EEPROM_read_int(green_left_b) + range && blue > EEPROM_read_int(green_left_b) - range && clear < EEPROM_read_int(green_left_c) + range && clear > EEPROM_read_int(green_left_c) - range) { color_out = GREEN; }  //beep(1);}

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_left_r) + range && red > EEPROM_read_int(blue_left_r) - range && green < EEPROM_read_int(blue_left_g) + range && green > EEPROM_read_int(blue_left_g) - range && blue < EEPROM_read_int(blue_left_b) + range && blue > EEPROM_read_int(blue_left_b) - range && clear < EEPROM_read_int(blue_left_c) + range && clear > EEPROM_read_int(blue_left_c) - range)
    1838:	0c 15       	cp	r16, r12
    183a:	1d 05       	cpc	r17, r13
    183c:	0c f0       	brlt	.+2      	; 0x1840 <color(char)+0x376>
    183e:	ad cf       	rjmp	.-166    	; 0x179a <color(char)+0x2d0>
    1840:	84 e2       	ldi	r24, 0x24	; 36
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1848:	9e 01       	movw	r18, r28
    184a:	28 0f       	add	r18, r24
    184c:	39 1f       	adc	r19, r25
    184e:	e2 16       	cp	r14, r18
    1850:	f3 06       	cpc	r15, r19
    1852:	0c f0       	brlt	.+2      	; 0x1856 <color(char)+0x38c>
    1854:	a2 cf       	rjmp	.-188    	; 0x179a <color(char)+0x2d0>
    1856:	8c 1b       	sub	r24, r28
    1858:	9d 0b       	sbc	r25, r29
    185a:	8e 15       	cp	r24, r14
    185c:	9f 05       	cpc	r25, r15
    185e:	0c f0       	brlt	.+2      	; 0x1862 <color(char)+0x398>
    1860:	9c cf       	rjmp	.-200    	; 0x179a <color(char)+0x2d0>
    1862:	86 e2       	ldi	r24, 0x26	; 38
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    186a:	9e 01       	movw	r18, r28
    186c:	28 0f       	add	r18, r24
    186e:	39 1f       	adc	r19, r25
    1870:	02 17       	cp	r16, r18
    1872:	13 07       	cpc	r17, r19
    1874:	0c f0       	brlt	.+2      	; 0x1878 <color(char)+0x3ae>
    1876:	91 cf       	rjmp	.-222    	; 0x179a <color(char)+0x2d0>
    1878:	8c 1b       	sub	r24, r28
    187a:	9d 0b       	sbc	r25, r29
    187c:	80 17       	cp	r24, r16
    187e:	91 07       	cpc	r25, r17
    1880:	0c f0       	brlt	.+2      	; 0x1884 <color(char)+0x3ba>
    1882:	8b cf       	rjmp	.-234    	; 0x179a <color(char)+0x2d0>
    1884:	88 e2       	ldi	r24, 0x28	; 40
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    188c:	9e 01       	movw	r18, r28
    188e:	28 0f       	add	r18, r24
    1890:	39 1f       	adc	r19, r25
    1892:	c2 16       	cp	r12, r18
    1894:	d3 06       	cpc	r13, r19
    1896:	0c f0       	brlt	.+2      	; 0x189a <color(char)+0x3d0>
    1898:	80 cf       	rjmp	.-256    	; 0x179a <color(char)+0x2d0>
    189a:	8c 1b       	sub	r24, r28
    189c:	9d 0b       	sbc	r25, r29
    189e:	8c 15       	cp	r24, r12
    18a0:	9d 05       	cpc	r25, r13
    18a2:	0c f0       	brlt	.+2      	; 0x18a6 <color(char)+0x3dc>
    18a4:	7a cf       	rjmp	.-268    	; 0x179a <color(char)+0x2d0>
    18a6:	8a e2       	ldi	r24, 0x2A	; 42
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    18ae:	20 91 c7 08 	lds	r18, 0x08C7	; 0x8008c7 <clear>
    18b2:	30 91 c8 08 	lds	r19, 0x08C8	; 0x8008c8 <clear+0x1>
    18b6:	ae 01       	movw	r20, r28
    18b8:	48 0f       	add	r20, r24
    18ba:	59 1f       	adc	r21, r25
    18bc:	24 17       	cp	r18, r20
    18be:	35 07       	cpc	r19, r21
    18c0:	0c f0       	brlt	.+2      	; 0x18c4 <color(char)+0x3fa>
    18c2:	6b cf       	rjmp	.-298    	; 0x179a <color(char)+0x2d0>
    18c4:	8c 1b       	sub	r24, r28
    18c6:	9d 0b       	sbc	r25, r29
    18c8:	82 17       	cp	r24, r18
    18ca:	93 07       	cpc	r25, r19
    18cc:	0c f0       	brlt	.+2      	; 0x18d0 <color(char)+0x406>
    18ce:	65 cf       	rjmp	.-310    	; 0x179a <color(char)+0x2d0>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:374
    //else if (green > red && green > blue && red < EEPROM_read_int(green_right_r) + range && red > EEPROM_read_int(green_right_r) - range && green > EEPROM_read_int(green_right_g)-range/2 && green < EEPROM_read_int(green_right_g) + range && blue < EEPROM_read_int(green_right_b) + range && blue > EEPROM_read_int(green_right_b) - range /*&&  clear < EEPROM_read_int(green_right_c) + range */ && clear > EEPROM_read_int(green_right_c) - range/2)
    else if (green > red && green > blue && red < EEPROM_read_int(green_right_r) + range && red > EEPROM_read_int(green_right_r) - range && green < EEPROM_read_int(green_right_g) + range && green > EEPROM_read_int(green_right_g) - range && blue < EEPROM_read_int(green_right_b) + range && blue > EEPROM_read_int(green_right_b) - range && clear < EEPROM_read_int(green_right_c) + range && clear > EEPROM_read_int(green_right_c) - range)
      color_out = GREEN;

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_right_r) + range && red > EEPROM_read_int(blue_right_r) - range && green < EEPROM_read_int(blue_right_g) + range && green > EEPROM_read_int(blue_right_g) - range && blue < EEPROM_read_int(blue_right_b) + range && blue > EEPROM_read_int(blue_right_b) - range && clear < EEPROM_read_int(blue_right_c) + range && clear > EEPROM_read_int(blue_right_c) - range)
      color_out = BLUE;
    18d0:	82 e0       	ldi	r24, 0x02	; 2
    18d2:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:394
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_front_r) + range && red > EEPROM_read_int(red_front_r) - range && green < EEPROM_read_int(red_front_g) + range && green > EEPROM_read_int(red_front_g) - range && blue < EEPROM_read_int(red_front_b) + range && blue > EEPROM_read_int(red_front_b) - range && clear < EEPROM_read_int(red_front_c) + range && clear > EEPROM_read_int(red_front_c) - range)
      color_out = RED;

    else if (green > red && green > blue && red < EEPROM_read_int(green_front_r) + range && red > EEPROM_read_int(green_front_r) - range && green < EEPROM_read_int(green_front_g) + range && green > EEPROM_read_int(green_front_g) - range && blue < EEPROM_read_int(green_front_b) + range && blue > EEPROM_read_int(green_front_b) - range && clear < EEPROM_read_int(green_front_c) + range && clear > EEPROM_read_int(green_front_c) - range)
      color_out = GREEN;
    18d4:	90 93 7f 08 	sts	0x087F, r25	; 0x80087f <color_out+0x1>
    18d8:	80 93 7e 08 	sts	0x087E, r24	; 0x80087e <color_out>
    18dc:	ec ce       	rjmp	.-552    	; 0x16b6 <color(char)+0x1ec>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:353
    else if (green > red && green > blue && red < EEPROM_read_int(green_left_r) + range && red > EEPROM_read_int(green_left_r) - range && green < EEPROM_read_int(green_left_g) + range && green > EEPROM_read_int(green_left_g) - range && blue < EEPROM_read_int(green_left_b) + range && blue > EEPROM_read_int(green_left_b) - range && clear < EEPROM_read_int(green_left_c) + range && clear > EEPROM_read_int(green_left_c) - range) { color_out = GREEN; }  //beep(1);}

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_left_r) + range && red > EEPROM_read_int(blue_left_r) - range && green < EEPROM_read_int(blue_left_g) + range && green > EEPROM_read_int(blue_left_g) - range && blue < EEPROM_read_int(blue_left_b) + range && blue > EEPROM_read_int(blue_left_b) - range && clear < EEPROM_read_int(blue_left_c) + range && clear > EEPROM_read_int(blue_left_c) - range)
      color_out = BLUE;

    else if (red < EEPROM_read_int(yellow_left_r) + range && red > EEPROM_read_int(yellow_left_r) - range && green < EEPROM_read_int(yellow_left_g) + range && green > EEPROM_read_int(yellow_left_g) - range && blue < EEPROM_read_int(yellow_left_b) + range && blue > EEPROM_read_int(yellow_left_b) - range && clear < EEPROM_read_int(yellow_left_c) + range && clear > EEPROM_read_int(yellow_left_c) - range)
    18de:	8c 1b       	sub	r24, r28
    18e0:	9d 0b       	sbc	r25, r29
    18e2:	8e 15       	cp	r24, r14
    18e4:	9f 05       	cpc	r25, r15
    18e6:	0c f0       	brlt	.+2      	; 0x18ea <color(char)+0x420>
    18e8:	63 cf       	rjmp	.-314    	; 0x17b0 <color(char)+0x2e6>
    18ea:	8e e2       	ldi	r24, 0x2E	; 46
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    18f2:	9e 01       	movw	r18, r28
    18f4:	28 0f       	add	r18, r24
    18f6:	39 1f       	adc	r19, r25
    18f8:	02 17       	cp	r16, r18
    18fa:	13 07       	cpc	r17, r19
    18fc:	0c f0       	brlt	.+2      	; 0x1900 <color(char)+0x436>
    18fe:	58 cf       	rjmp	.-336    	; 0x17b0 <color(char)+0x2e6>
    1900:	8c 1b       	sub	r24, r28
    1902:	9d 0b       	sbc	r25, r29
    1904:	80 17       	cp	r24, r16
    1906:	91 07       	cpc	r25, r17
    1908:	0c f0       	brlt	.+2      	; 0x190c <color(char)+0x442>
    190a:	52 cf       	rjmp	.-348    	; 0x17b0 <color(char)+0x2e6>
    190c:	80 e3       	ldi	r24, 0x30	; 48
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1914:	9e 01       	movw	r18, r28
    1916:	28 0f       	add	r18, r24
    1918:	39 1f       	adc	r19, r25
    191a:	c2 16       	cp	r12, r18
    191c:	d3 06       	cpc	r13, r19
    191e:	0c f0       	brlt	.+2      	; 0x1922 <color(char)+0x458>
    1920:	47 cf       	rjmp	.-370    	; 0x17b0 <color(char)+0x2e6>
    1922:	8c 1b       	sub	r24, r28
    1924:	9d 0b       	sbc	r25, r29
    1926:	8c 15       	cp	r24, r12
    1928:	9d 05       	cpc	r25, r13
    192a:	0c f0       	brlt	.+2      	; 0x192e <color(char)+0x464>
    192c:	41 cf       	rjmp	.-382    	; 0x17b0 <color(char)+0x2e6>
    192e:	82 e3       	ldi	r24, 0x32	; 50
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1936:	20 91 c7 08 	lds	r18, 0x08C7	; 0x8008c7 <clear>
    193a:	30 91 c8 08 	lds	r19, 0x08C8	; 0x8008c8 <clear+0x1>
    193e:	ae 01       	movw	r20, r28
    1940:	48 0f       	add	r20, r24
    1942:	59 1f       	adc	r21, r25
    1944:	24 17       	cp	r18, r20
    1946:	35 07       	cpc	r19, r21
    1948:	0c f0       	brlt	.+2      	; 0x194c <color(char)+0x482>
    194a:	32 cf       	rjmp	.-412    	; 0x17b0 <color(char)+0x2e6>
    194c:	8c 1b       	sub	r24, r28
    194e:	9d 0b       	sbc	r25, r29
    1950:	82 17       	cp	r24, r18
    1952:	93 07       	cpc	r25, r19
    1954:	0c f0       	brlt	.+2      	; 0x1958 <color(char)+0x48e>
    1956:	2c cf       	rjmp	.-424    	; 0x17b0 <color(char)+0x2e6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:377

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_right_r) + range && red > EEPROM_read_int(blue_right_r) - range && green < EEPROM_read_int(blue_right_g) + range && green > EEPROM_read_int(blue_right_g) - range && blue < EEPROM_read_int(blue_right_b) + range && blue > EEPROM_read_int(blue_right_b) - range && clear < EEPROM_read_int(blue_right_c) + range && clear > EEPROM_read_int(blue_right_c) - range)
      color_out = BLUE;

    else if (red < EEPROM_read_int(yellow_right_r) + range && red > EEPROM_read_int(yellow_right_r) - range && green < EEPROM_read_int(yellow_right_g) + range && green > EEPROM_read_int(yellow_right_g) - range && blue < EEPROM_read_int(yellow_right_b) + range && blue > EEPROM_read_int(yellow_right_b) - range && clear < EEPROM_read_int(yellow_right_c) + range && clear > EEPROM_read_int(yellow_right_c) - range)
      color_out = YELLOW;
    1958:	84 e0       	ldi	r24, 0x04	; 4
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	bb cf       	rjmp	.-138    	; 0x18d4 <color(char)+0x40a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:365

    else
      color_out = WHITE;

    return color_out;
  } else if (select == 2)  // right
    195e:	82 e0       	ldi	r24, 0x02	; 2
    1960:	d8 12       	cpse	r13, r24
    1962:	78 c1       	rjmp	.+752    	; 0x1c54 <color(char)+0x78a>
    1964:	c0 90 c9 08 	lds	r12, 0x08C9	; 0x8008c9 <blue>
    1968:	d0 90 ca 08 	lds	r13, 0x08CA	; 0x8008ca <blue+0x1>
    196c:	8a e9       	ldi	r24, 0x9A	; 154
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1974:	ec 01       	movw	r28, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:367
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_right_r) + range && red > EEPROM_read_int(red_right_r) - range && green < EEPROM_read_int(red_right_g) + range && green > EEPROM_read_int(red_right_g) - range && blue < EEPROM_read_int(red_right_b) + range && blue > EEPROM_read_int(red_right_b) - range && clear < EEPROM_read_int(red_right_c) + range && clear > EEPROM_read_int(red_right_c) - range)
    1976:	0e 15       	cp	r16, r14
    1978:	1f 05       	cpc	r17, r15
    197a:	0c f0       	brlt	.+2      	; 0x197e <color(char)+0x4b4>
    197c:	86 c0       	rjmp	.+268    	; 0x1a8a <color(char)+0x5c0>
    197e:	ce 14       	cp	r12, r14
    1980:	df 04       	cpc	r13, r15
    1982:	0c f0       	brlt	.+2      	; 0x1986 <color(char)+0x4bc>
    1984:	86 c0       	rjmp	.+268    	; 0x1a92 <color(char)+0x5c8>
    1986:	8c e3       	ldi	r24, 0x3C	; 60
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    198e:	9e 01       	movw	r18, r28
    1990:	28 0f       	add	r18, r24
    1992:	39 1f       	adc	r19, r25
    1994:	e2 16       	cp	r14, r18
    1996:	f3 06       	cpc	r15, r19
    1998:	bc f5       	brge	.+110    	; 0x1a08 <color(char)+0x53e>
    199a:	8c 1b       	sub	r24, r28
    199c:	9d 0b       	sbc	r25, r29
    199e:	8e 15       	cp	r24, r14
    19a0:	9f 05       	cpc	r25, r15
    19a2:	94 f5       	brge	.+100    	; 0x1a08 <color(char)+0x53e>
    19a4:	8e e3       	ldi	r24, 0x3E	; 62
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    19ac:	9e 01       	movw	r18, r28
    19ae:	28 0f       	add	r18, r24
    19b0:	39 1f       	adc	r19, r25
    19b2:	02 17       	cp	r16, r18
    19b4:	13 07       	cpc	r17, r19
    19b6:	44 f5       	brge	.+80     	; 0x1a08 <color(char)+0x53e>
    19b8:	8c 1b       	sub	r24, r28
    19ba:	9d 0b       	sbc	r25, r29
    19bc:	80 17       	cp	r24, r16
    19be:	91 07       	cpc	r25, r17
    19c0:	1c f5       	brge	.+70     	; 0x1a08 <color(char)+0x53e>
    19c2:	80 e4       	ldi	r24, 0x40	; 64
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    19ca:	9e 01       	movw	r18, r28
    19cc:	28 0f       	add	r18, r24
    19ce:	39 1f       	adc	r19, r25
    19d0:	c2 16       	cp	r12, r18
    19d2:	d3 06       	cpc	r13, r19
    19d4:	cc f4       	brge	.+50     	; 0x1a08 <color(char)+0x53e>
    19d6:	8c 1b       	sub	r24, r28
    19d8:	9d 0b       	sbc	r25, r29
    19da:	8c 15       	cp	r24, r12
    19dc:	9d 05       	cpc	r25, r13
    19de:	a4 f4       	brge	.+40     	; 0x1a08 <color(char)+0x53e>
    19e0:	82 e4       	ldi	r24, 0x42	; 66
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    19e8:	20 91 c7 08 	lds	r18, 0x08C7	; 0x8008c7 <clear>
    19ec:	30 91 c8 08 	lds	r19, 0x08C8	; 0x8008c8 <clear+0x1>
    19f0:	ae 01       	movw	r20, r28
    19f2:	48 0f       	add	r20, r24
    19f4:	59 1f       	adc	r21, r25
    19f6:	24 17       	cp	r18, r20
    19f8:	35 07       	cpc	r19, r21
    19fa:	34 f4       	brge	.+12     	; 0x1a08 <color(char)+0x53e>
    19fc:	8c 1b       	sub	r24, r28
    19fe:	9d 0b       	sbc	r25, r29
    1a00:	82 17       	cp	r24, r18
    1a02:	93 07       	cpc	r25, r19
    1a04:	0c f4       	brge	.+2      	; 0x1a08 <color(char)+0x53e>
    1a06:	53 ce       	rjmp	.-858    	; 0x16ae <color(char)+0x1e4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:376
      color_out = GREEN;

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_right_r) + range && red > EEPROM_read_int(blue_right_r) - range && green < EEPROM_read_int(blue_right_g) + range && green > EEPROM_read_int(blue_right_g) - range && blue < EEPROM_read_int(blue_right_b) + range && blue > EEPROM_read_int(blue_right_b) - range && clear < EEPROM_read_int(blue_right_c) + range && clear > EEPROM_read_int(blue_right_c) - range)
      color_out = BLUE;

    else if (red < EEPROM_read_int(yellow_right_r) + range && red > EEPROM_read_int(yellow_right_r) - range && green < EEPROM_read_int(yellow_right_g) + range && green > EEPROM_read_int(yellow_right_g) - range && blue < EEPROM_read_int(yellow_right_b) + range && blue > EEPROM_read_int(yellow_right_b) - range && clear < EEPROM_read_int(yellow_right_c) + range && clear > EEPROM_read_int(yellow_right_c) - range)
    1a08:	84 e5       	ldi	r24, 0x54	; 84
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1a10:	9e 01       	movw	r18, r28
    1a12:	28 0f       	add	r18, r24
    1a14:	39 1f       	adc	r19, r25
    1a16:	e2 16       	cp	r14, r18
    1a18:	f3 06       	cpc	r15, r19
    1a1a:	0c f4       	brge	.+2      	; 0x1a1e <color(char)+0x554>
    1a1c:	da c0       	rjmp	.+436    	; 0x1bd2 <color(char)+0x708>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:380
      color_out = YELLOW;

    else if (
      red <= (EEPROM_read_int(silver_right_r) + range) && red >= (EEPROM_read_int(silver_right_r) - range) && green >= (EEPROM_read_int(silver_right_g) - range) && green <= (EEPROM_read_int(silver_right_g) + range) && blue >= (EEPROM_read_int(silver_right_b) - range) && blue <= (EEPROM_read_int(silver_right_b) + range) && clear <= (EEPROM_read_int(silver_right_c) + range) && clear >= (EEPROM_read_int(silver_right_c) - range)) {
    1a1e:	8c e5       	ldi	r24, 0x5C	; 92
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1a26:	9e 01       	movw	r18, r28
    1a28:	28 0f       	add	r18, r24
    1a2a:	39 1f       	adc	r19, r25
    1a2c:	2e 15       	cp	r18, r14
    1a2e:	3f 05       	cpc	r19, r15
    1a30:	0c f4       	brge	.+2      	; 0x1a34 <color(char)+0x56a>
    1a32:	ff ce       	rjmp	.-514    	; 0x1832 <color(char)+0x368>
    1a34:	8c 1b       	sub	r24, r28
    1a36:	9d 0b       	sbc	r25, r29
    1a38:	e8 16       	cp	r14, r24
    1a3a:	f9 06       	cpc	r15, r25
    1a3c:	0c f4       	brge	.+2      	; 0x1a40 <color(char)+0x576>
    1a3e:	f9 ce       	rjmp	.-526    	; 0x1832 <color(char)+0x368>
    1a40:	8e e5       	ldi	r24, 0x5E	; 94
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1a48:	9c 01       	movw	r18, r24
    1a4a:	2c 1b       	sub	r18, r28
    1a4c:	3d 0b       	sbc	r19, r29
    1a4e:	02 17       	cp	r16, r18
    1a50:	13 07       	cpc	r17, r19
    1a52:	0c f4       	brge	.+2      	; 0x1a56 <color(char)+0x58c>
    1a54:	ee ce       	rjmp	.-548    	; 0x1832 <color(char)+0x368>
    1a56:	8c 0f       	add	r24, r28
    1a58:	9d 1f       	adc	r25, r29
    1a5a:	80 17       	cp	r24, r16
    1a5c:	91 07       	cpc	r25, r17
    1a5e:	0c f4       	brge	.+2      	; 0x1a62 <color(char)+0x598>
    1a60:	e8 ce       	rjmp	.-560    	; 0x1832 <color(char)+0x368>
    1a62:	80 e6       	ldi	r24, 0x60	; 96
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1a6a:	9c 01       	movw	r18, r24
    1a6c:	2c 1b       	sub	r18, r28
    1a6e:	3d 0b       	sbc	r19, r29
    1a70:	c2 16       	cp	r12, r18
    1a72:	d3 06       	cpc	r13, r19
    1a74:	0c f4       	brge	.+2      	; 0x1a78 <color(char)+0x5ae>
    1a76:	dd ce       	rjmp	.-582    	; 0x1832 <color(char)+0x368>
    1a78:	8c 0f       	add	r24, r28
    1a7a:	9d 1f       	adc	r25, r29
    1a7c:	8c 15       	cp	r24, r12
    1a7e:	9d 05       	cpc	r25, r13
    1a80:	0c f4       	brge	.+2      	; 0x1a84 <color(char)+0x5ba>
    1a82:	d7 ce       	rjmp	.-594    	; 0x1832 <color(char)+0x368>
    1a84:	82 e6       	ldi	r24, 0x62	; 98
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	c2 ce       	rjmp	.-636    	; 0x180e <color(char)+0x344>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:370
  } else if (select == 2)  // right
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_right_r) + range && red > EEPROM_read_int(red_right_r) - range && green < EEPROM_read_int(red_right_g) + range && green > EEPROM_read_int(red_right_g) - range && blue < EEPROM_read_int(red_right_b) + range && blue > EEPROM_read_int(red_right_b) - range && clear < EEPROM_read_int(red_right_c) + range && clear > EEPROM_read_int(red_right_c) - range)
      color_out = RED;
    //else if (green > red && green > blue && red < EEPROM_read_int(green_right_r) + range && red > EEPROM_read_int(green_right_r) - range && green > EEPROM_read_int(green_right_g)-range/2 && green < EEPROM_read_int(green_right_g) + range && blue < EEPROM_read_int(green_right_b) + range && blue > EEPROM_read_int(green_right_b) - range /*&&  clear < EEPROM_read_int(green_right_c) + range */ && clear > EEPROM_read_int(green_right_c) - range/2)
    else if (green > red && green > blue && red < EEPROM_read_int(green_right_r) + range && red > EEPROM_read_int(green_right_r) - range && green < EEPROM_read_int(green_right_g) + range && green > EEPROM_read_int(green_right_g) - range && blue < EEPROM_read_int(green_right_b) + range && blue > EEPROM_read_int(green_right_b) - range && clear < EEPROM_read_int(green_right_c) + range && clear > EEPROM_read_int(green_right_c) - range)
    1a8a:	e0 16       	cp	r14, r16
    1a8c:	f1 06       	cpc	r15, r17
    1a8e:	0c f4       	brge	.+2      	; 0x1a92 <color(char)+0x5c8>
    1a90:	51 c0       	rjmp	.+162    	; 0x1b34 <color(char)+0x66a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:373
      color_out = GREEN;

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_right_r) + range && red > EEPROM_read_int(blue_right_r) - range && green < EEPROM_read_int(blue_right_g) + range && green > EEPROM_read_int(blue_right_g) - range && blue < EEPROM_read_int(blue_right_b) + range && blue > EEPROM_read_int(blue_right_b) - range && clear < EEPROM_read_int(blue_right_c) + range && clear > EEPROM_read_int(blue_right_c) - range)
    1a92:	ec 14       	cp	r14, r12
    1a94:	fd 04       	cpc	r15, r13
    1a96:	0c f0       	brlt	.+2      	; 0x1a9a <color(char)+0x5d0>
    1a98:	b7 cf       	rjmp	.-146    	; 0x1a08 <color(char)+0x53e>
    1a9a:	0c 15       	cp	r16, r12
    1a9c:	1d 05       	cpc	r17, r13
    1a9e:	0c f0       	brlt	.+2      	; 0x1aa2 <color(char)+0x5d8>
    1aa0:	b3 cf       	rjmp	.-154    	; 0x1a08 <color(char)+0x53e>
    1aa2:	8c e4       	ldi	r24, 0x4C	; 76
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1aaa:	9e 01       	movw	r18, r28
    1aac:	28 0f       	add	r18, r24
    1aae:	39 1f       	adc	r19, r25
    1ab0:	e2 16       	cp	r14, r18
    1ab2:	f3 06       	cpc	r15, r19
    1ab4:	0c f0       	brlt	.+2      	; 0x1ab8 <color(char)+0x5ee>
    1ab6:	a8 cf       	rjmp	.-176    	; 0x1a08 <color(char)+0x53e>
    1ab8:	8c 1b       	sub	r24, r28
    1aba:	9d 0b       	sbc	r25, r29
    1abc:	8e 15       	cp	r24, r14
    1abe:	9f 05       	cpc	r25, r15
    1ac0:	0c f0       	brlt	.+2      	; 0x1ac4 <color(char)+0x5fa>
    1ac2:	a2 cf       	rjmp	.-188    	; 0x1a08 <color(char)+0x53e>
    1ac4:	8e e4       	ldi	r24, 0x4E	; 78
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1acc:	9e 01       	movw	r18, r28
    1ace:	28 0f       	add	r18, r24
    1ad0:	39 1f       	adc	r19, r25
    1ad2:	02 17       	cp	r16, r18
    1ad4:	13 07       	cpc	r17, r19
    1ad6:	0c f0       	brlt	.+2      	; 0x1ada <color(char)+0x610>
    1ad8:	97 cf       	rjmp	.-210    	; 0x1a08 <color(char)+0x53e>
    1ada:	8c 1b       	sub	r24, r28
    1adc:	9d 0b       	sbc	r25, r29
    1ade:	80 17       	cp	r24, r16
    1ae0:	91 07       	cpc	r25, r17
    1ae2:	0c f0       	brlt	.+2      	; 0x1ae6 <color(char)+0x61c>
    1ae4:	91 cf       	rjmp	.-222    	; 0x1a08 <color(char)+0x53e>
    1ae6:	80 e5       	ldi	r24, 0x50	; 80
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1aee:	9e 01       	movw	r18, r28
    1af0:	28 0f       	add	r18, r24
    1af2:	39 1f       	adc	r19, r25
    1af4:	c2 16       	cp	r12, r18
    1af6:	d3 06       	cpc	r13, r19
    1af8:	0c f0       	brlt	.+2      	; 0x1afc <color(char)+0x632>
    1afa:	86 cf       	rjmp	.-244    	; 0x1a08 <color(char)+0x53e>
    1afc:	8c 1b       	sub	r24, r28
    1afe:	9d 0b       	sbc	r25, r29
    1b00:	8c 15       	cp	r24, r12
    1b02:	9d 05       	cpc	r25, r13
    1b04:	0c f0       	brlt	.+2      	; 0x1b08 <color(char)+0x63e>
    1b06:	80 cf       	rjmp	.-256    	; 0x1a08 <color(char)+0x53e>
    1b08:	82 e5       	ldi	r24, 0x52	; 82
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1b10:	20 91 c7 08 	lds	r18, 0x08C7	; 0x8008c7 <clear>
    1b14:	30 91 c8 08 	lds	r19, 0x08C8	; 0x8008c8 <clear+0x1>
    1b18:	ae 01       	movw	r20, r28
    1b1a:	48 0f       	add	r20, r24
    1b1c:	59 1f       	adc	r21, r25
    1b1e:	24 17       	cp	r18, r20
    1b20:	35 07       	cpc	r19, r21
    1b22:	0c f0       	brlt	.+2      	; 0x1b26 <color(char)+0x65c>
    1b24:	71 cf       	rjmp	.-286    	; 0x1a08 <color(char)+0x53e>
    1b26:	8c 1b       	sub	r24, r28
    1b28:	9d 0b       	sbc	r25, r29
    1b2a:	82 17       	cp	r24, r18
    1b2c:	93 07       	cpc	r25, r19
    1b2e:	0c f4       	brge	.+2      	; 0x1b32 <color(char)+0x668>
    1b30:	cf ce       	rjmp	.-610    	; 0x18d0 <color(char)+0x406>
    1b32:	6a cf       	rjmp	.-300    	; 0x1a08 <color(char)+0x53e>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:370
  } else if (select == 2)  // right
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_right_r) + range && red > EEPROM_read_int(red_right_r) - range && green < EEPROM_read_int(red_right_g) + range && green > EEPROM_read_int(red_right_g) - range && blue < EEPROM_read_int(red_right_b) + range && blue > EEPROM_read_int(red_right_b) - range && clear < EEPROM_read_int(red_right_c) + range && clear > EEPROM_read_int(red_right_c) - range)
      color_out = RED;
    //else if (green > red && green > blue && red < EEPROM_read_int(green_right_r) + range && red > EEPROM_read_int(green_right_r) - range && green > EEPROM_read_int(green_right_g)-range/2 && green < EEPROM_read_int(green_right_g) + range && blue < EEPROM_read_int(green_right_b) + range && blue > EEPROM_read_int(green_right_b) - range /*&&  clear < EEPROM_read_int(green_right_c) + range */ && clear > EEPROM_read_int(green_right_c) - range/2)
    else if (green > red && green > blue && red < EEPROM_read_int(green_right_r) + range && red > EEPROM_read_int(green_right_r) - range && green < EEPROM_read_int(green_right_g) + range && green > EEPROM_read_int(green_right_g) - range && blue < EEPROM_read_int(green_right_b) + range && blue > EEPROM_read_int(green_right_b) - range && clear < EEPROM_read_int(green_right_c) + range && clear > EEPROM_read_int(green_right_c) - range)
    1b34:	c0 16       	cp	r12, r16
    1b36:	d1 06       	cpc	r13, r17
    1b38:	0c f0       	brlt	.+2      	; 0x1b3c <color(char)+0x672>
    1b3a:	ab cf       	rjmp	.-170    	; 0x1a92 <color(char)+0x5c8>
    1b3c:	84 e4       	ldi	r24, 0x44	; 68
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1b44:	9e 01       	movw	r18, r28
    1b46:	28 0f       	add	r18, r24
    1b48:	39 1f       	adc	r19, r25
    1b4a:	e2 16       	cp	r14, r18
    1b4c:	f3 06       	cpc	r15, r19
    1b4e:	0c f0       	brlt	.+2      	; 0x1b52 <color(char)+0x688>
    1b50:	a0 cf       	rjmp	.-192    	; 0x1a92 <color(char)+0x5c8>
    1b52:	8c 1b       	sub	r24, r28
    1b54:	9d 0b       	sbc	r25, r29
    1b56:	8e 15       	cp	r24, r14
    1b58:	9f 05       	cpc	r25, r15
    1b5a:	0c f0       	brlt	.+2      	; 0x1b5e <color(char)+0x694>
    1b5c:	9a cf       	rjmp	.-204    	; 0x1a92 <color(char)+0x5c8>
    1b5e:	86 e4       	ldi	r24, 0x46	; 70
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1b66:	9e 01       	movw	r18, r28
    1b68:	28 0f       	add	r18, r24
    1b6a:	39 1f       	adc	r19, r25
    1b6c:	02 17       	cp	r16, r18
    1b6e:	13 07       	cpc	r17, r19
    1b70:	0c f0       	brlt	.+2      	; 0x1b74 <color(char)+0x6aa>
    1b72:	8f cf       	rjmp	.-226    	; 0x1a92 <color(char)+0x5c8>
    1b74:	8c 1b       	sub	r24, r28
    1b76:	9d 0b       	sbc	r25, r29
    1b78:	80 17       	cp	r24, r16
    1b7a:	91 07       	cpc	r25, r17
    1b7c:	0c f0       	brlt	.+2      	; 0x1b80 <color(char)+0x6b6>
    1b7e:	89 cf       	rjmp	.-238    	; 0x1a92 <color(char)+0x5c8>
    1b80:	88 e4       	ldi	r24, 0x48	; 72
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1b88:	9e 01       	movw	r18, r28
    1b8a:	28 0f       	add	r18, r24
    1b8c:	39 1f       	adc	r19, r25
    1b8e:	c2 16       	cp	r12, r18
    1b90:	d3 06       	cpc	r13, r19
    1b92:	0c f0       	brlt	.+2      	; 0x1b96 <color(char)+0x6cc>
    1b94:	7e cf       	rjmp	.-260    	; 0x1a92 <color(char)+0x5c8>
    1b96:	8c 1b       	sub	r24, r28
    1b98:	9d 0b       	sbc	r25, r29
    1b9a:	8c 15       	cp	r24, r12
    1b9c:	9d 05       	cpc	r25, r13
    1b9e:	0c f0       	brlt	.+2      	; 0x1ba2 <color(char)+0x6d8>
    1ba0:	78 cf       	rjmp	.-272    	; 0x1a92 <color(char)+0x5c8>
    1ba2:	8a e4       	ldi	r24, 0x4A	; 74
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1baa:	20 91 c7 08 	lds	r18, 0x08C7	; 0x8008c7 <clear>
    1bae:	30 91 c8 08 	lds	r19, 0x08C8	; 0x8008c8 <clear+0x1>
    1bb2:	ae 01       	movw	r20, r28
    1bb4:	48 0f       	add	r20, r24
    1bb6:	59 1f       	adc	r21, r25
    1bb8:	24 17       	cp	r18, r20
    1bba:	35 07       	cpc	r19, r21
    1bbc:	0c f0       	brlt	.+2      	; 0x1bc0 <color(char)+0x6f6>
    1bbe:	69 cf       	rjmp	.-302    	; 0x1a92 <color(char)+0x5c8>
    1bc0:	8c 1b       	sub	r24, r28
    1bc2:	9d 0b       	sbc	r25, r29
    1bc4:	82 17       	cp	r24, r18
    1bc6:	93 07       	cpc	r25, r19
    1bc8:	0c f0       	brlt	.+2      	; 0x1bcc <color(char)+0x702>
    1bca:	63 cf       	rjmp	.-314    	; 0x1a92 <color(char)+0x5c8>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:394
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_front_r) + range && red > EEPROM_read_int(red_front_r) - range && green < EEPROM_read_int(red_front_g) + range && green > EEPROM_read_int(red_front_g) - range && blue < EEPROM_read_int(red_front_b) + range && blue > EEPROM_read_int(red_front_b) - range && clear < EEPROM_read_int(red_front_c) + range && clear > EEPROM_read_int(red_front_c) - range)
      color_out = RED;

    else if (green > red && green > blue && red < EEPROM_read_int(green_front_r) + range && red > EEPROM_read_int(green_front_r) - range && green < EEPROM_read_int(green_front_g) + range && green > EEPROM_read_int(green_front_g) - range && blue < EEPROM_read_int(green_front_b) + range && blue > EEPROM_read_int(green_front_b) - range && clear < EEPROM_read_int(green_front_c) + range && clear > EEPROM_read_int(green_front_c) - range)
      color_out = GREEN;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	81 ce       	rjmp	.-766    	; 0x18d4 <color(char)+0x40a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:376
      color_out = GREEN;

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_right_r) + range && red > EEPROM_read_int(blue_right_r) - range && green < EEPROM_read_int(blue_right_g) + range && green > EEPROM_read_int(blue_right_g) - range && blue < EEPROM_read_int(blue_right_b) + range && blue > EEPROM_read_int(blue_right_b) - range && clear < EEPROM_read_int(blue_right_c) + range && clear > EEPROM_read_int(blue_right_c) - range)
      color_out = BLUE;

    else if (red < EEPROM_read_int(yellow_right_r) + range && red > EEPROM_read_int(yellow_right_r) - range && green < EEPROM_read_int(yellow_right_g) + range && green > EEPROM_read_int(yellow_right_g) - range && blue < EEPROM_read_int(yellow_right_b) + range && blue > EEPROM_read_int(yellow_right_b) - range && clear < EEPROM_read_int(yellow_right_c) + range && clear > EEPROM_read_int(yellow_right_c) - range)
    1bd2:	8c 1b       	sub	r24, r28
    1bd4:	9d 0b       	sbc	r25, r29
    1bd6:	8e 15       	cp	r24, r14
    1bd8:	9f 05       	cpc	r25, r15
    1bda:	0c f0       	brlt	.+2      	; 0x1bde <color(char)+0x714>
    1bdc:	20 cf       	rjmp	.-448    	; 0x1a1e <color(char)+0x554>
    1bde:	86 e5       	ldi	r24, 0x56	; 86
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1be6:	9e 01       	movw	r18, r28
    1be8:	28 0f       	add	r18, r24
    1bea:	39 1f       	adc	r19, r25
    1bec:	02 17       	cp	r16, r18
    1bee:	13 07       	cpc	r17, r19
    1bf0:	0c f0       	brlt	.+2      	; 0x1bf4 <color(char)+0x72a>
    1bf2:	15 cf       	rjmp	.-470    	; 0x1a1e <color(char)+0x554>
    1bf4:	8c 1b       	sub	r24, r28
    1bf6:	9d 0b       	sbc	r25, r29
    1bf8:	80 17       	cp	r24, r16
    1bfa:	91 07       	cpc	r25, r17
    1bfc:	0c f0       	brlt	.+2      	; 0x1c00 <color(char)+0x736>
    1bfe:	0f cf       	rjmp	.-482    	; 0x1a1e <color(char)+0x554>
    1c00:	88 e5       	ldi	r24, 0x58	; 88
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1c08:	9e 01       	movw	r18, r28
    1c0a:	28 0f       	add	r18, r24
    1c0c:	39 1f       	adc	r19, r25
    1c0e:	c2 16       	cp	r12, r18
    1c10:	d3 06       	cpc	r13, r19
    1c12:	0c f0       	brlt	.+2      	; 0x1c16 <color(char)+0x74c>
    1c14:	04 cf       	rjmp	.-504    	; 0x1a1e <color(char)+0x554>
    1c16:	8c 1b       	sub	r24, r28
    1c18:	9d 0b       	sbc	r25, r29
    1c1a:	8c 15       	cp	r24, r12
    1c1c:	9d 05       	cpc	r25, r13
    1c1e:	0c f0       	brlt	.+2      	; 0x1c22 <color(char)+0x758>
    1c20:	fe ce       	rjmp	.-516    	; 0x1a1e <color(char)+0x554>
    1c22:	8a e5       	ldi	r24, 0x5A	; 90
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1c2a:	20 91 c7 08 	lds	r18, 0x08C7	; 0x8008c7 <clear>
    1c2e:	30 91 c8 08 	lds	r19, 0x08C8	; 0x8008c8 <clear+0x1>
    1c32:	ae 01       	movw	r20, r28
    1c34:	48 0f       	add	r20, r24
    1c36:	59 1f       	adc	r21, r25
    1c38:	24 17       	cp	r18, r20
    1c3a:	35 07       	cpc	r19, r21
    1c3c:	0c f0       	brlt	.+2      	; 0x1c40 <color(char)+0x776>
    1c3e:	ef ce       	rjmp	.-546    	; 0x1a1e <color(char)+0x554>
    1c40:	8c 1b       	sub	r24, r28
    1c42:	9d 0b       	sbc	r25, r29
    1c44:	82 17       	cp	r24, r18
    1c46:	93 07       	cpc	r25, r19
    1c48:	0c f4       	brge	.+2      	; 0x1c4c <color(char)+0x782>
    1c4a:	86 ce       	rjmp	.-756    	; 0x1958 <color(char)+0x48e>
    1c4c:	e8 ce       	rjmp	.-560    	; 0x1a1e <color(char)+0x554>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:381
      color_out = YELLOW;

    else if (
      red <= (EEPROM_read_int(silver_right_r) + range) && red >= (EEPROM_read_int(silver_right_r) - range) && green >= (EEPROM_read_int(silver_right_g) - range) && green <= (EEPROM_read_int(silver_right_g) + range) && blue >= (EEPROM_read_int(silver_right_b) - range) && blue <= (EEPROM_read_int(silver_right_b) + range) && clear <= (EEPROM_read_int(silver_right_c) + range) && clear >= (EEPROM_read_int(silver_right_c) - range)) {
      color_out = SILVER;
    1c4e:	85 e0       	ldi	r24, 0x05	; 5
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	40 ce       	rjmp	.-896    	; 0x18d4 <color(char)+0x40a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:390
      color_out = WHITE;

    return color_out;
  } else if (select == 3)  // front
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_front_r) + range && red > EEPROM_read_int(red_front_r) - range && green < EEPROM_read_int(red_front_g) + range && green > EEPROM_read_int(red_front_g) - range && blue < EEPROM_read_int(red_front_b) + range && blue > EEPROM_read_int(red_front_b) - range && clear < EEPROM_read_int(red_front_c) + range && clear > EEPROM_read_int(red_front_c) - range)
    1c54:	0e 15       	cp	r16, r14
    1c56:	1f 05       	cpc	r17, r15
    1c58:	0c f0       	brlt	.+2      	; 0x1c5c <color(char)+0x792>
    1c5a:	57 c0       	rjmp	.+174    	; 0x1d0a <color(char)+0x840>
    1c5c:	c0 90 c9 08 	lds	r12, 0x08C9	; 0x8008c9 <blue>
    1c60:	d0 90 ca 08 	lds	r13, 0x08CA	; 0x8008ca <blue+0x1>
    1c64:	ce 14       	cp	r12, r14
    1c66:	df 04       	cpc	r13, r15
    1c68:	0c f0       	brlt	.+2      	; 0x1c6c <color(char)+0x7a2>
    1c6a:	e3 cd       	rjmp	.-1082   	; 0x1832 <color(char)+0x368>
    1c6c:	84 e6       	ldi	r24, 0x64	; 100
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1c74:	5c 01       	movw	r10, r24
    1c76:	8a e9       	ldi	r24, 0x9A	; 154
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1c7e:	ec 01       	movw	r28, r24
    1c80:	c5 01       	movw	r24, r10
    1c82:	8c 0f       	add	r24, r28
    1c84:	9d 1f       	adc	r25, r29
    1c86:	e8 16       	cp	r14, r24
    1c88:	f9 06       	cpc	r15, r25
    1c8a:	0c f0       	brlt	.+2      	; 0x1c8e <color(char)+0x7c4>
    1c8c:	d2 cd       	rjmp	.-1116   	; 0x1832 <color(char)+0x368>
    1c8e:	ac 1a       	sub	r10, r28
    1c90:	bd 0a       	sbc	r11, r29
    1c92:	ae 14       	cp	r10, r14
    1c94:	bf 04       	cpc	r11, r15
    1c96:	0c f0       	brlt	.+2      	; 0x1c9a <color(char)+0x7d0>
    1c98:	cc cd       	rjmp	.-1128   	; 0x1832 <color(char)+0x368>
    1c9a:	86 e6       	ldi	r24, 0x66	; 102
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1ca2:	9e 01       	movw	r18, r28
    1ca4:	28 0f       	add	r18, r24
    1ca6:	39 1f       	adc	r19, r25
    1ca8:	02 17       	cp	r16, r18
    1caa:	13 07       	cpc	r17, r19
    1cac:	0c f0       	brlt	.+2      	; 0x1cb0 <color(char)+0x7e6>
    1cae:	c1 cd       	rjmp	.-1150   	; 0x1832 <color(char)+0x368>
    1cb0:	8c 1b       	sub	r24, r28
    1cb2:	9d 0b       	sbc	r25, r29
    1cb4:	80 17       	cp	r24, r16
    1cb6:	91 07       	cpc	r25, r17
    1cb8:	0c f0       	brlt	.+2      	; 0x1cbc <color(char)+0x7f2>
    1cba:	bb cd       	rjmp	.-1162   	; 0x1832 <color(char)+0x368>
    1cbc:	88 e6       	ldi	r24, 0x68	; 104
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1cc4:	9e 01       	movw	r18, r28
    1cc6:	28 0f       	add	r18, r24
    1cc8:	39 1f       	adc	r19, r25
    1cca:	c2 16       	cp	r12, r18
    1ccc:	d3 06       	cpc	r13, r19
    1cce:	0c f0       	brlt	.+2      	; 0x1cd2 <color(char)+0x808>
    1cd0:	b0 cd       	rjmp	.-1184   	; 0x1832 <color(char)+0x368>
    1cd2:	8c 1b       	sub	r24, r28
    1cd4:	9d 0b       	sbc	r25, r29
    1cd6:	8c 15       	cp	r24, r12
    1cd8:	9d 05       	cpc	r25, r13
    1cda:	0c f0       	brlt	.+2      	; 0x1cde <color(char)+0x814>
    1cdc:	aa cd       	rjmp	.-1196   	; 0x1832 <color(char)+0x368>
    1cde:	8a e6       	ldi	r24, 0x6A	; 106
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1ce6:	20 91 c7 08 	lds	r18, 0x08C7	; 0x8008c7 <clear>
    1cea:	30 91 c8 08 	lds	r19, 0x08C8	; 0x8008c8 <clear+0x1>
    1cee:	ae 01       	movw	r20, r28
    1cf0:	48 0f       	add	r20, r24
    1cf2:	59 1f       	adc	r21, r25
    1cf4:	24 17       	cp	r18, r20
    1cf6:	35 07       	cpc	r19, r21
    1cf8:	0c f0       	brlt	.+2      	; 0x1cfc <color(char)+0x832>
    1cfa:	9b cd       	rjmp	.-1226   	; 0x1832 <color(char)+0x368>
    1cfc:	8c 1b       	sub	r24, r28
    1cfe:	9d 0b       	sbc	r25, r29
    1d00:	82 17       	cp	r24, r18
    1d02:	93 07       	cpc	r25, r19
    1d04:	0c f4       	brge	.+2      	; 0x1d08 <color(char)+0x83e>
    1d06:	d3 cc       	rjmp	.-1626   	; 0x16ae <color(char)+0x1e4>
    1d08:	94 cd       	rjmp	.-1240   	; 0x1832 <color(char)+0x368>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:393
      color_out = RED;

    else if (green > red && green > blue && red < EEPROM_read_int(green_front_r) + range && red > EEPROM_read_int(green_front_r) - range && green < EEPROM_read_int(green_front_g) + range && green > EEPROM_read_int(green_front_g) - range && blue < EEPROM_read_int(green_front_b) + range && blue > EEPROM_read_int(green_front_b) - range && clear < EEPROM_read_int(green_front_c) + range && clear > EEPROM_read_int(green_front_c) - range)
    1d0a:	e0 16       	cp	r14, r16
    1d0c:	f1 06       	cpc	r15, r17
    1d0e:	0c f0       	brlt	.+2      	; 0x1d12 <color(char)+0x848>
    1d10:	90 cd       	rjmp	.-1248   	; 0x1832 <color(char)+0x368>
    1d12:	c0 90 c9 08 	lds	r12, 0x08C9	; 0x8008c9 <blue>
    1d16:	d0 90 ca 08 	lds	r13, 0x08CA	; 0x8008ca <blue+0x1>
    1d1a:	c0 16       	cp	r12, r16
    1d1c:	d1 06       	cpc	r13, r17
    1d1e:	0c f0       	brlt	.+2      	; 0x1d22 <color(char)+0x858>
    1d20:	88 cd       	rjmp	.-1264   	; 0x1832 <color(char)+0x368>
    1d22:	8c e6       	ldi	r24, 0x6C	; 108
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1d2a:	5c 01       	movw	r10, r24
    1d2c:	8a e9       	ldi	r24, 0x9A	; 154
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1d34:	ec 01       	movw	r28, r24
    1d36:	c5 01       	movw	r24, r10
    1d38:	8c 0f       	add	r24, r28
    1d3a:	9d 1f       	adc	r25, r29
    1d3c:	e8 16       	cp	r14, r24
    1d3e:	f9 06       	cpc	r15, r25
    1d40:	0c f0       	brlt	.+2      	; 0x1d44 <color(char)+0x87a>
    1d42:	77 cd       	rjmp	.-1298   	; 0x1832 <color(char)+0x368>
    1d44:	ac 1a       	sub	r10, r28
    1d46:	bd 0a       	sbc	r11, r29
    1d48:	ae 14       	cp	r10, r14
    1d4a:	bf 04       	cpc	r11, r15
    1d4c:	0c f0       	brlt	.+2      	; 0x1d50 <color(char)+0x886>
    1d4e:	71 cd       	rjmp	.-1310   	; 0x1832 <color(char)+0x368>
    1d50:	8e e6       	ldi	r24, 0x6E	; 110
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1d58:	9e 01       	movw	r18, r28
    1d5a:	28 0f       	add	r18, r24
    1d5c:	39 1f       	adc	r19, r25
    1d5e:	02 17       	cp	r16, r18
    1d60:	13 07       	cpc	r17, r19
    1d62:	0c f0       	brlt	.+2      	; 0x1d66 <color(char)+0x89c>
    1d64:	66 cd       	rjmp	.-1332   	; 0x1832 <color(char)+0x368>
    1d66:	8c 1b       	sub	r24, r28
    1d68:	9d 0b       	sbc	r25, r29
    1d6a:	80 17       	cp	r24, r16
    1d6c:	91 07       	cpc	r25, r17
    1d6e:	0c f0       	brlt	.+2      	; 0x1d72 <color(char)+0x8a8>
    1d70:	60 cd       	rjmp	.-1344   	; 0x1832 <color(char)+0x368>
    1d72:	80 e7       	ldi	r24, 0x70	; 112
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1d7a:	9e 01       	movw	r18, r28
    1d7c:	28 0f       	add	r18, r24
    1d7e:	39 1f       	adc	r19, r25
    1d80:	c2 16       	cp	r12, r18
    1d82:	d3 06       	cpc	r13, r19
    1d84:	0c f0       	brlt	.+2      	; 0x1d88 <color(char)+0x8be>
    1d86:	55 cd       	rjmp	.-1366   	; 0x1832 <color(char)+0x368>
    1d88:	8c 1b       	sub	r24, r28
    1d8a:	9d 0b       	sbc	r25, r29
    1d8c:	8c 15       	cp	r24, r12
    1d8e:	9d 05       	cpc	r25, r13
    1d90:	0c f0       	brlt	.+2      	; 0x1d94 <color(char)+0x8ca>
    1d92:	4f cd       	rjmp	.-1378   	; 0x1832 <color(char)+0x368>
    1d94:	82 e7       	ldi	r24, 0x72	; 114
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1d9c:	20 91 c7 08 	lds	r18, 0x08C7	; 0x8008c7 <clear>
    1da0:	30 91 c8 08 	lds	r19, 0x08C8	; 0x8008c8 <clear+0x1>
    1da4:	ae 01       	movw	r20, r28
    1da6:	48 0f       	add	r20, r24
    1da8:	59 1f       	adc	r21, r25
    1daa:	24 17       	cp	r18, r20
    1dac:	35 07       	cpc	r19, r21
    1dae:	0c f0       	brlt	.+2      	; 0x1db2 <color(char)+0x8e8>
    1db0:	40 cd       	rjmp	.-1408   	; 0x1832 <color(char)+0x368>
    1db2:	8c 1b       	sub	r24, r28
    1db4:	9d 0b       	sbc	r25, r29
    1db6:	82 17       	cp	r24, r18
    1db8:	93 07       	cpc	r25, r19
    1dba:	0c f4       	brge	.+2      	; 0x1dbe <color(char)+0x8f4>
    1dbc:	07 cf       	rjmp	.-498    	; 0x1bcc <color(char)+0x702>
    1dbe:	39 cd       	rjmp	.-1422   	; 0x1832 <color(char)+0x368>

00001dc0 <get_back()>:
get_back():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1478
  Serial.begin(115200);
  dxl_init(115200);
  lcd.begin(20, 4);
  delay(800);
}
void get_back() {
    1dc0:	0f 93       	push	r16
    1dc2:	1f 93       	push	r17
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1479
  int T90 = EEPROM_read_int(T90_address);
    1dc8:	88 e9       	ldi	r24, 0x98	; 152
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1dd0:	ec 01       	movw	r28, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1481

  while (!(intersectionL && intersectionR) && color_L == WHITE && color_R == WHITE) {
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	60 e0       	ldi	r22, 0x00	; 0
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    1ddc:	89 2b       	or	r24, r25
    1dde:	b9 f0       	breq	.+46     	; 0x1e0e <get_back()+0x4e>
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	62 e0       	ldi	r22, 0x02	; 2
    1de4:	82 e0       	ldi	r24, 0x02	; 2
    1de6:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    1dea:	89 2b       	or	r24, r25
    1dec:	f1 f0       	breq	.+60     	; 0x1e2a <get_back()+0x6a>
    1dee:	40 e0       	ldi	r20, 0x00	; 0
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    1df8:	89 2b       	or	r24, r25
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <get_back()+0x3e>
    1dfc:	55 c0       	rjmp	.+170    	; 0x1ea8 <get_back()+0xe8>
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	63 e0       	ldi	r22, 0x03	; 3
    1e02:	82 e0       	ldi	r24, 0x02	; 2
    1e04:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    1e08:	89 2b       	or	r24, r25
    1e0a:	79 f0       	breq	.+30     	; 0x1e2a <get_back()+0x6a>
    1e0c:	14 c0       	rjmp	.+40     	; 0x1e36 <get_back()+0x76>
    1e0e:	40 e0       	ldi	r20, 0x00	; 0
    1e10:	60 e0       	ldi	r22, 0x00	; 0
    1e12:	82 e0       	ldi	r24, 0x02	; 2
    1e14:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    1e18:	89 2b       	or	r24, r25
    1e1a:	11 f7       	brne	.-60     	; 0x1de0 <get_back()+0x20>
    1e1c:	40 e0       	ldi	r20, 0x00	; 0
    1e1e:	61 e0       	ldi	r22, 0x01	; 1
    1e20:	82 e0       	ldi	r24, 0x02	; 2
    1e22:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    1e26:	89 2b       	or	r24, r25
    1e28:	d9 f6       	brne	.-74     	; 0x1de0 <get_back()+0x20>
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    1e30:	87 30       	cpi	r24, 0x07	; 7
    1e32:	09 f4       	brne	.+2      	; 0x1e36 <get_back()+0x76>
    1e34:	4a c0       	rjmp	.+148    	; 0x1eca <get_back()+0x10a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1484
    linefollow();
  }
  if (direction == Left) {
    1e36:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <direction>
    1e3a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <direction+0x1>
    1e3e:	8b 30       	cpi	r24, 0x0B	; 11
    1e40:	91 05       	cpc	r25, r1
    1e42:	09 f0       	breq	.+2      	; 0x1e46 <get_back()+0x86>
    1e44:	4b c0       	rjmp	.+150    	; 0x1edc <get_back()+0x11c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1485
    move(forward, T90 / 3, 150);
    1e46:	ce 01       	movw	r24, r28
    1e48:	63 e0       	ldi	r22, 0x03	; 3
    1e4a:	70 e0       	ldi	r23, 0x00	; 0
    1e4c:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    1e50:	8b 01       	movw	r16, r22
    1e52:	46 e9       	ldi	r20, 0x96	; 150
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	8a e0       	ldi	r24, 0x0A	; 10
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1486
    move(Left, T90 / 1.3, 150);
    1e5e:	be 01       	movw	r22, r28
    1e60:	dd 0f       	add	r29, r29
    1e62:	88 0b       	sbc	r24, r24
    1e64:	99 0b       	sbc	r25, r25
    1e66:	0e 94 ed 34 	call	0x69da	; 0x69da <__floatsisf>
    1e6a:	26 e6       	ldi	r18, 0x66	; 102
    1e6c:	36 e6       	ldi	r19, 0x66	; 102
    1e6e:	46 ea       	ldi	r20, 0xA6	; 166
    1e70:	5f e3       	ldi	r21, 0x3F	; 63
    1e72:	0e 94 43 34 	call	0x6886	; 0x6886 <__divsf3>
    1e76:	0e 94 b5 34 	call	0x696a	; 0x696a <__fixsfsi>
    1e7a:	46 e9       	ldi	r20, 0x96	; 150
    1e7c:	50 e0       	ldi	r21, 0x00	; 0
    1e7e:	8b e0       	ldi	r24, 0x0B	; 11
    1e80:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1490
    move(forward, T90 / 3, 150);
  } else if (direction == Right) {
    move(forward, T90 / 3, 150);
    move(Right, T90 / 1.3, 150);
    1e82:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1491
    move(forward, T90 / 3, 150);
    1e86:	46 e9       	ldi	r20, 0x96	; 150
    1e88:	50 e0       	ldi	r21, 0x00	; 0
    1e8a:	b8 01       	movw	r22, r16
    1e8c:	8a e0       	ldi	r24, 0x0A	; 10
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1493
  }
  go(60, 60);
    1e94:	6c e3       	ldi	r22, 0x3C	; 60
    1e96:	70 e0       	ldi	r23, 0x00	; 0
    1e98:	8c e3       	ldi	r24, 0x3C	; 60
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1494
}
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	1f 91       	pop	r17
    1ea2:	0f 91       	pop	r16
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1493
  } else if (direction == Right) {
    move(forward, T90 / 3, 150);
    move(Right, T90 / 1.3, 150);
    move(forward, T90 / 3, 150);
  }
  go(60, 60);
    1ea4:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1481
  delay(800);
}
void get_back() {
  int T90 = EEPROM_read_int(T90_address);

  while (!(intersectionL && intersectionR) && color_L == WHITE && color_R == WHITE) {
    1ea8:	40 e0       	ldi	r20, 0x00	; 0
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	82 e0       	ldi	r24, 0x02	; 2
    1eae:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    1eb2:	89 2b       	or	r24, r25
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <get_back()+0xf8>
    1eb6:	a3 cf       	rjmp	.-186    	; 0x1dfe <get_back()+0x3e>
    1eb8:	40 e0       	ldi	r20, 0x00	; 0
    1eba:	61 e0       	ldi	r22, 0x01	; 1
    1ebc:	82 e0       	ldi	r24, 0x02	; 2
    1ebe:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    1ec2:	89 2b       	or	r24, r25
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <get_back()+0x108>
    1ec6:	b1 cf       	rjmp	.-158    	; 0x1e2a <get_back()+0x6a>
    1ec8:	9a cf       	rjmp	.-204    	; 0x1dfe <get_back()+0x3e>
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    1ed0:	87 30       	cpi	r24, 0x07	; 7
    1ed2:	09 f0       	breq	.+2      	; 0x1ed6 <get_back()+0x116>
    1ed4:	b0 cf       	rjmp	.-160    	; 0x1e36 <get_back()+0x76>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1482
    linefollow();
    1ed6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <linefollow()>
    1eda:	7b cf       	rjmp	.-266    	; 0x1dd2 <get_back()+0x12>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1488
  }
  if (direction == Left) {
    move(forward, T90 / 3, 150);
    move(Left, T90 / 1.3, 150);
    move(forward, T90 / 3, 150);
  } else if (direction == Right) {
    1edc:	0c 97       	sbiw	r24, 0x0c	; 12
    1ede:	d1 f6       	brne	.-76     	; 0x1e94 <get_back()+0xd4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1489
    move(forward, T90 / 3, 150);
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	63 e0       	ldi	r22, 0x03	; 3
    1ee4:	70 e0       	ldi	r23, 0x00	; 0
    1ee6:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    1eea:	8b 01       	movw	r16, r22
    1eec:	46 e9       	ldi	r20, 0x96	; 150
    1eee:	50 e0       	ldi	r21, 0x00	; 0
    1ef0:	8a e0       	ldi	r24, 0x0A	; 10
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1490
    move(Right, T90 / 1.3, 150);
    1ef8:	be 01       	movw	r22, r28
    1efa:	dd 0f       	add	r29, r29
    1efc:	88 0b       	sbc	r24, r24
    1efe:	99 0b       	sbc	r25, r25
    1f00:	0e 94 ed 34 	call	0x69da	; 0x69da <__floatsisf>
    1f04:	26 e6       	ldi	r18, 0x66	; 102
    1f06:	36 e6       	ldi	r19, 0x66	; 102
    1f08:	46 ea       	ldi	r20, 0xA6	; 166
    1f0a:	5f e3       	ldi	r21, 0x3F	; 63
    1f0c:	0e 94 43 34 	call	0x6886	; 0x6886 <__divsf3>
    1f10:	0e 94 b5 34 	call	0x696a	; 0x696a <__fixsfsi>
    1f14:	46 e9       	ldi	r20, 0x96	; 150
    1f16:	50 e0       	ldi	r21, 0x00	; 0
    1f18:	8c e0       	ldi	r24, 0x0C	; 12
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	b2 cf       	rjmp	.-156    	; 0x1e82 <get_back()+0xc2>

00001f1e <track(int, int) [clone .constprop.3]>:
track():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1801
    }
  }

  get_back();
}
void track(int round, int direction) {
    1f1e:	ef 92       	push	r14
    1f20:	ff 92       	push	r15
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	8c 01       	movw	r16, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1805
  int track_rounds = 0;
  int track_direction = Left;  //clockwise is right ccw is left
  int inter_cnt = 0;           //intersection counting
  int T90 = EEPROM_read_int(T90_address);
    1f2c:	88 e9       	ldi	r24, 0x98	; 152
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    1f34:	ec 01       	movw	r28, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1809
  track_rounds = round;
  track_direction = direction;
  while (1) {
    linefollow();
    1f36:	0e 94 db 07 	call	0xfb6	; 0xfb6 <linefollow()>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1810
    if (intersectionL && intersectionR) {
    1f3a:	40 e0       	ldi	r20, 0x00	; 0
    1f3c:	60 e0       	ldi	r22, 0x00	; 0
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    1f44:	89 2b       	or	r24, r25
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <track(int, int) [clone .constprop.3]+0x2c>
    1f48:	a8 c0       	rjmp	.+336    	; 0x209a <track(int, int) [clone .constprop.3]+0x17c>
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	62 e0       	ldi	r22, 0x02	; 2
    1f4e:	82 e0       	ldi	r24, 0x02	; 2
    1f50:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    1f54:	89 2b       	or	r24, r25
    1f56:	79 f3       	breq	.-34     	; 0x1f36 <track(int, int) [clone .constprop.3]+0x18>
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	60 e0       	ldi	r22, 0x00	; 0
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    1f62:	89 2b       	or	r24, r25
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <track(int, int) [clone .constprop.3]+0x4a>
    1f66:	aa c0       	rjmp	.+340    	; 0x20bc <track(int, int) [clone .constprop.3]+0x19e>
    1f68:	40 e0       	ldi	r20, 0x00	; 0
    1f6a:	63 e0       	ldi	r22, 0x03	; 3
    1f6c:	82 e0       	ldi	r24, 0x02	; 2
    1f6e:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    1f72:	89 2b       	or	r24, r25
    1f74:	01 f3       	breq	.-64     	; 0x1f36 <track(int, int) [clone .constprop.3]+0x18>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1811
      move(forward, T90 /3, 100);
    1f76:	ce 01       	movw	r24, r28
    1f78:	63 e0       	ldi	r22, 0x03	; 3
    1f7a:	70 e0       	ldi	r23, 0x00	; 0
    1f7c:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    1f80:	44 e6       	ldi	r20, 0x64	; 100
    1f82:	50 e0       	ldi	r21, 0x00	; 0
    1f84:	8a e0       	ldi	r24, 0x0A	; 10
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1813
      if (direction == Right) {
        move(Right, T90, 100);
    1f8c:	44 e6       	ldi	r20, 0x64	; 100
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	be 01       	movw	r22, r28
    1f92:	8c e0       	ldi	r24, 0x0C	; 12
    1f94:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1812
  track_direction = direction;
  while (1) {
    linefollow();
    if (intersectionL && intersectionR) {
      move(forward, T90 /3, 100);
      if (direction == Right) {
    1f96:	0c 30       	cpi	r16, 0x0C	; 12
    1f98:	11 05       	cpc	r17, r1
    1f9a:	11 f0       	breq	.+4      	; 0x1fa0 <track(int, int) [clone .constprop.3]+0x82>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1815
        move(Right, T90, 100);
      } else {
        move(Left, T90, 100);
    1f9c:	8b e0       	ldi	r24, 0x0B	; 11
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1817
      }
      move(forward, T90 / 6, 100);
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	66 e0       	ldi	r22, 0x06	; 6
    1fa8:	70 e0       	ldi	r23, 0x00	; 0
    1faa:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    1fae:	7b 01       	movw	r14, r22
    1fb0:	44 e6       	ldi	r20, 0x64	; 100
    1fb2:	50 e0       	ldi	r21, 0x00	; 0
    1fb4:	8a e0       	ldi	r24, 0x0A	; 10
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1819

      go(60, 60);
    1fbc:	6c e3       	ldi	r22, 0x3C	; 60
    1fbe:	70 e0       	ldi	r23, 0x00	; 0
    1fc0:	8c e3       	ldi	r24, 0x3C	; 60
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1821
      while (inter_cnt < track_rounds) {
        linefollow();
    1fc8:	0e 94 db 07 	call	0xfb6	; 0xfb6 <linefollow()>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1822
        if (intersectionL || intersectionR) {
    1fcc:	40 e0       	ldi	r20, 0x00	; 0
    1fce:	60 e0       	ldi	r22, 0x00	; 0
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    1fd6:	89 2b       	or	r24, r25
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <track(int, int) [clone .constprop.3]+0xbe>
    1fda:	81 c0       	rjmp	.+258    	; 0x20de <track(int, int) [clone .constprop.3]+0x1c0>
    1fdc:	40 e0       	ldi	r20, 0x00	; 0
    1fde:	62 e0       	ldi	r22, 0x02	; 2
    1fe0:	82 e0       	ldi	r24, 0x02	; 2
    1fe2:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    1fe6:	89 2b       	or	r24, r25
    1fe8:	09 f4       	brne	.+2      	; 0x1fec <track(int, int) [clone .constprop.3]+0xce>
    1fea:	89 c0       	rjmp	.+274    	; 0x20fe <track(int, int) [clone .constprop.3]+0x1e0>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1823
          while (intersectionL && intersectionR);
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	60 e0       	ldi	r22, 0x00	; 0
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    1ff6:	89 2b       	or	r24, r25
    1ff8:	09 f4       	brne	.+2      	; 0x1ffc <track(int, int) [clone .constprop.3]+0xde>
    1ffa:	a0 c0       	rjmp	.+320    	; 0x213c <track(int, int) [clone .constprop.3]+0x21e>
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	62 e0       	ldi	r22, 0x02	; 2
    2000:	82 e0       	ldi	r24, 0x02	; 2
    2002:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2006:	89 2b       	or	r24, r25
    2008:	09 f0       	breq	.+2      	; 0x200c <track(int, int) [clone .constprop.3]+0xee>
    200a:	a9 c0       	rjmp	.+338    	; 0x215e <track(int, int) [clone .constprop.3]+0x240>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1824
          move(forward, T90 / 2.5, 100);
    200c:	be 01       	movw	r22, r28
    200e:	0d 2e       	mov	r0, r29
    2010:	00 0c       	add	r0, r0
    2012:	88 0b       	sbc	r24, r24
    2014:	99 0b       	sbc	r25, r25
    2016:	0e 94 ed 34 	call	0x69da	; 0x69da <__floatsisf>
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e2       	ldi	r20, 0x20	; 32
    2020:	50 e4       	ldi	r21, 0x40	; 64
    2022:	0e 94 43 34 	call	0x6886	; 0x6886 <__divsf3>
    2026:	0e 94 b5 34 	call	0x696a	; 0x696a <__fixsfsi>
    202a:	44 e6       	ldi	r20, 0x64	; 100
    202c:	50 e0       	ldi	r21, 0x00	; 0
    202e:	8a e0       	ldi	r24, 0x0A	; 10
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1826
          inter_cnt += 1;
          lcd.clear();
    2036:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1827
          lcd.print(inter_cnt);
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	0e 94 09 0a 	call	0x1412	; 0x1412 <Print::print(int, int) [clone .constprop.4]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1831
        }
      }
      
      go(60, 60);
    2042:	6c e3       	ldi	r22, 0x3C	; 60
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	8c e3       	ldi	r24, 0x3C	; 60
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1832
       move(forward, T90 / 6, 100);
    204e:	44 e6       	ldi	r20, 0x64	; 100
    2050:	50 e0       	ldi	r21, 0x00	; 0
    2052:	b7 01       	movw	r22, r14
    2054:	8a e0       	ldi	r24, 0x0A	; 10
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1834
      if (direction == Right) {
        move(Right, T90, 100);
    205c:	44 e6       	ldi	r20, 0x64	; 100
    205e:	50 e0       	ldi	r21, 0x00	; 0
    2060:	be 01       	movw	r22, r28
    2062:	8c e0       	ldi	r24, 0x0C	; 12
    2064:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1833
        }
      }
      
      go(60, 60);
       move(forward, T90 / 6, 100);
      if (direction == Right) {
    2066:	0c 30       	cpi	r16, 0x0C	; 12
    2068:	11 05       	cpc	r17, r1
    206a:	11 f0       	breq	.+4      	; 0x2070 <track(int, int) [clone .constprop.3]+0x152>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1836
        move(Right, T90, 100);
      } else {
        move(Left, T90, 100);
    206c:	8b e0       	ldi	r24, 0x0B	; 11
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1838
      }
      move(forward, T90 / 2, 100);
    2074:	d7 fd       	sbrc	r29, 7
    2076:	21 96       	adiw	r28, 0x01	; 1
    2078:	be 01       	movw	r22, r28
    207a:	75 95       	asr	r23
    207c:	67 95       	ror	r22
    207e:	44 e6       	ldi	r20, 0x64	; 100
    2080:	50 e0       	ldi	r21, 0x00	; 0
    2082:	8a e0       	ldi	r24, 0x0A	; 10
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1846
     
      break;
    }
  }
  get_back();
}
    208a:	df 91       	pop	r29
    208c:	cf 91       	pop	r28
    208e:	1f 91       	pop	r17
    2090:	0f 91       	pop	r16
    2092:	ff 90       	pop	r15
    2094:	ef 90       	pop	r14
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1845
      direction = Left;
     
      break;
    }
  }
  get_back();
    2096:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <get_back()>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1810
  int T90 = EEPROM_read_int(T90_address);
  track_rounds = round;
  track_direction = direction;
  while (1) {
    linefollow();
    if (intersectionL && intersectionR) {
    209a:	40 e0       	ldi	r20, 0x00	; 0
    209c:	60 e0       	ldi	r22, 0x00	; 0
    209e:	82 e0       	ldi	r24, 0x02	; 2
    20a0:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    20a4:	89 2b       	or	r24, r25
    20a6:	09 f0       	breq	.+2      	; 0x20aa <track(int, int) [clone .constprop.3]+0x18c>
    20a8:	50 cf       	rjmp	.-352    	; 0x1f4a <track(int, int) [clone .constprop.3]+0x2c>
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	61 e0       	ldi	r22, 0x01	; 1
    20ae:	82 e0       	ldi	r24, 0x02	; 2
    20b0:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    20b4:	89 2b       	or	r24, r25
    20b6:	09 f0       	breq	.+2      	; 0x20ba <track(int, int) [clone .constprop.3]+0x19c>
    20b8:	48 cf       	rjmp	.-368    	; 0x1f4a <track(int, int) [clone .constprop.3]+0x2c>
    20ba:	3d cf       	rjmp	.-390    	; 0x1f36 <track(int, int) [clone .constprop.3]+0x18>
    20bc:	40 e0       	ldi	r20, 0x00	; 0
    20be:	60 e0       	ldi	r22, 0x00	; 0
    20c0:	82 e0       	ldi	r24, 0x02	; 2
    20c2:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    20c6:	89 2b       	or	r24, r25
    20c8:	09 f0       	breq	.+2      	; 0x20cc <track(int, int) [clone .constprop.3]+0x1ae>
    20ca:	4e cf       	rjmp	.-356    	; 0x1f68 <track(int, int) [clone .constprop.3]+0x4a>
    20cc:	40 e0       	ldi	r20, 0x00	; 0
    20ce:	61 e0       	ldi	r22, 0x01	; 1
    20d0:	82 e0       	ldi	r24, 0x02	; 2
    20d2:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    20d6:	89 2b       	or	r24, r25
    20d8:	09 f0       	breq	.+2      	; 0x20dc <track(int, int) [clone .constprop.3]+0x1be>
    20da:	46 cf       	rjmp	.-372    	; 0x1f68 <track(int, int) [clone .constprop.3]+0x4a>
    20dc:	2c cf       	rjmp	.-424    	; 0x1f36 <track(int, int) [clone .constprop.3]+0x18>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1822
      move(forward, T90 / 6, 100);

      go(60, 60);
      while (inter_cnt < track_rounds) {
        linefollow();
        if (intersectionL || intersectionR) {
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	82 e0       	ldi	r24, 0x02	; 2
    20e4:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    20e8:	89 2b       	or	r24, r25
    20ea:	09 f0       	breq	.+2      	; 0x20ee <track(int, int) [clone .constprop.3]+0x1d0>
    20ec:	77 cf       	rjmp	.-274    	; 0x1fdc <track(int, int) [clone .constprop.3]+0xbe>
    20ee:	40 e0       	ldi	r20, 0x00	; 0
    20f0:	61 e0       	ldi	r22, 0x01	; 1
    20f2:	82 e0       	ldi	r24, 0x02	; 2
    20f4:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    20f8:	89 2b       	or	r24, r25
    20fa:	09 f0       	breq	.+2      	; 0x20fe <track(int, int) [clone .constprop.3]+0x1e0>
    20fc:	6f cf       	rjmp	.-290    	; 0x1fdc <track(int, int) [clone .constprop.3]+0xbe>
    20fe:	40 e0       	ldi	r20, 0x00	; 0
    2100:	60 e0       	ldi	r22, 0x00	; 0
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2108:	89 2b       	or	r24, r25
    210a:	49 f0       	breq	.+18     	; 0x211e <track(int, int) [clone .constprop.3]+0x200>
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	63 e0       	ldi	r22, 0x03	; 3
    2110:	82 e0       	ldi	r24, 0x02	; 2
    2112:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2116:	89 2b       	or	r24, r25
    2118:	09 f4       	brne	.+2      	; 0x211c <track(int, int) [clone .constprop.3]+0x1fe>
    211a:	56 cf       	rjmp	.-340    	; 0x1fc8 <track(int, int) [clone .constprop.3]+0xaa>
    211c:	67 cf       	rjmp	.-306    	; 0x1fec <track(int, int) [clone .constprop.3]+0xce>
    211e:	40 e0       	ldi	r20, 0x00	; 0
    2120:	60 e0       	ldi	r22, 0x00	; 0
    2122:	82 e0       	ldi	r24, 0x02	; 2
    2124:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2128:	89 2b       	or	r24, r25
    212a:	81 f7       	brne	.-32     	; 0x210c <track(int, int) [clone .constprop.3]+0x1ee>
    212c:	40 e0       	ldi	r20, 0x00	; 0
    212e:	61 e0       	ldi	r22, 0x01	; 1
    2130:	82 e0       	ldi	r24, 0x02	; 2
    2132:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2136:	89 2b       	or	r24, r25
    2138:	49 f7       	brne	.-46     	; 0x210c <track(int, int) [clone .constprop.3]+0x1ee>
    213a:	46 cf       	rjmp	.-372    	; 0x1fc8 <track(int, int) [clone .constprop.3]+0xaa>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1823
          while (intersectionL && intersectionR);
    213c:	40 e0       	ldi	r20, 0x00	; 0
    213e:	60 e0       	ldi	r22, 0x00	; 0
    2140:	82 e0       	ldi	r24, 0x02	; 2
    2142:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2146:	89 2b       	or	r24, r25
    2148:	09 f0       	breq	.+2      	; 0x214c <track(int, int) [clone .constprop.3]+0x22e>
    214a:	58 cf       	rjmp	.-336    	; 0x1ffc <track(int, int) [clone .constprop.3]+0xde>
    214c:	40 e0       	ldi	r20, 0x00	; 0
    214e:	61 e0       	ldi	r22, 0x01	; 1
    2150:	82 e0       	ldi	r24, 0x02	; 2
    2152:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2156:	89 2b       	or	r24, r25
    2158:	09 f0       	breq	.+2      	; 0x215c <track(int, int) [clone .constprop.3]+0x23e>
    215a:	50 cf       	rjmp	.-352    	; 0x1ffc <track(int, int) [clone .constprop.3]+0xde>
    215c:	57 cf       	rjmp	.-338    	; 0x200c <track(int, int) [clone .constprop.3]+0xee>
    215e:	40 e0       	ldi	r20, 0x00	; 0
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2168:	89 2b       	or	r24, r25
    216a:	49 f0       	breq	.+18     	; 0x217e <track(int, int) [clone .constprop.3]+0x260>
    216c:	40 e0       	ldi	r20, 0x00	; 0
    216e:	63 e0       	ldi	r22, 0x03	; 3
    2170:	82 e0       	ldi	r24, 0x02	; 2
    2172:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2176:	89 2b       	or	r24, r25
    2178:	09 f0       	breq	.+2      	; 0x217c <track(int, int) [clone .constprop.3]+0x25e>
    217a:	38 cf       	rjmp	.-400    	; 0x1fec <track(int, int) [clone .constprop.3]+0xce>
    217c:	47 cf       	rjmp	.-370    	; 0x200c <track(int, int) [clone .constprop.3]+0xee>
    217e:	40 e0       	ldi	r20, 0x00	; 0
    2180:	60 e0       	ldi	r22, 0x00	; 0
    2182:	82 e0       	ldi	r24, 0x02	; 2
    2184:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2188:	89 2b       	or	r24, r25
    218a:	81 f7       	brne	.-32     	; 0x216c <track(int, int) [clone .constprop.3]+0x24e>
    218c:	40 e0       	ldi	r20, 0x00	; 0
    218e:	61 e0       	ldi	r22, 0x01	; 1
    2190:	82 e0       	ldi	r24, 0x02	; 2
    2192:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2196:	89 2b       	or	r24, r25
    2198:	49 f7       	brne	.-46     	; 0x216c <track(int, int) [clone .constprop.3]+0x24e>
    219a:	38 cf       	rjmp	.-400    	; 0x200c <track(int, int) [clone .constprop.3]+0xee>

0000219c <obstacle()>:
obstacle():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1864
  move(Left, T90 * 2, 120);
  go(60, 60);
  get_back();
}

void obstacle() {
    219c:	cf 92       	push	r12
    219e:	df 92       	push	r13
    21a0:	ef 92       	push	r14
    21a2:	ff 92       	push	r15
    21a4:	cf 93       	push	r28
    21a6:	df 93       	push	r29
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1865
  int T90 = EEPROM_read_int(T90_address);
    21a8:	88 e9       	ldi	r24, 0x98	; 152
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    21b0:	ec 01       	movw	r28, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1867
  int inter_cnt = 0;  //intersection counting
  while (!intersectionL && !intersectionR) {
    21b2:	40 e0       	ldi	r20, 0x00	; 0
    21b4:	60 e0       	ldi	r22, 0x00	; 0
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    21bc:	89 2b       	or	r24, r25
    21be:	09 f4       	brne	.+2      	; 0x21c2 <obstacle()+0x26>
    21c0:	8b c0       	rjmp	.+278    	; 0x22d8 <obstacle()+0x13c>
    21c2:	40 e0       	ldi	r20, 0x00	; 0
    21c4:	62 e0       	ldi	r22, 0x02	; 2
    21c6:	82 e0       	ldi	r24, 0x02	; 2
    21c8:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    21cc:	89 2b       	or	r24, r25
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <obstacle()+0x36>
    21d0:	93 c0       	rjmp	.+294    	; 0x22f8 <obstacle()+0x15c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1870
    linefollow();
  }
  go(0, 0);
    21d2:	70 e0       	ldi	r23, 0x00	; 0
    21d4:	60 e0       	ldi	r22, 0x00	; 0
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1872
  inter_cnt = 1;
  beep(2);
    21de:	82 e0       	ldi	r24, 0x02	; 2
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	0e 94 61 08 	call	0x10c2	; 0x10c2 <beep(int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1873
  move(forward, T90 / 6, 100);
    21e6:	ce 01       	movw	r24, r28
    21e8:	66 e0       	ldi	r22, 0x06	; 6
    21ea:	70 e0       	ldi	r23, 0x00	; 0
    21ec:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    21f0:	44 e6       	ldi	r20, 0x64	; 100
    21f2:	50 e0       	ldi	r21, 0x00	; 0
    21f4:	8a e0       	ldi	r24, 0x0A	; 10
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1876

  while (1) {
    go(100, 100);
    21fc:	64 e6       	ldi	r22, 0x64	; 100
    21fe:	70 e0       	ldi	r23, 0x00	; 0
    2200:	84 e6       	ldi	r24, 0x64	; 100
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1877
    if (intersectionL || intersectionR) {
    2208:	40 e0       	ldi	r20, 0x00	; 0
    220a:	60 e0       	ldi	r22, 0x00	; 0
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2212:	89 2b       	or	r24, r25
    2214:	09 f4       	brne	.+2      	; 0x2218 <obstacle()+0x7c>
    2216:	91 c0       	rjmp	.+290    	; 0x233a <obstacle()+0x19e>
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	62 e0       	ldi	r22, 0x02	; 2
    221c:	82 e0       	ldi	r24, 0x02	; 2
    221e:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2222:	89 2b       	or	r24, r25
    2224:	09 f4       	brne	.+2      	; 0x2228 <obstacle()+0x8c>
    2226:	99 c0       	rjmp	.+306    	; 0x235a <obstacle()+0x1be>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1878
      go(60, 60);
    2228:	6c e3       	ldi	r22, 0x3C	; 60
    222a:	70 e0       	ldi	r23, 0x00	; 0
    222c:	8c e3       	ldi	r24, 0x3C	; 60
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1879
      while (intersectionL || intersectionR)
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	60 e0       	ldi	r22, 0x00	; 0
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    223e:	89 2b       	or	r24, r25
    2240:	09 f4       	brne	.+2      	; 0x2244 <obstacle()+0xa8>
    2242:	aa c0       	rjmp	.+340    	; 0x2398 <obstacle()+0x1fc>
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	62 e0       	ldi	r22, 0x02	; 2
    2248:	82 e0       	ldi	r24, 0x02	; 2
    224a:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    224e:	89 2b       	or	r24, r25
    2250:	89 f7       	brne	.-30     	; 0x2234 <obstacle()+0x98>
    2252:	40 e0       	ldi	r20, 0x00	; 0
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    225c:	89 2b       	or	r24, r25
    225e:	09 f4       	brne	.+2      	; 0x2262 <obstacle()+0xc6>
    2260:	ac c0       	rjmp	.+344    	; 0x23ba <obstacle()+0x21e>
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	63 e0       	ldi	r22, 0x03	; 3
    2266:	82 e0       	ldi	r24, 0x02	; 2
    2268:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    226c:	89 2b       	or	r24, r25
    226e:	11 f7       	brne	.-60     	; 0x2234 <obstacle()+0x98>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1886
      // move(forward, T90 / 4, 60);
      inter_cnt += 1;
    }
    if (inter_cnt == 2) {
      // move(forward, T90 / 7, 100);
      move(Back, T90 * 1.5, 150);
    2270:	be 01       	movw	r22, r28
    2272:	dd 0f       	add	r29, r29
    2274:	88 0b       	sbc	r24, r24
    2276:	99 0b       	sbc	r25, r25
    2278:	0e 94 ed 34 	call	0x69da	; 0x69da <__floatsisf>
    227c:	6b 01       	movw	r12, r22
    227e:	7c 01       	movw	r14, r24
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 ec       	ldi	r20, 0xC0	; 192
    2286:	5f e3       	ldi	r21, 0x3F	; 63
    2288:	0e 94 9d 35 	call	0x6b3a	; 0x6b3a <__mulsf3>
    228c:	0e 94 b5 34 	call	0x696a	; 0x696a <__fixsfsi>
    2290:	46 e9       	ldi	r20, 0x96	; 150
    2292:	50 e0       	ldi	r21, 0x00	; 0
    2294:	8d e0       	ldi	r24, 0x0D	; 13
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1887
      move(Left, T90 * 1.9, 150);
    229c:	23 e3       	ldi	r18, 0x33	; 51
    229e:	33 e3       	ldi	r19, 0x33	; 51
    22a0:	43 ef       	ldi	r20, 0xF3	; 243
    22a2:	5f e3       	ldi	r21, 0x3F	; 63
    22a4:	c7 01       	movw	r24, r14
    22a6:	b6 01       	movw	r22, r12
    22a8:	0e 94 9d 35 	call	0x6b3a	; 0x6b3a <__mulsf3>
    22ac:	0e 94 b5 34 	call	0x696a	; 0x696a <__fixsfsi>
    22b0:	46 e9       	ldi	r20, 0x96	; 150
    22b2:	50 e0       	ldi	r21, 0x00	; 0
    22b4:	8b e0       	ldi	r24, 0x0B	; 11
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1888
      go(60, 60);
    22bc:	6c e3       	ldi	r22, 0x3C	; 60
    22be:	70 e0       	ldi	r23, 0x00	; 0
    22c0:	8c e3       	ldi	r24, 0x3C	; 60
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1893
      break;
    }
  }
  get_back();
}
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	ff 90       	pop	r15
    22ce:	ef 90       	pop	r14
    22d0:	df 90       	pop	r13
    22d2:	cf 90       	pop	r12
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1892
      move(Left, T90 * 1.9, 150);
      go(60, 60);
      break;
    }
  }
  get_back();
    22d4:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <get_back()>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1867
}

void obstacle() {
  int T90 = EEPROM_read_int(T90_address);
  int inter_cnt = 0;  //intersection counting
  while (!intersectionL && !intersectionR) {
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	60 e0       	ldi	r22, 0x00	; 0
    22dc:	82 e0       	ldi	r24, 0x02	; 2
    22de:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    22e2:	89 2b       	or	r24, r25
    22e4:	09 f0       	breq	.+2      	; 0x22e8 <obstacle()+0x14c>
    22e6:	6d cf       	rjmp	.-294    	; 0x21c2 <obstacle()+0x26>
    22e8:	40 e0       	ldi	r20, 0x00	; 0
    22ea:	61 e0       	ldi	r22, 0x01	; 1
    22ec:	82 e0       	ldi	r24, 0x02	; 2
    22ee:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    22f2:	89 2b       	or	r24, r25
    22f4:	09 f0       	breq	.+2      	; 0x22f8 <obstacle()+0x15c>
    22f6:	65 cf       	rjmp	.-310    	; 0x21c2 <obstacle()+0x26>
    22f8:	40 e0       	ldi	r20, 0x00	; 0
    22fa:	60 e0       	ldi	r22, 0x00	; 0
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2302:	89 2b       	or	r24, r25
    2304:	59 f0       	breq	.+22     	; 0x231c <obstacle()+0x180>
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	63 e0       	ldi	r22, 0x03	; 3
    230a:	82 e0       	ldi	r24, 0x02	; 2
    230c:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2310:	89 2b       	or	r24, r25
    2312:	09 f0       	breq	.+2      	; 0x2316 <obstacle()+0x17a>
    2314:	5e cf       	rjmp	.-324    	; 0x21d2 <obstacle()+0x36>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1868
    linefollow();
    2316:	0e 94 db 07 	call	0xfb6	; 0xfb6 <linefollow()>
    231a:	4b cf       	rjmp	.-362    	; 0x21b2 <obstacle()+0x16>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1867
}

void obstacle() {
  int T90 = EEPROM_read_int(T90_address);
  int inter_cnt = 0;  //intersection counting
  while (!intersectionL && !intersectionR) {
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	60 e0       	ldi	r22, 0x00	; 0
    2320:	82 e0       	ldi	r24, 0x02	; 2
    2322:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2326:	89 2b       	or	r24, r25
    2328:	71 f7       	brne	.-36     	; 0x2306 <obstacle()+0x16a>
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	61 e0       	ldi	r22, 0x01	; 1
    232e:	82 e0       	ldi	r24, 0x02	; 2
    2330:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2334:	89 2b       	or	r24, r25
    2336:	39 f7       	brne	.-50     	; 0x2306 <obstacle()+0x16a>
    2338:	ee cf       	rjmp	.-36     	; 0x2316 <obstacle()+0x17a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1877
  beep(2);
  move(forward, T90 / 6, 100);

  while (1) {
    go(100, 100);
    if (intersectionL || intersectionR) {
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	60 e0       	ldi	r22, 0x00	; 0
    233e:	82 e0       	ldi	r24, 0x02	; 2
    2340:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2344:	89 2b       	or	r24, r25
    2346:	09 f0       	breq	.+2      	; 0x234a <obstacle()+0x1ae>
    2348:	67 cf       	rjmp	.-306    	; 0x2218 <obstacle()+0x7c>
    234a:	40 e0       	ldi	r20, 0x00	; 0
    234c:	61 e0       	ldi	r22, 0x01	; 1
    234e:	82 e0       	ldi	r24, 0x02	; 2
    2350:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2354:	89 2b       	or	r24, r25
    2356:	09 f0       	breq	.+2      	; 0x235a <obstacle()+0x1be>
    2358:	5f cf       	rjmp	.-322    	; 0x2218 <obstacle()+0x7c>
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	60 e0       	ldi	r22, 0x00	; 0
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2364:	89 2b       	or	r24, r25
    2366:	79 f4       	brne	.+30     	; 0x2386 <obstacle()+0x1ea>
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	60 e0       	ldi	r22, 0x00	; 0
    236c:	82 e0       	ldi	r24, 0x02	; 2
    236e:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2372:	89 2b       	or	r24, r25
    2374:	41 f4       	brne	.+16     	; 0x2386 <obstacle()+0x1ea>
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	61 e0       	ldi	r22, 0x01	; 1
    237a:	82 e0       	ldi	r24, 0x02	; 2
    237c:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2380:	89 2b       	or	r24, r25
    2382:	09 f4       	brne	.+2      	; 0x2386 <obstacle()+0x1ea>
    2384:	3b cf       	rjmp	.-394    	; 0x21fc <obstacle()+0x60>
    2386:	40 e0       	ldi	r20, 0x00	; 0
    2388:	63 e0       	ldi	r22, 0x03	; 3
    238a:	82 e0       	ldi	r24, 0x02	; 2
    238c:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2390:	89 2b       	or	r24, r25
    2392:	09 f4       	brne	.+2      	; 0x2396 <obstacle()+0x1fa>
    2394:	33 cf       	rjmp	.-410    	; 0x21fc <obstacle()+0x60>
    2396:	48 cf       	rjmp	.-368    	; 0x2228 <obstacle()+0x8c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1879
      go(60, 60);
      while (intersectionL || intersectionR)
    2398:	40 e0       	ldi	r20, 0x00	; 0
    239a:	60 e0       	ldi	r22, 0x00	; 0
    239c:	82 e0       	ldi	r24, 0x02	; 2
    239e:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    23a2:	89 2b       	or	r24, r25
    23a4:	09 f0       	breq	.+2      	; 0x23a8 <obstacle()+0x20c>
    23a6:	4e cf       	rjmp	.-356    	; 0x2244 <obstacle()+0xa8>
    23a8:	40 e0       	ldi	r20, 0x00	; 0
    23aa:	61 e0       	ldi	r22, 0x01	; 1
    23ac:	82 e0       	ldi	r24, 0x02	; 2
    23ae:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    23b2:	89 2b       	or	r24, r25
    23b4:	09 f0       	breq	.+2      	; 0x23b8 <obstacle()+0x21c>
    23b6:	46 cf       	rjmp	.-372    	; 0x2244 <obstacle()+0xa8>
    23b8:	4c cf       	rjmp	.-360    	; 0x2252 <obstacle()+0xb6>
    23ba:	40 e0       	ldi	r20, 0x00	; 0
    23bc:	60 e0       	ldi	r22, 0x00	; 0
    23be:	82 e0       	ldi	r24, 0x02	; 2
    23c0:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    23c4:	89 2b       	or	r24, r25
    23c6:	09 f0       	breq	.+2      	; 0x23ca <obstacle()+0x22e>
    23c8:	4c cf       	rjmp	.-360    	; 0x2262 <obstacle()+0xc6>
    23ca:	40 e0       	ldi	r20, 0x00	; 0
    23cc:	61 e0       	ldi	r22, 0x01	; 1
    23ce:	82 e0       	ldi	r24, 0x02	; 2
    23d0:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    23d4:	89 2b       	or	r24, r25
    23d6:	09 f0       	breq	.+2      	; 0x23da <obstacle()+0x23e>
    23d8:	44 cf       	rjmp	.-376    	; 0x2262 <obstacle()+0xc6>
    23da:	4a cf       	rjmp	.-364    	; 0x2270 <obstacle()+0xd4>

000023dc <archery()>:
archery():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1847
      break;
    }
  }
  get_back();
}
void archery() {
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1849
  int arm_dropping = EEPROM_read_int(arm_dropping_address);
  int T90 = EEPROM_read_int(T90_address);
    23e0:	88 e9       	ldi	r24, 0x98	; 152
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    23e8:	ec 01       	movw	r28, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1850
  while (!intersectionL && !intersectionR) {
    23ea:	40 e0       	ldi	r20, 0x00	; 0
    23ec:	60 e0       	ldi	r22, 0x00	; 0
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    23f4:	89 2b       	or	r24, r25
    23f6:	09 f4       	brne	.+2      	; 0x23fa <archery()+0x1e>
    23f8:	47 c0       	rjmp	.+142    	; 0x2488 <archery()+0xac>
    23fa:	40 e0       	ldi	r20, 0x00	; 0
    23fc:	62 e0       	ldi	r22, 0x02	; 2
    23fe:	82 e0       	ldi	r24, 0x02	; 2
    2400:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2404:	89 2b       	or	r24, r25
    2406:	09 f4       	brne	.+2      	; 0x240a <archery()+0x2e>
    2408:	4f c0       	rjmp	.+158    	; 0x24a8 <archery()+0xcc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1853
    linefollow();
  }
  go(0, 0);
    240a:	70 e0       	ldi	r23, 0x00	; 0
    240c:	60 e0       	ldi	r22, 0x00	; 0
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1854
  beep(3);
    2416:	83 e0       	ldi	r24, 0x03	; 3
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <beep(int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1855
  XL_Gripper(31, 100, 1000);
    241e:	48 ee       	ldi	r20, 0xE8	; 232
    2420:	53 e0       	ldi	r21, 0x03	; 3
    2422:	64 e6       	ldi	r22, 0x64	; 100
    2424:	70 e0       	ldi	r23, 0x00	; 0
    2426:	8f e1       	ldi	r24, 0x1F	; 31
    2428:	0e 94 db 08 	call	0x11b6	; 0x11b6 <XL_Gripper(char, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1856
  delay(1);
    242c:	61 e0       	ldi	r22, 0x01	; 1
    242e:	70 e0       	ldi	r23, 0x00	; 0
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1857
  delay(2000);
    2438:	60 ed       	ldi	r22, 0xD0	; 208
    243a:	77 e0       	ldi	r23, 0x07	; 7
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1858
  move(Back, T90 / 4, 120);
    2444:	be 01       	movw	r22, r28
    2446:	d7 ff       	sbrs	r29, 7
    2448:	02 c0       	rjmp	.+4      	; 0x244e <archery()+0x72>
    244a:	6d 5f       	subi	r22, 0xFD	; 253
    244c:	7f 4f       	sbci	r23, 0xFF	; 255
    244e:	75 95       	asr	r23
    2450:	67 95       	ror	r22
    2452:	75 95       	asr	r23
    2454:	67 95       	ror	r22
    2456:	48 e7       	ldi	r20, 0x78	; 120
    2458:	50 e0       	ldi	r21, 0x00	; 0
    245a:	8d e0       	ldi	r24, 0x0D	; 13
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1859
  move(Left, T90 * 2, 120);
    2462:	be 01       	movw	r22, r28
    2464:	66 0f       	add	r22, r22
    2466:	77 1f       	adc	r23, r23
    2468:	48 e7       	ldi	r20, 0x78	; 120
    246a:	50 e0       	ldi	r21, 0x00	; 0
    246c:	8b e0       	ldi	r24, 0x0B	; 11
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1860
  go(60, 60);
    2474:	6c e3       	ldi	r22, 0x3C	; 60
    2476:	70 e0       	ldi	r23, 0x00	; 0
    2478:	8c e3       	ldi	r24, 0x3C	; 60
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1862
  get_back();
}
    2480:	df 91       	pop	r29
    2482:	cf 91       	pop	r28
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1861
  delay(1);
  delay(2000);
  move(Back, T90 / 4, 120);
  move(Left, T90 * 2, 120);
  go(60, 60);
  get_back();
    2484:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <get_back()>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1850
  get_back();
}
void archery() {
  int arm_dropping = EEPROM_read_int(arm_dropping_address);
  int T90 = EEPROM_read_int(T90_address);
  while (!intersectionL && !intersectionR) {
    2488:	40 e0       	ldi	r20, 0x00	; 0
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	82 e0       	ldi	r24, 0x02	; 2
    248e:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2492:	89 2b       	or	r24, r25
    2494:	09 f0       	breq	.+2      	; 0x2498 <archery()+0xbc>
    2496:	b1 cf       	rjmp	.-158    	; 0x23fa <archery()+0x1e>
    2498:	40 e0       	ldi	r20, 0x00	; 0
    249a:	61 e0       	ldi	r22, 0x01	; 1
    249c:	82 e0       	ldi	r24, 0x02	; 2
    249e:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    24a2:	89 2b       	or	r24, r25
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <archery()+0xcc>
    24a6:	a9 cf       	rjmp	.-174    	; 0x23fa <archery()+0x1e>
    24a8:	40 e0       	ldi	r20, 0x00	; 0
    24aa:	60 e0       	ldi	r22, 0x00	; 0
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    24b2:	89 2b       	or	r24, r25
    24b4:	59 f0       	breq	.+22     	; 0x24cc <archery()+0xf0>
    24b6:	40 e0       	ldi	r20, 0x00	; 0
    24b8:	63 e0       	ldi	r22, 0x03	; 3
    24ba:	82 e0       	ldi	r24, 0x02	; 2
    24bc:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    24c0:	89 2b       	or	r24, r25
    24c2:	09 f0       	breq	.+2      	; 0x24c6 <archery()+0xea>
    24c4:	a2 cf       	rjmp	.-188    	; 0x240a <archery()+0x2e>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1851
    linefollow();
    24c6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <linefollow()>
    24ca:	8f cf       	rjmp	.-226    	; 0x23ea <archery()+0xe>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1850
  get_back();
}
void archery() {
  int arm_dropping = EEPROM_read_int(arm_dropping_address);
  int T90 = EEPROM_read_int(T90_address);
  while (!intersectionL && !intersectionR) {
    24cc:	40 e0       	ldi	r20, 0x00	; 0
    24ce:	60 e0       	ldi	r22, 0x00	; 0
    24d0:	82 e0       	ldi	r24, 0x02	; 2
    24d2:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    24d6:	89 2b       	or	r24, r25
    24d8:	71 f7       	brne	.-36     	; 0x24b6 <archery()+0xda>
    24da:	40 e0       	ldi	r20, 0x00	; 0
    24dc:	61 e0       	ldi	r22, 0x01	; 1
    24de:	82 e0       	ldi	r24, 0x02	; 2
    24e0:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    24e4:	89 2b       	or	r24, r25
    24e6:	39 f7       	brne	.-50     	; 0x24b6 <archery()+0xda>
    24e8:	ee cf       	rjmp	.-36     	; 0x24c6 <archery()+0xea>

000024ea <bowling()>:
bowling():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1773
  if (vl_dis == 20) {
    delay(10);
    return vl_double_check(xv);
  } else return vl_dis;
}
void bowling() {
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1774
  int T90 = EEPROM_read_int(T90_address);
    24ee:	88 e9       	ldi	r24, 0x98	; 152
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    24f6:	ec 01       	movw	r28, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1778
  int arm_dropping = EEPROM_read_int(arm_dropping_address);
  int arm_normal = EEPROM_read_int(arm_normal_address);
  while (1) {
    linefollow();
    24f8:	0e 94 db 07 	call	0xfb6	; 0xfb6 <linefollow()>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1779
    if (intersectionL || intersectionR) {
    24fc:	40 e0       	ldi	r20, 0x00	; 0
    24fe:	60 e0       	ldi	r22, 0x00	; 0
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2506:	89 2b       	or	r24, r25
    2508:	09 f4       	brne	.+2      	; 0x250c <bowling()+0x22>
    250a:	72 c0       	rjmp	.+228    	; 0x25f0 <bowling()+0x106>
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	62 e0       	ldi	r22, 0x02	; 2
    2510:	82 e0       	ldi	r24, 0x02	; 2
    2512:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2516:	89 2b       	or	r24, r25
    2518:	09 f4       	brne	.+2      	; 0x251c <bowling()+0x32>
    251a:	7a c0       	rjmp	.+244    	; 0x2610 <bowling()+0x126>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1780
      go(0, 0);
    251c:	70 e0       	ldi	r23, 0x00	; 0
    251e:	60 e0       	ldi	r22, 0x00	; 0
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1781
      move(Back, T90 / 8, 100);
    2528:	be 01       	movw	r22, r28
    252a:	d7 ff       	sbrs	r29, 7
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <bowling()+0x48>
    252e:	69 5f       	subi	r22, 0xF9	; 249
    2530:	7f 4f       	sbci	r23, 0xFF	; 255
    2532:	23 e0       	ldi	r18, 0x03	; 3
    2534:	75 95       	asr	r23
    2536:	67 95       	ror	r22
    2538:	2a 95       	dec	r18
    253a:	e1 f7       	brne	.-8      	; 0x2534 <bowling()+0x4a>
    253c:	44 e6       	ldi	r20, 0x64	; 100
    253e:	50 e0       	ldi	r21, 0x00	; 0
    2540:	8d e0       	ldi	r24, 0x0D	; 13
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1782
      move(Left, T90 / 10, 100);
    2548:	ce 01       	movw	r24, r28
    254a:	6a e0       	ldi	r22, 0x0A	; 10
    254c:	70 e0       	ldi	r23, 0x00	; 0
    254e:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    2552:	44 e6       	ldi	r20, 0x64	; 100
    2554:	50 e0       	ldi	r21, 0x00	; 0
    2556:	8b e0       	ldi	r24, 0x0B	; 11
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1783
      beep(3);
    255e:	83 e0       	ldi	r24, 0x03	; 3
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	0e 94 61 08 	call	0x10c2	; 0x10c2 <beep(int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1786
      
        // move(Right, T90 / 6, 100);
        move(forward, T90 / 4, 60);
    2566:	be 01       	movw	r22, r28
    2568:	d7 ff       	sbrs	r29, 7
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <bowling()+0x86>
    256c:	6d 5f       	subi	r22, 0xFD	; 253
    256e:	7f 4f       	sbci	r23, 0xFF	; 255
    2570:	75 95       	asr	r23
    2572:	67 95       	ror	r22
    2574:	75 95       	asr	r23
    2576:	67 95       	ror	r22
    2578:	4c e3       	ldi	r20, 0x3C	; 60
    257a:	50 e0       	ldi	r21, 0x00	; 0
    257c:	8a e0       	ldi	r24, 0x0A	; 10
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1787
        move_arm(550, 1000);
    2584:	68 ee       	ldi	r22, 0xE8	; 232
    2586:	73 e0       	ldi	r23, 0x03	; 3
    2588:	86 e2       	ldi	r24, 0x26	; 38
    258a:	92 e0       	ldi	r25, 0x02	; 2
    258c:	0e 94 c4 08 	call	0x1188	; 0x1188 <move_arm(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1788
        delay(1000);
    2590:	68 ee       	ldi	r22, 0xE8	; 232
    2592:	73 e0       	ldi	r23, 0x03	; 3
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1789
        move_arm(100, 500);
    259c:	64 ef       	ldi	r22, 0xF4	; 244
    259e:	71 e0       	ldi	r23, 0x01	; 1
    25a0:	84 e6       	ldi	r24, 0x64	; 100
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	0e 94 c4 08 	call	0x1188	; 0x1188 <move_arm(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1790
        delay(1000);
    25a8:	68 ee       	ldi	r22, 0xE8	; 232
    25aa:	73 e0       	ldi	r23, 0x03	; 3
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1791
        move(Back, T90 / 5, 100);
    25b4:	ce 01       	movw	r24, r28
    25b6:	65 e0       	ldi	r22, 0x05	; 5
    25b8:	70 e0       	ldi	r23, 0x00	; 0
    25ba:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    25be:	44 e6       	ldi	r20, 0x64	; 100
    25c0:	50 e0       	ldi	r21, 0x00	; 0
    25c2:	8d e0       	ldi	r24, 0x0D	; 13
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1792
         move(Left, T90 * 2, 150);
    25ca:	be 01       	movw	r22, r28
    25cc:	66 0f       	add	r22, r22
    25ce:	77 1f       	adc	r23, r23
    25d0:	46 e9       	ldi	r20, 0x96	; 150
    25d2:	50 e0       	ldi	r21, 0x00	; 0
    25d4:	8b e0       	ldi	r24, 0x0B	; 11
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1793
        go(60, 60);
    25dc:	6c e3       	ldi	r22, 0x3C	; 60
    25de:	70 e0       	ldi	r23, 0x00	; 0
    25e0:	8c e3       	ldi	r24, 0x3C	; 60
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1800
      
    }
  }

  get_back();
}
    25e8:	df 91       	pop	r29
    25ea:	cf 91       	pop	r28
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1799
        break;
      
    }
  }

  get_back();
    25ec:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <get_back()>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1779
  int T90 = EEPROM_read_int(T90_address);
  int arm_dropping = EEPROM_read_int(arm_dropping_address);
  int arm_normal = EEPROM_read_int(arm_normal_address);
  while (1) {
    linefollow();
    if (intersectionL || intersectionR) {
    25f0:	40 e0       	ldi	r20, 0x00	; 0
    25f2:	60 e0       	ldi	r22, 0x00	; 0
    25f4:	82 e0       	ldi	r24, 0x02	; 2
    25f6:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    25fa:	89 2b       	or	r24, r25
    25fc:	09 f0       	breq	.+2      	; 0x2600 <bowling()+0x116>
    25fe:	86 cf       	rjmp	.-244    	; 0x250c <bowling()+0x22>
    2600:	40 e0       	ldi	r20, 0x00	; 0
    2602:	61 e0       	ldi	r22, 0x01	; 1
    2604:	82 e0       	ldi	r24, 0x02	; 2
    2606:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    260a:	89 2b       	or	r24, r25
    260c:	09 f0       	breq	.+2      	; 0x2610 <bowling()+0x126>
    260e:	7e cf       	rjmp	.-260    	; 0x250c <bowling()+0x22>
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	60 e0       	ldi	r22, 0x00	; 0
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    261a:	89 2b       	or	r24, r25
    261c:	79 f4       	brne	.+30     	; 0x263c <bowling()+0x152>
    261e:	40 e0       	ldi	r20, 0x00	; 0
    2620:	60 e0       	ldi	r22, 0x00	; 0
    2622:	82 e0       	ldi	r24, 0x02	; 2
    2624:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2628:	89 2b       	or	r24, r25
    262a:	41 f4       	brne	.+16     	; 0x263c <bowling()+0x152>
    262c:	40 e0       	ldi	r20, 0x00	; 0
    262e:	61 e0       	ldi	r22, 0x01	; 1
    2630:	82 e0       	ldi	r24, 0x02	; 2
    2632:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2636:	89 2b       	or	r24, r25
    2638:	09 f4       	brne	.+2      	; 0x263c <bowling()+0x152>
    263a:	5e cf       	rjmp	.-324    	; 0x24f8 <bowling()+0xe>
    263c:	40 e0       	ldi	r20, 0x00	; 0
    263e:	63 e0       	ldi	r22, 0x03	; 3
    2640:	82 e0       	ldi	r24, 0x02	; 2
    2642:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2646:	89 2b       	or	r24, r25
    2648:	09 f4       	brne	.+2      	; 0x264c <bowling()+0x162>
    264a:	56 cf       	rjmp	.-340    	; 0x24f8 <bowling()+0xe>
    264c:	67 cf       	rjmp	.-306    	; 0x251c <bowling()+0x32>

0000264e <wlift()>:
wlift():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1539
//       }
//     }
//   }
// }

void wlift() {
    264e:	4f 92       	push	r4
    2650:	5f 92       	push	r5
    2652:	6f 92       	push	r6
    2654:	7f 92       	push	r7
    2656:	af 92       	push	r10
    2658:	bf 92       	push	r11
    265a:	cf 92       	push	r12
    265c:	df 92       	push	r13
    265e:	ef 92       	push	r14
    2660:	ff 92       	push	r15
    2662:	0f 93       	push	r16
    2664:	1f 93       	push	r17
    2666:	cf 93       	push	r28
    2668:	df 93       	push	r29
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1540
  int T90 = EEPROM_read_int(T90_address);
    266a:	88 e9       	ldi	r24, 0x98	; 152
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    2672:	ec 01       	movw	r28, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1544
  int gripper_close = EEPROM_read_int(gripper_close_address);
  int gripper_open = EEPROM_read_int(gripper_open_address);
  int inter_cnt = 0;  //intersection counting
  delay(50);
    2674:	62 e3       	ldi	r22, 0x32	; 50
    2676:	70 e0       	ldi	r23, 0x00	; 0
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1545
  move_arm(900, 400);
    2680:	60 e9       	ldi	r22, 0x90	; 144
    2682:	71 e0       	ldi	r23, 0x01	; 1
    2684:	84 e8       	ldi	r24, 0x84	; 132
    2686:	93 e0       	ldi	r25, 0x03	; 3
    2688:	0e 94 c4 08 	call	0x1188	; 0x1188 <move_arm(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1546
  delay(500);
    268c:	64 ef       	ldi	r22, 0xF4	; 244
    268e:	71 e0       	ldi	r23, 0x01	; 1
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1547
  go(80, 80);
    2698:	60 e5       	ldi	r22, 0x50	; 80
    269a:	70 e0       	ldi	r23, 0x00	; 0
    269c:	80 e5       	ldi	r24, 0x50	; 80
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1566
      } else if (inter_cnt == 3) {
        inter_cnt += 1;
      }
    }
    if (inter_cnt == 2) { //originally 2
      move(Back, T90 / 2, 100);
    26a4:	5e 01       	movw	r10, r28
    26a6:	d7 ff       	sbrs	r29, 7
    26a8:	03 c0       	rjmp	.+6      	; 0x26b0 <wlift()+0x62>
    26aa:	8f ef       	ldi	r24, 0xFF	; 255
    26ac:	a8 1a       	sub	r10, r24
    26ae:	b8 0a       	sbc	r11, r24
    26b0:	b5 94       	asr	r11
    26b2:	a7 94       	ror	r10
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1543

void wlift() {
  int T90 = EEPROM_read_int(T90_address);
  int gripper_close = EEPROM_read_int(gripper_close_address);
  int gripper_open = EEPROM_read_int(gripper_open_address);
  int inter_cnt = 0;  //intersection counting
    26b4:	10 e0       	ldi	r17, 0x00	; 0
    26b6:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1569
    }
    if (inter_cnt == 2) { //originally 2
      move(Back, T90 / 2, 100);
      move_arm(345, 500);
      delay(300);  //arm_normal
      move(forward, T90 / 4.6, 50);
    26b8:	2e 01       	movw	r4, r28
    26ba:	0d 2e       	mov	r0, r29
    26bc:	00 0c       	add	r0, r0
    26be:	66 08       	sbc	r6, r6
    26c0:	77 08       	sbc	r7, r7
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1549
  delay(50);
  move_arm(900, 400);
  delay(500);
  go(80, 80);
  while (1) {
    lcd.clear();
    26c2:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1550
    lcd.print(inter_cnt);
    26c6:	c8 01       	movw	r24, r16
    26c8:	0e 94 09 0a 	call	0x1412	; 0x1412 <Print::print(int, int) [clone .constprop.4]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1551
    linefollow();
    26cc:	0e 94 db 07 	call	0xfb6	; 0xfb6 <linefollow()>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1552
    if (intersectionL || intersectionR) {
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	60 e0       	ldi	r22, 0x00	; 0
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    26da:	89 2b       	or	r24, r25
    26dc:	09 f4       	brne	.+2      	; 0x26e0 <wlift()+0x92>
    26de:	7c c0       	rjmp	.+248    	; 0x27d8 <wlift()+0x18a>
    26e0:	40 e0       	ldi	r20, 0x00	; 0
    26e2:	62 e0       	ldi	r22, 0x02	; 2
    26e4:	82 e0       	ldi	r24, 0x02	; 2
    26e6:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    26ea:	89 2b       	or	r24, r25
    26ec:	09 f0       	breq	.+2      	; 0x26f0 <wlift()+0xa2>
    26ee:	85 c0       	rjmp	.+266    	; 0x27fa <wlift()+0x1ac>
    26f0:	40 e0       	ldi	r20, 0x00	; 0
    26f2:	60 e0       	ldi	r22, 0x00	; 0
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    26fa:	89 2b       	or	r24, r25
    26fc:	71 f4       	brne	.+28     	; 0x271a <wlift()+0xcc>
    26fe:	40 e0       	ldi	r20, 0x00	; 0
    2700:	60 e0       	ldi	r22, 0x00	; 0
    2702:	82 e0       	ldi	r24, 0x02	; 2
    2704:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2708:	89 2b       	or	r24, r25
    270a:	39 f4       	brne	.+14     	; 0x271a <wlift()+0xcc>
    270c:	40 e0       	ldi	r20, 0x00	; 0
    270e:	61 e0       	ldi	r22, 0x01	; 1
    2710:	82 e0       	ldi	r24, 0x02	; 2
    2712:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2716:	89 2b       	or	r24, r25
    2718:	41 f0       	breq	.+16     	; 0x272a <wlift()+0xdc>
    271a:	40 e0       	ldi	r20, 0x00	; 0
    271c:	63 e0       	ldi	r22, 0x03	; 3
    271e:	82 e0       	ldi	r24, 0x02	; 2
    2720:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2724:	89 2b       	or	r24, r25
    2726:	09 f0       	breq	.+2      	; 0x272a <wlift()+0xdc>
    2728:	68 c0       	rjmp	.+208    	; 0x27fa <wlift()+0x1ac>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1565
        inter_cnt = 2;
      } else if (inter_cnt == 3) {
        inter_cnt += 1;
      }
    }
    if (inter_cnt == 2) { //originally 2
    272a:	02 30       	cpi	r16, 0x02	; 2
    272c:	11 05       	cpc	r17, r1
    272e:	49 f6       	brne	.-110    	; 0x26c2 <wlift()+0x74>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1566
      move(Back, T90 / 2, 100);
    2730:	44 e6       	ldi	r20, 0x64	; 100
    2732:	50 e0       	ldi	r21, 0x00	; 0
    2734:	b5 01       	movw	r22, r10
    2736:	8d e0       	ldi	r24, 0x0D	; 13
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1567
      move_arm(345, 500);
    273e:	64 ef       	ldi	r22, 0xF4	; 244
    2740:	71 e0       	ldi	r23, 0x01	; 1
    2742:	89 e5       	ldi	r24, 0x59	; 89
    2744:	91 e0       	ldi	r25, 0x01	; 1
    2746:	0e 94 c4 08 	call	0x1188	; 0x1188 <move_arm(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1568
      delay(300);  //arm_normal
    274a:	6c e2       	ldi	r22, 0x2C	; 44
    274c:	71 e0       	ldi	r23, 0x01	; 1
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1569
      move(forward, T90 / 4.6, 50);
    2756:	c3 01       	movw	r24, r6
    2758:	b2 01       	movw	r22, r4
    275a:	0e 94 ed 34 	call	0x69da	; 0x69da <__floatsisf>
    275e:	6b 01       	movw	r12, r22
    2760:	7c 01       	movw	r14, r24
    2762:	23 e3       	ldi	r18, 0x33	; 51
    2764:	33 e3       	ldi	r19, 0x33	; 51
    2766:	43 e9       	ldi	r20, 0x93	; 147
    2768:	50 e4       	ldi	r21, 0x40	; 64
    276a:	0e 94 43 34 	call	0x6886	; 0x6886 <__divsf3>
    276e:	0e 94 b5 34 	call	0x696a	; 0x696a <__fixsfsi>
    2772:	42 e3       	ldi	r20, 0x32	; 50
    2774:	50 e0       	ldi	r21, 0x00	; 0
    2776:	8a e0       	ldi	r24, 0x0A	; 10
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1570
      beep(3);
    277e:	83 e0       	ldi	r24, 0x03	; 3
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	0e 94 61 08 	call	0x10c2	; 0x10c2 <beep(int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1571
      lcd.print(inter_cnt);
    2786:	82 e0       	ldi	r24, 0x02	; 2
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	0e 94 09 0a 	call	0x1412	; 0x1412 <Print::print(int, int) [clone .constprop.4]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1572
      lcd.clear();
    278e:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1573
      lcd.print("picking up");
    2792:	8b ed       	ldi	r24, 0xDB	; 219
    2794:	93 e0       	ldi	r25, 0x03	; 3
    2796:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1574
      move_arm(780, 200);  //PICKUP
    279a:	68 ec       	ldi	r22, 0xC8	; 200
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	8c e0       	ldi	r24, 0x0C	; 12
    27a0:	93 e0       	ldi	r25, 0x03	; 3
    27a2:	0e 94 c4 08 	call	0x1188	; 0x1188 <move_arm(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1575
      delay(1500);
    27a6:	6c ed       	ldi	r22, 0xDC	; 220
    27a8:	75 e0       	ldi	r23, 0x05	; 5
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1576
      move(forward, T90 / 1.5, 100);
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 ec       	ldi	r20, 0xC0	; 192
    27b8:	5f e3       	ldi	r21, 0x3F	; 63
    27ba:	c7 01       	movw	r24, r14
    27bc:	b6 01       	movw	r22, r12
    27be:	0e 94 43 34 	call	0x6886	; 0x6886 <__divsf3>
    27c2:	0e 94 b5 34 	call	0x696a	; 0x696a <__fixsfsi>
    27c6:	44 e6       	ldi	r20, 0x64	; 100
    27c8:	50 e0       	ldi	r21, 0x00	; 0
    27ca:	8a e0       	ldi	r24, 0x0A	; 10
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1577
      inter_cnt += 1;
    27d2:	03 e0       	ldi	r16, 0x03	; 3
    27d4:	10 e0       	ldi	r17, 0x00	; 0
    27d6:	75 cf       	rjmp	.-278    	; 0x26c2 <wlift()+0x74>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1552
  go(80, 80);
  while (1) {
    lcd.clear();
    lcd.print(inter_cnt);
    linefollow();
    if (intersectionL || intersectionR) {
    27d8:	40 e0       	ldi	r20, 0x00	; 0
    27da:	60 e0       	ldi	r22, 0x00	; 0
    27dc:	82 e0       	ldi	r24, 0x02	; 2
    27de:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    27e2:	89 2b       	or	r24, r25
    27e4:	09 f0       	breq	.+2      	; 0x27e8 <wlift()+0x19a>
    27e6:	7c cf       	rjmp	.-264    	; 0x26e0 <wlift()+0x92>
    27e8:	40 e0       	ldi	r20, 0x00	; 0
    27ea:	61 e0       	ldi	r22, 0x01	; 1
    27ec:	82 e0       	ldi	r24, 0x02	; 2
    27ee:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    27f2:	89 2b       	or	r24, r25
    27f4:	09 f0       	breq	.+2      	; 0x27f8 <wlift()+0x1aa>
    27f6:	74 cf       	rjmp	.-280    	; 0x26e0 <wlift()+0x92>
    27f8:	7b cf       	rjmp	.-266    	; 0x26f0 <wlift()+0xa2>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1553
      if (inter_cnt == 0) {
    27fa:	01 15       	cp	r16, r1
    27fc:	11 05       	cpc	r17, r1
    27fe:	09 f0       	breq	.+2      	; 0x2802 <wlift()+0x1b4>
    2800:	43 c0       	rjmp	.+134    	; 0x2888 <wlift()+0x23a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1554
        go(50, 50);
    2802:	62 e3       	ldi	r22, 0x32	; 50
    2804:	70 e0       	ldi	r23, 0x00	; 0
    2806:	82 e3       	ldi	r24, 0x32	; 50
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1555
        while (intersectionL || intersectionR)
    280e:	40 e0       	ldi	r20, 0x00	; 0
    2810:	60 e0       	ldi	r22, 0x00	; 0
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2818:	89 2b       	or	r24, r25
    281a:	c1 f0       	breq	.+48     	; 0x284c <wlift()+0x1fe>
    281c:	40 e0       	ldi	r20, 0x00	; 0
    281e:	62 e0       	ldi	r22, 0x02	; 2
    2820:	82 e0       	ldi	r24, 0x02	; 2
    2822:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2826:	89 2b       	or	r24, r25
    2828:	91 f7       	brne	.-28     	; 0x280e <wlift()+0x1c0>
    282a:	40 e0       	ldi	r20, 0x00	; 0
    282c:	60 e0       	ldi	r22, 0x00	; 0
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2834:	89 2b       	or	r24, r25
    2836:	c9 f0       	breq	.+50     	; 0x286a <wlift()+0x21c>
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	63 e0       	ldi	r22, 0x03	; 3
    283c:	82 e0       	ldi	r24, 0x02	; 2
    283e:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2842:	89 2b       	or	r24, r25
    2844:	21 f7       	brne	.-56     	; 0x280e <wlift()+0x1c0>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1577
      lcd.clear();
      lcd.print("picking up");
      move_arm(780, 200);  //PICKUP
      delay(1500);
      move(forward, T90 / 1.5, 100);
      inter_cnt += 1;
    2846:	01 e0       	ldi	r16, 0x01	; 1
    2848:	10 e0       	ldi	r17, 0x00	; 0
    284a:	3b cf       	rjmp	.-394    	; 0x26c2 <wlift()+0x74>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1555
    lcd.print(inter_cnt);
    linefollow();
    if (intersectionL || intersectionR) {
      if (inter_cnt == 0) {
        go(50, 50);
        while (intersectionL || intersectionR)
    284c:	40 e0       	ldi	r20, 0x00	; 0
    284e:	60 e0       	ldi	r22, 0x00	; 0
    2850:	82 e0       	ldi	r24, 0x02	; 2
    2852:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2856:	89 2b       	or	r24, r25
    2858:	09 f7       	brne	.-62     	; 0x281c <wlift()+0x1ce>
    285a:	40 e0       	ldi	r20, 0x00	; 0
    285c:	61 e0       	ldi	r22, 0x01	; 1
    285e:	82 e0       	ldi	r24, 0x02	; 2
    2860:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2864:	89 2b       	or	r24, r25
    2866:	d1 f6       	brne	.-76     	; 0x281c <wlift()+0x1ce>
    2868:	e0 cf       	rjmp	.-64     	; 0x282a <wlift()+0x1dc>
    286a:	40 e0       	ldi	r20, 0x00	; 0
    286c:	60 e0       	ldi	r22, 0x00	; 0
    286e:	82 e0       	ldi	r24, 0x02	; 2
    2870:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2874:	89 2b       	or	r24, r25
    2876:	01 f7       	brne	.-64     	; 0x2838 <wlift()+0x1ea>
    2878:	40 e0       	ldi	r20, 0x00	; 0
    287a:	61 e0       	ldi	r22, 0x01	; 1
    287c:	82 e0       	ldi	r24, 0x02	; 2
    287e:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    2882:	89 2b       	or	r24, r25
    2884:	c9 f6       	brne	.-78     	; 0x2838 <wlift()+0x1ea>
    2886:	df cf       	rjmp	.-66     	; 0x2846 <wlift()+0x1f8>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1558
        ;
        inter_cnt += 1;
      } else if (inter_cnt == 1) {
    2888:	01 30       	cpi	r16, 0x01	; 1
    288a:	11 05       	cpc	r17, r1
    288c:	39 f4       	brne	.+14     	; 0x289c <wlift()+0x24e>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1559
        go(0, 0);
    288e:	70 e0       	ldi	r23, 0x00	; 0
    2890:	60 e0       	ldi	r22, 0x00	; 0
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
    289a:	4a cf       	rjmp	.-364    	; 0x2730 <wlift()+0xe2>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1561
        inter_cnt = 2;
      } else if (inter_cnt == 3) {
    289c:	03 30       	cpi	r16, 0x03	; 3
    289e:	11 05       	cpc	r17, r1
    28a0:	09 f0       	breq	.+2      	; 0x28a4 <wlift()+0x256>
    28a2:	43 cf       	rjmp	.-378    	; 0x272a <wlift()+0xdc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1580
      delay(1500);
      move(forward, T90 / 1.5, 100);
      inter_cnt += 1;
    }
    if (inter_cnt >= 4) { //4
      go(0, 0);
    28a4:	70 e0       	ldi	r23, 0x00	; 0
    28a6:	60 e0       	ldi	r22, 0x00	; 0
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1581
      move(Back, T90 / 13, 60);
    28b0:	ce 01       	movw	r24, r28
    28b2:	6d e0       	ldi	r22, 0x0D	; 13
    28b4:	70 e0       	ldi	r23, 0x00	; 0
    28b6:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    28ba:	4c e3       	ldi	r20, 0x3C	; 60
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	8d e0       	ldi	r24, 0x0D	; 13
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1582
      lcd.clear();
    28c6:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1583
      lcd.print("putting down");
    28ca:	8e ec       	ldi	r24, 0xCE	; 206
    28cc:	93 e0       	ldi	r25, 0x03	; 3
    28ce:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1584
      move_arm(345, 200);  //Dropping the weight
    28d2:	68 ec       	ldi	r22, 0xC8	; 200
    28d4:	70 e0       	ldi	r23, 0x00	; 0
    28d6:	89 e5       	ldi	r24, 0x59	; 89
    28d8:	91 e0       	ldi	r25, 0x01	; 1
    28da:	0e 94 c4 08 	call	0x1188	; 0x1188 <move_arm(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1585
      delay(1500);
    28de:	6c ed       	ldi	r22, 0xDC	; 220
    28e0:	75 e0       	ldi	r23, 0x05	; 5
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1586
      move(Back, T90 * 1.5, 100);
    28ea:	be 01       	movw	r22, r28
    28ec:	0d 2e       	mov	r0, r29
    28ee:	00 0c       	add	r0, r0
    28f0:	88 0b       	sbc	r24, r24
    28f2:	99 0b       	sbc	r25, r25
    28f4:	0e 94 ed 34 	call	0x69da	; 0x69da <__floatsisf>
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 ec       	ldi	r20, 0xC0	; 192
    28fe:	5f e3       	ldi	r21, 0x3F	; 63
    2900:	0e 94 9d 35 	call	0x6b3a	; 0x6b3a <__mulsf3>
    2904:	0e 94 b5 34 	call	0x696a	; 0x696a <__fixsfsi>
    2908:	44 e6       	ldi	r20, 0x64	; 100
    290a:	50 e0       	ldi	r21, 0x00	; 0
    290c:	8d e0       	ldi	r24, 0x0D	; 13
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1587
      move(Left, T90 * 2, 150);
    2914:	be 01       	movw	r22, r28
    2916:	66 0f       	add	r22, r22
    2918:	77 1f       	adc	r23, r23
    291a:	46 e9       	ldi	r20, 0x96	; 150
    291c:	50 e0       	ldi	r21, 0x00	; 0
    291e:	8b e0       	ldi	r24, 0x0B	; 11
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1592
      get_back();
      break;
    }
  }
}
    2926:	df 91       	pop	r29
    2928:	cf 91       	pop	r28
    292a:	1f 91       	pop	r17
    292c:	0f 91       	pop	r16
    292e:	ff 90       	pop	r15
    2930:	ef 90       	pop	r14
    2932:	df 90       	pop	r13
    2934:	cf 90       	pop	r12
    2936:	bf 90       	pop	r11
    2938:	af 90       	pop	r10
    293a:	7f 90       	pop	r7
    293c:	6f 90       	pop	r6
    293e:	5f 90       	pop	r5
    2940:	4f 90       	pop	r4
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1588
      lcd.print("putting down");
      move_arm(345, 200);  //Dropping the weight
      delay(1500);
      move(Back, T90 * 1.5, 100);
      move(Left, T90 * 2, 150);
      get_back();
    2942:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <get_back()>

00002946 <__vector_16>:
__vector_16():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2946:	1f 92       	push	r1
    2948:	0f 92       	push	r0
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	0f 92       	push	r0
    294e:	11 24       	eor	r1, r1
    2950:	4f 93       	push	r20
    2952:	5f 93       	push	r21
    2954:	6f 93       	push	r22
    2956:	7f 93       	push	r23
    2958:	8f 93       	push	r24
    295a:	9f 93       	push	r25
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    295c:	40 91 e9 08 	lds	r20, 0x08E9	; 0x8008e9 <timer0_millis>
    2960:	50 91 ea 08 	lds	r21, 0x08EA	; 0x8008ea <timer0_millis+0x1>
    2964:	60 91 eb 08 	lds	r22, 0x08EB	; 0x8008eb <timer0_millis+0x2>
    2968:	70 91 ec 08 	lds	r23, 0x08EC	; 0x8008ec <timer0_millis+0x3>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    296c:	80 91 e8 08 	lds	r24, 0x08E8	; 0x8008e8 <timer0_fract>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:174

  f += FRACT_INC FRACT_INC_PLUS;

#ifdef CORRECT_EXACT_MILLIS
  // correct millis () to be exact for certain clocks
  if (timer0_exact == CORRECT_ROLL - 1) {
    2970:	90 91 e7 08 	lds	r25, 0x08E7	; 0x8008e7 <timer0_exact.2342>
    2974:	9a 31       	cpi	r25, 0x1A	; 26
    2976:	19 f5       	brne	.+70     	; 0x29be <__vector_16+0x78>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:175
    timer0_exact = 0;
    2978:	10 92 e7 08 	sts	0x08E7, r1	; 0x8008e7 <timer0_exact.2342>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:194
  if (timer0_exact & 1) {
    ++f;
  }
#endif
#ifdef CORRECT_BRUTE
  if (timer0_exact < CORRECT_BRUTE) {
    297c:	90 91 e7 08 	lds	r25, 0x08E7	; 0x8008e7 <timer0_exact.2342>
    2980:	95 30       	cpi	r25, 0x05	; 5
    2982:	08 f1       	brcs	.+66     	; 0x29c6 <__vector_16+0x80>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:170
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
  unsigned char f = timer0_fract;

  f += FRACT_INC FRACT_INC_PLUS;
    2984:	84 5c       	subi	r24, 0xC4	; 196
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    2986:	8d 37       	cpi	r24, 0x7D	; 125
    2988:	00 f1       	brcs	.+64     	; 0x29ca <__vector_16+0x84>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    298a:	8d 57       	subi	r24, 0x7D	; 125
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    298c:	4e 5f       	subi	r20, 0xFE	; 254
    298e:	5f 4f       	sbci	r21, 0xFF	; 255
    2990:	6f 4f       	sbci	r22, 0xFF	; 255
    2992:	7f 4f       	sbci	r23, 0xFF	; 255
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    2994:	80 93 e8 08 	sts	0x08E8, r24	; 0x8008e8 <timer0_fract>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    2998:	40 93 e9 08 	sts	0x08E9, r20	; 0x8008e9 <timer0_millis>
    299c:	50 93 ea 08 	sts	0x08EA, r21	; 0x8008ea <timer0_millis+0x1>
    29a0:	60 93 eb 08 	sts	0x08EB, r22	; 0x8008eb <timer0_millis+0x2>
    29a4:	70 93 ec 08 	sts	0x08EC, r23	; 0x8008ec <timer0_millis+0x3>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:213
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
#endif
}
    29a8:	9f 91       	pop	r25
    29aa:	8f 91       	pop	r24
    29ac:	7f 91       	pop	r23
    29ae:	6f 91       	pop	r22
    29b0:	5f 91       	pop	r21
    29b2:	4f 91       	pop	r20
    29b4:	0f 90       	pop	r0
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	0f 90       	pop	r0
    29ba:	1f 90       	pop	r1
    29bc:	18 95       	reti
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:181
#ifdef CORRECT_LO
    ++f;
#endif
  }
  else {
    ++timer0_exact;
    29be:	9f 5f       	subi	r25, 0xFF	; 255
    29c0:	90 93 e7 08 	sts	0x08E7, r25	; 0x8008e7 <timer0_exact.2342>
    29c4:	db cf       	rjmp	.-74     	; 0x297c <__vector_16+0x36>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:195
    ++f;
  }
#endif
#ifdef CORRECT_BRUTE
  if (timer0_exact < CORRECT_BRUTE) {
    ++f;
    29c6:	83 5c       	subi	r24, 0xC3	; 195
    29c8:	de cf       	rjmp	.-68     	; 0x2986 <__vector_16+0x40>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    29ca:	4f 5f       	subi	r20, 0xFF	; 255
    29cc:	5f 4f       	sbci	r21, 0xFF	; 255
    29ce:	6f 4f       	sbci	r22, 0xFF	; 255
    29d0:	7f 4f       	sbci	r23, 0xFF	; 255
    29d2:	e0 cf       	rjmp	.-64     	; 0x2994 <__vector_16+0x4e>

000029d4 <__vector_31>:
__vector_31():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:59
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    29d4:	1f 92       	push	r1
    29d6:	0f 92       	push	r0
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	0f 92       	push	r0
    29dc:	11 24       	eor	r1, r1
    29de:	0b b6       	in	r0, 0x3b	; 59
    29e0:	0f 92       	push	r0
    29e2:	2f 93       	push	r18
    29e4:	3f 93       	push	r19
    29e6:	4f 93       	push	r20
    29e8:	5f 93       	push	r21
    29ea:	6f 93       	push	r22
    29ec:	7f 93       	push	r23
    29ee:	8f 93       	push	r24
    29f0:	9f 93       	push	r25
    29f2:	af 93       	push	r26
    29f4:	bf 93       	push	r27
    29f6:	ef 93       	push	r30
    29f8:	ff 93       	push	r31
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:60
  Serial1._tx_udr_empty_irq();
    29fa:	88 e7       	ldi	r24, 0x78	; 120
    29fc:	99 e0       	ldi	r25, 0x09	; 9
    29fe:	0e 94 0d 04 	call	0x81a	; 0x81a <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:61
}
    2a02:	ff 91       	pop	r31
    2a04:	ef 91       	pop	r30
    2a06:	bf 91       	pop	r27
    2a08:	af 91       	pop	r26
    2a0a:	9f 91       	pop	r25
    2a0c:	8f 91       	pop	r24
    2a0e:	7f 91       	pop	r23
    2a10:	6f 91       	pop	r22
    2a12:	5f 91       	pop	r21
    2a14:	4f 91       	pop	r20
    2a16:	3f 91       	pop	r19
    2a18:	2f 91       	pop	r18
    2a1a:	0f 90       	pop	r0
    2a1c:	0b be       	out	0x3b, r0	; 59
    2a1e:	0f 90       	pop	r0
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	0f 90       	pop	r0
    2a24:	1f 90       	pop	r1
    2a26:	18 95       	reti

00002a28 <__vector_30>:
__vector_30():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:48
#elif defined(USART1_RXC_vect)
ISR(USART1_RXC_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    2a28:	1f 92       	push	r1
    2a2a:	0f 92       	push	r0
    2a2c:	0f b6       	in	r0, 0x3f	; 63
    2a2e:	0f 92       	push	r0
    2a30:	11 24       	eor	r1, r1
    2a32:	0b b6       	in	r0, 0x3b	; 59
    2a34:	0f 92       	push	r0
    2a36:	2f 93       	push	r18
    2a38:	8f 93       	push	r24
    2a3a:	9f 93       	push	r25
    2a3c:	ef 93       	push	r30
    2a3e:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2a40:	e0 91 88 09 	lds	r30, 0x0988	; 0x800988 <Serial1+0x10>
    2a44:	f0 91 89 09 	lds	r31, 0x0989	; 0x800989 <Serial1+0x11>
    2a48:	80 81       	ld	r24, Z
    2a4a:	e0 91 8e 09 	lds	r30, 0x098E	; 0x80098e <Serial1+0x16>
    2a4e:	f0 91 8f 09 	lds	r31, 0x098F	; 0x80098f <Serial1+0x17>
    2a52:	82 fd       	sbrc	r24, 2
    2a54:	1d c0       	rjmp	.+58     	; 0x2a90 <__vector_30+0x68>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2a56:	90 81       	ld	r25, Z
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2a58:	80 91 91 09 	lds	r24, 0x0991	; 0x800991 <Serial1+0x19>
    2a5c:	8f 5f       	subi	r24, 0xFF	; 255
    2a5e:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2a60:	20 91 92 09 	lds	r18, 0x0992	; 0x800992 <Serial1+0x1a>
    2a64:	82 17       	cp	r24, r18
    2a66:	41 f0       	breq	.+16     	; 0x2a78 <__vector_30+0x50>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    2a68:	e0 91 91 09 	lds	r30, 0x0991	; 0x800991 <Serial1+0x19>
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	e8 58       	subi	r30, 0x88	; 136
    2a70:	f6 4f       	sbci	r31, 0xF6	; 246
    2a72:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    2a74:	80 93 91 09 	sts	0x0991, r24	; 0x800991 <Serial1+0x19>
__vector_30():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
  Serial1._rx_complete_irq();
}
    2a78:	ff 91       	pop	r31
    2a7a:	ef 91       	pop	r30
    2a7c:	9f 91       	pop	r25
    2a7e:	8f 91       	pop	r24
    2a80:	2f 91       	pop	r18
    2a82:	0f 90       	pop	r0
    2a84:	0b be       	out	0x3b, r0	; 59
    2a86:	0f 90       	pop	r0
    2a88:	0f be       	out	0x3f, r0	; 63
    2a8a:	0f 90       	pop	r0
    2a8c:	1f 90       	pop	r1
    2a8e:	18 95       	reti
_rx_complete_irq():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2a90:	80 81       	ld	r24, Z
    2a92:	f2 cf       	rjmp	.-28     	; 0x2a78 <__vector_30+0x50>

00002a94 <__vector_19>:
__vector_19():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2a94:	1f 92       	push	r1
    2a96:	0f 92       	push	r0
    2a98:	0f b6       	in	r0, 0x3f	; 63
    2a9a:	0f 92       	push	r0
    2a9c:	11 24       	eor	r1, r1
    2a9e:	0b b6       	in	r0, 0x3b	; 59
    2aa0:	0f 92       	push	r0
    2aa2:	2f 93       	push	r18
    2aa4:	3f 93       	push	r19
    2aa6:	4f 93       	push	r20
    2aa8:	5f 93       	push	r21
    2aaa:	6f 93       	push	r22
    2aac:	7f 93       	push	r23
    2aae:	8f 93       	push	r24
    2ab0:	9f 93       	push	r25
    2ab2:	af 93       	push	r26
    2ab4:	bf 93       	push	r27
    2ab6:	ef 93       	push	r30
    2ab8:	ff 93       	push	r31
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    2aba:	85 e1       	ldi	r24, 0x15	; 21
    2abc:	9a e0       	ldi	r25, 0x0A	; 10
    2abe:	0e 94 0d 04 	call	0x81a	; 0x81a <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    2ac2:	ff 91       	pop	r31
    2ac4:	ef 91       	pop	r30
    2ac6:	bf 91       	pop	r27
    2ac8:	af 91       	pop	r26
    2aca:	9f 91       	pop	r25
    2acc:	8f 91       	pop	r24
    2ace:	7f 91       	pop	r23
    2ad0:	6f 91       	pop	r22
    2ad2:	5f 91       	pop	r21
    2ad4:	4f 91       	pop	r20
    2ad6:	3f 91       	pop	r19
    2ad8:	2f 91       	pop	r18
    2ada:	0f 90       	pop	r0
    2adc:	0b be       	out	0x3b, r0	; 59
    2ade:	0f 90       	pop	r0
    2ae0:	0f be       	out	0x3f, r0	; 63
    2ae2:	0f 90       	pop	r0
    2ae4:	1f 90       	pop	r1
    2ae6:	18 95       	reti

00002ae8 <__vector_18>:
__vector_18():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2ae8:	1f 92       	push	r1
    2aea:	0f 92       	push	r0
    2aec:	0f b6       	in	r0, 0x3f	; 63
    2aee:	0f 92       	push	r0
    2af0:	11 24       	eor	r1, r1
    2af2:	0b b6       	in	r0, 0x3b	; 59
    2af4:	0f 92       	push	r0
    2af6:	2f 93       	push	r18
    2af8:	8f 93       	push	r24
    2afa:	9f 93       	push	r25
    2afc:	ef 93       	push	r30
    2afe:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2b00:	e0 91 25 0a 	lds	r30, 0x0A25	; 0x800a25 <Serial+0x10>
    2b04:	f0 91 26 0a 	lds	r31, 0x0A26	; 0x800a26 <Serial+0x11>
    2b08:	80 81       	ld	r24, Z
    2b0a:	e0 91 2b 0a 	lds	r30, 0x0A2B	; 0x800a2b <Serial+0x16>
    2b0e:	f0 91 2c 0a 	lds	r31, 0x0A2C	; 0x800a2c <Serial+0x17>
    2b12:	82 fd       	sbrc	r24, 2
    2b14:	1d c0       	rjmp	.+58     	; 0x2b50 <__vector_18+0x68>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2b16:	90 81       	ld	r25, Z
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2b18:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <Serial+0x19>
    2b1c:	8f 5f       	subi	r24, 0xFF	; 255
    2b1e:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2b20:	20 91 2f 0a 	lds	r18, 0x0A2F	; 0x800a2f <Serial+0x1a>
    2b24:	82 17       	cp	r24, r18
    2b26:	41 f0       	breq	.+16     	; 0x2b38 <__vector_18+0x50>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    2b28:	e0 91 2e 0a 	lds	r30, 0x0A2E	; 0x800a2e <Serial+0x19>
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	eb 5e       	subi	r30, 0xEB	; 235
    2b30:	f5 4f       	sbci	r31, 0xF5	; 245
    2b32:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    2b34:	80 93 2e 0a 	sts	0x0A2E, r24	; 0x800a2e <Serial+0x19>
__vector_18():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    2b38:	ff 91       	pop	r31
    2b3a:	ef 91       	pop	r30
    2b3c:	9f 91       	pop	r25
    2b3e:	8f 91       	pop	r24
    2b40:	2f 91       	pop	r18
    2b42:	0f 90       	pop	r0
    2b44:	0b be       	out	0x3b, r0	; 59
    2b46:	0f 90       	pop	r0
    2b48:	0f be       	out	0x3f, r0	; 63
    2b4a:	0f 90       	pop	r0
    2b4c:	1f 90       	pop	r1
    2b4e:	18 95       	reti
_rx_complete_irq():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2b50:	80 81       	ld	r24, Z
    2b52:	f2 cf       	rjmp	.-28     	; 0x2b38 <__vector_18+0x50>

00002b54 <__vector_33>:
__vector_33():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:528
  }
  return(flag);
}

ISR(TWI_vect)
{
    2b54:	1f 92       	push	r1
    2b56:	0f 92       	push	r0
    2b58:	0f b6       	in	r0, 0x3f	; 63
    2b5a:	0f 92       	push	r0
    2b5c:	11 24       	eor	r1, r1
    2b5e:	0b b6       	in	r0, 0x3b	; 59
    2b60:	0f 92       	push	r0
    2b62:	2f 93       	push	r18
    2b64:	3f 93       	push	r19
    2b66:	4f 93       	push	r20
    2b68:	5f 93       	push	r21
    2b6a:	6f 93       	push	r22
    2b6c:	7f 93       	push	r23
    2b6e:	8f 93       	push	r24
    2b70:	9f 93       	push	r25
    2b72:	af 93       	push	r26
    2b74:	bf 93       	push	r27
    2b76:	ef 93       	push	r30
    2b78:	ff 93       	push	r31
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:529
  switch(TW_STATUS){
    2b7a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    2b7e:	88 7f       	andi	r24, 0xF8	; 248
    2b80:	80 36       	cpi	r24, 0x60	; 96
    2b82:	09 f4       	brne	.+2      	; 0x2b86 <__vector_33+0x32>
    2b84:	4d c0       	rjmp	.+154    	; 0x2c20 <__vector_33+0xcc>
    2b86:	08 f0       	brcs	.+2      	; 0x2b8a <__vector_33+0x36>
    2b88:	40 c0       	rjmp	.+128    	; 0x2c0a <__vector_33+0xb6>
    2b8a:	88 32       	cpi	r24, 0x28	; 40
    2b8c:	09 f4       	brne	.+2      	; 0x2b90 <__vector_33+0x3c>
    2b8e:	a9 c0       	rjmp	.+338    	; 0x2ce2 <__vector_33+0x18e>
    2b90:	28 f5       	brcc	.+74     	; 0x2bdc <__vector_33+0x88>
    2b92:	80 31       	cpi	r24, 0x10	; 16
    2b94:	09 f4       	brne	.+2      	; 0x2b98 <__vector_33+0x44>
    2b96:	9d c0       	rjmp	.+314    	; 0x2cd2 <__vector_33+0x17e>
    2b98:	c8 f4       	brcc	.+50     	; 0x2bcc <__vector_33+0x78>
    2b9a:	88 23       	and	r24, r24
    2b9c:	09 f4       	brne	.+2      	; 0x2ba0 <__vector_33+0x4c>
    2b9e:	07 c1       	rjmp	.+526    	; 0x2dae <__vector_33+0x25a>
    2ba0:	88 30       	cpi	r24, 0x08	; 8
    2ba2:	09 f4       	brne	.+2      	; 0x2ba6 <__vector_33+0x52>
    2ba4:	96 c0       	rjmp	.+300    	; 0x2cd2 <__vector_33+0x17e>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:690
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    2ba6:	ff 91       	pop	r31
    2ba8:	ef 91       	pop	r30
    2baa:	bf 91       	pop	r27
    2bac:	af 91       	pop	r26
    2bae:	9f 91       	pop	r25
    2bb0:	8f 91       	pop	r24
    2bb2:	7f 91       	pop	r23
    2bb4:	6f 91       	pop	r22
    2bb6:	5f 91       	pop	r21
    2bb8:	4f 91       	pop	r20
    2bba:	3f 91       	pop	r19
    2bbc:	2f 91       	pop	r18
    2bbe:	0f 90       	pop	r0
    2bc0:	0b be       	out	0x3b, r0	; 59
    2bc2:	0f 90       	pop	r0
    2bc4:	0f be       	out	0x3f, r0	; 63
    2bc6:	0f 90       	pop	r0
    2bc8:	1f 90       	pop	r1
    2bca:	18 95       	reti
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2bcc:	88 31       	cpi	r24, 0x18	; 24
    2bce:	09 f4       	brne	.+2      	; 0x2bd2 <__vector_33+0x7e>
    2bd0:	88 c0       	rjmp	.+272    	; 0x2ce2 <__vector_33+0x18e>
    2bd2:	80 32       	cpi	r24, 0x20	; 32
    2bd4:	41 f7       	brne	.-48     	; 0x2ba6 <__vector_33+0x52>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:564
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2bd6:	80 93 f3 08 	sts	0x08F3, r24	; 0x8008f3 <twi_error>
    2bda:	14 c0       	rjmp	.+40     	; 0x2c04 <__vector_33+0xb0>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2bdc:	80 34       	cpi	r24, 0x40	; 64
    2bde:	09 f4       	brne	.+2      	; 0x2be2 <__vector_33+0x8e>
    2be0:	a5 c0       	rjmp	.+330    	; 0x2d2c <__vector_33+0x1d8>
    2be2:	40 f4       	brcc	.+16     	; 0x2bf4 <__vector_33+0xa0>
    2be4:	80 33       	cpi	r24, 0x30	; 48
    2be6:	b9 f3       	breq	.-18     	; 0x2bd6 <__vector_33+0x82>
    2be8:	88 33       	cpi	r24, 0x38	; 56
    2bea:	e9 f6       	brne	.-70     	; 0x2ba6 <__vector_33+0x52>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:568
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2bec:	80 93 f3 08 	sts	0x08F3, r24	; 0x8008f3 <twi_error>
twi_reply():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:415
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2bf0:	85 ec       	ldi	r24, 0xC5	; 197
    2bf2:	bc c0       	rjmp	.+376    	; 0x2d6c <__vector_33+0x218>
__vector_33():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2bf4:	80 35       	cpi	r24, 0x50	; 80
    2bf6:	09 f4       	brne	.+2      	; 0x2bfa <__vector_33+0xa6>
    2bf8:	89 c0       	rjmp	.+274    	; 0x2d0c <__vector_33+0x1b8>
    2bfa:	88 35       	cpi	r24, 0x58	; 88
    2bfc:	09 f4       	brne	.+2      	; 0x2c00 <__vector_33+0xac>
    2bfe:	9e c0       	rjmp	.+316    	; 0x2d3c <__vector_33+0x1e8>
    2c00:	88 34       	cpi	r24, 0x48	; 72
    2c02:	89 f6       	brne	.-94     	; 0x2ba6 <__vector_33+0x52>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:687
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    2c04:	0e 94 af 04 	call	0x95e	; 0x95e <twi_stop>
    2c08:	ce cf       	rjmp	.-100    	; 0x2ba6 <__vector_33+0x52>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2c0a:	88 39       	cpi	r24, 0x98	; 152
    2c0c:	09 f4       	brne	.+2      	; 0x2c10 <__vector_33+0xbc>
    2c0e:	94 c0       	rjmp	.+296    	; 0x2d38 <__vector_33+0x1e4>
    2c10:	38 f5       	brcc	.+78     	; 0x2c60 <__vector_33+0x10c>
    2c12:	88 37       	cpi	r24, 0x78	; 120
    2c14:	29 f0       	breq	.+10     	; 0x2c20 <__vector_33+0xcc>
    2c16:	50 f4       	brcc	.+20     	; 0x2c2c <__vector_33+0xd8>
    2c18:	88 36       	cpi	r24, 0x68	; 104
    2c1a:	11 f0       	breq	.+4      	; 0x2c20 <__vector_33+0xcc>
    2c1c:	80 37       	cpi	r24, 0x70	; 112
    2c1e:	19 f6       	brne	.-122    	; 0x2ba6 <__vector_33+0x52>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:610
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2c20:	83 e0       	ldi	r24, 0x03	; 3
    2c22:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <twi_state>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:612
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2c26:	10 92 c2 08 	sts	0x08C2, r1	; 0x8008c2 <twi_rxBufferIndex>
    2c2a:	57 c0       	rjmp	.+174    	; 0x2cda <__vector_33+0x186>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2c2c:	88 38       	cpi	r24, 0x88	; 136
    2c2e:	09 f4       	brne	.+2      	; 0x2c32 <__vector_33+0xde>
    2c30:	83 c0       	rjmp	.+262    	; 0x2d38 <__vector_33+0x1e4>
    2c32:	80 39       	cpi	r24, 0x90	; 144
    2c34:	19 f0       	breq	.+6      	; 0x2c3c <__vector_33+0xe8>
    2c36:	80 38       	cpi	r24, 0x80	; 128
    2c38:	09 f0       	breq	.+2      	; 0x2c3c <__vector_33+0xe8>
    2c3a:	b5 cf       	rjmp	.-150    	; 0x2ba6 <__vector_33+0x52>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:618
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    2c3c:	80 91 c2 08 	lds	r24, 0x08C2	; 0x8008c2 <twi_rxBufferIndex>
    2c40:	80 32       	cpi	r24, 0x20	; 32
    2c42:	08 f0       	brcs	.+2      	; 0x2c46 <__vector_33+0xf2>
    2c44:	79 c0       	rjmp	.+242    	; 0x2d38 <__vector_33+0x1e4>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:620
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2c46:	e0 91 c2 08 	lds	r30, 0x08C2	; 0x8008c2 <twi_rxBufferIndex>
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	8e 0f       	add	r24, r30
    2c4e:	80 93 c2 08 	sts	0x08C2, r24	; 0x8008c2 <twi_rxBufferIndex>
    2c52:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	ee 55       	subi	r30, 0x5E	; 94
    2c5a:	f7 4f       	sbci	r31, 0xF7	; 247
    2c5c:	80 83       	st	Z, r24
    2c5e:	3d c0       	rjmp	.+122    	; 0x2cda <__vector_33+0x186>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2c60:	80 3b       	cpi	r24, 0xB0	; 176
    2c62:	39 f0       	breq	.+14     	; 0x2c72 <__vector_33+0x11e>
    2c64:	e0 f4       	brcc	.+56     	; 0x2c9e <__vector_33+0x14a>
    2c66:	80 3a       	cpi	r24, 0xA0	; 160
    2c68:	09 f4       	brne	.+2      	; 0x2c6c <__vector_33+0x118>
    2c6a:	85 c0       	rjmp	.+266    	; 0x2d76 <__vector_33+0x222>
    2c6c:	88 3a       	cpi	r24, 0xA8	; 168
    2c6e:	09 f0       	breq	.+2      	; 0x2c72 <__vector_33+0x11e>
    2c70:	9a cf       	rjmp	.-204    	; 0x2ba6 <__vector_33+0x52>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:649

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2c72:	84 e0       	ldi	r24, 0x04	; 4
    2c74:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <twi_state>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:651
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2c78:	10 92 a1 08 	sts	0x08A1, r1	; 0x8008a1 <twi_txBufferIndex>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:653
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2c7c:	10 92 a0 08 	sts	0x08A0, r1	; 0x8008a0 <twi_txBufferLength>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:656
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2c80:	e0 91 c5 08 	lds	r30, 0x08C5	; 0x8008c5 <twi_onSlaveTransmit>
    2c84:	f0 91 c6 08 	lds	r31, 0x08C6	; 0x8008c6 <twi_onSlaveTransmit+0x1>
    2c88:	09 95       	icall
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:658
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2c8a:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <twi_txBufferLength>
    2c8e:	81 11       	cpse	r24, r1
    2c90:	0f c0       	rjmp	.+30     	; 0x2cb0 <__vector_33+0x15c>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:659
        twi_txBufferLength = 1;
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <twi_txBufferLength>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:660
        twi_txBuffer[0] = 0x00;
    2c98:	10 92 80 08 	sts	0x0880, r1	; 0x800880 <twi_txBuffer>
    2c9c:	09 c0       	rjmp	.+18     	; 0x2cb0 <__vector_33+0x15c>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2c9e:	80 3c       	cpi	r24, 0xC0	; 192
    2ca0:	09 f4       	brne	.+2      	; 0x2ca4 <__vector_33+0x150>
    2ca2:	a6 cf       	rjmp	.-180    	; 0x2bf0 <__vector_33+0x9c>
    2ca4:	88 3c       	cpi	r24, 0xC8	; 200
    2ca6:	09 f4       	brne	.+2      	; 0x2caa <__vector_33+0x156>
    2ca8:	a3 cf       	rjmp	.-186    	; 0x2bf0 <__vector_33+0x9c>
    2caa:	88 3b       	cpi	r24, 0xB8	; 184
    2cac:	09 f0       	breq	.+2      	; 0x2cb0 <__vector_33+0x15c>
    2cae:	7b cf       	rjmp	.-266    	; 0x2ba6 <__vector_33+0x52>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:666
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2cb0:	e0 91 a1 08 	lds	r30, 0x08A1	; 0x8008a1 <twi_txBufferIndex>
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	8e 0f       	add	r24, r30
    2cb8:	80 93 a1 08 	sts	0x08A1, r24	; 0x8008a1 <twi_txBufferIndex>
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	e0 58       	subi	r30, 0x80	; 128
    2cc0:	f7 4f       	sbci	r31, 0xF7	; 247
    2cc2:	80 81       	ld	r24, Z
    2cc4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:668
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2cc8:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <twi_txBufferIndex>
    2ccc:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <twi_txBufferLength>
    2cd0:	31 c0       	rjmp	.+98     	; 0x2d34 <__vector_33+0x1e0>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:534
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2cd2:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <twi_slarw>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:544
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2cd6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
twi_reply():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:415
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2cda:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:417
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2cdc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    2ce0:	62 cf       	rjmp	.-316    	; 0x2ba6 <__vector_33+0x52>
__vector_33():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:542

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2ce2:	90 91 f0 08 	lds	r25, 0x08F0	; 0x8008f0 <twi_masterBufferIndex>
    2ce6:	80 91 ef 08 	lds	r24, 0x08EF	; 0x8008ef <twi_masterBufferLength>
    2cea:	98 17       	cp	r25, r24
    2cec:	b8 f5       	brcc	.+110    	; 0x2d5c <__vector_33+0x208>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:544
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2cee:	80 91 f1 08 	lds	r24, 0x08F1	; 0x8008f1 <twi_masterBuffer>
    2cf2:	90 91 f2 08 	lds	r25, 0x08F2	; 0x8008f2 <twi_masterBuffer+0x1>
    2cf6:	e0 91 f0 08 	lds	r30, 0x08F0	; 0x8008f0 <twi_masterBufferIndex>
    2cfa:	21 e0       	ldi	r18, 0x01	; 1
    2cfc:	2e 0f       	add	r18, r30
    2cfe:	20 93 f0 08 	sts	0x08F0, r18	; 0x8008f0 <twi_masterBufferIndex>
    2d02:	e8 0f       	add	r30, r24
    2d04:	f9 2f       	mov	r31, r25
    2d06:	f1 1d       	adc	r31, r1
    2d08:	80 81       	ld	r24, Z
    2d0a:	e5 cf       	rjmp	.-54     	; 0x2cd6 <__vector_33+0x182>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:575
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2d0c:	20 91 f1 08 	lds	r18, 0x08F1	; 0x8008f1 <twi_masterBuffer>
    2d10:	30 91 f2 08 	lds	r19, 0x08F2	; 0x8008f2 <twi_masterBuffer+0x1>
    2d14:	e0 91 f0 08 	lds	r30, 0x08F0	; 0x8008f0 <twi_masterBufferIndex>
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	8e 0f       	add	r24, r30
    2d1c:	80 93 f0 08 	sts	0x08F0, r24	; 0x8008f0 <twi_masterBufferIndex>
    2d20:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    2d24:	e2 0f       	add	r30, r18
    2d26:	f3 2f       	mov	r31, r19
    2d28:	f1 1d       	adc	r31, r1
    2d2a:	80 83       	st	Z, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:579
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2d2c:	90 91 f0 08 	lds	r25, 0x08F0	; 0x8008f0 <twi_masterBufferIndex>
    2d30:	80 91 ef 08 	lds	r24, 0x08EF	; 0x8008ef <twi_masterBufferLength>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:668
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2d34:	98 17       	cp	r25, r24
    2d36:	88 f2       	brcs	.-94     	; 0x2cda <__vector_33+0x186>
twi_reply():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:417
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2d38:	85 e8       	ldi	r24, 0x85	; 133
    2d3a:	d0 cf       	rjmp	.-96     	; 0x2cdc <__vector_33+0x188>
__vector_33():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:587
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2d3c:	20 91 f1 08 	lds	r18, 0x08F1	; 0x8008f1 <twi_masterBuffer>
    2d40:	30 91 f2 08 	lds	r19, 0x08F2	; 0x8008f2 <twi_masterBuffer+0x1>
    2d44:	e0 91 f0 08 	lds	r30, 0x08F0	; 0x8008f0 <twi_masterBufferIndex>
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	8e 0f       	add	r24, r30
    2d4c:	80 93 f0 08 	sts	0x08F0, r24	; 0x8008f0 <twi_masterBufferIndex>
    2d50:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    2d54:	e2 0f       	add	r30, r18
    2d56:	f3 2f       	mov	r31, r19
    2d58:	f1 1d       	adc	r31, r1
    2d5a:	80 83       	st	Z, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:588
  if (twi_sendStop)
    2d5c:	80 91 f4 08 	lds	r24, 0x08F4	; 0x8008f4 <twi_sendStop>
    2d60:	81 11       	cpse	r24, r1
    2d62:	50 cf       	rjmp	.-352    	; 0x2c04 <__vector_33+0xb0>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:591
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	80 93 ed 08 	sts	0x08ED, r24	; 0x8008ed <twi_inRepStart>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:595
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2d6a:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:415
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2d6c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
__vector_33():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:679
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2d70:	10 92 f5 08 	sts	0x08F5, r1	; 0x8008f5 <twi_state>
    2d74:	18 cf       	rjmp	.-464    	; 0x2ba6 <__vector_33+0x52>
twi_releaseBus():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:468
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2d76:	85 ec       	ldi	r24, 0xC5	; 197
    2d78:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:471

  // update twi state
  twi_state = TWI_READY;
    2d7c:	10 92 f5 08 	sts	0x08F5, r1	; 0x8008f5 <twi_state>
__vector_33():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:631
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    2d80:	80 91 c2 08 	lds	r24, 0x08C2	; 0x8008c2 <twi_rxBufferIndex>
    2d84:	80 32       	cpi	r24, 0x20	; 32
    2d86:	30 f4       	brcc	.+12     	; 0x2d94 <__vector_33+0x240>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:632
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2d88:	e0 91 c2 08 	lds	r30, 0x08C2	; 0x8008c2 <twi_rxBufferIndex>
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	ee 55       	subi	r30, 0x5E	; 94
    2d90:	f7 4f       	sbci	r31, 0xF7	; 247
    2d92:	10 82       	st	Z, r1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:635
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2d94:	60 91 c2 08 	lds	r22, 0x08C2	; 0x8008c2 <twi_rxBufferIndex>
    2d98:	70 e0       	ldi	r23, 0x00	; 0
    2d9a:	e0 91 c3 08 	lds	r30, 0x08C3	; 0x8008c3 <twi_onSlaveReceive>
    2d9e:	f0 91 c4 08 	lds	r31, 0x08C4	; 0x8008c4 <twi_onSlaveReceive+0x1>
    2da2:	82 ea       	ldi	r24, 0xA2	; 162
    2da4:	98 e0       	ldi	r25, 0x08	; 8
    2da6:	09 95       	icall
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:637
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2da8:	10 92 c2 08 	sts	0x08C2, r1	; 0x8008c2 <twi_rxBufferIndex>
    2dac:	fc ce       	rjmp	.-520    	; 0x2ba6 <__vector_33+0x52>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:686

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2dae:	10 92 f3 08 	sts	0x08F3, r1	; 0x8008f3 <twi_error>
    2db2:	28 cf       	rjmp	.-432    	; 0x2c04 <__vector_33+0xb0>

00002db4 <countPulseASM>:
countPulseASM():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:62

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
    2db4:	cf 92       	push	r12
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:63
    push r13   ;   ;  131 pushqi1/1 [length = 1]
    2db6:	df 92       	push	r13
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:64
    push r14   ;   ;  132 pushqi1/1 [length = 1]
    2db8:	ef 92       	push	r14
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:65
    push r15   ;   ;  133 pushqi1/1 [length = 1]
    2dba:	ff 92       	push	r15
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:66
    push r16   ;   ;  134 pushqi1/1 [length = 1]
    2dbc:	0f 93       	push	r16
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:67
    push r17   ;   ;  135 pushqi1/1 [length = 1]
    2dbe:	1f 93       	push	r17
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:72
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
    2dc0:	e8 2f       	mov	r30, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:73
    mov r31,r25  ;  port, port
    2dc2:	f9 2f       	mov	r31, r25
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:79
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
    2dc4:	05 c0       	rjmp	.+10     	; 0x2dd0 <countPulseASM+0x1c>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:83
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
    2dc6:	01 50       	subi	r16, 0x01	; 1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:84
    sbc r17, r1   ;  maxloops
    2dc8:	11 09       	sbc	r17, r1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:85
    sbc r18, r1   ;  maxloops
    2dca:	21 09       	sbc	r18, r1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:86
    sbc r19, r1   ;  maxloops
    2dcc:	31 09       	sbc	r19, r1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:87
    breq .L13  ; ,   ;  19  branch  [length = 1]
    2dce:	61 f1       	breq	.+88     	; 0x2e28 <countPulseASM+0x74>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:91
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
    2dd0:	90 81       	ld	r25, Z
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:92
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
    2dd2:	96 23       	and	r25, r22
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:93
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
    2dd4:	94 17       	cp	r25, r20
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:94
    breq .L4   ; ,   ;  26  branch  [length = 1]
    2dd6:	b9 f3       	breq	.-18     	; 0x2dc6 <countPulseASM+0x12>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:95
    rjmp .L6   ;   ;  184 jump  [length = 1]
    2dd8:	05 c0       	rjmp	.+10     	; 0x2de4 <countPulseASM+0x30>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:104
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
    2dda:	01 50       	subi	r16, 0x01	; 1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:105
    sbc r17, r1   ;  maxloops
    2ddc:	11 09       	sbc	r17, r1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:106
    sbc r18, r1   ;  maxloops
    2dde:	21 09       	sbc	r18, r1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:107
    sbc r19, r1   ;  maxloops
    2de0:	31 09       	sbc	r19, r1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:108
    breq .L13  ; ,   ;  33  branch  [length = 1]
    2de2:	11 f1       	breq	.+68     	; 0x2e28 <countPulseASM+0x74>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:112
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
    2de4:	90 81       	ld	r25, Z
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:113
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
    2de6:	96 23       	and	r25, r22
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:114
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
    2de8:	94 13       	cpse	r25, r20
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:115
    rjmp .L7   ;
    2dea:	f7 cf       	rjmp	.-18     	; 0x2dda <countPulseASM+0x26>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:116
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
    2dec:	c1 2c       	mov	r12, r1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:117
    mov r13, r1   ;  width
    2dee:	d1 2c       	mov	r13, r1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:118
    mov r14, r1   ;  width
    2df0:	e1 2c       	mov	r14, r1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:119
    mov r15, r1   ;  width
    2df2:	f1 2c       	mov	r15, r1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:120
    rjmp .L9   ;   ;  186 jump  [length = 1]
    2df4:	0a c0       	rjmp	.+20     	; 0x2e0a <countPulseASM+0x56>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:129
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
    2df6:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:130
    sub r12,r24  ;  width,
    2df8:	c8 1a       	sub	r12, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:131
    sbc r13,r24  ;  width,
    2dfa:	d8 0a       	sbc	r13, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:132
    sbc r14,r24  ;  width,
    2dfc:	e8 0a       	sbc	r14, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:133
    sbc r15,r24  ;  width,
    2dfe:	f8 0a       	sbc	r15, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:134
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
    2e00:	0c 15       	cp	r16, r12
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:135
    cpc r17,r13  ;  maxloops, width
    2e02:	1d 05       	cpc	r17, r13
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:136
    cpc r18,r14  ;  maxloops, width
    2e04:	2e 05       	cpc	r18, r14
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:137
    cpc r19,r15  ;  maxloops, width
    2e06:	3f 05       	cpc	r19, r15
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:138
    breq .L13  ; ,   ;  52  branch  [length = 1]
    2e08:	79 f0       	breq	.+30     	; 0x2e28 <countPulseASM+0x74>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:142
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
    2e0a:	80 81       	ld	r24, Z
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:143
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
    2e0c:	86 23       	and	r24, r22
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:144
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
    2e0e:	84 17       	cp	r24, r20
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:145
    breq .L10  ; ,   ;  64  branch  [length = 1]
    2e10:	91 f3       	breq	.-28     	; 0x2df6 <countPulseASM+0x42>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:151
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
    2e12:	6c 2d       	mov	r22, r12
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:152
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
    2e14:	7d 2d       	mov	r23, r13
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:153
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
    2e16:	8e 2d       	mov	r24, r14
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:154
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
    2e18:	9f 2d       	mov	r25, r15
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:157
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
    2e1a:	1f 91       	pop	r17
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:158
    pop r16  ;   ;  172 popqi [length = 1]
    2e1c:	0f 91       	pop	r16
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:159
    pop r15  ;   ;  173 popqi [length = 1]
    2e1e:	ff 90       	pop	r15
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:160
    pop r14  ;   ;  174 popqi [length = 1]
    2e20:	ef 90       	pop	r14
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:161
    pop r13  ;   ;  175 popqi [length = 1]
    2e22:	df 90       	pop	r13
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:162
    pop r12  ;   ;  176 popqi [length = 1]
    2e24:	cf 90       	pop	r12
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:163
    ret  ;  177 return_from_epilogue  [length = 1]
    2e26:	08 95       	ret
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:166
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
    2e28:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:167
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
    2e2a:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:168
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:169
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:172
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
    2e30:	1f 91       	pop	r17
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:173
    pop r16  ;   ;  139 popqi [length = 1]
    2e32:	0f 91       	pop	r16
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:174
    pop r15  ;   ;  140 popqi [length = 1]
    2e34:	ff 90       	pop	r15
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:175
    pop r14  ;   ;  141 popqi [length = 1]
    2e36:	ef 90       	pop	r14
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:176
    pop r13  ;   ;  142 popqi [length = 1]
    2e38:	df 90       	pop	r13
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:177
    pop r12  ;   ;  143 popqi [length = 1]
    2e3a:	cf 90       	pop	r12
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.S:178
    ret  ;  144 return_from_epilogue  [length = 1]
    2e3c:	08 95       	ret

00002e3e <TwoWire::write(int) [clone .constprop.29]>:
write():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.h:88
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    2e3e:	68 2f       	mov	r22, r24
    2e40:	82 eb       	ldi	r24, 0xB2	; 178
    2e42:	9a e0       	ldi	r25, 0x0A	; 10
    2e44:	0c 94 24 05 	jmp	0xa48	; 0xa48 <TwoWire::write(unsigned char)>

00002e48 <vl(char)>:
vl():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1720

  // Your additional processing logic here

  return vl_dis;
}
unsigned int vl(char xv) {
    2e48:	cf 93       	push	r28
    2e4a:	df 93       	push	r29
    2e4c:	c8 2f       	mov	r28, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1729

  // Select the appropriate sensor
  if (xv == 1) {
    // Set MUX pins to select sensor 1
    // B11 Right
    digitalWrite(MUX_A, LOW);
    2e4e:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1726
  unsigned int vl_dis = 1;

  // Your pin manipulation logic here if needed

  // Select the appropriate sensor
  if (xv == 1) {
    2e50:	81 30       	cpi	r24, 0x01	; 1
    2e52:	09 f4       	brne	.+2      	; 0x2e56 <vl(char)+0xe>
    2e54:	3f c0       	rjmp	.+126    	; 0x2ed4 <vl(char)+0x8c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1741
    digitalWrite(MUX_B, LOW);
    digitalWrite(MUX_C, HIGH);
  } else if (xv == 3) {
    // Set MUX pins to select sensor 2
    // B13 Left
    digitalWrite(MUX_A, HIGH);
    2e56:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1732
    // Set MUX pins to select sensor 1
    // B11 Right
    digitalWrite(MUX_A, LOW);
    digitalWrite(MUX_B, HIGH);
    digitalWrite(MUX_C, LOW);
  } else if (xv == 2) {
    2e58:	82 30       	cpi	r24, 0x02	; 2
    2e5a:	e1 f5       	brne	.+120    	; 0x2ed4 <vl(char)+0x8c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1735
    // Set MUX pins to select sensor 2
    // B13 Left
    digitalWrite(MUX_A, LOW);
    2e5c:	60 e0       	ldi	r22, 0x00	; 0
    2e5e:	8c e2       	ldi	r24, 0x2C	; 44
    2e60:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1736
    digitalWrite(MUX_B, LOW);
    2e64:	60 e0       	ldi	r22, 0x00	; 0
    2e66:	8b e2       	ldi	r24, 0x2B	; 43
    2e68:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1737
    digitalWrite(MUX_C, HIGH);
    2e6c:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1743
  } else if (xv == 3) {
    // Set MUX pins to select sensor 2
    // B13 Left
    digitalWrite(MUX_A, HIGH);
    digitalWrite(MUX_B, HIGH);
    digitalWrite(MUX_C, LOW);
    2e6e:	8a e2       	ldi	r24, 0x2A	; 42
    2e70:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
beginTransmission():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:208
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    2e74:	89 e2       	ldi	r24, 0x29	; 41
    2e76:	0e 94 a1 01 	call	0x342	; 0x342 <TwoWire::beginTransmission(unsigned char) [clone .constprop.17]>
vl():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1747
  }
  // Send command to start distance measurement
  Wire.beginTransmission(VL53L0X_ADDRESS);
  Wire.write(VL53L0X_REG_SYSRANGE_START);
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	80 e0       	ldi	r24, 0x00	; 0
    2e7e:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <TwoWire::write(int) [clone .constprop.29]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1748
  Wire.write(0x01);
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <TwoWire::write(int) [clone .constprop.29]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1749
  Wire.endTransmission();
    2e8a:	0e 94 ab 01 	call	0x356	; 0x356 <TwoWire::endTransmission() [clone .constprop.13]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1752

  // Delay for measurement completion
  delay(10);  // Adjust delay if needed
    2e8e:	6a e0       	ldi	r22, 0x0A	; 10
    2e90:	70 e0       	ldi	r23, 0x00	; 0
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
beginTransmission():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:208
    2e9a:	89 e2       	ldi	r24, 0x29	; 41
    2e9c:	0e 94 a1 01 	call	0x342	; 0x342 <TwoWire::beginTransmission(unsigned char) [clone .constprop.17]>
vl():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1756

  // Request distance measurement
  Wire.beginTransmission(VL53L0X_ADDRESS);
  Wire.write(VL53L0X_REG_RESULT_RANGE_VAL);
    2ea0:	8e e1       	ldi	r24, 0x1E	; 30
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <TwoWire::write(int) [clone .constprop.29]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1757
  Wire.endTransmission(false);
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	0e 94 49 01 	call	0x292	; 0x292 <TwoWire::endTransmission(unsigned char) [clone .constprop.18]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1760

  // Read distance measurement (2 bytes)
  Wire.requestFrom(VL53L0X_ADDRESS, 2);
    2eae:	62 e0       	ldi	r22, 0x02	; 2
    2eb0:	70 e0       	ldi	r23, 0x00	; 0
    2eb2:	89 e2       	ldi	r24, 0x29	; 41
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	0e 94 74 09 	call	0x12e8	; 0x12e8 <TwoWire::requestFrom(int, int) [clone .constprop.14]>
available():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:292
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    2eba:	80 91 3a 09 	lds	r24, 0x093A	; 0x80093a <TwoWire::rxBufferLength>
    2ebe:	90 91 3b 09 	lds	r25, 0x093B	; 0x80093b <TwoWire::rxBufferIndex>
    2ec2:	89 1b       	sub	r24, r25
    2ec4:	99 0b       	sbc	r25, r25
vl():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1761
  if (Wire.available() >= 2) {
    2ec6:	02 97       	sbiw	r24, 0x02	; 2
    2ec8:	74 f4       	brge	.+28     	; 0x2ee6 <vl(char)+0x9e>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1721
  // Your additional processing logic here

  return vl_dis;
}
unsigned int vl(char xv) {
  unsigned int vl_dis = 1;
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1772
  // Your additional processing logic here
  if (vl_dis == 20) {
    delay(10);
    return vl_double_check(xv);
  } else return vl_dis;
}
    2ece:	df 91       	pop	r29
    2ed0:	cf 91       	pop	r28
    2ed2:	08 95       	ret
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1741
    digitalWrite(MUX_B, LOW);
    digitalWrite(MUX_C, HIGH);
  } else if (xv == 3) {
    // Set MUX pins to select sensor 2
    // B13 Left
    digitalWrite(MUX_A, HIGH);
    2ed4:	8c e2       	ldi	r24, 0x2C	; 44
    2ed6:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1742
    digitalWrite(MUX_B, HIGH);
    2eda:	61 e0       	ldi	r22, 0x01	; 1
    2edc:	8b e2       	ldi	r24, 0x2B	; 43
    2ede:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1743
    digitalWrite(MUX_C, LOW);
    2ee2:	60 e0       	ldi	r22, 0x00	; 0
    2ee4:	c4 cf       	rjmp	.-120    	; 0x2e6e <vl(char)+0x26>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1762
  Wire.endTransmission(false);

  // Read distance measurement (2 bytes)
  Wire.requestFrom(VL53L0X_ADDRESS, 2);
  if (Wire.available() >= 2) {
    byte distance_msb = Wire.read();
    2ee6:	0e 94 36 01 	call	0x26c	; 0x26c <TwoWire::read() [clone .constprop.22]>
    2eea:	d8 2f       	mov	r29, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1763
    byte distance_lsb = Wire.read();
    2eec:	0e 94 36 01 	call	0x26c	; 0x26c <TwoWire::read() [clone .constprop.22]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1764
    vl_dis = ((unsigned int)distance_msb << 8) | distance_lsb;
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	3d 2f       	mov	r19, r29
    2ef4:	a9 01       	movw	r20, r18
    2ef6:	48 2b       	or	r20, r24
    2ef8:	ca 01       	movw	r24, r20
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1768
  }

  // Your additional processing logic here
  if (vl_dis == 20) {
    2efa:	84 31       	cpi	r24, 0x14	; 20
    2efc:	91 05       	cpc	r25, r1
    2efe:	39 f7       	brne	.-50     	; 0x2ece <vl(char)+0x86>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1769
    delay(10);
    2f00:	6a e0       	ldi	r22, 0x0A	; 10
    2f02:	70 e0       	ldi	r23, 0x00	; 0
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
vl_double_check():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1678

  // Select the appropriate sensor
  if (xv == 1) {
    // Set MUX pins to select sensor 1
    // B11 Right
    digitalWrite(MUX_A, LOW);
    2f0c:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1675
  unsigned int vl_dis = 1;

  // Your pin manipulation logic here if needed

  // Select the appropriate sensor
  if (xv == 1) {
    2f0e:	c1 30       	cpi	r28, 0x01	; 1
    2f10:	09 f4       	brne	.+2      	; 0x2f14 <vl(char)+0xcc>
    2f12:	47 c0       	rjmp	.+142    	; 0x2fa2 <vl(char)+0x15a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1690
    digitalWrite(MUX_B, LOW);
    digitalWrite(MUX_C, HIGH);
  } else if (xv == 3) {
    // Set MUX pins to select sensor 2
    // B13 Left
    digitalWrite(MUX_A, HIGH);
    2f14:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1681
    // Set MUX pins to select sensor 1
    // B11 Right
    digitalWrite(MUX_A, LOW);
    digitalWrite(MUX_B, HIGH);
    digitalWrite(MUX_C, LOW);
  } else if (xv == 2) {
    2f16:	c2 30       	cpi	r28, 0x02	; 2
    2f18:	09 f0       	breq	.+2      	; 0x2f1c <vl(char)+0xd4>
    2f1a:	43 c0       	rjmp	.+134    	; 0x2fa2 <vl(char)+0x15a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1684
    // Set MUX pins to select sensor 2
    // B13 Left
    digitalWrite(MUX_A, LOW);
    2f1c:	60 e0       	ldi	r22, 0x00	; 0
    2f1e:	8c e2       	ldi	r24, 0x2C	; 44
    2f20:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1685
    digitalWrite(MUX_B, LOW);
    2f24:	60 e0       	ldi	r22, 0x00	; 0
    2f26:	8b e2       	ldi	r24, 0x2B	; 43
    2f28:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1686
    digitalWrite(MUX_C, HIGH);
    2f2c:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1692
  } else if (xv == 3) {
    // Set MUX pins to select sensor 2
    // B13 Left
    digitalWrite(MUX_A, HIGH);
    digitalWrite(MUX_B, HIGH);
    digitalWrite(MUX_C, LOW);
    2f2e:	8a e2       	ldi	r24, 0x2A	; 42
    2f30:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
beginTransmission():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:208
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    2f34:	89 e2       	ldi	r24, 0x29	; 41
    2f36:	0e 94 a1 01 	call	0x342	; 0x342 <TwoWire::beginTransmission(unsigned char) [clone .constprop.17]>
vl_double_check():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1696
  }
  // Send command to start distance measurement
  Wire.beginTransmission(VL53L0X_ADDRESS);
  Wire.write(VL53L0X_REG_SYSRANGE_START);
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <TwoWire::write(int) [clone .constprop.29]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1697
  Wire.write(0x01);
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <TwoWire::write(int) [clone .constprop.29]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1698
  Wire.endTransmission();
    2f4a:	0e 94 ab 01 	call	0x356	; 0x356 <TwoWire::endTransmission() [clone .constprop.13]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1701

  // Delay for measurement completion
  delay(10);  // Adjust delay if needed
    2f4e:	6a e0       	ldi	r22, 0x0A	; 10
    2f50:	70 e0       	ldi	r23, 0x00	; 0
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
beginTransmission():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:208
    2f5a:	89 e2       	ldi	r24, 0x29	; 41
    2f5c:	0e 94 a1 01 	call	0x342	; 0x342 <TwoWire::beginTransmission(unsigned char) [clone .constprop.17]>
vl_double_check():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1705

  // Request distance measurement
  Wire.beginTransmission(VL53L0X_ADDRESS);
  Wire.write(VL53L0X_REG_RESULT_RANGE_VAL);
    2f60:	8e e1       	ldi	r24, 0x1E	; 30
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <TwoWire::write(int) [clone .constprop.29]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1706
  Wire.endTransmission(false);
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	0e 94 49 01 	call	0x292	; 0x292 <TwoWire::endTransmission(unsigned char) [clone .constprop.18]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1709

  // Read distance measurement (2 bytes)
  Wire.requestFrom(VL53L0X_ADDRESS, 2);
    2f6e:	62 e0       	ldi	r22, 0x02	; 2
    2f70:	70 e0       	ldi	r23, 0x00	; 0
    2f72:	89 e2       	ldi	r24, 0x29	; 41
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	0e 94 74 09 	call	0x12e8	; 0x12e8 <TwoWire::requestFrom(int, int) [clone .constprop.14]>
available():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:292
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    2f7a:	80 91 3a 09 	lds	r24, 0x093A	; 0x80093a <TwoWire::rxBufferLength>
    2f7e:	90 91 3b 09 	lds	r25, 0x093B	; 0x80093b <TwoWire::rxBufferIndex>
    2f82:	89 1b       	sub	r24, r25
    2f84:	99 0b       	sbc	r25, r25
vl_double_check():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1710
  if (Wire.available() >= 2) {
    2f86:	02 97       	sbiw	r24, 0x02	; 2
    2f88:	0c f4       	brge	.+2      	; 0x2f8c <vl(char)+0x144>
    2f8a:	9f cf       	rjmp	.-194    	; 0x2eca <vl(char)+0x82>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1711
    byte distance_msb = Wire.read();
    2f8c:	0e 94 36 01 	call	0x26c	; 0x26c <TwoWire::read() [clone .constprop.22]>
    2f90:	c8 2f       	mov	r28, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1712
    byte distance_lsb = Wire.read();
    2f92:	0e 94 36 01 	call	0x26c	; 0x26c <TwoWire::read() [clone .constprop.22]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1713
    vl_dis = ((unsigned int)distance_msb << 8) | distance_lsb;
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	3c 2f       	mov	r19, r28
    2f9a:	a9 01       	movw	r20, r18
    2f9c:	48 2b       	or	r20, r24
    2f9e:	ca 01       	movw	r24, r20
    2fa0:	96 cf       	rjmp	.-212    	; 0x2ece <vl(char)+0x86>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1690
    digitalWrite(MUX_B, LOW);
    digitalWrite(MUX_C, HIGH);
  } else if (xv == 3) {
    // Set MUX pins to select sensor 2
    // B13 Left
    digitalWrite(MUX_A, HIGH);
    2fa2:	8c e2       	ldi	r24, 0x2C	; 44
    2fa4:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1691
    digitalWrite(MUX_B, HIGH);
    2fa8:	61 e0       	ldi	r22, 0x01	; 1
    2faa:	8b e2       	ldi	r24, 0x2B	; 43
    2fac:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1692
    digitalWrite(MUX_C, LOW);
    2fb0:	60 e0       	ldi	r22, 0x00	; 0
    2fb2:	bd cf       	rjmp	.-134    	; 0x2f2e <vl(char)+0xe6>

00002fb4 <cmps(int)>:
cmps():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1594
      break;
    }
  }
}

int cmps(int select) {
    2fb4:	bf 92       	push	r11
    2fb6:	cf 92       	push	r12
    2fb8:	df 92       	push	r13
    2fba:	ef 92       	push	r14
    2fbc:	ff 92       	push	r15
    2fbe:	0f 93       	push	r16
    2fc0:	1f 93       	push	r17
    2fc2:	cf 93       	push	r28
    2fc4:	df 93       	push	r29
    2fc6:	8c 01       	movw	r16, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1597
  int degree, pi, rol;

  digitalWrite(MUX_A, HIGH);  //switching the multiplaxer
    2fc8:	61 e0       	ldi	r22, 0x01	; 1
    2fca:	8c e2       	ldi	r24, 0x2C	; 44
    2fcc:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1598
  digitalWrite(MUX_B, HIGH);
    2fd0:	61 e0       	ldi	r22, 0x01	; 1
    2fd2:	8b e2       	ldi	r24, 0x2B	; 43
    2fd4:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1599
  digitalWrite(MUX_C, LOW);
    2fd8:	60 e0       	ldi	r22, 0x00	; 0
    2fda:	8a e2       	ldi	r24, 0x2A	; 42
    2fdc:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
beginTransmission():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:208
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    2fe0:	80 e6       	ldi	r24, 0x60	; 96
    2fe2:	0e 94 a1 01 	call	0x342	; 0x342 <TwoWire::beginTransmission(unsigned char) [clone .constprop.17]>
cmps():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1602

  Wire.beginTransmission(cmps_address);
  Wire.write(0x02);  // Register address for desired data (adjust as needed)
    2fe6:	82 e0       	ldi	r24, 0x02	; 2
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <TwoWire::write(int) [clone .constprop.29]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1603
  Wire.endTransmission();
    2fee:	0e 94 ab 01 	call	0x356	; 0x356 <TwoWire::endTransmission() [clone .constprop.13]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1605

  Wire.requestFrom(cmps_address, 4);  // Request 4 bytes of data
    2ff2:	64 e0       	ldi	r22, 0x04	; 4
    2ff4:	70 e0       	ldi	r23, 0x00	; 0
    2ff6:	80 e6       	ldi	r24, 0x60	; 96
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	0e 94 74 09 	call	0x12e8	; 0x12e8 <TwoWire::requestFrom(int, int) [clone .constprop.14]>
available():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:292
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    2ffe:	80 91 3a 09 	lds	r24, 0x093A	; 0x80093a <TwoWire::rxBufferLength>
    3002:	90 91 3b 09 	lds	r25, 0x093B	; 0x80093b <TwoWire::rxBufferIndex>
    3006:	89 1b       	sub	r24, r25
    3008:	99 0b       	sbc	r25, r25
cmps():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1607

  if (Wire.available() >= 4) {
    300a:	04 97       	sbiw	r24, 0x04	; 4
    300c:	94 f1       	brlt	.+100    	; 0x3072 <cmps(int)+0xbe>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1608
    degree = Wire.read();
    300e:	0e 94 36 01 	call	0x26c	; 0x26c <TwoWire::read() [clone .constprop.22]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1609
    degree = (degree << 8) | Wire.read();
    3012:	d8 2f       	mov	r29, r24
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	c2 2f       	mov	r28, r18
    3018:	0e 94 36 01 	call	0x26c	; 0x26c <TwoWire::read() [clone .constprop.22]>
    301c:	8c 2b       	or	r24, r28
    301e:	9d 2b       	or	r25, r29
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1610
    degree /= 10;  // Adjust scaling if needed
    3020:	6a e0       	ldi	r22, 0x0A	; 10
    3022:	70 e0       	ldi	r23, 0x00	; 0
    3024:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1611
    degree -= DN;  // Replace DN with your offset value (if applicable)
    3028:	80 91 df 08 	lds	r24, 0x08DF	; 0x8008df <DN>
    302c:	90 91 e0 08 	lds	r25, 0x08E0	; 0x8008e0 <DN+0x1>
    3030:	eb 01       	movw	r28, r22
    3032:	c8 1b       	sub	r28, r24
    3034:	d9 0b       	sbc	r29, r25
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1613

    pi = Wire.read();
    3036:	0e 94 36 01 	call	0x26c	; 0x26c <TwoWire::read() [clone .constprop.22]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1614
    pi = pi * 180 / 255;
    303a:	24 eb       	ldi	r18, 0xB4	; 180
    303c:	d2 2e       	mov	r13, r18
    303e:	9c 01       	movw	r18, r24
    3040:	d2 9e       	mul	r13, r18
    3042:	c0 01       	movw	r24, r0
    3044:	d3 9e       	mul	r13, r19
    3046:	90 0d       	add	r25, r0
    3048:	11 24       	eor	r1, r1
    304a:	ee 24       	eor	r14, r14
    304c:	ea 94       	dec	r14
    304e:	f1 2c       	mov	r15, r1
    3050:	b7 01       	movw	r22, r14
    3052:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    3056:	b6 2e       	mov	r11, r22
    3058:	c7 2e       	mov	r12, r23
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1616

    rol = Wire.read();
    305a:	0e 94 36 01 	call	0x26c	; 0x26c <TwoWire::read() [clone .constprop.22]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1617
    rol = rol * 180 / 255;
    305e:	9c 01       	movw	r18, r24
    3060:	d2 9e       	mul	r13, r18
    3062:	c0 01       	movw	r24, r0
    3064:	d3 9e       	mul	r13, r19
    3066:	90 0d       	add	r25, r0
    3068:	11 24       	eor	r1, r1
    306a:	b7 01       	movw	r22, r14
    306c:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    3070:	7b 01       	movw	r14, r22
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1620
  }

  if (degree < 0) {
    3072:	d7 ff       	sbrs	r29, 7
    3074:	02 c0       	rjmp	.+4      	; 0x307a <cmps(int)+0xc6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1621
    degree += 360;
    3076:	c8 59       	subi	r28, 0x98	; 152
    3078:	de 4f       	sbci	r29, 0xFE	; 254
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1625
  }


  if (select == 1) {
    307a:	01 30       	cpi	r16, 0x01	; 1
    307c:	11 05       	cpc	r17, r1
    307e:	29 f0       	breq	.+10     	; 0x308a <cmps(int)+0xd6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1627
    return degree;
  } else if (select == 2) {
    3080:	02 30       	cpi	r16, 0x02	; 2
    3082:	11 05       	cpc	r17, r1
    3084:	69 f0       	breq	.+26     	; 0x30a0 <cmps(int)+0xec>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1630
    return pi;
  } else {
    return rol;
    3086:	ce 2d       	mov	r28, r14
    3088:	df 2d       	mov	r29, r15
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1632
  }
}
    308a:	ce 01       	movw	r24, r28
    308c:	df 91       	pop	r29
    308e:	cf 91       	pop	r28
    3090:	1f 91       	pop	r17
    3092:	0f 91       	pop	r16
    3094:	ff 90       	pop	r15
    3096:	ef 90       	pop	r14
    3098:	df 90       	pop	r13
    309a:	cf 90       	pop	r12
    309c:	bf 90       	pop	r11
    309e:	08 95       	ret
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1628


  if (select == 1) {
    return degree;
  } else if (select == 2) {
    return pi;
    30a0:	cb 2d       	mov	r28, r11
    30a2:	dc 2d       	mov	r29, r12
    30a4:	f2 cf       	rjmp	.-28     	; 0x308a <cmps(int)+0xd6>

000030a6 <menu_motor()>:
menu_motor():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:944
}

void menu_motor(void) {
  static char page = 1, last_page = 8;
  signed int spd = 0;
  lcd.clear();
    30a6:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:945
  int basket_up = EEPROM_read_int(basket_up_address);
    30aa:	84 ea       	ldi	r24, 0xA4	; 164
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    30b2:	5c 01       	movw	r10, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:946
  int basket_normal = EEPROM_read_int(basket_normal_address);
    30b4:	86 ea       	ldi	r24, 0xA6	; 166
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    30bc:	6c 01       	movw	r12, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:947
  int arm_normal = EEPROM_read_int(arm_normal_address);
    30be:	88 ea       	ldi	r24, 0xA8	; 168
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    30c6:	4c 01       	movw	r8, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:948
  int arm_down = EEPROM_read_int(arm_down_address);
    30c8:	8a ea       	ldi	r24, 0xAA	; 170
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    30d0:	3c 01       	movw	r6, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:949
  int arm_dropping = EEPROM_read_int(arm_dropping_address);
    30d2:	8c ea       	ldi	r24, 0xAC	; 172
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    30da:	2c 01       	movw	r4, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:950
  int gripper_close = EEPROM_read_int(gripper_close_address);
    30dc:	8e ea       	ldi	r24, 0xAE	; 174
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    30e4:	7c 01       	movw	r14, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:951
  int gripper_open = EEPROM_read_int(gripper_open_address);
    30e6:	80 eb       	ldi	r24, 0xB0	; 176
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    30ee:	8c 01       	movw	r16, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:943
  }
}

void menu_motor(void) {
  static char page = 1, last_page = 8;
  signed int spd = 0;
    30f0:	d0 e0       	ldi	r29, 0x00	; 0
    30f2:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1106
          gripper_close -= 5;
      }
    } else if (page == 8)  // XL Gripper open 30 and 31
    {
      lcd.setCursor(0, 0);
      lcd.printf("gripper_open %d %4d", 10, gripper_open);
    30f4:	8e eb       	ldi	r24, 0xBE	; 190
    30f6:	28 2e       	mov	r2, r24
    30f8:	8a e0       	ldi	r24, 0x0A	; 10
    30fa:	38 2e       	mov	r3, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:954
  int arm_dropping = EEPROM_read_int(arm_dropping_address);
  int gripper_close = EEPROM_read_int(gripper_close_address);
  int gripper_open = EEPROM_read_int(gripper_open_address);

  while (1) {
    if (next_page == 0) {
    30fc:	88 e0       	ldi	r24, 0x08	; 8
    30fe:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    3102:	89 2b       	or	r24, r25
    3104:	a9 f4       	brne	.+42     	; 0x3130 <menu_motor()+0x8a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:955
      while (next_page == 0)
    3106:	88 e0       	ldi	r24, 0x08	; 8
    3108:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    310c:	89 2b       	or	r24, r25
    310e:	d9 f3       	breq	.-10     	; 0x3106 <menu_motor()+0x60>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:957
        ;
      delay(50);
    3110:	62 e3       	ldi	r22, 0x32	; 50
    3112:	70 e0       	ldi	r23, 0x00	; 0
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:958
      page++;
    311c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3120:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:959
      if (page > last_page)
    3122:	89 30       	cpi	r24, 0x09	; 9
    3124:	0c f0       	brlt	.+2      	; 0x3128 <menu_motor()+0x82>
    3126:	59 c0       	rjmp	.+178    	; 0x31da <menu_motor()+0x134>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:960
        page = 1;
    3128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:961
      lcd.clear();
    312c:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:964
    }

    if (previuse_page == 0) {
    3130:	89 e0       	ldi	r24, 0x09	; 9
    3132:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    3136:	89 2b       	or	r24, r25
    3138:	a9 f4       	brne	.+42     	; 0x3164 <menu_motor()+0xbe>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:965
      while (previuse_page == 0)
    313a:	89 e0       	ldi	r24, 0x09	; 9
    313c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    3140:	89 2b       	or	r24, r25
    3142:	d9 f3       	breq	.-10     	; 0x313a <menu_motor()+0x94>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:967
        ;
      delay(50);
    3144:	62 e3       	ldi	r22, 0x32	; 50
    3146:	70 e0       	ldi	r23, 0x00	; 0
    3148:	80 e0       	ldi	r24, 0x00	; 0
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:968
      page--;
    3150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3154:	81 50       	subi	r24, 0x01	; 1
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:969
      if (page < 1)
    3156:	18 16       	cp	r1, r24
    3158:	0c f0       	brlt	.+2      	; 0x315c <menu_motor()+0xb6>
    315a:	41 c0       	rjmp	.+130    	; 0x31de <menu_motor()+0x138>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:970
        page = last_page;
    315c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:971
      lcd.clear();
    3160:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:974
    }

    if (page == 1)  // go
    3164:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3168:	81 30       	cpi	r24, 0x01	; 1
    316a:	09 f0       	breq	.+2      	; 0x316e <menu_motor()+0xc8>
    316c:	44 c0       	rjmp	.+136    	; 0x31f6 <menu_motor()+0x150>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:976
    {
      lcd.setCursor(0, 0);
    316e:	60 e0       	ldi	r22, 0x00	; 0
    3170:	80 e0       	ldi	r24, 0x00	; 0
    3172:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:977
      lcd.printf("go(%4d,%4d) ", spd, spd);
    3176:	df 93       	push	r29
    3178:	cf 93       	push	r28
    317a:	df 93       	push	r29
    317c:	cf 93       	push	r28
    317e:	8c e3       	ldi	r24, 0x3C	; 60
    3180:	93 e0       	ldi	r25, 0x03	; 3
    3182:	9f 93       	push	r25
    3184:	8f 93       	push	r24
    3186:	3f 92       	push	r3
    3188:	2f 92       	push	r2
    318a:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:978
      if (increase == 0) {
    318e:	8a e0       	ldi	r24, 0x0A	; 10
    3190:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    3194:	2d b7       	in	r18, 0x3d	; 61
    3196:	3e b7       	in	r19, 0x3e	; 62
    3198:	28 5f       	subi	r18, 0xF8	; 248
    319a:	3f 4f       	sbci	r19, 0xFF	; 255
    319c:	0f b6       	in	r0, 0x3f	; 63
    319e:	f8 94       	cli
    31a0:	3e bf       	out	0x3e, r19	; 62
    31a2:	0f be       	out	0x3f, r0	; 63
    31a4:	2d bf       	out	0x3d, r18	; 61
    31a6:	89 2b       	or	r24, r25
    31a8:	e1 f4       	brne	.+56     	; 0x31e2 <menu_motor()+0x13c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:979
        spd += 50;
    31aa:	e2 96       	adiw	r28, 0x32	; 50
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:983
        delay(400);
      } else if (decrease == 0) {
        spd -= 50;
        delay(400);
    31ac:	60 e9       	ldi	r22, 0x90	; 144
    31ae:	71 e0       	ldi	r23, 0x01	; 1
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
    31b8:	c1 30       	cpi	r28, 0x01	; 1
    31ba:	3f ef       	ldi	r19, 0xFF	; 255
    31bc:	d3 07       	cpc	r29, r19
    31be:	14 f4       	brge	.+4      	; 0x31c4 <menu_motor()+0x11e>
    31c0:	c1 e0       	ldi	r28, 0x01	; 1
    31c2:	df ef       	ldi	r29, 0xFF	; 255
    31c4:	cf 3f       	cpi	r28, 0xFF	; 255
    31c6:	d1 05       	cpc	r29, r1
    31c8:	19 f0       	breq	.+6      	; 0x31d0 <menu_motor()+0x12a>
    31ca:	14 f0       	brlt	.+4      	; 0x31d0 <menu_motor()+0x12a>
    31cc:	cf ef       	ldi	r28, 0xFF	; 255
    31ce:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:992
      if (spd > 255)
        spd = 255;
      if (spd < -255)
        spd = -255;

      go(spd, spd);
    31d0:	be 01       	movw	r22, r28
    31d2:	ce 01       	movw	r24, r28
    31d4:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
    31d8:	91 cf       	rjmp	.-222    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:960
      while (next_page == 0)
        ;
      delay(50);
      page++;
      if (page > last_page)
        page = 1;
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	a5 cf       	rjmp	.-182    	; 0x3128 <menu_motor()+0x82>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:970
      while (previuse_page == 0)
        ;
      delay(50);
      page--;
      if (page < 1)
        page = last_page;
    31de:	88 e0       	ldi	r24, 0x08	; 8
    31e0:	bd cf       	rjmp	.-134    	; 0x315c <menu_motor()+0xb6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:981
      lcd.setCursor(0, 0);
      lcd.printf("go(%4d,%4d) ", spd, spd);
      if (increase == 0) {
        spd += 50;
        delay(400);
      } else if (decrease == 0) {
    31e2:	8b e0       	ldi	r24, 0x0B	; 11
    31e4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    31e8:	89 2b       	or	r24, r25
    31ea:	11 f4       	brne	.+4      	; 0x31f0 <menu_motor()+0x14a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:982
        spd -= 50;
    31ec:	e2 97       	sbiw	r28, 0x32	; 50
    31ee:	de cf       	rjmp	.-68     	; 0x31ac <menu_motor()+0x106>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:985
        delay(400);
      } else
        spd = 0;
    31f0:	d0 e0       	ldi	r29, 0x00	; 0
    31f2:	c0 e0       	ldi	r28, 0x00	; 0
    31f4:	ed cf       	rjmp	.-38     	; 0x31d0 <menu_motor()+0x12a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:993
        spd = 255;
      if (spd < -255)
        spd = -255;

      go(spd, spd);
    } else if (page == 2)  // AX Basket ID=10
    31f6:	82 30       	cpi	r24, 0x02	; 2
    31f8:	09 f0       	breq	.+2      	; 0x31fc <menu_motor()+0x156>
    31fa:	55 c0       	rjmp	.+170    	; 0x32a6 <menu_motor()+0x200>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:995
    {
      lcd.setCursor(0, 0);
    31fc:	60 e0       	ldi	r22, 0x00	; 0
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:996
      lcd.printf("Basket up %d %4d", 10, basket_up);
    3204:	bf 92       	push	r11
    3206:	af 92       	push	r10
    3208:	1f 92       	push	r1
    320a:	8a e0       	ldi	r24, 0x0A	; 10
    320c:	8f 93       	push	r24
    320e:	89 e4       	ldi	r24, 0x49	; 73
    3210:	93 e0       	ldi	r25, 0x03	; 3
    3212:	9f 93       	push	r25
    3214:	8f 93       	push	r24
    3216:	3f 92       	push	r3
    3218:	2f 92       	push	r2
    321a:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:997
      if (start == 0) {
    321e:	86 e0       	ldi	r24, 0x06	; 6
    3220:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    3224:	2d b7       	in	r18, 0x3d	; 61
    3226:	3e b7       	in	r19, 0x3e	; 62
    3228:	28 5f       	subi	r18, 0xF8	; 248
    322a:	3f 4f       	sbci	r19, 0xFF	; 255
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	f8 94       	cli
    3230:	3e bf       	out	0x3e, r19	; 62
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	2d bf       	out	0x3d, r18	; 61
    3236:	89 2b       	or	r24, r25
    3238:	61 f4       	brne	.+24     	; 0x3252 <menu_motor()+0x1ac>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:998
        EEPROM_write_int(basket_up_address, basket_up);
    323a:	b5 01       	movw	r22, r10
    323c:	84 ea       	ldi	r24, 0xA4	; 164
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:999
        AX(10, basket_up, 150);
    3244:	46 e9       	ldi	r20, 0x96	; 150
    3246:	50 e0       	ldi	r21, 0x00	; 0
    3248:	b5 01       	movw	r22, r10
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1018
    {
      lcd.setCursor(0, 0);
      lcd.printf("Basket normal %d %4d", 10, basket_normal);
      if (start == 0) {
        EEPROM_write_int(basket_normal_address, basket_normal);
        AX(10, basket_normal, 150);
    324a:	8a e0       	ldi	r24, 0x0A	; 10
    324c:	0e 94 85 08 	call	0x110a	; 0x110a <AX(char, int, int)>
    3250:	55 cf       	rjmp	.-342    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1001
      lcd.printf("Basket up %d %4d", 10, basket_up);
      if (start == 0) {
        EEPROM_write_int(basket_up_address, basket_up);
        AX(10, basket_up, 150);

      } else if (increase == 0) {
    3252:	8a e0       	ldi	r24, 0x0A	; 10
    3254:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    3258:	89 2b       	or	r24, r25
    325a:	81 f4       	brne	.+32     	; 0x327c <menu_motor()+0x1d6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1002
        delay(50);
    325c:	62 e3       	ldi	r22, 0x32	; 50
    325e:	70 e0       	ldi	r23, 0x00	; 0
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1003
        if (basket_up < 520)
    3268:	38 e0       	ldi	r19, 0x08	; 8
    326a:	a3 16       	cp	r10, r19
    326c:	32 e0       	ldi	r19, 0x02	; 2
    326e:	b3 06       	cpc	r11, r19
    3270:	0c f0       	brlt	.+2      	; 0x3274 <menu_motor()+0x1ce>
    3272:	44 cf       	rjmp	.-376    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1004
          basket_up += 5;
    3274:	85 e0       	ldi	r24, 0x05	; 5
    3276:	a8 0e       	add	r10, r24
    3278:	b1 1c       	adc	r11, r1
    327a:	40 cf       	rjmp	.-384    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1005
      } else if (decrease == 0) {
    327c:	8b e0       	ldi	r24, 0x0B	; 11
    327e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    3282:	89 2b       	or	r24, r25
    3284:	09 f0       	breq	.+2      	; 0x3288 <menu_motor()+0x1e2>
    3286:	3a cf       	rjmp	.-396    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1006
        delay(50);
    3288:	62 e3       	ldi	r22, 0x32	; 50
    328a:	70 e0       	ldi	r23, 0x00	; 0
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1008

        if (basket_up > 250)
    3294:	9b ef       	ldi	r25, 0xFB	; 251
    3296:	a9 16       	cp	r10, r25
    3298:	b1 04       	cpc	r11, r1
    329a:	0c f4       	brge	.+2      	; 0x329e <menu_motor()+0x1f8>
    329c:	2f cf       	rjmp	.-418    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1009
          basket_up -= 5;
    329e:	25 e0       	ldi	r18, 0x05	; 5
    32a0:	a2 1a       	sub	r10, r18
    32a2:	b1 08       	sbc	r11, r1
    32a4:	2b cf       	rjmp	.-426    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1012
      }

    } else if (page == 3)  // AX Basket Normal ID=10
    32a6:	83 30       	cpi	r24, 0x03	; 3
    32a8:	09 f0       	breq	.+2      	; 0x32ac <menu_motor()+0x206>
    32aa:	52 c0       	rjmp	.+164    	; 0x3350 <menu_motor()+0x2aa>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1014
    {
      lcd.setCursor(0, 0);
    32ac:	60 e0       	ldi	r22, 0x00	; 0
    32ae:	80 e0       	ldi	r24, 0x00	; 0
    32b0:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1015
      lcd.printf("Basket normal %d %4d", 10, basket_normal);
    32b4:	df 92       	push	r13
    32b6:	cf 92       	push	r12
    32b8:	1f 92       	push	r1
    32ba:	8a e0       	ldi	r24, 0x0A	; 10
    32bc:	8f 93       	push	r24
    32be:	8a e5       	ldi	r24, 0x5A	; 90
    32c0:	93 e0       	ldi	r25, 0x03	; 3
    32c2:	9f 93       	push	r25
    32c4:	8f 93       	push	r24
    32c6:	3f 92       	push	r3
    32c8:	2f 92       	push	r2
    32ca:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1016
      if (start == 0) {
    32ce:	86 e0       	ldi	r24, 0x06	; 6
    32d0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    32d4:	2d b7       	in	r18, 0x3d	; 61
    32d6:	3e b7       	in	r19, 0x3e	; 62
    32d8:	28 5f       	subi	r18, 0xF8	; 248
    32da:	3f 4f       	sbci	r19, 0xFF	; 255
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	f8 94       	cli
    32e0:	3e bf       	out	0x3e, r19	; 62
    32e2:	0f be       	out	0x3f, r0	; 63
    32e4:	2d bf       	out	0x3d, r18	; 61
    32e6:	89 2b       	or	r24, r25
    32e8:	49 f4       	brne	.+18     	; 0x32fc <menu_motor()+0x256>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1017
        EEPROM_write_int(basket_normal_address, basket_normal);
    32ea:	b6 01       	movw	r22, r12
    32ec:	86 ea       	ldi	r24, 0xA6	; 166
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1018
        AX(10, basket_normal, 150);
    32f4:	46 e9       	ldi	r20, 0x96	; 150
    32f6:	50 e0       	ldi	r21, 0x00	; 0
    32f8:	b6 01       	movw	r22, r12
    32fa:	a7 cf       	rjmp	.-178    	; 0x324a <menu_motor()+0x1a4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1019
      } else if (increase == 0) {
    32fc:	8a e0       	ldi	r24, 0x0A	; 10
    32fe:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    3302:	89 2b       	or	r24, r25
    3304:	81 f4       	brne	.+32     	; 0x3326 <menu_motor()+0x280>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1020
        delay(50);
    3306:	62 e3       	ldi	r22, 0x32	; 50
    3308:	70 e0       	ldi	r23, 0x00	; 0
    330a:	80 e0       	ldi	r24, 0x00	; 0
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1021
        if (basket_normal < 520)
    3312:	38 e0       	ldi	r19, 0x08	; 8
    3314:	c3 16       	cp	r12, r19
    3316:	32 e0       	ldi	r19, 0x02	; 2
    3318:	d3 06       	cpc	r13, r19
    331a:	0c f0       	brlt	.+2      	; 0x331e <menu_motor()+0x278>
    331c:	ef ce       	rjmp	.-546    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1022
          basket_normal += 5;
    331e:	85 e0       	ldi	r24, 0x05	; 5
    3320:	c8 0e       	add	r12, r24
    3322:	d1 1c       	adc	r13, r1
    3324:	eb ce       	rjmp	.-554    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1023
      } else if (decrease == 0) {
    3326:	8b e0       	ldi	r24, 0x0B	; 11
    3328:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    332c:	89 2b       	or	r24, r25
    332e:	09 f0       	breq	.+2      	; 0x3332 <menu_motor()+0x28c>
    3330:	e5 ce       	rjmp	.-566    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1024
        delay(50);
    3332:	62 e3       	ldi	r22, 0x32	; 50
    3334:	70 e0       	ldi	r23, 0x00	; 0
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1026

        if (basket_normal > 250)
    333e:	9b ef       	ldi	r25, 0xFB	; 251
    3340:	c9 16       	cp	r12, r25
    3342:	d1 04       	cpc	r13, r1
    3344:	0c f4       	brge	.+2      	; 0x3348 <menu_motor()+0x2a2>
    3346:	da ce       	rjmp	.-588    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1027
          basket_normal -= 5;
    3348:	25 e0       	ldi	r18, 0x05	; 5
    334a:	c2 1a       	sub	r12, r18
    334c:	d1 08       	sbc	r13, r1
    334e:	d6 ce       	rjmp	.-596    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1030
      }

    } else if (page == 4)  // AX Arm Normal ID=11
    3350:	84 30       	cpi	r24, 0x04	; 4
    3352:	09 f0       	breq	.+2      	; 0x3356 <menu_motor()+0x2b0>
    3354:	55 c0       	rjmp	.+170    	; 0x3400 <menu_motor()+0x35a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1032
    {
      lcd.setCursor(0, 0);
    3356:	60 e0       	ldi	r22, 0x00	; 0
    3358:	80 e0       	ldi	r24, 0x00	; 0
    335a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1033
      lcd.printf("arm normal %d %4d", 10, arm_normal);
    335e:	9f 92       	push	r9
    3360:	8f 92       	push	r8
    3362:	1f 92       	push	r1
    3364:	8a e0       	ldi	r24, 0x0A	; 10
    3366:	8f 93       	push	r24
    3368:	8f e6       	ldi	r24, 0x6F	; 111
    336a:	93 e0       	ldi	r25, 0x03	; 3
    336c:	9f 93       	push	r25
    336e:	8f 93       	push	r24
    3370:	3f 92       	push	r3
    3372:	2f 92       	push	r2
    3374:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1034
      if (start == 0) {
    3378:	86 e0       	ldi	r24, 0x06	; 6
    337a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    337e:	2d b7       	in	r18, 0x3d	; 61
    3380:	3e b7       	in	r19, 0x3e	; 62
    3382:	28 5f       	subi	r18, 0xF8	; 248
    3384:	3f 4f       	sbci	r19, 0xFF	; 255
    3386:	0f b6       	in	r0, 0x3f	; 63
    3388:	f8 94       	cli
    338a:	3e bf       	out	0x3e, r19	; 62
    338c:	0f be       	out	0x3f, r0	; 63
    338e:	2d bf       	out	0x3d, r18	; 61
    3390:	89 2b       	or	r24, r25
    3392:	61 f4       	brne	.+24     	; 0x33ac <menu_motor()+0x306>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1035
        AX(11, arm_normal, 150);
    3394:	46 e9       	ldi	r20, 0x96	; 150
    3396:	50 e0       	ldi	r21, 0x00	; 0
    3398:	b4 01       	movw	r22, r8
    339a:	8b e0       	ldi	r24, 0x0B	; 11
    339c:	0e 94 85 08 	call	0x110a	; 0x110a <AX(char, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1036
        EEPROM_write_int(arm_normal_address, arm_normal);
    33a0:	b4 01       	movw	r22, r8
    33a2:	88 ea       	ldi	r24, 0xA8	; 168
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
    33aa:	a8 ce       	rjmp	.-688    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1037
      } else if (increase == 0) {
    33ac:	8a e0       	ldi	r24, 0x0A	; 10
    33ae:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    33b2:	89 2b       	or	r24, r25
    33b4:	81 f4       	brne	.+32     	; 0x33d6 <menu_motor()+0x330>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1038
        delay(50);
    33b6:	62 e3       	ldi	r22, 0x32	; 50
    33b8:	70 e0       	ldi	r23, 0x00	; 0
    33ba:	80 e0       	ldi	r24, 0x00	; 0
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1039
        if (arm_normal < 800)
    33c2:	30 e2       	ldi	r19, 0x20	; 32
    33c4:	83 16       	cp	r8, r19
    33c6:	33 e0       	ldi	r19, 0x03	; 3
    33c8:	93 06       	cpc	r9, r19
    33ca:	0c f0       	brlt	.+2      	; 0x33ce <menu_motor()+0x328>
    33cc:	97 ce       	rjmp	.-722    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1040
          arm_normal += 5;
    33ce:	85 e0       	ldi	r24, 0x05	; 5
    33d0:	88 0e       	add	r8, r24
    33d2:	91 1c       	adc	r9, r1
    33d4:	93 ce       	rjmp	.-730    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1041
      } else if (decrease == 0) {
    33d6:	8b e0       	ldi	r24, 0x0B	; 11
    33d8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    33dc:	89 2b       	or	r24, r25
    33de:	09 f0       	breq	.+2      	; 0x33e2 <menu_motor()+0x33c>
    33e0:	8d ce       	rjmp	.-742    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1042
        delay(50);
    33e2:	62 e3       	ldi	r22, 0x32	; 50
    33e4:	70 e0       	ldi	r23, 0x00	; 0
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1044

        if (arm_normal > 150)
    33ee:	97 e9       	ldi	r25, 0x97	; 151
    33f0:	89 16       	cp	r8, r25
    33f2:	91 04       	cpc	r9, r1
    33f4:	0c f4       	brge	.+2      	; 0x33f8 <menu_motor()+0x352>
    33f6:	82 ce       	rjmp	.-764    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1045
          arm_normal -= 5;
    33f8:	25 e0       	ldi	r18, 0x05	; 5
    33fa:	82 1a       	sub	r8, r18
    33fc:	91 08       	sbc	r9, r1
    33fe:	7e ce       	rjmp	.-772    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1048
      }

    } else if (page == 5)  // AX Arm down ID=11
    3400:	85 30       	cpi	r24, 0x05	; 5
    3402:	09 f0       	breq	.+2      	; 0x3406 <menu_motor()+0x360>
    3404:	53 c0       	rjmp	.+166    	; 0x34ac <menu_motor()+0x406>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1050
    {
      lcd.setCursor(0, 0);
    3406:	60 e0       	ldi	r22, 0x00	; 0
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1051
      lcd.printf("arm_down %d %4d", 10, arm_down);
    340e:	7f 92       	push	r7
    3410:	6f 92       	push	r6
    3412:	1f 92       	push	r1
    3414:	8a e0       	ldi	r24, 0x0A	; 10
    3416:	8f 93       	push	r24
    3418:	81 e8       	ldi	r24, 0x81	; 129
    341a:	93 e0       	ldi	r25, 0x03	; 3
    341c:	9f 93       	push	r25
    341e:	8f 93       	push	r24
    3420:	3f 92       	push	r3
    3422:	2f 92       	push	r2
    3424:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1052
      if (start == 0) {
    3428:	86 e0       	ldi	r24, 0x06	; 6
    342a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    342e:	2d b7       	in	r18, 0x3d	; 61
    3430:	3e b7       	in	r19, 0x3e	; 62
    3432:	28 5f       	subi	r18, 0xF8	; 248
    3434:	3f 4f       	sbci	r19, 0xFF	; 255
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	3e bf       	out	0x3e, r19	; 62
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	2d bf       	out	0x3d, r18	; 61
    3440:	89 2b       	or	r24, r25
    3442:	51 f4       	brne	.+20     	; 0x3458 <menu_motor()+0x3b2>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1053
        EEPROM_write_int(arm_down_address, arm_down);
    3444:	b3 01       	movw	r22, r6
    3446:	8a ea       	ldi	r24, 0xAA	; 170
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1054
        AX(11, arm_down, 150);
    344e:	46 e9       	ldi	r20, 0x96	; 150
    3450:	50 e0       	ldi	r21, 0x00	; 0
    3452:	b3 01       	movw	r22, r6
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1072
    {
      lcd.setCursor(0, 0);
      lcd.printf("arm_dropping %d %4d", 10, arm_dropping);
      if (start == 0) {
        EEPROM_write_int(arm_dropping_address, arm_dropping);
        AX(11, arm_dropping, 150);
    3454:	8b e0       	ldi	r24, 0x0B	; 11
    3456:	fa ce       	rjmp	.-524    	; 0x324c <menu_motor()+0x1a6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1055
      lcd.setCursor(0, 0);
      lcd.printf("arm_down %d %4d", 10, arm_down);
      if (start == 0) {
        EEPROM_write_int(arm_down_address, arm_down);
        AX(11, arm_down, 150);
      } else if (increase == 0) {
    3458:	8a e0       	ldi	r24, 0x0A	; 10
    345a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    345e:	89 2b       	or	r24, r25
    3460:	81 f4       	brne	.+32     	; 0x3482 <menu_motor()+0x3dc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1056
        delay(50);
    3462:	62 e3       	ldi	r22, 0x32	; 50
    3464:	70 e0       	ldi	r23, 0x00	; 0
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1057
        if (arm_down < 800)
    346e:	30 e2       	ldi	r19, 0x20	; 32
    3470:	63 16       	cp	r6, r19
    3472:	33 e0       	ldi	r19, 0x03	; 3
    3474:	73 06       	cpc	r7, r19
    3476:	0c f0       	brlt	.+2      	; 0x347a <menu_motor()+0x3d4>
    3478:	41 ce       	rjmp	.-894    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1058
          arm_down += 5;
    347a:	85 e0       	ldi	r24, 0x05	; 5
    347c:	68 0e       	add	r6, r24
    347e:	71 1c       	adc	r7, r1
    3480:	3d ce       	rjmp	.-902    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1059
      } else if (decrease == 0) {
    3482:	8b e0       	ldi	r24, 0x0B	; 11
    3484:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    3488:	89 2b       	or	r24, r25
    348a:	09 f0       	breq	.+2      	; 0x348e <menu_motor()+0x3e8>
    348c:	37 ce       	rjmp	.-914    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1060
        delay(50);
    348e:	62 e3       	ldi	r22, 0x32	; 50
    3490:	70 e0       	ldi	r23, 0x00	; 0
    3492:	80 e0       	ldi	r24, 0x00	; 0
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1062

        if (arm_down > 150)
    349a:	97 e9       	ldi	r25, 0x97	; 151
    349c:	69 16       	cp	r6, r25
    349e:	71 04       	cpc	r7, r1
    34a0:	0c f4       	brge	.+2      	; 0x34a4 <menu_motor()+0x3fe>
    34a2:	2c ce       	rjmp	.-936    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1063
          arm_down -= 5;
    34a4:	25 e0       	ldi	r18, 0x05	; 5
    34a6:	62 1a       	sub	r6, r18
    34a8:	71 08       	sbc	r7, r1
    34aa:	28 ce       	rjmp	.-944    	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1066
      }

    } else if (page == 6)  // AX Arm dropping ID=11
    34ac:	86 30       	cpi	r24, 0x06	; 6
    34ae:	09 f0       	breq	.+2      	; 0x34b2 <menu_motor()+0x40c>
    34b0:	53 c0       	rjmp	.+166    	; 0x3558 <menu_motor()+0x4b2>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1068
    {
      lcd.setCursor(0, 0);
    34b2:	60 e0       	ldi	r22, 0x00	; 0
    34b4:	80 e0       	ldi	r24, 0x00	; 0
    34b6:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1069
      lcd.printf("arm_dropping %d %4d", 10, arm_dropping);
    34ba:	5f 92       	push	r5
    34bc:	4f 92       	push	r4
    34be:	1f 92       	push	r1
    34c0:	8a e0       	ldi	r24, 0x0A	; 10
    34c2:	8f 93       	push	r24
    34c4:	81 e9       	ldi	r24, 0x91	; 145
    34c6:	93 e0       	ldi	r25, 0x03	; 3
    34c8:	9f 93       	push	r25
    34ca:	8f 93       	push	r24
    34cc:	3f 92       	push	r3
    34ce:	2f 92       	push	r2
    34d0:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1070
      if (start == 0) {
    34d4:	86 e0       	ldi	r24, 0x06	; 6
    34d6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    34da:	2d b7       	in	r18, 0x3d	; 61
    34dc:	3e b7       	in	r19, 0x3e	; 62
    34de:	28 5f       	subi	r18, 0xF8	; 248
    34e0:	3f 4f       	sbci	r19, 0xFF	; 255
    34e2:	0f b6       	in	r0, 0x3f	; 63
    34e4:	f8 94       	cli
    34e6:	3e bf       	out	0x3e, r19	; 62
    34e8:	0f be       	out	0x3f, r0	; 63
    34ea:	2d bf       	out	0x3d, r18	; 61
    34ec:	89 2b       	or	r24, r25
    34ee:	49 f4       	brne	.+18     	; 0x3502 <menu_motor()+0x45c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1071
        EEPROM_write_int(arm_dropping_address, arm_dropping);
    34f0:	b2 01       	movw	r22, r4
    34f2:	8c ea       	ldi	r24, 0xAC	; 172
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1072
        AX(11, arm_dropping, 150);
    34fa:	46 e9       	ldi	r20, 0x96	; 150
    34fc:	50 e0       	ldi	r21, 0x00	; 0
    34fe:	b2 01       	movw	r22, r4
    3500:	a9 cf       	rjmp	.-174    	; 0x3454 <menu_motor()+0x3ae>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1073
      } else if (increase == 0) {
    3502:	8a e0       	ldi	r24, 0x0A	; 10
    3504:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    3508:	89 2b       	or	r24, r25
    350a:	81 f4       	brne	.+32     	; 0x352c <menu_motor()+0x486>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1074
        delay(50);
    350c:	62 e3       	ldi	r22, 0x32	; 50
    350e:	70 e0       	ldi	r23, 0x00	; 0
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1075
        if (arm_dropping < 1000)
    3518:	38 ee       	ldi	r19, 0xE8	; 232
    351a:	43 16       	cp	r4, r19
    351c:	33 e0       	ldi	r19, 0x03	; 3
    351e:	53 06       	cpc	r5, r19
    3520:	0c f0       	brlt	.+2      	; 0x3524 <menu_motor()+0x47e>
    3522:	ec cd       	rjmp	.-1064   	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1076
          arm_dropping += 5;
    3524:	85 e0       	ldi	r24, 0x05	; 5
    3526:	48 0e       	add	r4, r24
    3528:	51 1c       	adc	r5, r1
    352a:	e8 cd       	rjmp	.-1072   	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1077
      } else if (decrease == 0) {
    352c:	8b e0       	ldi	r24, 0x0B	; 11
    352e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    3532:	89 2b       	or	r24, r25
    3534:	09 f0       	breq	.+2      	; 0x3538 <menu_motor()+0x492>
    3536:	e2 cd       	rjmp	.-1084   	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1078
        delay(50);
    3538:	62 e3       	ldi	r22, 0x32	; 50
    353a:	70 e0       	ldi	r23, 0x00	; 0
    353c:	80 e0       	ldi	r24, 0x00	; 0
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1080

        if (arm_dropping > 300)
    3544:	9d e2       	ldi	r25, 0x2D	; 45
    3546:	49 16       	cp	r4, r25
    3548:	91 e0       	ldi	r25, 0x01	; 1
    354a:	59 06       	cpc	r5, r25
    354c:	0c f4       	brge	.+2      	; 0x3550 <menu_motor()+0x4aa>
    354e:	d6 cd       	rjmp	.-1108   	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1081
          arm_dropping -= 5;
    3550:	25 e0       	ldi	r18, 0x05	; 5
    3552:	42 1a       	sub	r4, r18
    3554:	51 08       	sbc	r5, r1
    3556:	d2 cd       	rjmp	.-1116   	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1084
      }

    } else if (page == 7)  // XL Gripper close 30 and 31
    3558:	87 30       	cpi	r24, 0x07	; 7
    355a:	09 f0       	breq	.+2      	; 0x355e <menu_motor()+0x4b8>
    355c:	65 c0       	rjmp	.+202    	; 0x3628 <menu_motor()+0x582>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1086
    {
      lcd.setCursor(0, 0);
    355e:	60 e0       	ldi	r22, 0x00	; 0
    3560:	80 e0       	ldi	r24, 0x00	; 0
    3562:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1087
      lcd.printf("gripper_close %d %4d", 10, gripper_close);
    3566:	ff 92       	push	r15
    3568:	ef 92       	push	r14
    356a:	1f 92       	push	r1
    356c:	8a e0       	ldi	r24, 0x0A	; 10
    356e:	8f 93       	push	r24
    3570:	85 ea       	ldi	r24, 0xA5	; 165
    3572:	93 e0       	ldi	r25, 0x03	; 3
    3574:	9f 93       	push	r25
    3576:	8f 93       	push	r24
    3578:	3f 92       	push	r3
    357a:	2f 92       	push	r2
    357c:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1088
      if (start == 0) {
    3580:	86 e0       	ldi	r24, 0x06	; 6
    3582:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    3586:	2d b7       	in	r18, 0x3d	; 61
    3588:	3e b7       	in	r19, 0x3e	; 62
    358a:	28 5f       	subi	r18, 0xF8	; 248
    358c:	3f 4f       	sbci	r19, 0xFF	; 255
    358e:	0f b6       	in	r0, 0x3f	; 63
    3590:	f8 94       	cli
    3592:	3e bf       	out	0x3e, r19	; 62
    3594:	0f be       	out	0x3f, r0	; 63
    3596:	2d bf       	out	0x3d, r18	; 61
    3598:	89 2b       	or	r24, r25
    359a:	d9 f4       	brne	.+54     	; 0x35d2 <menu_motor()+0x52c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1089
        EEPROM_write_int(gripper_close_address, gripper_close);
    359c:	b7 01       	movw	r22, r14
    359e:	8e ea       	ldi	r24, 0xAE	; 174
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1090
        XL_Gripper(30, gripper_close, 100);
    35a6:	44 e6       	ldi	r20, 0x64	; 100
    35a8:	50 e0       	ldi	r21, 0x00	; 0
    35aa:	b7 01       	movw	r22, r14
    35ac:	8e e1       	ldi	r24, 0x1E	; 30
    35ae:	0e 94 db 08 	call	0x11b6	; 0x11b6 <XL_Gripper(char, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1091
        delay(50);
    35b2:	62 e3       	ldi	r22, 0x32	; 50
    35b4:	70 e0       	ldi	r23, 0x00	; 0
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1092
        XL_Gripper(31, 1023 - gripper_close + xl_error, 100);
    35be:	44 e6       	ldi	r20, 0x64	; 100
    35c0:	50 e0       	ldi	r21, 0x00	; 0
    35c2:	65 e4       	ldi	r22, 0x45	; 69
    35c4:	74 e0       	ldi	r23, 0x04	; 4
    35c6:	6e 19       	sub	r22, r14
    35c8:	7f 09       	sbc	r23, r15
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1111
      lcd.printf("gripper_open %d %4d", 10, gripper_open);
      if (start == 0) {
        EEPROM_write_int(gripper_open_address, gripper_open);
        XL_Gripper(30, gripper_open, 100);
        delay(50);
        XL_Gripper(31, 1023 - gripper_open + xl_error, 100);
    35ca:	8f e1       	ldi	r24, 0x1F	; 31
    35cc:	0e 94 db 08 	call	0x11b6	; 0x11b6 <XL_Gripper(char, int, int)>
    35d0:	95 cd       	rjmp	.-1238   	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1093
      if (start == 0) {
        EEPROM_write_int(gripper_close_address, gripper_close);
        XL_Gripper(30, gripper_close, 100);
        delay(50);
        XL_Gripper(31, 1023 - gripper_close + xl_error, 100);
      } else if (increase == 0) {
    35d2:	8a e0       	ldi	r24, 0x0A	; 10
    35d4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    35d8:	89 2b       	or	r24, r25
    35da:	81 f4       	brne	.+32     	; 0x35fc <menu_motor()+0x556>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1094
        delay(50);
    35dc:	62 e3       	ldi	r22, 0x32	; 50
    35de:	70 e0       	ldi	r23, 0x00	; 0
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1095
        if (gripper_close < 890)
    35e8:	3a e7       	ldi	r19, 0x7A	; 122
    35ea:	e3 16       	cp	r14, r19
    35ec:	33 e0       	ldi	r19, 0x03	; 3
    35ee:	f3 06       	cpc	r15, r19
    35f0:	0c f0       	brlt	.+2      	; 0x35f4 <menu_motor()+0x54e>
    35f2:	84 cd       	rjmp	.-1272   	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1096
          gripper_close += 5;
    35f4:	85 e0       	ldi	r24, 0x05	; 5
    35f6:	e8 0e       	add	r14, r24
    35f8:	f1 1c       	adc	r15, r1
    35fa:	80 cd       	rjmp	.-1280   	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1097
      } else if (decrease == 0) {
    35fc:	8b e0       	ldi	r24, 0x0B	; 11
    35fe:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    3602:	89 2b       	or	r24, r25
    3604:	09 f0       	breq	.+2      	; 0x3608 <menu_motor()+0x562>
    3606:	7a cd       	rjmp	.-1292   	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1098
        delay(50);
    3608:	62 e3       	ldi	r22, 0x32	; 50
    360a:	70 e0       	ldi	r23, 0x00	; 0
    360c:	80 e0       	ldi	r24, 0x00	; 0
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1100

        if (gripper_close > 570)
    3614:	9b e3       	ldi	r25, 0x3B	; 59
    3616:	e9 16       	cp	r14, r25
    3618:	92 e0       	ldi	r25, 0x02	; 2
    361a:	f9 06       	cpc	r15, r25
    361c:	0c f4       	brge	.+2      	; 0x3620 <menu_motor()+0x57a>
    361e:	6e cd       	rjmp	.-1316   	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1101
          gripper_close -= 5;
    3620:	25 e0       	ldi	r18, 0x05	; 5
    3622:	e2 1a       	sub	r14, r18
    3624:	f1 08       	sbc	r15, r1
    3626:	6a cd       	rjmp	.-1324   	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1103
      }
    } else if (page == 8)  // XL Gripper open 30 and 31
    3628:	88 30       	cpi	r24, 0x08	; 8
    362a:	09 f0       	breq	.+2      	; 0x362e <menu_motor()+0x588>
    362c:	67 cd       	rjmp	.-1330   	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1105
    {
      lcd.setCursor(0, 0);
    362e:	60 e0       	ldi	r22, 0x00	; 0
    3630:	80 e0       	ldi	r24, 0x00	; 0
    3632:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1106
      lcd.printf("gripper_open %d %4d", 10, gripper_open);
    3636:	1f 93       	push	r17
    3638:	0f 93       	push	r16
    363a:	1f 92       	push	r1
    363c:	8a e0       	ldi	r24, 0x0A	; 10
    363e:	8f 93       	push	r24
    3640:	8a eb       	ldi	r24, 0xBA	; 186
    3642:	93 e0       	ldi	r25, 0x03	; 3
    3644:	9f 93       	push	r25
    3646:	8f 93       	push	r24
    3648:	3f 92       	push	r3
    364a:	2f 92       	push	r2
    364c:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1107
      if (start == 0) {
    3650:	86 e0       	ldi	r24, 0x06	; 6
    3652:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    3656:	2d b7       	in	r18, 0x3d	; 61
    3658:	3e b7       	in	r19, 0x3e	; 62
    365a:	28 5f       	subi	r18, 0xF8	; 248
    365c:	3f 4f       	sbci	r19, 0xFF	; 255
    365e:	0f b6       	in	r0, 0x3f	; 63
    3660:	f8 94       	cli
    3662:	3e bf       	out	0x3e, r19	; 62
    3664:	0f be       	out	0x3f, r0	; 63
    3666:	2d bf       	out	0x3d, r18	; 61
    3668:	89 2b       	or	r24, r25
    366a:	c1 f4       	brne	.+48     	; 0x369c <menu_motor()+0x5f6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1108
        EEPROM_write_int(gripper_open_address, gripper_open);
    366c:	b8 01       	movw	r22, r16
    366e:	80 eb       	ldi	r24, 0xB0	; 176
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1109
        XL_Gripper(30, gripper_open, 100);
    3676:	44 e6       	ldi	r20, 0x64	; 100
    3678:	50 e0       	ldi	r21, 0x00	; 0
    367a:	b8 01       	movw	r22, r16
    367c:	8e e1       	ldi	r24, 0x1E	; 30
    367e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <XL_Gripper(char, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1110
        delay(50);
    3682:	62 e3       	ldi	r22, 0x32	; 50
    3684:	70 e0       	ldi	r23, 0x00	; 0
    3686:	80 e0       	ldi	r24, 0x00	; 0
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1111
        XL_Gripper(31, 1023 - gripper_open + xl_error, 100);
    368e:	44 e6       	ldi	r20, 0x64	; 100
    3690:	50 e0       	ldi	r21, 0x00	; 0
    3692:	65 e4       	ldi	r22, 0x45	; 69
    3694:	74 e0       	ldi	r23, 0x04	; 4
    3696:	60 1b       	sub	r22, r16
    3698:	71 0b       	sbc	r23, r17
    369a:	97 cf       	rjmp	.-210    	; 0x35ca <menu_motor()+0x524>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1112
      } else if (increase == 0) {
    369c:	8a e0       	ldi	r24, 0x0A	; 10
    369e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    36a2:	89 2b       	or	r24, r25
    36a4:	71 f4       	brne	.+28     	; 0x36c2 <menu_motor()+0x61c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1113
        delay(50);
    36a6:	62 e3       	ldi	r22, 0x32	; 50
    36a8:	70 e0       	ldi	r23, 0x00	; 0
    36aa:	80 e0       	ldi	r24, 0x00	; 0
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1114
        if (gripper_open < 890)
    36b2:	0a 37       	cpi	r16, 0x7A	; 122
    36b4:	33 e0       	ldi	r19, 0x03	; 3
    36b6:	13 07       	cpc	r17, r19
    36b8:	0c f0       	brlt	.+2      	; 0x36bc <menu_motor()+0x616>
    36ba:	20 cd       	rjmp	.-1472   	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1115
          gripper_open += 5;
    36bc:	0b 5f       	subi	r16, 0xFB	; 251
    36be:	1f 4f       	sbci	r17, 0xFF	; 255
    36c0:	1d cd       	rjmp	.-1478   	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1116
      } else if (decrease == 0) {
    36c2:	8b e0       	ldi	r24, 0x0B	; 11
    36c4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    36c8:	89 2b       	or	r24, r25
    36ca:	09 f0       	breq	.+2      	; 0x36ce <menu_motor()+0x628>
    36cc:	17 cd       	rjmp	.-1490   	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1117
        delay(50);
    36ce:	62 e3       	ldi	r22, 0x32	; 50
    36d0:	70 e0       	ldi	r23, 0x00	; 0
    36d2:	80 e0       	ldi	r24, 0x00	; 0
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1119

        if (gripper_open > 570)
    36da:	0b 33       	cpi	r16, 0x3B	; 59
    36dc:	82 e0       	ldi	r24, 0x02	; 2
    36de:	18 07       	cpc	r17, r24
    36e0:	0c f4       	brge	.+2      	; 0x36e4 <menu_motor()+0x63e>
    36e2:	0c cd       	rjmp	.-1512   	; 0x30fc <menu_motor()+0x56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1120
          gripper_open -= 5;
    36e4:	05 50       	subi	r16, 0x05	; 5
    36e6:	11 09       	sbc	r17, r1
    36e8:	09 cd       	rjmp	.-1518   	; 0x30fc <menu_motor()+0x56>

000036ea <menu_color()>:
menu_color():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1128
  }
}

void menu_color(void) {
  static char page = 1, last_page = 8;
  lcd.clear();
    36ea:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1309
      lcd.print("APDS Front: ");
      lcd.setCursor(0, 1);
      lcd.print("  RED  GRN  BLU ");

      lcd.setCursor(0, 2);
      lcd.printf(" %4d %4d %4d %4d", red, green, blue, clear);
    36ee:	87 e0       	ldi	r24, 0x07	; 7
    36f0:	88 2e       	mov	r8, r24
    36f2:	84 e0       	ldi	r24, 0x04	; 4
    36f4:	98 2e       	mov	r9, r24
    36f6:	ce eb       	ldi	r28, 0xBE	; 190
    36f8:	da e0       	ldi	r29, 0x0A	; 10
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1321
        lcd.printf("M%4d %4d %4d %4d ", EEPROM_read_int(red_front_r), EEPROM_read_int(red_front_g), EEPROM_read_int(red_front_b), EEPROM_read_int(red_front_c));
      } else if (color_F == GREEN) {
        lcd.setCursor(12, 0);
        lcd.print("GRN ");
        lcd.setCursor(0, 3);
        lcd.printf("M%4d %4d %4d %4d ", EEPROM_read_int(green_front_r), EEPROM_read_int(green_front_g), EEPROM_read_int(green_front_b), EEPROM_read_int(green_front_c));
    36fa:	9b e8       	ldi	r25, 0x8B	; 139
    36fc:	e9 2e       	mov	r14, r25
    36fe:	94 e0       	ldi	r25, 0x04	; 4
    3700:	f9 2e       	mov	r15, r25
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1284

      lcd.setCursor(0, 1);
      lcd.print("  RED  GRN  BLU ");

      lcd.setCursor(0, 2);
      lcd.printf("L%4d %4d %4d ", EEPROM_read_int(yellow_left_r), EEPROM_read_int(yellow_left_g), EEPROM_read_int(yellow_left_b));
    3702:	2d ec       	ldi	r18, 0xCD	; 205
    3704:	c2 2e       	mov	r12, r18
    3706:	24 e0       	ldi	r18, 0x04	; 4
    3708:	d2 2e       	mov	r13, r18
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1287

      lcd.setCursor(0, 3);
      lcd.printf("R%4d %4d %4d ", EEPROM_read_int(yellow_right_r), EEPROM_read_int(yellow_right_g), EEPROM_read_int(yellow_right_b));
    370a:	3b ed       	ldi	r19, 0xDB	; 219
    370c:	a3 2e       	mov	r10, r19
    370e:	34 e0       	ldi	r19, 0x04	; 4
    3710:	b3 2e       	mov	r11, r19
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1229
        lcd.printf("M%4d %4d %4d ", EEPROM_read_int(yellow_right_r), EEPROM_read_int(yellow_right_g), EEPROM_read_int(yellow_right_b), EEPROM_read_int(yellow_right_c));
      } else if (color_R == SILVER) {
        lcd.setCursor(12, 0);
        lcd.print("SIL ");
        lcd.setCursor(0, 3);
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(silver_right_r), EEPROM_read_int(silver_right_g), EEPROM_read_int(silver_right_b), EEPROM_read_int(silver_right_c));
    3712:	0f e1       	ldi	r16, 0x1F	; 31
    3714:	14 e0       	ldi	r17, 0x04	; 4
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1130

void menu_color(void) {
  static char page = 1, last_page = 8;
  lcd.clear();
  while (1) {
    if (next_page == 0) {
    3716:	88 e0       	ldi	r24, 0x08	; 8
    3718:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    371c:	89 2b       	or	r24, r25
    371e:	79 f4       	brne	.+30     	; 0x373e <menu_color()+0x54>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1131
      while (next_page == 0)
    3720:	88 e0       	ldi	r24, 0x08	; 8
    3722:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    3726:	89 2b       	or	r24, r25
    3728:	d9 f3       	breq	.-10     	; 0x3720 <menu_color()+0x36>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1133
        ;
      page++;
    372a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <menu_color()::page>
    372e:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1134
      if (page > last_page)
    3730:	89 30       	cpi	r24, 0x09	; 9
    3732:	0c f0       	brlt	.+2      	; 0x3736 <menu_color()+0x4c>
    3734:	a8 c0       	rjmp	.+336    	; 0x3886 <menu_color()+0x19c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1133
  lcd.clear();
  while (1) {
    if (next_page == 0) {
      while (next_page == 0)
        ;
      page++;
    3736:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <menu_color()::page>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1136
      if (page > last_page)
        page = 1;
      lcd.clear();
    373a:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1138
    }
    if (previuse_page == 0) {
    373e:	89 e0       	ldi	r24, 0x09	; 9
    3740:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    3744:	89 2b       	or	r24, r25
    3746:	71 f4       	brne	.+28     	; 0x3764 <menu_color()+0x7a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1139
      while (previuse_page == 0)
    3748:	89 e0       	ldi	r24, 0x09	; 9
    374a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    374e:	89 2b       	or	r24, r25
    3750:	d9 f3       	breq	.-10     	; 0x3748 <menu_color()+0x5e>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1141
        ;
      page--;
    3752:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <menu_color()::page>
    3756:	81 50       	subi	r24, 0x01	; 1
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1142
      if (page == 0)
    3758:	09 f4       	brne	.+2      	; 0x375c <menu_color()+0x72>
    375a:	99 c0       	rjmp	.+306    	; 0x388e <menu_color()+0x1a4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1143
        page = last_page;
    375c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <menu_color()::page>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1144
      lcd.clear();
    3760:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1146
    }
    if (increase == 0)
    3764:	8a e0       	ldi	r24, 0x0A	; 10
    3766:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    376a:	89 2b       	or	r24, r25
    376c:	09 f0       	breq	.+2      	; 0x3770 <menu_color()+0x86>
    376e:	91 c0       	rjmp	.+290    	; 0x3892 <menu_color()+0x1a8>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1147
      go(40, 40);
    3770:	68 e2       	ldi	r22, 0x28	; 40
    3772:	70 e0       	ldi	r23, 0x00	; 0
    3774:	88 e2       	ldi	r24, 0x28	; 40
    3776:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1151
    else if (decrease == 0)
      go(-40, -40);
    else
      go(0, 0);
    3778:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1153

    if (page == 1) {
    377c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <menu_color()::page>
    3780:	81 30       	cpi	r24, 0x01	; 1
    3782:	09 f0       	breq	.+2      	; 0x3786 <menu_color()+0x9c>
    3784:	a8 c1       	rjmp	.+848    	; 0x3ad6 <menu_color()+0x3ec>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1154
      lcd.setCursor(0, 0);
    3786:	60 e0       	ldi	r22, 0x00	; 0
    3788:	80 e0       	ldi	r24, 0x00	; 0
    378a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1155
      lcd.print("APDS left: ");
    378e:	86 ee       	ldi	r24, 0xE6	; 230
    3790:	93 e0       	ldi	r25, 0x03	; 3
    3792:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1157

      lcd.setCursor(0, 1);
    3796:	61 e0       	ldi	r22, 0x01	; 1
    3798:	80 e0       	ldi	r24, 0x00	; 0
    379a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1158
      lcd.print("  RED  GRN  BLU  CLR");
    379e:	82 ef       	ldi	r24, 0xF2	; 242
    37a0:	93 e0       	ldi	r25, 0x03	; 3
    37a2:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1160

      lcd.setCursor(0, 2);
    37a6:	62 e0       	ldi	r22, 0x02	; 2
    37a8:	80 e0       	ldi	r24, 0x00	; 0
    37aa:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1161
      lcd.printf(" %4d %4d %4d %4d", red, green, blue, clear);
    37ae:	80 91 c8 08 	lds	r24, 0x08C8	; 0x8008c8 <clear+0x1>
    37b2:	8f 93       	push	r24
    37b4:	80 91 c7 08 	lds	r24, 0x08C7	; 0x8008c7 <clear>
    37b8:	8f 93       	push	r24
    37ba:	80 91 ca 08 	lds	r24, 0x08CA	; 0x8008ca <blue+0x1>
    37be:	8f 93       	push	r24
    37c0:	80 91 c9 08 	lds	r24, 0x08C9	; 0x8008c9 <blue>
    37c4:	8f 93       	push	r24
    37c6:	80 91 cc 08 	lds	r24, 0x08CC	; 0x8008cc <green+0x1>
    37ca:	8f 93       	push	r24
    37cc:	80 91 cb 08 	lds	r24, 0x08CB	; 0x8008cb <green>
    37d0:	8f 93       	push	r24
    37d2:	80 91 ce 08 	lds	r24, 0x08CE	; 0x8008ce <red+0x1>
    37d6:	8f 93       	push	r24
    37d8:	80 91 cd 08 	lds	r24, 0x08CD	; 0x8008cd <red>
    37dc:	8f 93       	push	r24
    37de:	9f 92       	push	r9
    37e0:	8f 92       	push	r8
    37e2:	df 93       	push	r29
    37e4:	cf 93       	push	r28
    37e6:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1162
      delay(100);
    37ea:	64 e6       	ldi	r22, 0x64	; 100
    37ec:	70 e0       	ldi	r23, 0x00	; 0
    37ee:	80 e0       	ldi	r24, 0x00	; 0
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1163
      if (color_L == RED) {
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    37fc:	2d b7       	in	r18, 0x3d	; 61
    37fe:	3e b7       	in	r19, 0x3e	; 62
    3800:	24 5f       	subi	r18, 0xF4	; 244
    3802:	3f 4f       	sbci	r19, 0xFF	; 255
    3804:	0f b6       	in	r0, 0x3f	; 63
    3806:	f8 94       	cli
    3808:	3e bf       	out	0x3e, r19	; 62
    380a:	0f be       	out	0x3f, r0	; 63
    380c:	2d bf       	out	0x3d, r18	; 61
    380e:	81 11       	cpse	r24, r1
    3810:	4f c0       	rjmp	.+158    	; 0x38b0 <menu_color()+0x1c6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1164
        lcd.setCursor(12, 0);
    3812:	60 e0       	ldi	r22, 0x00	; 0
    3814:	8c e0       	ldi	r24, 0x0C	; 12
    3816:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1165
        lcd.print("RED   ");
    381a:	88 e1       	ldi	r24, 0x18	; 24
    381c:	94 e0       	ldi	r25, 0x04	; 4
    381e:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1166
        lcd.setCursor(0, 3);
    3822:	63 e0       	ldi	r22, 0x03	; 3
    3824:	80 e0       	ldi	r24, 0x00	; 0
    3826:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1167
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(red_left_r), EEPROM_read_int(red_left_g), EEPROM_read_int(red_left_b), EEPROM_read_int(red_left_c));
    382a:	8a e1       	ldi	r24, 0x1A	; 26
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3832:	38 2e       	mov	r3, r24
    3834:	29 2e       	mov	r2, r25
    3836:	88 e1       	ldi	r24, 0x18	; 24
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    383e:	58 2e       	mov	r5, r24
    3840:	49 2e       	mov	r4, r25
    3842:	86 e1       	ldi	r24, 0x16	; 22
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    384a:	78 2e       	mov	r7, r24
    384c:	69 2e       	mov	r6, r25
    384e:	84 e1       	ldi	r24, 0x14	; 20
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3856:	2f 92       	push	r2
    3858:	3f 92       	push	r3
    385a:	4f 92       	push	r4
    385c:	5f 92       	push	r5
    385e:	6f 92       	push	r6
    3860:	7f 92       	push	r7
    3862:	9f 93       	push	r25
    3864:	8f 93       	push	r24
    3866:	1f 93       	push	r17
    3868:	0f 93       	push	r16
    386a:	df 93       	push	r29
    386c:	cf 93       	push	r28
    386e:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    3872:	2d b7       	in	r18, 0x3d	; 61
    3874:	3e b7       	in	r19, 0x3e	; 62
    3876:	24 5f       	subi	r18, 0xF4	; 244
    3878:	3f 4f       	sbci	r19, 0xFF	; 255
    387a:	0f b6       	in	r0, 0x3f	; 63
    387c:	f8 94       	cli
    387e:	3e bf       	out	0x3e, r19	; 62
    3880:	0f be       	out	0x3f, r0	; 63
    3882:	2d bf       	out	0x3d, r18	; 61
    3884:	48 cf       	rjmp	.-368    	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1135
    if (next_page == 0) {
      while (next_page == 0)
        ;
      page++;
      if (page > last_page)
        page = 1;
    3886:	21 e0       	ldi	r18, 0x01	; 1
    3888:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <menu_color()::page>
    388c:	56 cf       	rjmp	.-340    	; 0x373a <menu_color()+0x50>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1143
    if (previuse_page == 0) {
      while (previuse_page == 0)
        ;
      page--;
      if (page == 0)
        page = last_page;
    388e:	88 e0       	ldi	r24, 0x08	; 8
    3890:	65 cf       	rjmp	.-310    	; 0x375c <menu_color()+0x72>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1148
      lcd.clear();
    }
    if (increase == 0)
      go(40, 40);
    else if (decrease == 0)
    3892:	8b e0       	ldi	r24, 0x0B	; 11
    3894:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    3898:	89 2b       	or	r24, r25
    389a:	29 f4       	brne	.+10     	; 0x38a6 <menu_color()+0x1bc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1149
      go(-40, -40);
    389c:	68 ed       	ldi	r22, 0xD8	; 216
    389e:	7f ef       	ldi	r23, 0xFF	; 255
    38a0:	88 ed       	ldi	r24, 0xD8	; 216
    38a2:	9f ef       	ldi	r25, 0xFF	; 255
    38a4:	69 cf       	rjmp	.-302    	; 0x3778 <menu_color()+0x8e>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1151
    else
      go(0, 0);
    38a6:	70 e0       	ldi	r23, 0x00	; 0
    38a8:	60 e0       	ldi	r22, 0x00	; 0
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	64 cf       	rjmp	.-312    	; 0x3778 <menu_color()+0x8e>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1168
      if (color_L == RED) {
        lcd.setCursor(12, 0);
        lcd.print("RED   ");
        lcd.setCursor(0, 3);
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(red_left_r), EEPROM_read_int(red_left_g), EEPROM_read_int(red_left_b), EEPROM_read_int(red_left_c));
      } else if (color_L == GREEN) {
    38b0:	81 e0       	ldi	r24, 0x01	; 1
    38b2:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    38b6:	81 30       	cpi	r24, 0x01	; 1
    38b8:	d1 f5       	brne	.+116    	; 0x392e <menu_color()+0x244>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1169
        lcd.setCursor(12, 0);
    38ba:	60 e0       	ldi	r22, 0x00	; 0
    38bc:	8c e0       	ldi	r24, 0x0C	; 12
    38be:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1170
        lcd.print("GREEN ");
    38c2:	80 e3       	ldi	r24, 0x30	; 48
    38c4:	94 e0       	ldi	r25, 0x04	; 4
    38c6:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1171
        lcd.setCursor(0, 3);
    38ca:	63 e0       	ldi	r22, 0x03	; 3
    38cc:	80 e0       	ldi	r24, 0x00	; 0
    38ce:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1172
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(green_left_r), EEPROM_read_int(green_left_g), EEPROM_read_int(green_left_b), EEPROM_read_int(green_left_c));
    38d2:	82 e2       	ldi	r24, 0x22	; 34
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    38da:	38 2e       	mov	r3, r24
    38dc:	29 2e       	mov	r2, r25
    38de:	80 e2       	ldi	r24, 0x20	; 32
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    38e6:	58 2e       	mov	r5, r24
    38e8:	49 2e       	mov	r4, r25
    38ea:	8e e1       	ldi	r24, 0x1E	; 30
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    38f2:	78 2e       	mov	r7, r24
    38f4:	69 2e       	mov	r6, r25
    38f6:	8c e1       	ldi	r24, 0x1C	; 28
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    38fe:	2f 92       	push	r2
    3900:	3f 92       	push	r3
    3902:	4f 92       	push	r4
    3904:	5f 92       	push	r5
    3906:	6f 92       	push	r6
    3908:	7f 92       	push	r7
    390a:	9f 93       	push	r25
    390c:	8f 93       	push	r24
    390e:	1f 93       	push	r17
    3910:	0f 93       	push	r16
    3912:	df 93       	push	r29
    3914:	cf 93       	push	r28
    3916:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    391a:	2d b7       	in	r18, 0x3d	; 61
    391c:	3e b7       	in	r19, 0x3e	; 62
    391e:	24 5f       	subi	r18, 0xF4	; 244
    3920:	3f 4f       	sbci	r19, 0xFF	; 255
    3922:	0f b6       	in	r0, 0x3f	; 63
    3924:	f8 94       	cli
    3926:	3e bf       	out	0x3e, r19	; 62
    3928:	0f be       	out	0x3f, r0	; 63
    392a:	2d bf       	out	0x3d, r18	; 61
    392c:	f4 ce       	rjmp	.-536    	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1173
      } else if (color_L == BLUE) {
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    3934:	82 30       	cpi	r24, 0x02	; 2
    3936:	d1 f5       	brne	.+116    	; 0x39ac <menu_color()+0x2c2>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1174
        lcd.setCursor(12, 0);
    3938:	60 e0       	ldi	r22, 0x00	; 0
    393a:	8c e0       	ldi	r24, 0x0C	; 12
    393c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1175
        lcd.print("BLUE  ");
    3940:	87 e3       	ldi	r24, 0x37	; 55
    3942:	94 e0       	ldi	r25, 0x04	; 4
    3944:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1176
        lcd.setCursor(0, 3);
    3948:	63 e0       	ldi	r22, 0x03	; 3
    394a:	80 e0       	ldi	r24, 0x00	; 0
    394c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1177
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(blue_left_r), EEPROM_read_int(blue_left_g), EEPROM_read_int(blue_left_b), EEPROM_read_int(blue_left_c));
    3950:	8a e2       	ldi	r24, 0x2A	; 42
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3958:	38 2e       	mov	r3, r24
    395a:	29 2e       	mov	r2, r25
    395c:	88 e2       	ldi	r24, 0x28	; 40
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3964:	58 2e       	mov	r5, r24
    3966:	49 2e       	mov	r4, r25
    3968:	86 e2       	ldi	r24, 0x26	; 38
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3970:	78 2e       	mov	r7, r24
    3972:	69 2e       	mov	r6, r25
    3974:	84 e2       	ldi	r24, 0x24	; 36
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    397c:	2f 92       	push	r2
    397e:	3f 92       	push	r3
    3980:	4f 92       	push	r4
    3982:	5f 92       	push	r5
    3984:	6f 92       	push	r6
    3986:	7f 92       	push	r7
    3988:	9f 93       	push	r25
    398a:	8f 93       	push	r24
    398c:	1f 93       	push	r17
    398e:	0f 93       	push	r16
    3990:	df 93       	push	r29
    3992:	cf 93       	push	r28
    3994:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    3998:	2d b7       	in	r18, 0x3d	; 61
    399a:	3e b7       	in	r19, 0x3e	; 62
    399c:	24 5f       	subi	r18, 0xF4	; 244
    399e:	3f 4f       	sbci	r19, 0xFF	; 255
    39a0:	0f b6       	in	r0, 0x3f	; 63
    39a2:	f8 94       	cli
    39a4:	3e bf       	out	0x3e, r19	; 62
    39a6:	0f be       	out	0x3f, r0	; 63
    39a8:	2d bf       	out	0x3d, r18	; 61
    39aa:	b5 ce       	rjmp	.-662    	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1178
      } else if (color_L == YELLOW) {
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    39b2:	84 30       	cpi	r24, 0x04	; 4
    39b4:	d1 f5       	brne	.+116    	; 0x3a2a <menu_color()+0x340>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1179
        lcd.setCursor(12, 0);
    39b6:	60 e0       	ldi	r22, 0x00	; 0
    39b8:	8c e0       	ldi	r24, 0x0C	; 12
    39ba:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1180
        lcd.print("YELLOW");
    39be:	8e e3       	ldi	r24, 0x3E	; 62
    39c0:	94 e0       	ldi	r25, 0x04	; 4
    39c2:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1181
        lcd.setCursor(0, 3);
    39c6:	63 e0       	ldi	r22, 0x03	; 3
    39c8:	80 e0       	ldi	r24, 0x00	; 0
    39ca:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1182
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(yellow_left_r), EEPROM_read_int(yellow_left_g), EEPROM_read_int(yellow_left_b), EEPROM_read_int(yellow_left_c));
    39ce:	82 e3       	ldi	r24, 0x32	; 50
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    39d6:	38 2e       	mov	r3, r24
    39d8:	29 2e       	mov	r2, r25
    39da:	80 e3       	ldi	r24, 0x30	; 48
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    39e2:	58 2e       	mov	r5, r24
    39e4:	49 2e       	mov	r4, r25
    39e6:	8e e2       	ldi	r24, 0x2E	; 46
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    39ee:	78 2e       	mov	r7, r24
    39f0:	69 2e       	mov	r6, r25
    39f2:	8c e2       	ldi	r24, 0x2C	; 44
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    39fa:	2f 92       	push	r2
    39fc:	3f 92       	push	r3
    39fe:	4f 92       	push	r4
    3a00:	5f 92       	push	r5
    3a02:	6f 92       	push	r6
    3a04:	7f 92       	push	r7
    3a06:	9f 93       	push	r25
    3a08:	8f 93       	push	r24
    3a0a:	1f 93       	push	r17
    3a0c:	0f 93       	push	r16
    3a0e:	df 93       	push	r29
    3a10:	cf 93       	push	r28
    3a12:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    3a16:	2d b7       	in	r18, 0x3d	; 61
    3a18:	3e b7       	in	r19, 0x3e	; 62
    3a1a:	24 5f       	subi	r18, 0xF4	; 244
    3a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a1e:	0f b6       	in	r0, 0x3f	; 63
    3a20:	f8 94       	cli
    3a22:	3e bf       	out	0x3e, r19	; 62
    3a24:	0f be       	out	0x3f, r0	; 63
    3a26:	2d bf       	out	0x3d, r18	; 61
    3a28:	76 ce       	rjmp	.-788    	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1183
      } else if (color_L == SILVER) {
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
    3a2c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    3a30:	85 30       	cpi	r24, 0x05	; 5
    3a32:	d1 f5       	brne	.+116    	; 0x3aa8 <menu_color()+0x3be>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1184
        lcd.setCursor(12, 0);
    3a34:	60 e0       	ldi	r22, 0x00	; 0
    3a36:	8c e0       	ldi	r24, 0x0C	; 12
    3a38:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1185
        lcd.print("SILVER");
    3a3c:	85 e4       	ldi	r24, 0x45	; 69
    3a3e:	94 e0       	ldi	r25, 0x04	; 4
    3a40:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1186
        lcd.setCursor(0, 3);
    3a44:	63 e0       	ldi	r22, 0x03	; 3
    3a46:	80 e0       	ldi	r24, 0x00	; 0
    3a48:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1187
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(silver_left_r), EEPROM_read_int(silver_left_g), EEPROM_read_int(silver_left_b), EEPROM_read_int(silver_left_c));
    3a4c:	8a e3       	ldi	r24, 0x3A	; 58
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3a54:	38 2e       	mov	r3, r24
    3a56:	29 2e       	mov	r2, r25
    3a58:	88 e3       	ldi	r24, 0x38	; 56
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3a60:	58 2e       	mov	r5, r24
    3a62:	49 2e       	mov	r4, r25
    3a64:	86 e3       	ldi	r24, 0x36	; 54
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3a6c:	78 2e       	mov	r7, r24
    3a6e:	69 2e       	mov	r6, r25
    3a70:	84 e3       	ldi	r24, 0x34	; 52
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3a78:	2f 92       	push	r2
    3a7a:	3f 92       	push	r3
    3a7c:	4f 92       	push	r4
    3a7e:	5f 92       	push	r5
    3a80:	6f 92       	push	r6
    3a82:	7f 92       	push	r7
    3a84:	9f 93       	push	r25
    3a86:	8f 93       	push	r24
    3a88:	1f 93       	push	r17
    3a8a:	0f 93       	push	r16
    3a8c:	df 93       	push	r29
    3a8e:	cf 93       	push	r28
    3a90:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    3a94:	2d b7       	in	r18, 0x3d	; 61
    3a96:	3e b7       	in	r19, 0x3e	; 62
    3a98:	24 5f       	subi	r18, 0xF4	; 244
    3a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a9c:	0f b6       	in	r0, 0x3f	; 63
    3a9e:	f8 94       	cli
    3aa0:	3e bf       	out	0x3e, r19	; 62
    3aa2:	0f be       	out	0x3f, r0	; 63
    3aa4:	2d bf       	out	0x3d, r18	; 61
    3aa6:	37 ce       	rjmp	.-914    	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1188
      } else if (color_L == WHITE) {
    3aa8:	81 e0       	ldi	r24, 0x01	; 1
    3aaa:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    3aae:	87 30       	cpi	r24, 0x07	; 7
    3ab0:	09 f0       	breq	.+2      	; 0x3ab4 <menu_color()+0x3ca>
    3ab2:	31 ce       	rjmp	.-926    	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1189
        lcd.setCursor(12, 0);
    3ab4:	60 e0       	ldi	r22, 0x00	; 0
    3ab6:	8c e0       	ldi	r24, 0x0C	; 12
    3ab8:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1190
        lcd.print("WHITE ");
    3abc:	8c e4       	ldi	r24, 0x4C	; 76
    3abe:	94 e0       	ldi	r25, 0x04	; 4
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1232
        lcd.print("SIL ");
        lcd.setCursor(0, 3);
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(silver_right_r), EEPROM_read_int(silver_right_g), EEPROM_read_int(silver_right_b), EEPROM_read_int(silver_right_c));
      } else if (color_R == WHITE) {
        lcd.setCursor(12, 0);
        lcd.print("WHT ");
    3ac0:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1233
        lcd.setCursor(0, 3);
    3ac4:	63 e0       	ldi	r22, 0x03	; 3
    3ac6:	80 e0       	ldi	r24, 0x00	; 0
    3ac8:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1234
        lcd.print("                    ");
    3acc:	83 e5       	ldi	r24, 0x53	; 83
    3ace:	94 e0       	ldi	r25, 0x04	; 4
    3ad0:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
    3ad4:	20 ce       	rjmp	.-960    	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1194
        lcd.setCursor(12, 0);
        lcd.print("WHITE ");
        lcd.setCursor(0, 3);
        lcd.print("                    ");
      }
    } else if (page == 2)  // APDS Right
    3ad6:	82 30       	cpi	r24, 0x02	; 2
    3ad8:	09 f0       	breq	.+2      	; 0x3adc <menu_color()+0x3f2>
    3ada:	89 c1       	rjmp	.+786    	; 0x3dee <menu_color()+0x704>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1196
    {
      lcd.setCursor(0, 0);
    3adc:	60 e0       	ldi	r22, 0x00	; 0
    3ade:	80 e0       	ldi	r24, 0x00	; 0
    3ae0:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1197
      lcd.print("APDS Right: ");
    3ae4:	88 e6       	ldi	r24, 0x68	; 104
    3ae6:	94 e0       	ldi	r25, 0x04	; 4
    3ae8:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1198
      lcd.setCursor(0, 1);
    3aec:	61 e0       	ldi	r22, 0x01	; 1
    3aee:	80 e0       	ldi	r24, 0x00	; 0
    3af0:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1199
      lcd.print("  RED  GRN  BLU ");
    3af4:	85 e7       	ldi	r24, 0x75	; 117
    3af6:	94 e0       	ldi	r25, 0x04	; 4
    3af8:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1201

      lcd.setCursor(0, 2);
    3afc:	62 e0       	ldi	r22, 0x02	; 2
    3afe:	80 e0       	ldi	r24, 0x00	; 0
    3b00:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1202
      lcd.printf(" %4d %4d %4d %4d", red, green, blue, clear);
    3b04:	80 91 c8 08 	lds	r24, 0x08C8	; 0x8008c8 <clear+0x1>
    3b08:	8f 93       	push	r24
    3b0a:	80 91 c7 08 	lds	r24, 0x08C7	; 0x8008c7 <clear>
    3b0e:	8f 93       	push	r24
    3b10:	80 91 ca 08 	lds	r24, 0x08CA	; 0x8008ca <blue+0x1>
    3b14:	8f 93       	push	r24
    3b16:	80 91 c9 08 	lds	r24, 0x08C9	; 0x8008c9 <blue>
    3b1a:	8f 93       	push	r24
    3b1c:	80 91 cc 08 	lds	r24, 0x08CC	; 0x8008cc <green+0x1>
    3b20:	8f 93       	push	r24
    3b22:	80 91 cb 08 	lds	r24, 0x08CB	; 0x8008cb <green>
    3b26:	8f 93       	push	r24
    3b28:	80 91 ce 08 	lds	r24, 0x08CE	; 0x8008ce <red+0x1>
    3b2c:	8f 93       	push	r24
    3b2e:	80 91 cd 08 	lds	r24, 0x08CD	; 0x8008cd <red>
    3b32:	8f 93       	push	r24
    3b34:	9f 92       	push	r9
    3b36:	8f 92       	push	r8
    3b38:	df 93       	push	r29
    3b3a:	cf 93       	push	r28
    3b3c:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1204

      lcd.setCursor(12, 0);
    3b40:	60 e0       	ldi	r22, 0x00	; 0
    3b42:	8c e0       	ldi	r24, 0x0C	; 12
    3b44:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1205
      if (color_R == RED) {
    3b48:	82 e0       	ldi	r24, 0x02	; 2
    3b4a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    3b4e:	2d b7       	in	r18, 0x3d	; 61
    3b50:	3e b7       	in	r19, 0x3e	; 62
    3b52:	24 5f       	subi	r18, 0xF4	; 244
    3b54:	3f 4f       	sbci	r19, 0xFF	; 255
    3b56:	0f b6       	in	r0, 0x3f	; 63
    3b58:	f8 94       	cli
    3b5a:	3e bf       	out	0x3e, r19	; 62
    3b5c:	0f be       	out	0x3f, r0	; 63
    3b5e:	2d bf       	out	0x3d, r18	; 61
    3b60:	81 11       	cpse	r24, r1
    3b62:	3a c0       	rjmp	.+116    	; 0x3bd8 <menu_color()+0x4ee>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1206
        lcd.setCursor(12, 0);
    3b64:	60 e0       	ldi	r22, 0x00	; 0
    3b66:	8c e0       	ldi	r24, 0x0C	; 12
    3b68:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1207
        lcd.print("RED ");
    3b6c:	86 e8       	ldi	r24, 0x86	; 134
    3b6e:	94 e0       	ldi	r25, 0x04	; 4
    3b70:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1208
        lcd.setCursor(0, 3);
    3b74:	63 e0       	ldi	r22, 0x03	; 3
    3b76:	80 e0       	ldi	r24, 0x00	; 0
    3b78:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1209
        lcd.printf("M%4d %4d %4d %4d ", EEPROM_read_int(red_right_r), EEPROM_read_int(red_right_g), EEPROM_read_int(red_right_b), EEPROM_read_int(red_right_c));
    3b7c:	82 e4       	ldi	r24, 0x42	; 66
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3b84:	38 2e       	mov	r3, r24
    3b86:	29 2e       	mov	r2, r25
    3b88:	80 e4       	ldi	r24, 0x40	; 64
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3b90:	58 2e       	mov	r5, r24
    3b92:	49 2e       	mov	r4, r25
    3b94:	8e e3       	ldi	r24, 0x3E	; 62
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3b9c:	78 2e       	mov	r7, r24
    3b9e:	69 2e       	mov	r6, r25
    3ba0:	8c e3       	ldi	r24, 0x3C	; 60
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3ba8:	2f 92       	push	r2
    3baa:	3f 92       	push	r3
    3bac:	4f 92       	push	r4
    3bae:	5f 92       	push	r5
    3bb0:	6f 92       	push	r6
    3bb2:	7f 92       	push	r7
    3bb4:	9f 93       	push	r25
    3bb6:	8f 93       	push	r24
    3bb8:	ff 92       	push	r15
    3bba:	ef 92       	push	r14
    3bbc:	df 93       	push	r29
    3bbe:	cf 93       	push	r28
    3bc0:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    3bc4:	2d b7       	in	r18, 0x3d	; 61
    3bc6:	3e b7       	in	r19, 0x3e	; 62
    3bc8:	24 5f       	subi	r18, 0xF4	; 244
    3bca:	3f 4f       	sbci	r19, 0xFF	; 255
    3bcc:	0f b6       	in	r0, 0x3f	; 63
    3bce:	f8 94       	cli
    3bd0:	3e bf       	out	0x3e, r19	; 62
    3bd2:	0f be       	out	0x3f, r0	; 63
    3bd4:	2d bf       	out	0x3d, r18	; 61
    3bd6:	9f cd       	rjmp	.-1218   	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1210
      } else if (color_R == GREEN) {
    3bd8:	82 e0       	ldi	r24, 0x02	; 2
    3bda:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    3bde:	81 30       	cpi	r24, 0x01	; 1
    3be0:	d1 f5       	brne	.+116    	; 0x3c56 <menu_color()+0x56c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1211
        lcd.setCursor(12, 0);
    3be2:	60 e0       	ldi	r22, 0x00	; 0
    3be4:	8c e0       	ldi	r24, 0x0C	; 12
    3be6:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1212
        lcd.print("GRN ");
    3bea:	8d e9       	ldi	r24, 0x9D	; 157
    3bec:	94 e0       	ldi	r25, 0x04	; 4
    3bee:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1213
        lcd.setCursor(0, 3);
    3bf2:	63 e0       	ldi	r22, 0x03	; 3
    3bf4:	80 e0       	ldi	r24, 0x00	; 0
    3bf6:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1214
        lcd.printf("M%4d %4d %4d %4d ", EEPROM_read_int(green_right_r), EEPROM_read_int(green_right_g), EEPROM_read_int(green_right_b), EEPROM_read_int(green_right_c));
    3bfa:	8a e4       	ldi	r24, 0x4A	; 74
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3c02:	38 2e       	mov	r3, r24
    3c04:	29 2e       	mov	r2, r25
    3c06:	88 e4       	ldi	r24, 0x48	; 72
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3c0e:	58 2e       	mov	r5, r24
    3c10:	49 2e       	mov	r4, r25
    3c12:	86 e4       	ldi	r24, 0x46	; 70
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3c1a:	78 2e       	mov	r7, r24
    3c1c:	69 2e       	mov	r6, r25
    3c1e:	84 e4       	ldi	r24, 0x44	; 68
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3c26:	2f 92       	push	r2
    3c28:	3f 92       	push	r3
    3c2a:	4f 92       	push	r4
    3c2c:	5f 92       	push	r5
    3c2e:	6f 92       	push	r6
    3c30:	7f 92       	push	r7
    3c32:	9f 93       	push	r25
    3c34:	8f 93       	push	r24
    3c36:	ff 92       	push	r15
    3c38:	ef 92       	push	r14
    3c3a:	df 93       	push	r29
    3c3c:	cf 93       	push	r28
    3c3e:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    3c42:	2d b7       	in	r18, 0x3d	; 61
    3c44:	3e b7       	in	r19, 0x3e	; 62
    3c46:	24 5f       	subi	r18, 0xF4	; 244
    3c48:	3f 4f       	sbci	r19, 0xFF	; 255
    3c4a:	0f b6       	in	r0, 0x3f	; 63
    3c4c:	f8 94       	cli
    3c4e:	3e bf       	out	0x3e, r19	; 62
    3c50:	0f be       	out	0x3f, r0	; 63
    3c52:	2d bf       	out	0x3d, r18	; 61
    3c54:	60 cd       	rjmp	.-1344   	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1215
      } else if (color_R == BLUE) {
    3c56:	82 e0       	ldi	r24, 0x02	; 2
    3c58:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    3c5c:	82 30       	cpi	r24, 0x02	; 2
    3c5e:	d1 f5       	brne	.+116    	; 0x3cd4 <menu_color()+0x5ea>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1216
        lcd.setCursor(12, 0);
    3c60:	60 e0       	ldi	r22, 0x00	; 0
    3c62:	8c e0       	ldi	r24, 0x0C	; 12
    3c64:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1217
        lcd.print("BLUE");
    3c68:	82 ea       	ldi	r24, 0xA2	; 162
    3c6a:	94 e0       	ldi	r25, 0x04	; 4
    3c6c:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1218
        lcd.setCursor(0, 3);
    3c70:	63 e0       	ldi	r22, 0x03	; 3
    3c72:	80 e0       	ldi	r24, 0x00	; 0
    3c74:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1219
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(blue_right_r), EEPROM_read_int(blue_right_g), EEPROM_read_int(blue_right_b), EEPROM_read_int(blue_right_c));
    3c78:	82 e5       	ldi	r24, 0x52	; 82
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3c80:	38 2e       	mov	r3, r24
    3c82:	29 2e       	mov	r2, r25
    3c84:	80 e5       	ldi	r24, 0x50	; 80
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3c8c:	58 2e       	mov	r5, r24
    3c8e:	49 2e       	mov	r4, r25
    3c90:	8e e4       	ldi	r24, 0x4E	; 78
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3c98:	78 2e       	mov	r7, r24
    3c9a:	69 2e       	mov	r6, r25
    3c9c:	8c e4       	ldi	r24, 0x4C	; 76
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3ca4:	2f 92       	push	r2
    3ca6:	3f 92       	push	r3
    3ca8:	4f 92       	push	r4
    3caa:	5f 92       	push	r5
    3cac:	6f 92       	push	r6
    3cae:	7f 92       	push	r7
    3cb0:	9f 93       	push	r25
    3cb2:	8f 93       	push	r24
    3cb4:	1f 93       	push	r17
    3cb6:	0f 93       	push	r16
    3cb8:	df 93       	push	r29
    3cba:	cf 93       	push	r28
    3cbc:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    3cc0:	2d b7       	in	r18, 0x3d	; 61
    3cc2:	3e b7       	in	r19, 0x3e	; 62
    3cc4:	24 5f       	subi	r18, 0xF4	; 244
    3cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    3cc8:	0f b6       	in	r0, 0x3f	; 63
    3cca:	f8 94       	cli
    3ccc:	3e bf       	out	0x3e, r19	; 62
    3cce:	0f be       	out	0x3f, r0	; 63
    3cd0:	2d bf       	out	0x3d, r18	; 61
    3cd2:	21 cd       	rjmp	.-1470   	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1220
      } else if (color_R == YELLOW) {
    3cd4:	82 e0       	ldi	r24, 0x02	; 2
    3cd6:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    3cda:	84 30       	cpi	r24, 0x04	; 4
    3cdc:	e1 f5       	brne	.+120    	; 0x3d56 <menu_color()+0x66c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1221
        lcd.setCursor(12, 0);
    3cde:	60 e0       	ldi	r22, 0x00	; 0
    3ce0:	8c e0       	ldi	r24, 0x0C	; 12
    3ce2:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1222
        lcd.print("YELLOW");
    3ce6:	8e e3       	ldi	r24, 0x3E	; 62
    3ce8:	94 e0       	ldi	r25, 0x04	; 4
    3cea:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1223
        lcd.setCursor(0, 3);
    3cee:	63 e0       	ldi	r22, 0x03	; 3
    3cf0:	80 e0       	ldi	r24, 0x00	; 0
    3cf2:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1224
        lcd.printf("M%4d %4d %4d ", EEPROM_read_int(yellow_right_r), EEPROM_read_int(yellow_right_g), EEPROM_read_int(yellow_right_b), EEPROM_read_int(yellow_right_c));
    3cf6:	8a e5       	ldi	r24, 0x5A	; 90
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3cfe:	38 2e       	mov	r3, r24
    3d00:	29 2e       	mov	r2, r25
    3d02:	88 e5       	ldi	r24, 0x58	; 88
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3d0a:	58 2e       	mov	r5, r24
    3d0c:	49 2e       	mov	r4, r25
    3d0e:	86 e5       	ldi	r24, 0x56	; 86
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3d16:	78 2e       	mov	r7, r24
    3d18:	69 2e       	mov	r6, r25
    3d1a:	84 e5       	ldi	r24, 0x54	; 84
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3d22:	2f 92       	push	r2
    3d24:	3f 92       	push	r3
    3d26:	4f 92       	push	r4
    3d28:	5f 92       	push	r5
    3d2a:	6f 92       	push	r6
    3d2c:	7f 92       	push	r7
    3d2e:	9f 93       	push	r25
    3d30:	8f 93       	push	r24
    3d32:	87 ea       	ldi	r24, 0xA7	; 167
    3d34:	94 e0       	ldi	r25, 0x04	; 4
    3d36:	9f 93       	push	r25
    3d38:	8f 93       	push	r24
    3d3a:	df 93       	push	r29
    3d3c:	cf 93       	push	r28
    3d3e:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    3d42:	2d b7       	in	r18, 0x3d	; 61
    3d44:	3e b7       	in	r19, 0x3e	; 62
    3d46:	24 5f       	subi	r18, 0xF4	; 244
    3d48:	3f 4f       	sbci	r19, 0xFF	; 255
    3d4a:	0f b6       	in	r0, 0x3f	; 63
    3d4c:	f8 94       	cli
    3d4e:	3e bf       	out	0x3e, r19	; 62
    3d50:	0f be       	out	0x3f, r0	; 63
    3d52:	2d bf       	out	0x3d, r18	; 61
    3d54:	e0 cc       	rjmp	.-1600   	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1225
      } else if (color_R == SILVER) {
    3d56:	82 e0       	ldi	r24, 0x02	; 2
    3d58:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    3d5c:	85 30       	cpi	r24, 0x05	; 5
    3d5e:	d1 f5       	brne	.+116    	; 0x3dd4 <menu_color()+0x6ea>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1226
        lcd.setCursor(12, 0);
    3d60:	60 e0       	ldi	r22, 0x00	; 0
    3d62:	8c e0       	ldi	r24, 0x0C	; 12
    3d64:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1227
        lcd.print("SIL ");
    3d68:	85 eb       	ldi	r24, 0xB5	; 181
    3d6a:	94 e0       	ldi	r25, 0x04	; 4
    3d6c:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1228
        lcd.setCursor(0, 3);
    3d70:	63 e0       	ldi	r22, 0x03	; 3
    3d72:	80 e0       	ldi	r24, 0x00	; 0
    3d74:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1229
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(silver_right_r), EEPROM_read_int(silver_right_g), EEPROM_read_int(silver_right_b), EEPROM_read_int(silver_right_c));
    3d78:	82 e6       	ldi	r24, 0x62	; 98
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3d80:	38 2e       	mov	r3, r24
    3d82:	29 2e       	mov	r2, r25
    3d84:	80 e6       	ldi	r24, 0x60	; 96
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3d8c:	58 2e       	mov	r5, r24
    3d8e:	49 2e       	mov	r4, r25
    3d90:	8e e5       	ldi	r24, 0x5E	; 94
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3d98:	78 2e       	mov	r7, r24
    3d9a:	69 2e       	mov	r6, r25
    3d9c:	8c e5       	ldi	r24, 0x5C	; 92
    3d9e:	90 e0       	ldi	r25, 0x00	; 0
    3da0:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3da4:	2f 92       	push	r2
    3da6:	3f 92       	push	r3
    3da8:	4f 92       	push	r4
    3daa:	5f 92       	push	r5
    3dac:	6f 92       	push	r6
    3dae:	7f 92       	push	r7
    3db0:	9f 93       	push	r25
    3db2:	8f 93       	push	r24
    3db4:	1f 93       	push	r17
    3db6:	0f 93       	push	r16
    3db8:	df 93       	push	r29
    3dba:	cf 93       	push	r28
    3dbc:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    3dc0:	2d b7       	in	r18, 0x3d	; 61
    3dc2:	3e b7       	in	r19, 0x3e	; 62
    3dc4:	24 5f       	subi	r18, 0xF4	; 244
    3dc6:	3f 4f       	sbci	r19, 0xFF	; 255
    3dc8:	0f b6       	in	r0, 0x3f	; 63
    3dca:	f8 94       	cli
    3dcc:	3e bf       	out	0x3e, r19	; 62
    3dce:	0f be       	out	0x3f, r0	; 63
    3dd0:	2d bf       	out	0x3d, r18	; 61
    3dd2:	a1 cc       	rjmp	.-1726   	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1230
      } else if (color_R == WHITE) {
    3dd4:	82 e0       	ldi	r24, 0x02	; 2
    3dd6:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    3dda:	87 30       	cpi	r24, 0x07	; 7
    3ddc:	09 f0       	breq	.+2      	; 0x3de0 <menu_color()+0x6f6>
    3dde:	9b cc       	rjmp	.-1738   	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1231
        lcd.setCursor(12, 0);
    3de0:	60 e0       	ldi	r22, 0x00	; 0
    3de2:	8c e0       	ldi	r24, 0x0C	; 12
    3de4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1232
        lcd.print("WHT ");
    3de8:	8a eb       	ldi	r24, 0xBA	; 186
    3dea:	94 e0       	ldi	r25, 0x04	; 4
    3dec:	69 ce       	rjmp	.-814    	; 0x3ac0 <menu_color()+0x3d6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1236
        lcd.setCursor(0, 3);
        lcd.print("                    ");
      }
    } else if (page == 3)  // memory RED
    3dee:	83 30       	cpi	r24, 0x03	; 3
    3df0:	09 f0       	breq	.+2      	; 0x3df4 <menu_color()+0x70a>
    3df2:	59 c0       	rjmp	.+178    	; 0x3ea6 <menu_color()+0x7bc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1238
    {
      lcd.setCursor(0, 0);
    3df4:	60 e0       	ldi	r22, 0x00	; 0
    3df6:	80 e0       	ldi	r24, 0x00	; 0
    3df8:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1239
      lcd.print("memory RED:  ");
    3dfc:	8f eb       	ldi	r24, 0xBF	; 191
    3dfe:	94 e0       	ldi	r25, 0x04	; 4
    3e00:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1241

      lcd.setCursor(0, 1);
    3e04:	61 e0       	ldi	r22, 0x01	; 1
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1242
      lcd.print("  RED  GRN  BLU ");
    3e0c:	85 e7       	ldi	r24, 0x75	; 117
    3e0e:	94 e0       	ldi	r25, 0x04	; 4
    3e10:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1244

      lcd.setCursor(0, 2);
    3e14:	62 e0       	ldi	r22, 0x02	; 2
    3e16:	80 e0       	ldi	r24, 0x00	; 0
    3e18:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1245
      lcd.printf("L%4d %4d %4d ", EEPROM_read_int(red_left_r), EEPROM_read_int(red_left_g), EEPROM_read_int(red_left_b));
    3e1c:	88 e1       	ldi	r24, 0x18	; 24
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3e24:	58 2e       	mov	r5, r24
    3e26:	49 2e       	mov	r4, r25
    3e28:	86 e1       	ldi	r24, 0x16	; 22
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3e30:	78 2e       	mov	r7, r24
    3e32:	69 2e       	mov	r6, r25
    3e34:	84 e1       	ldi	r24, 0x14	; 20
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3e3c:	4f 92       	push	r4
    3e3e:	5f 92       	push	r5
    3e40:	6f 92       	push	r6
    3e42:	7f 92       	push	r7
    3e44:	9f 93       	push	r25
    3e46:	8f 93       	push	r24
    3e48:	df 92       	push	r13
    3e4a:	cf 92       	push	r12
    3e4c:	df 93       	push	r29
    3e4e:	cf 93       	push	r28
    3e50:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1247

      lcd.setCursor(0, 3);
    3e54:	63 e0       	ldi	r22, 0x03	; 3
    3e56:	80 e0       	ldi	r24, 0x00	; 0
    3e58:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1248
      lcd.printf("R%4d %4d %4d ", EEPROM_read_int(red_right_r), EEPROM_read_int(red_right_g), EEPROM_read_int(red_right_b));
    3e5c:	80 e4       	ldi	r24, 0x40	; 64
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3e64:	58 2e       	mov	r5, r24
    3e66:	49 2e       	mov	r4, r25
    3e68:	8e e3       	ldi	r24, 0x3E	; 62
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3e70:	78 2e       	mov	r7, r24
    3e72:	69 2e       	mov	r6, r25
    3e74:	8c e3       	ldi	r24, 0x3C	; 60
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3e7c:	4f 92       	push	r4
    3e7e:	5f 92       	push	r5
    3e80:	6f 92       	push	r6
    3e82:	7f 92       	push	r7
    3e84:	9f 93       	push	r25
    3e86:	8f 93       	push	r24
    3e88:	bf 92       	push	r11
    3e8a:	af 92       	push	r10
    3e8c:	df 93       	push	r29
    3e8e:	cf 93       	push	r28
    3e90:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    3e94:	8d b7       	in	r24, 0x3d	; 61
    3e96:	9e b7       	in	r25, 0x3e	; 62
    3e98:	44 96       	adiw	r24, 0x14	; 20
    3e9a:	0f b6       	in	r0, 0x3f	; 63
    3e9c:	f8 94       	cli
    3e9e:	9e bf       	out	0x3e, r25	; 62
    3ea0:	0f be       	out	0x3f, r0	; 63
    3ea2:	8d bf       	out	0x3d, r24	; 61
    3ea4:	38 cc       	rjmp	.-1936   	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1249
    } else if (page == 4)  // memory GREEN
    3ea6:	84 30       	cpi	r24, 0x04	; 4
    3ea8:	09 f0       	breq	.+2      	; 0x3eac <menu_color()+0x7c2>
    3eaa:	5a c0       	rjmp	.+180    	; 0x3f60 <menu_color()+0x876>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1251
    {
      lcd.setCursor(0, 0);
    3eac:	60 e0       	ldi	r22, 0x00	; 0
    3eae:	80 e0       	ldi	r24, 0x00	; 0
    3eb0:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1252
      lcd.print("memory GRN:  ");
    3eb4:	89 ee       	ldi	r24, 0xE9	; 233
    3eb6:	94 e0       	ldi	r25, 0x04	; 4
    3eb8:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1254

      lcd.setCursor(0, 1);
    3ebc:	61 e0       	ldi	r22, 0x01	; 1
    3ebe:	80 e0       	ldi	r24, 0x00	; 0
    3ec0:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1255
      lcd.print("  RED  GRN  BLU ");
    3ec4:	85 e7       	ldi	r24, 0x75	; 117
    3ec6:	94 e0       	ldi	r25, 0x04	; 4
    3ec8:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1257

      lcd.setCursor(0, 2);
    3ecc:	62 e0       	ldi	r22, 0x02	; 2
    3ece:	80 e0       	ldi	r24, 0x00	; 0
    3ed0:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1258
      lcd.printf("L%4d %4d %4d ", EEPROM_read_int(green_left_r), EEPROM_read_int(green_left_g), EEPROM_read_int(green_left_b));
    3ed4:	80 e2       	ldi	r24, 0x20	; 32
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3edc:	58 2e       	mov	r5, r24
    3ede:	49 2e       	mov	r4, r25
    3ee0:	8e e1       	ldi	r24, 0x1E	; 30
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3ee8:	78 2e       	mov	r7, r24
    3eea:	69 2e       	mov	r6, r25
    3eec:	8c e1       	ldi	r24, 0x1C	; 28
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3ef4:	4f 92       	push	r4
    3ef6:	5f 92       	push	r5
    3ef8:	6f 92       	push	r6
    3efa:	7f 92       	push	r7
    3efc:	9f 93       	push	r25
    3efe:	8f 93       	push	r24
    3f00:	df 92       	push	r13
    3f02:	cf 92       	push	r12
    3f04:	df 93       	push	r29
    3f06:	cf 93       	push	r28
    3f08:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1260

      lcd.setCursor(0, 3);
    3f0c:	63 e0       	ldi	r22, 0x03	; 3
    3f0e:	80 e0       	ldi	r24, 0x00	; 0
    3f10:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1261
      lcd.printf("R%4d %4d %4d ", EEPROM_read_int(green_right_r), EEPROM_read_int(green_right_g), EEPROM_read_int(green_right_b));
    3f14:	88 e4       	ldi	r24, 0x48	; 72
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3f1c:	58 2e       	mov	r5, r24
    3f1e:	49 2e       	mov	r4, r25
    3f20:	86 e4       	ldi	r24, 0x46	; 70
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3f28:	78 2e       	mov	r7, r24
    3f2a:	69 2e       	mov	r6, r25
    3f2c:	84 e4       	ldi	r24, 0x44	; 68
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3f34:	4f 92       	push	r4
    3f36:	5f 92       	push	r5
    3f38:	6f 92       	push	r6
    3f3a:	7f 92       	push	r7
    3f3c:	9f 93       	push	r25
    3f3e:	8f 93       	push	r24
    3f40:	bf 92       	push	r11
    3f42:	af 92       	push	r10
    3f44:	df 93       	push	r29
    3f46:	cf 93       	push	r28
    3f48:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    3f4c:	2d b7       	in	r18, 0x3d	; 61
    3f4e:	3e b7       	in	r19, 0x3e	; 62
    3f50:	2c 5e       	subi	r18, 0xEC	; 236
    3f52:	3f 4f       	sbci	r19, 0xFF	; 255
    3f54:	0f b6       	in	r0, 0x3f	; 63
    3f56:	f8 94       	cli
    3f58:	3e bf       	out	0x3e, r19	; 62
    3f5a:	0f be       	out	0x3f, r0	; 63
    3f5c:	2d bf       	out	0x3d, r18	; 61
    3f5e:	db cb       	rjmp	.-2122   	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1262
    } else if (page == 5)  // memory BLUE
    3f60:	85 30       	cpi	r24, 0x05	; 5
    3f62:	09 f0       	breq	.+2      	; 0x3f66 <menu_color()+0x87c>
    3f64:	59 c0       	rjmp	.+178    	; 0x4018 <menu_color()+0x92e>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1264
    {
      lcd.setCursor(0, 0);
    3f66:	60 e0       	ldi	r22, 0x00	; 0
    3f68:	80 e0       	ldi	r24, 0x00	; 0
    3f6a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1265
      lcd.print("memory BLU:  ");
    3f6e:	87 ef       	ldi	r24, 0xF7	; 247
    3f70:	94 e0       	ldi	r25, 0x04	; 4
    3f72:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1267

      lcd.setCursor(0, 1);
    3f76:	61 e0       	ldi	r22, 0x01	; 1
    3f78:	80 e0       	ldi	r24, 0x00	; 0
    3f7a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1268
      lcd.print("  RED  GRN  BLU ");
    3f7e:	85 e7       	ldi	r24, 0x75	; 117
    3f80:	94 e0       	ldi	r25, 0x04	; 4
    3f82:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1270

      lcd.setCursor(0, 2);
    3f86:	62 e0       	ldi	r22, 0x02	; 2
    3f88:	80 e0       	ldi	r24, 0x00	; 0
    3f8a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1271
      lcd.printf("L%4d %4d %4d ", EEPROM_read_int(blue_left_r), EEPROM_read_int(blue_left_g), EEPROM_read_int(blue_left_b));
    3f8e:	88 e2       	ldi	r24, 0x28	; 40
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3f96:	58 2e       	mov	r5, r24
    3f98:	49 2e       	mov	r4, r25
    3f9a:	86 e2       	ldi	r24, 0x26	; 38
    3f9c:	90 e0       	ldi	r25, 0x00	; 0
    3f9e:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3fa2:	78 2e       	mov	r7, r24
    3fa4:	69 2e       	mov	r6, r25
    3fa6:	84 e2       	ldi	r24, 0x24	; 36
    3fa8:	90 e0       	ldi	r25, 0x00	; 0
    3faa:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3fae:	4f 92       	push	r4
    3fb0:	5f 92       	push	r5
    3fb2:	6f 92       	push	r6
    3fb4:	7f 92       	push	r7
    3fb6:	9f 93       	push	r25
    3fb8:	8f 93       	push	r24
    3fba:	df 92       	push	r13
    3fbc:	cf 92       	push	r12
    3fbe:	df 93       	push	r29
    3fc0:	cf 93       	push	r28
    3fc2:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1273

      lcd.setCursor(0, 3);
    3fc6:	63 e0       	ldi	r22, 0x03	; 3
    3fc8:	80 e0       	ldi	r24, 0x00	; 0
    3fca:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1274
      lcd.printf("R%4d %4d %4d ", EEPROM_read_int(blue_right_r), EEPROM_read_int(blue_right_g), EEPROM_read_int(blue_right_b));
    3fce:	80 e5       	ldi	r24, 0x50	; 80
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3fd6:	58 2e       	mov	r5, r24
    3fd8:	49 2e       	mov	r4, r25
    3fda:	8e e4       	ldi	r24, 0x4E	; 78
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3fe2:	78 2e       	mov	r7, r24
    3fe4:	69 2e       	mov	r6, r25
    3fe6:	8c e4       	ldi	r24, 0x4C	; 76
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    3fee:	4f 92       	push	r4
    3ff0:	5f 92       	push	r5
    3ff2:	6f 92       	push	r6
    3ff4:	7f 92       	push	r7
    3ff6:	9f 93       	push	r25
    3ff8:	8f 93       	push	r24
    3ffa:	bf 92       	push	r11
    3ffc:	af 92       	push	r10
    3ffe:	df 93       	push	r29
    4000:	cf 93       	push	r28
    4002:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    4006:	8d b7       	in	r24, 0x3d	; 61
    4008:	9e b7       	in	r25, 0x3e	; 62
    400a:	44 96       	adiw	r24, 0x14	; 20
    400c:	0f b6       	in	r0, 0x3f	; 63
    400e:	f8 94       	cli
    4010:	9e bf       	out	0x3e, r25	; 62
    4012:	0f be       	out	0x3f, r0	; 63
    4014:	8d bf       	out	0x3d, r24	; 61
    4016:	7f cb       	rjmp	.-2306   	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1275
    } else if (page == 6)  // memory Yellow
    4018:	86 30       	cpi	r24, 0x06	; 6
    401a:	09 f0       	breq	.+2      	; 0x401e <menu_color()+0x934>
    401c:	5a c0       	rjmp	.+180    	; 0x40d2 <menu_color()+0x9e8>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1277
    {
      lcd.setCursor(0, 0);
    401e:	60 e0       	ldi	r22, 0x00	; 0
    4020:	80 e0       	ldi	r24, 0x00	; 0
    4022:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1278
      lcd.print("memory Yel:  ");
    4026:	85 e0       	ldi	r24, 0x05	; 5
    4028:	95 e0       	ldi	r25, 0x05	; 5
    402a:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1280

      lcd.setCursor(0, 1);
    402e:	61 e0       	ldi	r22, 0x01	; 1
    4030:	80 e0       	ldi	r24, 0x00	; 0
    4032:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1281
      lcd.print("  RED  GRN  BLU ");
    4036:	85 e7       	ldi	r24, 0x75	; 117
    4038:	94 e0       	ldi	r25, 0x04	; 4
    403a:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1283

      lcd.setCursor(0, 2);
    403e:	62 e0       	ldi	r22, 0x02	; 2
    4040:	80 e0       	ldi	r24, 0x00	; 0
    4042:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1284
      lcd.printf("L%4d %4d %4d ", EEPROM_read_int(yellow_left_r), EEPROM_read_int(yellow_left_g), EEPROM_read_int(yellow_left_b));
    4046:	80 e3       	ldi	r24, 0x30	; 48
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    404e:	58 2e       	mov	r5, r24
    4050:	49 2e       	mov	r4, r25
    4052:	8e e2       	ldi	r24, 0x2E	; 46
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    405a:	78 2e       	mov	r7, r24
    405c:	69 2e       	mov	r6, r25
    405e:	8c e2       	ldi	r24, 0x2C	; 44
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    4066:	4f 92       	push	r4
    4068:	5f 92       	push	r5
    406a:	6f 92       	push	r6
    406c:	7f 92       	push	r7
    406e:	9f 93       	push	r25
    4070:	8f 93       	push	r24
    4072:	df 92       	push	r13
    4074:	cf 92       	push	r12
    4076:	df 93       	push	r29
    4078:	cf 93       	push	r28
    407a:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1286

      lcd.setCursor(0, 3);
    407e:	63 e0       	ldi	r22, 0x03	; 3
    4080:	80 e0       	ldi	r24, 0x00	; 0
    4082:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1287
      lcd.printf("R%4d %4d %4d ", EEPROM_read_int(yellow_right_r), EEPROM_read_int(yellow_right_g), EEPROM_read_int(yellow_right_b));
    4086:	88 e5       	ldi	r24, 0x58	; 88
    4088:	90 e0       	ldi	r25, 0x00	; 0
    408a:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    408e:	58 2e       	mov	r5, r24
    4090:	49 2e       	mov	r4, r25
    4092:	86 e5       	ldi	r24, 0x56	; 86
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    409a:	78 2e       	mov	r7, r24
    409c:	69 2e       	mov	r6, r25
    409e:	84 e5       	ldi	r24, 0x54	; 84
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    40a6:	4f 92       	push	r4
    40a8:	5f 92       	push	r5
    40aa:	6f 92       	push	r6
    40ac:	7f 92       	push	r7
    40ae:	9f 93       	push	r25
    40b0:	8f 93       	push	r24
    40b2:	bf 92       	push	r11
    40b4:	af 92       	push	r10
    40b6:	df 93       	push	r29
    40b8:	cf 93       	push	r28
    40ba:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    40be:	2d b7       	in	r18, 0x3d	; 61
    40c0:	3e b7       	in	r19, 0x3e	; 62
    40c2:	2c 5e       	subi	r18, 0xEC	; 236
    40c4:	3f 4f       	sbci	r19, 0xFF	; 255
    40c6:	0f b6       	in	r0, 0x3f	; 63
    40c8:	f8 94       	cli
    40ca:	3e bf       	out	0x3e, r19	; 62
    40cc:	0f be       	out	0x3f, r0	; 63
    40ce:	2d bf       	out	0x3d, r18	; 61
    40d0:	22 cb       	rjmp	.-2492   	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1288
    } else if (page == 7)  // memory Silver
    40d2:	87 30       	cpi	r24, 0x07	; 7
    40d4:	09 f0       	breq	.+2      	; 0x40d8 <menu_color()+0x9ee>
    40d6:	6d c0       	rjmp	.+218    	; 0x41b2 <menu_color()+0xac8>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1290
    {
      lcd.setCursor(0, 0);
    40d8:	60 e0       	ldi	r22, 0x00	; 0
    40da:	80 e0       	ldi	r24, 0x00	; 0
    40dc:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1291
      lcd.print("memory Silver:  ");
    40e0:	83 e1       	ldi	r24, 0x13	; 19
    40e2:	95 e0       	ldi	r25, 0x05	; 5
    40e4:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1293

      lcd.setCursor(0, 1);
    40e8:	61 e0       	ldi	r22, 0x01	; 1
    40ea:	80 e0       	ldi	r24, 0x00	; 0
    40ec:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1294
      lcd.print("  RED  GRN  BLU ");
    40f0:	85 e7       	ldi	r24, 0x75	; 117
    40f2:	94 e0       	ldi	r25, 0x04	; 4
    40f4:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1296

      lcd.setCursor(0, 2);
    40f8:	62 e0       	ldi	r22, 0x02	; 2
    40fa:	80 e0       	ldi	r24, 0x00	; 0
    40fc:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1297
      lcd.printf("L%4d %4d %4d %4d", EEPROM_read_int(silver_left_r), EEPROM_read_int(silver_left_g), EEPROM_read_int(silver_left_b), EEPROM_read_int(silver_left_c));
    4100:	8a e3       	ldi	r24, 0x3A	; 58
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    4108:	38 2e       	mov	r3, r24
    410a:	29 2e       	mov	r2, r25
    410c:	88 e3       	ldi	r24, 0x38	; 56
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    4114:	58 2e       	mov	r5, r24
    4116:	49 2e       	mov	r4, r25
    4118:	86 e3       	ldi	r24, 0x36	; 54
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    4120:	78 2e       	mov	r7, r24
    4122:	69 2e       	mov	r6, r25
    4124:	84 e3       	ldi	r24, 0x34	; 52
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    412c:	2f 92       	push	r2
    412e:	3f 92       	push	r3
    4130:	4f 92       	push	r4
    4132:	5f 92       	push	r5
    4134:	6f 92       	push	r6
    4136:	7f 92       	push	r7
    4138:	9f 93       	push	r25
    413a:	8f 93       	push	r24
    413c:	84 e2       	ldi	r24, 0x24	; 36
    413e:	95 e0       	ldi	r25, 0x05	; 5
    4140:	9f 93       	push	r25
    4142:	8f 93       	push	r24
    4144:	df 93       	push	r29
    4146:	cf 93       	push	r28
    4148:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1299

      lcd.setCursor(0, 3);
    414c:	63 e0       	ldi	r22, 0x03	; 3
    414e:	80 e0       	ldi	r24, 0x00	; 0
    4150:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1300
      lcd.printf("R%4d %4d %4d %4d", EEPROM_read_int(silver_right_r), EEPROM_read_int(silver_right_g), EEPROM_read_int(silver_right_b), EEPROM_read_int(silver_right_c));
    4154:	82 e6       	ldi	r24, 0x62	; 98
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    415c:	38 2e       	mov	r3, r24
    415e:	29 2e       	mov	r2, r25
    4160:	80 e6       	ldi	r24, 0x60	; 96
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    4168:	58 2e       	mov	r5, r24
    416a:	49 2e       	mov	r4, r25
    416c:	8e e5       	ldi	r24, 0x5E	; 94
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    4174:	78 2e       	mov	r7, r24
    4176:	69 2e       	mov	r6, r25
    4178:	8c e5       	ldi	r24, 0x5C	; 92
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    4180:	2f 92       	push	r2
    4182:	3f 92       	push	r3
    4184:	4f 92       	push	r4
    4186:	5f 92       	push	r5
    4188:	6f 92       	push	r6
    418a:	7f 92       	push	r7
    418c:	9f 93       	push	r25
    418e:	8f 93       	push	r24
    4190:	25 e3       	ldi	r18, 0x35	; 53
    4192:	35 e0       	ldi	r19, 0x05	; 5
    4194:	3f 93       	push	r19
    4196:	2f 93       	push	r18
    4198:	df 93       	push	r29
    419a:	cf 93       	push	r28
    419c:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    41a0:	8d b7       	in	r24, 0x3d	; 61
    41a2:	9e b7       	in	r25, 0x3e	; 62
    41a4:	48 96       	adiw	r24, 0x18	; 24
    41a6:	0f b6       	in	r0, 0x3f	; 63
    41a8:	f8 94       	cli
    41aa:	9e bf       	out	0x3e, r25	; 62
    41ac:	0f be       	out	0x3f, r0	; 63
    41ae:	8d bf       	out	0x3d, r24	; 61
    41b0:	b2 ca       	rjmp	.-2716   	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1301
    } else if (page == 8)  // APDS Front
    41b2:	88 30       	cpi	r24, 0x08	; 8
    41b4:	09 f0       	breq	.+2      	; 0x41b8 <menu_color()+0xace>
    41b6:	af ca       	rjmp	.-2722   	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1303
    {
      lcd.setCursor(0, 0);
    41b8:	60 e0       	ldi	r22, 0x00	; 0
    41ba:	80 e0       	ldi	r24, 0x00	; 0
    41bc:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1304
      lcd.print("APDS Front: ");
    41c0:	86 e4       	ldi	r24, 0x46	; 70
    41c2:	95 e0       	ldi	r25, 0x05	; 5
    41c4:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1305
      lcd.setCursor(0, 1);
    41c8:	61 e0       	ldi	r22, 0x01	; 1
    41ca:	80 e0       	ldi	r24, 0x00	; 0
    41cc:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1306
      lcd.print("  RED  GRN  BLU ");
    41d0:	85 e7       	ldi	r24, 0x75	; 117
    41d2:	94 e0       	ldi	r25, 0x04	; 4
    41d4:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1308

      lcd.setCursor(0, 2);
    41d8:	62 e0       	ldi	r22, 0x02	; 2
    41da:	80 e0       	ldi	r24, 0x00	; 0
    41dc:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1309
      lcd.printf(" %4d %4d %4d %4d", red, green, blue, clear);
    41e0:	80 91 c8 08 	lds	r24, 0x08C8	; 0x8008c8 <clear+0x1>
    41e4:	8f 93       	push	r24
    41e6:	80 91 c7 08 	lds	r24, 0x08C7	; 0x8008c7 <clear>
    41ea:	8f 93       	push	r24
    41ec:	80 91 ca 08 	lds	r24, 0x08CA	; 0x8008ca <blue+0x1>
    41f0:	8f 93       	push	r24
    41f2:	80 91 c9 08 	lds	r24, 0x08C9	; 0x8008c9 <blue>
    41f6:	8f 93       	push	r24
    41f8:	80 91 cc 08 	lds	r24, 0x08CC	; 0x8008cc <green+0x1>
    41fc:	8f 93       	push	r24
    41fe:	80 91 cb 08 	lds	r24, 0x08CB	; 0x8008cb <green>
    4202:	8f 93       	push	r24
    4204:	80 91 ce 08 	lds	r24, 0x08CE	; 0x8008ce <red+0x1>
    4208:	8f 93       	push	r24
    420a:	80 91 cd 08 	lds	r24, 0x08CD	; 0x8008cd <red>
    420e:	8f 93       	push	r24
    4210:	9f 92       	push	r9
    4212:	8f 92       	push	r8
    4214:	df 93       	push	r29
    4216:	cf 93       	push	r28
    4218:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1311

      lcd.setCursor(12, 0);
    421c:	60 e0       	ldi	r22, 0x00	; 0
    421e:	8c e0       	ldi	r24, 0x0C	; 12
    4220:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1312
      if (color_F == RED) {
    4224:	83 e0       	ldi	r24, 0x03	; 3
    4226:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    422a:	2d b7       	in	r18, 0x3d	; 61
    422c:	3e b7       	in	r19, 0x3e	; 62
    422e:	24 5f       	subi	r18, 0xF4	; 244
    4230:	3f 4f       	sbci	r19, 0xFF	; 255
    4232:	0f b6       	in	r0, 0x3f	; 63
    4234:	f8 94       	cli
    4236:	3e bf       	out	0x3e, r19	; 62
    4238:	0f be       	out	0x3f, r0	; 63
    423a:	2d bf       	out	0x3d, r18	; 61
    423c:	81 11       	cpse	r24, r1
    423e:	3a c0       	rjmp	.+116    	; 0x42b4 <menu_color()+0xbca>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1313
        lcd.setCursor(12, 0);
    4240:	60 e0       	ldi	r22, 0x00	; 0
    4242:	8c e0       	ldi	r24, 0x0C	; 12
    4244:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1314
        lcd.print("RED ");
    4248:	86 e8       	ldi	r24, 0x86	; 134
    424a:	94 e0       	ldi	r25, 0x04	; 4
    424c:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1315
        lcd.setCursor(0, 3);
    4250:	63 e0       	ldi	r22, 0x03	; 3
    4252:	80 e0       	ldi	r24, 0x00	; 0
    4254:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1316
        lcd.printf("M%4d %4d %4d %4d ", EEPROM_read_int(red_front_r), EEPROM_read_int(red_front_g), EEPROM_read_int(red_front_b), EEPROM_read_int(red_front_c));
    4258:	8a e6       	ldi	r24, 0x6A	; 106
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    4260:	38 2e       	mov	r3, r24
    4262:	29 2e       	mov	r2, r25
    4264:	88 e6       	ldi	r24, 0x68	; 104
    4266:	90 e0       	ldi	r25, 0x00	; 0
    4268:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    426c:	58 2e       	mov	r5, r24
    426e:	49 2e       	mov	r4, r25
    4270:	86 e6       	ldi	r24, 0x66	; 102
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    4278:	78 2e       	mov	r7, r24
    427a:	69 2e       	mov	r6, r25
    427c:	84 e6       	ldi	r24, 0x64	; 100
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    4284:	2f 92       	push	r2
    4286:	3f 92       	push	r3
    4288:	4f 92       	push	r4
    428a:	5f 92       	push	r5
    428c:	6f 92       	push	r6
    428e:	7f 92       	push	r7
    4290:	9f 93       	push	r25
    4292:	8f 93       	push	r24
    4294:	ff 92       	push	r15
    4296:	ef 92       	push	r14
    4298:	df 93       	push	r29
    429a:	cf 93       	push	r28
    429c:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    42a0:	2d b7       	in	r18, 0x3d	; 61
    42a2:	3e b7       	in	r19, 0x3e	; 62
    42a4:	24 5f       	subi	r18, 0xF4	; 244
    42a6:	3f 4f       	sbci	r19, 0xFF	; 255
    42a8:	0f b6       	in	r0, 0x3f	; 63
    42aa:	f8 94       	cli
    42ac:	3e bf       	out	0x3e, r19	; 62
    42ae:	0f be       	out	0x3f, r0	; 63
    42b0:	2d bf       	out	0x3d, r18	; 61
    42b2:	31 ca       	rjmp	.-2974   	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1317
      } else if (color_F == GREEN) {
    42b4:	83 e0       	ldi	r24, 0x03	; 3
    42b6:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    42ba:	81 30       	cpi	r24, 0x01	; 1
    42bc:	d1 f5       	brne	.+116    	; 0x4332 <menu_color()+0xc48>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1318
        lcd.setCursor(12, 0);
    42be:	60 e0       	ldi	r22, 0x00	; 0
    42c0:	8c e0       	ldi	r24, 0x0C	; 12
    42c2:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1319
        lcd.print("GRN ");
    42c6:	8d e9       	ldi	r24, 0x9D	; 157
    42c8:	94 e0       	ldi	r25, 0x04	; 4
    42ca:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1320
        lcd.setCursor(0, 3);
    42ce:	63 e0       	ldi	r22, 0x03	; 3
    42d0:	80 e0       	ldi	r24, 0x00	; 0
    42d2:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1321
        lcd.printf("M%4d %4d %4d %4d ", EEPROM_read_int(green_front_r), EEPROM_read_int(green_front_g), EEPROM_read_int(green_front_b), EEPROM_read_int(green_front_c));
    42d6:	82 e7       	ldi	r24, 0x72	; 114
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    42de:	38 2e       	mov	r3, r24
    42e0:	29 2e       	mov	r2, r25
    42e2:	80 e7       	ldi	r24, 0x70	; 112
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    42ea:	58 2e       	mov	r5, r24
    42ec:	49 2e       	mov	r4, r25
    42ee:	8e e6       	ldi	r24, 0x6E	; 110
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    42f6:	78 2e       	mov	r7, r24
    42f8:	69 2e       	mov	r6, r25
    42fa:	8c e6       	ldi	r24, 0x6C	; 108
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    4302:	2f 92       	push	r2
    4304:	3f 92       	push	r3
    4306:	4f 92       	push	r4
    4308:	5f 92       	push	r5
    430a:	6f 92       	push	r6
    430c:	7f 92       	push	r7
    430e:	9f 93       	push	r25
    4310:	8f 93       	push	r24
    4312:	ff 92       	push	r15
    4314:	ef 92       	push	r14
    4316:	df 93       	push	r29
    4318:	cf 93       	push	r28
    431a:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    431e:	2d b7       	in	r18, 0x3d	; 61
    4320:	3e b7       	in	r19, 0x3e	; 62
    4322:	24 5f       	subi	r18, 0xF4	; 244
    4324:	3f 4f       	sbci	r19, 0xFF	; 255
    4326:	0f b6       	in	r0, 0x3f	; 63
    4328:	f8 94       	cli
    432a:	3e bf       	out	0x3e, r19	; 62
    432c:	0f be       	out	0x3f, r0	; 63
    432e:	2d bf       	out	0x3d, r18	; 61
    4330:	f2 c9       	rjmp	.-3100   	; 0x3716 <menu_color()+0x2c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1322
      } else if (color_F == WHITE) {
    4332:	83 e0       	ldi	r24, 0x03	; 3
    4334:	50 cd       	rjmp	.-1376   	; 0x3dd6 <menu_color()+0x6ec>

00004336 <global constructors keyed to 65535_0_sport_main_code_2023.ino.cpp.o.2355>:
_GLOBAL__I_65535_0_sport_main_code_2023.ino.cpp.o.2355():
    4336:	e8 e7       	ldi	r30, 0x78	; 120
    4338:	f9 e0       	ldi	r31, 0x09	; 9
    433a:	13 82       	std	Z+3, r1	; 0x03
    433c:	12 82       	std	Z+2, r1	; 0x02
    433e:	88 ee       	ldi	r24, 0xE8	; 232
    4340:	93 e0       	ldi	r25, 0x03	; 3
    4342:	a0 e0       	ldi	r26, 0x00	; 0
    4344:	b0 e0       	ldi	r27, 0x00	; 0
    4346:	84 83       	std	Z+4, r24	; 0x04
    4348:	95 83       	std	Z+5, r25	; 0x05
    434a:	a6 83       	std	Z+6, r26	; 0x06
    434c:	b7 83       	std	Z+7, r27	; 0x07
    434e:	20 e1       	ldi	r18, 0x10	; 16
    4350:	33 e0       	ldi	r19, 0x03	; 3
    4352:	31 83       	std	Z+1, r19	; 0x01
    4354:	20 83       	st	Z, r18
    4356:	48 e9       	ldi	r20, 0x98	; 152
    4358:	50 e0       	ldi	r21, 0x00	; 0
    435a:	55 87       	std	Z+13, r21	; 0x0d
    435c:	44 87       	std	Z+12, r20	; 0x0c
    435e:	49 e9       	ldi	r20, 0x99	; 153
    4360:	50 e0       	ldi	r21, 0x00	; 0
    4362:	57 87       	std	Z+15, r21	; 0x0f
    4364:	46 87       	std	Z+14, r20	; 0x0e
    4366:	4b e9       	ldi	r20, 0x9B	; 155
    4368:	50 e0       	ldi	r21, 0x00	; 0
    436a:	51 8b       	std	Z+17, r21	; 0x11
    436c:	40 8b       	std	Z+16, r20	; 0x10
    436e:	4a e9       	ldi	r20, 0x9A	; 154
    4370:	50 e0       	ldi	r21, 0x00	; 0
    4372:	53 8b       	std	Z+19, r21	; 0x13
    4374:	42 8b       	std	Z+18, r20	; 0x12
    4376:	4d e9       	ldi	r20, 0x9D	; 157
    4378:	50 e0       	ldi	r21, 0x00	; 0
    437a:	55 8b       	std	Z+21, r21	; 0x15
    437c:	44 8b       	std	Z+20, r20	; 0x14
    437e:	4c e9       	ldi	r20, 0x9C	; 156
    4380:	50 e0       	ldi	r21, 0x00	; 0
    4382:	57 8b       	std	Z+23, r21	; 0x17
    4384:	46 8b       	std	Z+22, r20	; 0x16
    4386:	11 8e       	std	Z+25, r1	; 0x19
    4388:	12 8e       	std	Z+26, r1	; 0x1a
    438a:	13 8e       	std	Z+27, r1	; 0x1b
    438c:	14 8e       	std	Z+28, r1	; 0x1c
    438e:	e5 e1       	ldi	r30, 0x15	; 21
    4390:	fa e0       	ldi	r31, 0x0A	; 10
    4392:	13 82       	std	Z+3, r1	; 0x03
    4394:	12 82       	std	Z+2, r1	; 0x02
    4396:	84 83       	std	Z+4, r24	; 0x04
    4398:	95 83       	std	Z+5, r25	; 0x05
    439a:	a6 83       	std	Z+6, r26	; 0x06
    439c:	b7 83       	std	Z+7, r27	; 0x07
    439e:	31 83       	std	Z+1, r19	; 0x01
    43a0:	20 83       	st	Z, r18
    43a2:	20 e9       	ldi	r18, 0x90	; 144
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	35 87       	std	Z+13, r19	; 0x0d
    43a8:	24 87       	std	Z+12, r18	; 0x0c
    43aa:	29 e2       	ldi	r18, 0x29	; 41
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	37 87       	std	Z+15, r19	; 0x0f
    43b0:	26 87       	std	Z+14, r18	; 0x0e
    43b2:	2b e2       	ldi	r18, 0x2B	; 43
    43b4:	30 e0       	ldi	r19, 0x00	; 0
    43b6:	31 8b       	std	Z+17, r19	; 0x11
    43b8:	20 8b       	std	Z+16, r18	; 0x10
    43ba:	2a e2       	ldi	r18, 0x2A	; 42
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	33 8b       	std	Z+19, r19	; 0x13
    43c0:	22 8b       	std	Z+18, r18	; 0x12
    43c2:	25 e9       	ldi	r18, 0x95	; 149
    43c4:	30 e0       	ldi	r19, 0x00	; 0
    43c6:	35 8b       	std	Z+21, r19	; 0x15
    43c8:	24 8b       	std	Z+20, r18	; 0x14
    43ca:	2c e2       	ldi	r18, 0x2C	; 44
    43cc:	30 e0       	ldi	r19, 0x00	; 0
    43ce:	37 8b       	std	Z+23, r19	; 0x17
    43d0:	26 8b       	std	Z+22, r18	; 0x16
    43d2:	11 8e       	std	Z+25, r1	; 0x19
    43d4:	12 8e       	std	Z+26, r1	; 0x1a
    43d6:	13 8e       	std	Z+27, r1	; 0x1b
    43d8:	14 8e       	std	Z+28, r1	; 0x1c
    43da:	e2 eb       	ldi	r30, 0xB2	; 178
    43dc:	fa e0       	ldi	r31, 0x0A	; 10
    43de:	13 82       	std	Z+3, r1	; 0x03
    43e0:	12 82       	std	Z+2, r1	; 0x02
    43e2:	84 83       	std	Z+4, r24	; 0x04
    43e4:	95 83       	std	Z+5, r25	; 0x05
    43e6:	a6 83       	std	Z+6, r26	; 0x06
    43e8:	b7 83       	std	Z+7, r27	; 0x07
    43ea:	82 e2       	ldi	r24, 0x22	; 34
    43ec:	93 e0       	ldi	r25, 0x03	; 3
    43ee:	91 83       	std	Z+1, r25	; 0x01
    43f0:	80 83       	st	Z, r24
    43f2:	ee eb       	ldi	r30, 0xBE	; 190
    43f4:	fa e0       	ldi	r31, 0x0A	; 10
    43f6:	13 82       	std	Z+3, r1	; 0x03
    43f8:	12 82       	std	Z+2, r1	; 0x02
    43fa:	84 e3       	ldi	r24, 0x34	; 52
    43fc:	93 e0       	ldi	r25, 0x03	; 3
    43fe:	91 83       	std	Z+1, r25	; 0x01
    4400:	80 83       	st	Z, r24
    4402:	8c e1       	ldi	r24, 0x1C	; 28
    4404:	84 83       	std	Z+4, r24	; 0x04
    4406:	8f ef       	ldi	r24, 0xFF	; 255
    4408:	85 83       	std	Z+5, r24	; 0x05
    440a:	8e e1       	ldi	r24, 0x1E	; 30
    440c:	86 83       	std	Z+6, r24	; 0x06
    440e:	8f e1       	ldi	r24, 0x1F	; 31
    4410:	87 83       	std	Z+7, r24	; 0x07
    4412:	80 e2       	ldi	r24, 0x20	; 32
    4414:	80 87       	std	Z+8, r24	; 0x08
    4416:	81 e2       	ldi	r24, 0x21	; 33
    4418:	81 87       	std	Z+9, r24	; 0x09
    441a:	82 e2       	ldi	r24, 0x22	; 34
    441c:	82 87       	std	Z+10, r24	; 0x0a
    441e:	13 86       	std	Z+11, r1	; 0x0b
    4420:	14 86       	std	Z+12, r1	; 0x0c
    4422:	15 86       	std	Z+13, r1	; 0x0d
    4424:	16 86       	std	Z+14, r1	; 0x0e
    4426:	17 86       	std	Z+15, r1	; 0x0f
    4428:	61 e0       	ldi	r22, 0x01	; 1
    442a:	80 e1       	ldi	r24, 0x10	; 16
    442c:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.36]>

00004430 <main>:
init():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    4430:	78 94       	sei
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:963
#endif

  // Set timer 0 prescale factor to 64
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
    4432:	83 b7       	in	r24, 0x33	; 51
    4434:	8c 64       	ori	r24, 0x4C	; 76
    4436:	83 bf       	out	0x33, r24	; 51
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
    4438:	87 b7       	in	r24, 0x37	; 55
    443a:	81 60       	ori	r24, 0x01	; 1
    443c:	87 bf       	out	0x37, r24	; 55
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    443e:	c2 e0       	ldi	r28, 0x02	; 2
    4440:	ce bd       	out	0x2e, r28	; 46
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    4442:	8e b5       	in	r24, 0x2e	; 46
    4444:	81 60       	ori	r24, 0x01	; 1
    4446:	8e bd       	out	0x2e, r24	; 46
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    4448:	8f b5       	in	r24, 0x2f	; 47
    444a:	81 60       	ori	r24, 0x01	; 1
    444c:	8f bd       	out	0x2f, r24	; 47
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
    444e:	85 b5       	in	r24, 0x25	; 37
    4450:	84 60       	ori	r24, 0x04	; 4
    4452:	85 bd       	out	0x25, r24	; 37
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
    4454:	85 b5       	in	r24, 0x25	; 37
    4456:	80 64       	ori	r24, 0x40	; 64
    4458:	85 bd       	out	0x25, r24	; 37
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    445a:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    445e:	83 60       	ori	r24, 0x03	; 3
    4460:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    4464:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    4468:	81 60       	ori	r24, 0x01	; 1
    446a:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    446e:	86 e8       	ldi	r24, 0x86	; 134
    4470:	86 b9       	out	0x06, r24	; 6
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    4472:	1a b8       	out	0x0a, r1	; 10
robot_setup():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1451
    }
  }
}

void robot_setup() {
  TCCR1A = 0;  // Clear the register
    4474:	1f bc       	out	0x2f, r1	; 47
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1453
  // Set the Timer/Counter 1 Mode to "Normal" mode
  TCCR1A |= (0 << WGM10) | (0 << WGM11);
    4476:	8f b5       	in	r24, 0x2f	; 47
    4478:	8f bd       	out	0x2f, r24	; 47
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1454
  TCCR1B |= (0 << WGM12) | (0 << WGM13);
    447a:	8e b5       	in	r24, 0x2e	; 46
    447c:	8e bd       	out	0x2e, r24	; 46
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1456
  // Set the Timer/Counter 1 clock source to "External Crystal Oscillator"
  TCCR1B |= (1 << CS12) | (0 << CS11) | (0 << CS10);
    447e:	8e b5       	in	r24, 0x2e	; 46
    4480:	84 60       	ori	r24, 0x04	; 4
    4482:	8e bd       	out	0x2e, r24	; 46
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1457
  pinMode(13, OUTPUT);
    4484:	61 e0       	ldi	r22, 0x01	; 1
    4486:	8d e0       	ldi	r24, 0x0D	; 13
    4488:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1458
  pinMode(12, OUTPUT);
    448c:	61 e0       	ldi	r22, 0x01	; 1
    448e:	8c e0       	ldi	r24, 0x0C	; 12
    4490:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1459
  pinMode(6, INPUT_PULLUP);
    4494:	62 e0       	ldi	r22, 0x02	; 2
    4496:	86 e0       	ldi	r24, 0x06	; 6
    4498:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1460
  pinMode(35, OUTPUT);
    449c:	61 e0       	ldi	r22, 0x01	; 1
    449e:	83 e2       	ldi	r24, 0x23	; 35
    44a0:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1461
  pinMode(37, INPUT_PULLUP);  // sbl
    44a4:	62 e0       	ldi	r22, 0x02	; 2
    44a6:	85 e2       	ldi	r24, 0x25	; 37
    44a8:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1462
  pinMode(38, INPUT_PULLUP);  // sbr
    44ac:	62 e0       	ldi	r22, 0x02	; 2
    44ae:	86 e2       	ldi	r24, 0x26	; 38
    44b0:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1463
  pinMode(start_pin, INPUT_PULLUP);
    44b4:	62 e0       	ldi	r22, 0x02	; 2
    44b6:	86 e0       	ldi	r24, 0x06	; 6
    44b8:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1464
  pinMode(next_page_pin, INPUT_PULLUP);
    44bc:	62 e0       	ldi	r22, 0x02	; 2
    44be:	88 e0       	ldi	r24, 0x08	; 8
    44c0:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1465
  pinMode(previuse_page_pin, INPUT_PULLUP);
    44c4:	62 e0       	ldi	r22, 0x02	; 2
    44c6:	89 e0       	ldi	r24, 0x09	; 9
    44c8:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1466
  pinMode(increase_pin, INPUT_PULLUP);
    44cc:	62 e0       	ldi	r22, 0x02	; 2
    44ce:	8a e0       	ldi	r24, 0x0A	; 10
    44d0:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1467
  pinMode(decrease_pin, INPUT_PULLUP);
    44d4:	62 e0       	ldi	r22, 0x02	; 2
    44d6:	8b e0       	ldi	r24, 0x0B	; 11
    44d8:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1468
  pinMode(MUX_A, OUTPUT);
    44dc:	61 e0       	ldi	r22, 0x01	; 1
    44de:	8c e2       	ldi	r24, 0x2C	; 44
    44e0:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1469
  pinMode(MUX_B, OUTPUT);
    44e4:	61 e0       	ldi	r22, 0x01	; 1
    44e6:	8b e2       	ldi	r24, 0x2B	; 43
    44e8:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1470
  pinMode(MUX_C, OUTPUT);
    44ec:	61 e0       	ldi	r22, 0x01	; 1
    44ee:	8a e2       	ldi	r24, 0x2A	; 42
    44f0:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
begin():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:63

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    44f4:	10 92 3b 09 	sts	0x093B, r1	; 0x80093b <TwoWire::rxBufferIndex>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:64
  rxBufferLength = 0;
    44f8:	10 92 3a 09 	sts	0x093A, r1	; 0x80093a <TwoWire::rxBufferLength>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:66

  txBufferIndex = 0;
    44fc:	10 92 f7 08 	sts	0x08F7, r1	; 0x8008f7 <TwoWire::txBufferIndex>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire/TwoWire.cpp:67
  txBufferLength = 0;
    4500:	10 92 19 09 	sts	0x0919, r1	; 0x800919 <TwoWire::txBufferLength>
twi_init():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:79
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    4504:	10 92 f5 08 	sts	0x08F5, r1	; 0x8008f5 <twi_state>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:80
  twi_sendStop = true; // default value
    4508:	81 e0       	ldi	r24, 0x01	; 1
    450a:	80 93 f4 08 	sts	0x08F4, r24	; 0x8008f4 <twi_sendStop>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:81
  twi_inRepStart = false;
    450e:	10 92 ed 08 	sts	0x08ED, r1	; 0x8008ed <twi_inRepStart>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:84

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    4512:	61 e0       	ldi	r22, 0x01	; 1
    4514:	83 e1       	ldi	r24, 0x13	; 19
    4516:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:85
  digitalWrite(SCL, 1);
    451a:	61 e0       	ldi	r22, 0x01	; 1
    451c:	82 e1       	ldi	r24, 0x12	; 18
    451e:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:88

  // initialize twi prescaler and bit rate
  TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    4522:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    4526:	8c 7f       	andi	r24, 0xFC	; 252
    4528:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:89
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    452c:	8f e2       	ldi	r24, 0x2F	; 47
    452e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:97
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    4532:	85 e4       	ldi	r24, 0x45	; 69
    4534:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
twi_attachSlaveTxEvent():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:402
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    4538:	8d e8       	ldi	r24, 0x8D	; 141
    453a:	93 e0       	ldi	r25, 0x03	; 3
    453c:	90 93 c6 08 	sts	0x08C6, r25	; 0x8008c6 <twi_onSlaveTransmit+0x1>
    4540:	80 93 c5 08 	sts	0x08C5, r24	; 0x8008c5 <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\Wire\src\TwoWire\utility/twi.c:391
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    4544:	8e e8       	ldi	r24, 0x8E	; 142
    4546:	93 e0       	ldi	r25, 0x03	; 3
    4548:	90 93 c4 08 	sts	0x08C4, r25	; 0x8008c4 <twi_onSlaveReceive+0x1>
    454c:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <twi_onSlaveReceive>
begin():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    4550:	e0 91 25 0a 	lds	r30, 0x0A25	; 0x800a25 <Serial+0x10>
    4554:	f0 91 26 0a 	lds	r31, 0x0A26	; 0x800a26 <Serial+0x11>
    4558:	c0 83       	st	Z, r28
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    455a:	e0 91 21 0a 	lds	r30, 0x0A21	; 0x800a21 <Serial+0xc>
    455e:	f0 91 22 0a 	lds	r31, 0x0A22	; 0x800a22 <Serial+0xd>
    4562:	10 82       	st	Z, r1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    4564:	e0 91 23 0a 	lds	r30, 0x0A23	; 0x800a23 <Serial+0xe>
    4568:	f0 91 24 0a 	lds	r31, 0x0A24	; 0x800a24 <Serial+0xf>
    456c:	1b e0       	ldi	r17, 0x0B	; 11
    456e:	10 83       	st	Z, r17
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    4570:	10 92 2d 0a 	sts	0x0A2D, r1	; 0x800a2d <Serial+0x18>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    4574:	e0 91 29 0a 	lds	r30, 0x0A29	; 0x800a29 <Serial+0x14>
    4578:	f0 91 2a 0a 	lds	r31, 0x0A2A	; 0x800a2a <Serial+0x15>
    457c:	d6 e0       	ldi	r29, 0x06	; 6
    457e:	d0 83       	st	Z, r29
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    4580:	e0 91 27 0a 	lds	r30, 0x0A27	; 0x800a27 <Serial+0x12>
    4584:	f0 91 28 0a 	lds	r31, 0x0A28	; 0x800a28 <Serial+0x13>
    4588:	80 81       	ld	r24, Z
    458a:	88 69       	ori	r24, 0x98	; 152
    458c:	80 83       	st	Z, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    458e:	e0 91 27 0a 	lds	r30, 0x0A27	; 0x800a27 <Serial+0x12>
    4592:	f0 91 28 0a 	lds	r31, 0x0A28	; 0x800a28 <Serial+0x13>
    4596:	80 81       	ld	r24, Z
    4598:	8f 7d       	andi	r24, 0xDF	; 223
    459a:	80 83       	st	Z, r24
dxl_init():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:253
    delay(10);
}

void dxl_init(long int baudRate)
{
    pinMode(M_TX_PIN, OUTPUT);
    459c:	61 e0       	ldi	r22, 0x01	; 1
    459e:	85 e1       	ldi	r24, 0x15	; 21
    45a0:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_DXL2023.h:254
    pinMode(M_DIR_PIN, OUTPUT);
    45a4:	61 e0       	ldi	r22, 0x01	; 1
    45a6:	86 e1       	ldi	r24, 0x16	; 22
    45a8:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
begin():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    45ac:	e0 91 88 09 	lds	r30, 0x0988	; 0x800988 <Serial1+0x10>
    45b0:	f0 91 89 09 	lds	r31, 0x0989	; 0x800989 <Serial1+0x11>
    45b4:	c0 83       	st	Z, r28
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    45b6:	e0 91 84 09 	lds	r30, 0x0984	; 0x800984 <Serial1+0xc>
    45ba:	f0 91 85 09 	lds	r31, 0x0985	; 0x800985 <Serial1+0xd>
    45be:	10 82       	st	Z, r1
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    45c0:	e0 91 86 09 	lds	r30, 0x0986	; 0x800986 <Serial1+0xe>
    45c4:	f0 91 87 09 	lds	r31, 0x0987	; 0x800987 <Serial1+0xf>
    45c8:	10 83       	st	Z, r17
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    45ca:	10 92 90 09 	sts	0x0990, r1	; 0x800990 <Serial1+0x18>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    45ce:	e0 91 8c 09 	lds	r30, 0x098C	; 0x80098c <Serial1+0x14>
    45d2:	f0 91 8d 09 	lds	r31, 0x098D	; 0x80098d <Serial1+0x15>
    45d6:	d0 83       	st	Z, r29
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    45d8:	e0 91 8a 09 	lds	r30, 0x098A	; 0x80098a <Serial1+0x12>
    45dc:	f0 91 8b 09 	lds	r31, 0x098B	; 0x80098b <Serial1+0x13>
    45e0:	80 81       	ld	r24, Z
    45e2:	88 69       	ori	r24, 0x98	; 152
    45e4:	80 83       	st	Z, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    45e6:	e0 91 8a 09 	lds	r30, 0x098A	; 0x80098a <Serial1+0x12>
    45ea:	f0 91 8b 09 	lds	r31, 0x098B	; 0x80098b <Serial1+0x13>
    45ee:	80 81       	ld	r24, Z
    45f0:	8f 7d       	andi	r24, 0xDF	; 223
    45f2:	80 83       	st	Z, r24
robot_setup():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1475

  Wire.begin();
  Serial.begin(115200);
  dxl_init(115200);
  lcd.begin(20, 4);
    45f4:	64 e0       	ldi	r22, 0x04	; 4
    45f6:	84 e1       	ldi	r24, 0x14	; 20
    45f8:	0e 94 fd 05 	call	0xbfa	; 0xbfa <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.36]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1476
  delay(800);
    45fc:	60 e2       	ldi	r22, 0x20	; 32
    45fe:	73 e0       	ldi	r23, 0x03	; 3
    4600:	80 e0       	ldi	r24, 0x00	; 0
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
setup():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_main_code_2023.ino:13
{

  robot_setup();

  //eeprom set in code
  T90=136;spd=255;range_value=20;
    4608:	88 e8       	ldi	r24, 0x88	; 136
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	90 93 e6 08 	sts	0x08E6, r25	; 0x8008e6 <T90+0x1>
    4610:	80 93 e5 08 	sts	0x08E5, r24	; 0x8008e5 <T90>
    4614:	8f ef       	ldi	r24, 0xFF	; 255
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	90 93 e4 08 	sts	0x08E4, r25	; 0x8008e4 <spd+0x1>
    461c:	80 93 e3 08 	sts	0x08E3, r24	; 0x8008e3 <spd>
    4620:	84 e1       	ldi	r24, 0x14	; 20
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	90 93 e2 08 	sts	0x08E2, r25	; 0x8008e2 <range_value+0x1>
    4628:	80 93 e1 08 	sts	0x08E1, r24	; 0x8008e1 <range_value>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_main_code_2023.ino:14
  EEPROM_write_int(T90_address, T90);
    462c:	68 e8       	ldi	r22, 0x88	; 136
    462e:	70 e0       	ldi	r23, 0x00	; 0
    4630:	88 e9       	ldi	r24, 0x98	; 152
    4632:	90 e0       	ldi	r25, 0x00	; 0
    4634:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_main_code_2023.ino:15
  EEPROM_write_int(spd_address, spd);
    4638:	60 91 e3 08 	lds	r22, 0x08E3	; 0x8008e3 <spd>
    463c:	70 91 e4 08 	lds	r23, 0x08E4	; 0x8008e4 <spd+0x1>
    4640:	86 e9       	ldi	r24, 0x96	; 150
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_main_code_2023.ino:16
  EEPROM_write_int(range_address, range_value);
    4648:	60 91 e1 08 	lds	r22, 0x08E1	; 0x8008e1 <range_value>
    464c:	70 91 e2 08 	lds	r23, 0x08E2	; 0x8008e2 <range_value+0x1>
    4650:	8a e9       	ldi	r24, 0x9A	; 154
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_main_code_2023.ino:19
  
  //compass eeprom
  DN=96,DE=188,DS=277;
    4658:	80 e6       	ldi	r24, 0x60	; 96
    465a:	90 e0       	ldi	r25, 0x00	; 0
    465c:	90 93 e0 08 	sts	0x08E0, r25	; 0x8008e0 <DN+0x1>
    4660:	80 93 df 08 	sts	0x08DF, r24	; 0x8008df <DN>
    4664:	8c eb       	ldi	r24, 0xBC	; 188
    4666:	90 e0       	ldi	r25, 0x00	; 0
    4668:	90 93 de 08 	sts	0x08DE, r25	; 0x8008de <DE+0x1>
    466c:	80 93 dd 08 	sts	0x08DD, r24	; 0x8008dd <DE>
    4670:	85 e1       	ldi	r24, 0x15	; 21
    4672:	91 e0       	ldi	r25, 0x01	; 1
    4674:	90 93 dc 08 	sts	0x08DC, r25	; 0x8008dc <DS+0x1>
    4678:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <DS>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_main_code_2023.ino:20
  EEPROM_write_int(DN_address, DN);
    467c:	60 e6       	ldi	r22, 0x60	; 96
    467e:	70 e0       	ldi	r23, 0x00	; 0
    4680:	8c e9       	ldi	r24, 0x9C	; 156
    4682:	90 e0       	ldi	r25, 0x00	; 0
    4684:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_main_code_2023.ino:21
  EEPROM_write_int(DE_address, DE);
    4688:	60 91 dd 08 	lds	r22, 0x08DD	; 0x8008dd <DE>
    468c:	70 91 de 08 	lds	r23, 0x08DE	; 0x8008de <DE+0x1>
    4690:	8e e9       	ldi	r24, 0x9E	; 158
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_main_code_2023.ino:22
  EEPROM_write_int(DS_address, DS);
    4698:	60 91 db 08 	lds	r22, 0x08DB	; 0x8008db <DS>
    469c:	70 91 dc 08 	lds	r23, 0x08DC	; 0x8008dc <DS+0x1>
    46a0:	80 ea       	ldi	r24, 0xA0	; 160
    46a2:	90 e0       	ldi	r25, 0x00	; 0
    46a4:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_main_code_2023.ino:25

  // servo positions
  basket_up=275,basket_normal=500,arm_normal=660,arm_down=190,arm_dropping=800,gripper_close=900,gripper_open=590;
    46a8:	84 ef       	ldi	r24, 0xF4	; 244
    46aa:	91 e0       	ldi	r25, 0x01	; 1
    46ac:	90 93 da 08 	sts	0x08DA, r25	; 0x8008da <basket_normal+0x1>
    46b0:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <basket_normal>
    46b4:	84 e9       	ldi	r24, 0x94	; 148
    46b6:	92 e0       	ldi	r25, 0x02	; 2
    46b8:	90 93 d8 08 	sts	0x08D8, r25	; 0x8008d8 <arm_normal+0x1>
    46bc:	80 93 d7 08 	sts	0x08D7, r24	; 0x8008d7 <arm_normal>
    46c0:	8e eb       	ldi	r24, 0xBE	; 190
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	90 93 d6 08 	sts	0x08D6, r25	; 0x8008d6 <arm_down+0x1>
    46c8:	80 93 d5 08 	sts	0x08D5, r24	; 0x8008d5 <arm_down>
    46cc:	80 e2       	ldi	r24, 0x20	; 32
    46ce:	93 e0       	ldi	r25, 0x03	; 3
    46d0:	90 93 d4 08 	sts	0x08D4, r25	; 0x8008d4 <arm_dropping+0x1>
    46d4:	80 93 d3 08 	sts	0x08D3, r24	; 0x8008d3 <arm_dropping>
    46d8:	84 e8       	ldi	r24, 0x84	; 132
    46da:	93 e0       	ldi	r25, 0x03	; 3
    46dc:	90 93 d2 08 	sts	0x08D2, r25	; 0x8008d2 <gripper_close+0x1>
    46e0:	80 93 d1 08 	sts	0x08D1, r24	; 0x8008d1 <gripper_close>
    46e4:	8e e4       	ldi	r24, 0x4E	; 78
    46e6:	92 e0       	ldi	r25, 0x02	; 2
    46e8:	90 93 d0 08 	sts	0x08D0, r25	; 0x8008d0 <gripper_open+0x1>
    46ec:	80 93 cf 08 	sts	0x08CF, r24	; 0x8008cf <gripper_open>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_main_code_2023.ino:26
  EEPROM_write_int(basket_up_address, basket_up);
    46f0:	63 e1       	ldi	r22, 0x13	; 19
    46f2:	71 e0       	ldi	r23, 0x01	; 1
    46f4:	84 ea       	ldi	r24, 0xA4	; 164
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_main_code_2023.ino:27
  EEPROM_write_int(basket_normal_address, basket_normal);
    46fc:	60 91 d9 08 	lds	r22, 0x08D9	; 0x8008d9 <basket_normal>
    4700:	70 91 da 08 	lds	r23, 0x08DA	; 0x8008da <basket_normal+0x1>
    4704:	86 ea       	ldi	r24, 0xA6	; 166
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_main_code_2023.ino:28
  EEPROM_write_int(arm_normal_address, arm_normal);
    470c:	60 91 d7 08 	lds	r22, 0x08D7	; 0x8008d7 <arm_normal>
    4710:	70 91 d8 08 	lds	r23, 0x08D8	; 0x8008d8 <arm_normal+0x1>
    4714:	88 ea       	ldi	r24, 0xA8	; 168
    4716:	90 e0       	ldi	r25, 0x00	; 0
    4718:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_main_code_2023.ino:29
  EEPROM_write_int(arm_down_address, arm_down);
    471c:	60 91 d5 08 	lds	r22, 0x08D5	; 0x8008d5 <arm_down>
    4720:	70 91 d6 08 	lds	r23, 0x08D6	; 0x8008d6 <arm_down+0x1>
    4724:	8a ea       	ldi	r24, 0xAA	; 170
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_main_code_2023.ino:30
  EEPROM_write_int(arm_dropping_address, arm_dropping);
    472c:	60 91 d3 08 	lds	r22, 0x08D3	; 0x8008d3 <arm_dropping>
    4730:	70 91 d4 08 	lds	r23, 0x08D4	; 0x8008d4 <arm_dropping+0x1>
    4734:	8c ea       	ldi	r24, 0xAC	; 172
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_main_code_2023.ino:31
  EEPROM_write_int(gripper_close_address, gripper_close);
    473c:	60 91 d1 08 	lds	r22, 0x08D1	; 0x8008d1 <gripper_close>
    4740:	70 91 d2 08 	lds	r23, 0x08D2	; 0x8008d2 <gripper_close+0x1>
    4744:	8e ea       	ldi	r24, 0xAE	; 174
    4746:	90 e0       	ldi	r25, 0x00	; 0
    4748:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_main_code_2023.ino:32
  EEPROM_write_int(gripper_open_address, gripper_open);
    474c:	60 91 cf 08 	lds	r22, 0x08CF	; 0x8008cf <gripper_open>
    4750:	70 91 d0 08 	lds	r23, 0x08D0	; 0x8008d0 <gripper_open+0x1>
    4754:	80 eb       	ldi	r24, 0xB0	; 176
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
menu():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1335
}

void menu(void) {
  static unsigned char page = 1, last_page = 6;
  int battery;
  lcd.clear();
    475c:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1336
  lcd.print("Error: check switch");
    4760:	83 e5       	ldi	r24, 0x53	; 83
    4762:	95 e0       	ldi	r25, 0x05	; 5
    4764:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1338

  lcd.setCursor(0, 1);
    4768:	61 e0       	ldi	r22, 0x01	; 1
    476a:	80 e0       	ldi	r24, 0x00	; 0
    476c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1339
  lcd.printf("SBL=%d   SBR=%d", SBL, SBR);
    4770:	86 e2       	ldi	r24, 0x26	; 38
    4772:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    4776:	ec 01       	movw	r28, r24
    4778:	85 e2       	ldi	r24, 0x25	; 37
    477a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    477e:	df 93       	push	r29
    4780:	cf 93       	push	r28
    4782:	9f 93       	push	r25
    4784:	8f 93       	push	r24
    4786:	87 e6       	ldi	r24, 0x67	; 103
    4788:	95 e0       	ldi	r25, 0x05	; 5
    478a:	9f 93       	push	r25
    478c:	8f 93       	push	r24
    478e:	ce eb       	ldi	r28, 0xBE	; 190
    4790:	da e0       	ldi	r29, 0x0A	; 10
    4792:	df 93       	push	r29
    4794:	cf 93       	push	r28
    4796:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1341

  lcd.setCursor(0, 3);
    479a:	63 e0       	ldi	r22, 0x03	; 3
    479c:	80 e0       	ldi	r24, 0x00	; 0
    479e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1342
  lcd.printf("p_p=%d next_p=%d Ent=%d", previuse_page, next_page, start);
    47a2:	86 e0       	ldi	r24, 0x06	; 6
    47a4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    47a8:	f8 2e       	mov	r15, r24
    47aa:	e9 2e       	mov	r14, r25
    47ac:	88 e0       	ldi	r24, 0x08	; 8
    47ae:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    47b2:	18 2f       	mov	r17, r24
    47b4:	09 2f       	mov	r16, r25
    47b6:	89 e0       	ldi	r24, 0x09	; 9
    47b8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    47bc:	ef 92       	push	r14
    47be:	ff 92       	push	r15
    47c0:	0f 93       	push	r16
    47c2:	1f 93       	push	r17
    47c4:	9f 93       	push	r25
    47c6:	8f 93       	push	r24
    47c8:	87 e7       	ldi	r24, 0x77	; 119
    47ca:	95 e0       	ldi	r25, 0x05	; 5
    47cc:	9f 93       	push	r25
    47ce:	8f 93       	push	r24
    47d0:	df 93       	push	r29
    47d2:	cf 93       	push	r28
    47d4:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1344

  if (start == 0 || next_page == 0 || previuse_page == 0 || SBL == 0 || SBR == 0)
    47d8:	86 e0       	ldi	r24, 0x06	; 6
    47da:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    47de:	ed b7       	in	r30, 0x3d	; 61
    47e0:	fe b7       	in	r31, 0x3e	; 62
    47e2:	72 96       	adiw	r30, 0x12	; 18
    47e4:	0f b6       	in	r0, 0x3f	; 63
    47e6:	f8 94       	cli
    47e8:	fe bf       	out	0x3e, r31	; 62
    47ea:	0f be       	out	0x3f, r0	; 63
    47ec:	ed bf       	out	0x3d, r30	; 61
    47ee:	89 2b       	or	r24, r25
    47f0:	09 f0       	breq	.+2      	; 0x47f4 <main+0x3c4>
    47f2:	07 c2       	rjmp	.+1038   	; 0x4c02 <main+0x7d2>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1345
    beep(10);
    47f4:	8a e0       	ldi	r24, 0x0A	; 10
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	0e 94 61 08 	call	0x10c2	; 0x10c2 <beep(int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1346
  lcd.clear();
    47fc:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1354
      while (next_page == 0)
        ;
      delay(50);
      page++;
      if (page > last_page)
        page = 1;
    4800:	dd 24       	eor	r13, r13
    4802:	d3 94       	inc	r13
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1363
      while (previuse_page == 0)
        ;
      delay(50);
      page--;
      if (page < 1)
        page = last_page;
    4804:	c6 e0       	ldi	r28, 0x06	; 6
    4806:	cc 2e       	mov	r12, r28
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1398
        lcd.print("Rescue Team");
        beep(1);
        break;
      }
      battery = analogRead(A7);
      battery = (battery * 5 / 102.3) * 3.1;
    4808:	d5 e0       	ldi	r29, 0x05	; 5
    480a:	bd 2e       	mov	r11, r29
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1400
      lcd.setCursor(8, 0);
      lcd.printf("bat=%3d ", battery);
    480c:	ca ee       	ldi	r28, 0xEA	; 234
    480e:	d5 e0       	ldi	r29, 0x05	; 5
    4810:	0e eb       	ldi	r16, 0xBE	; 190
    4812:	1a e0       	ldi	r17, 0x0A	; 10
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1348

  if (start == 0 || next_page == 0 || previuse_page == 0 || SBL == 0 || SBR == 0)
    beep(10);
  lcd.clear();
  while (1) {
    if (next_page == 0) {
    4814:	88 e0       	ldi	r24, 0x08	; 8
    4816:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    481a:	89 2b       	or	r24, r25
    481c:	a9 f4       	brne	.+42     	; 0x4848 <main+0x418>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1349
      while (next_page == 0)
    481e:	88 e0       	ldi	r24, 0x08	; 8
    4820:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    4824:	89 2b       	or	r24, r25
    4826:	d9 f3       	breq	.-10     	; 0x481e <main+0x3ee>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1351
        ;
      delay(50);
    4828:	62 e3       	ldi	r22, 0x32	; 50
    482a:	70 e0       	ldi	r23, 0x00	; 0
    482c:	80 e0       	ldi	r24, 0x00	; 0
    482e:	90 e0       	ldi	r25, 0x00	; 0
    4830:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1352
      page++;
    4834:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <menu()::page>
    4838:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1353
      if (page > last_page)
    483a:	87 30       	cpi	r24, 0x07	; 7
    483c:	08 f0       	brcs	.+2      	; 0x4840 <main+0x410>
    483e:	fa c1       	rjmp	.+1012   	; 0x4c34 <main+0x804>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1352
  while (1) {
    if (next_page == 0) {
      while (next_page == 0)
        ;
      delay(50);
      page++;
    4840:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <menu()::page>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1355
      if (page > last_page)
        page = 1;
      lcd.clear();
    4844:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1357
    }
    if (previuse_page == 0) {
    4848:	89 e0       	ldi	r24, 0x09	; 9
    484a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    484e:	89 2b       	or	r24, r25
    4850:	a1 f4       	brne	.+40     	; 0x487a <main+0x44a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1358
      while (previuse_page == 0)
    4852:	89 e0       	ldi	r24, 0x09	; 9
    4854:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    4858:	89 2b       	or	r24, r25
    485a:	d9 f3       	breq	.-10     	; 0x4852 <main+0x422>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1360
        ;
      delay(50);
    485c:	62 e3       	ldi	r22, 0x32	; 50
    485e:	70 e0       	ldi	r23, 0x00	; 0
    4860:	80 e0       	ldi	r24, 0x00	; 0
    4862:	90 e0       	ldi	r25, 0x00	; 0
    4864:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1361
      page--;
    4868:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <menu()::page>
    486c:	81 50       	subi	r24, 0x01	; 1
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1362
      if (page < 1)
    486e:	09 f4       	brne	.+2      	; 0x4872 <main+0x442>
    4870:	e4 c1       	rjmp	.+968    	; 0x4c3a <main+0x80a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1361
    }
    if (previuse_page == 0) {
      while (previuse_page == 0)
        ;
      delay(50);
      page--;
    4872:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <menu()::page>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1364
      if (page < 1)
        page = last_page;
      lcd.clear();
    4876:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1366
    }
    if (page <= 4) {
    487a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <menu()::page>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1367
      lcd.setCursor(2, 0);
    487e:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1366
      page--;
      if (page < 1)
        page = last_page;
      lcd.clear();
    }
    if (page <= 4) {
    4880:	85 30       	cpi	r24, 0x05	; 5
    4882:	08 f0       	brcs	.+2      	; 0x4886 <main+0x456>
    4884:	dd c1       	rjmp	.+954    	; 0x4c40 <main+0x810>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1367
      lcd.setCursor(2, 0);
    4886:	82 e0       	ldi	r24, 0x02	; 2
    4888:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1368
      lcd.print("Start ");
    488c:	8f e8       	ldi	r24, 0x8F	; 143
    488e:	95 e0       	ldi	r25, 0x05	; 5
    4890:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1369
      lcd.setCursor(2, 1);
    4894:	61 e0       	ldi	r22, 0x01	; 1
    4896:	82 e0       	ldi	r24, 0x02	; 2
    4898:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1370
      lcd.print("Test Sensor   ");
    489c:	86 e9       	ldi	r24, 0x96	; 150
    489e:	95 e0       	ldi	r25, 0x05	; 5
    48a0:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1371
      lcd.setCursor(2, 2);
    48a4:	62 e0       	ldi	r22, 0x02	; 2
    48a6:	82 e0       	ldi	r24, 0x02	; 2
    48a8:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1372
      lcd.print("Setup         ");
    48ac:	85 ea       	ldi	r24, 0xA5	; 165
    48ae:	95 e0       	ldi	r25, 0x05	; 5
    48b0:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1373
      lcd.setCursor(2, 3);
    48b4:	63 e0       	ldi	r22, 0x03	; 3
    48b6:	82 e0       	ldi	r24, 0x02	; 2
    48b8:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1374
      lcd.print("Test Color    ");
    48bc:	84 eb       	ldi	r24, 0xB4	; 180
    48be:	95 e0       	ldi	r25, 0x05	; 5
    48c0:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1375
      lcd.setCursor(0, page - 1);
    48c4:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <menu()::page>
    48c8:	61 50       	subi	r22, 0x01	; 1
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1382
    } else if (page > 4) {
      lcd.setCursor(2, 0);
      lcd.print("Test Motor   ");
      lcd.setCursor(2, 1);
      lcd.print("color calib ");
      lcd.setCursor(0, page - 5);
    48ca:	80 e0       	ldi	r24, 0x00	; 0
    48cc:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1383
      lcd.print("> ");
    48d0:	8d ec       	ldi	r24, 0xCD	; 205
    48d2:	97 e0       	ldi	r25, 0x07	; 7
    48d4:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1386
    }

    if (page == 1)  // start
    48d8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <menu()::page>
    48dc:	81 30       	cpi	r24, 0x01	; 1
    48de:	09 f0       	breq	.+2      	; 0x48e2 <main+0x4b2>
    48e0:	0e c2       	rjmp	.+1052   	; 0x4cfe <main+0x8ce>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1388
    {
      if (start == 0) {
    48e2:	86 e0       	ldi	r24, 0x06	; 6
    48e4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    48e8:	89 2b       	or	r24, r25
    48ea:	09 f0       	breq	.+2      	; 0x48ee <main+0x4be>
    48ec:	bc c1       	rjmp	.+888    	; 0x4c66 <main+0x836>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1389
        while (start == 0)
    48ee:	86 e0       	ldi	r24, 0x06	; 6
    48f0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    48f4:	89 2b       	or	r24, r25
    48f6:	d9 f3       	breq	.-10     	; 0x48ee <main+0x4be>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1391
          ;
        lcd.clear();
    48f8:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1393

        lcd.print("Rescue Team");
    48fc:	8e ed       	ldi	r24, 0xDE	; 222
    48fe:	95 e0       	ldi	r25, 0x05	; 5
    4900:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1394
        beep(1);
    4904:	81 e0       	ldi	r24, 0x01	; 1
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	0e 94 61 08 	call	0x10c2	; 0x10c2 <beep(int)>
setup():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_main_code_2023.ino:39
  //ev zone setup
  barband[0]=0;barband[1]=0;barband[2]=0;barband[3]=0;
  
  menu();
  //move_arm(arm_normal,500);move_gripper(gripper_open,500);delay(1500);
  go(60,60);
    490c:	6c e3       	ldi	r22, 0x3C	; 60
    490e:	70 e0       	ldi	r23, 0x00	; 0
    4910:	8c e3       	ldi	r24, 0x3C	; 60
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_main_code_2023.ino:40
  while ((SM + SL1 + SL2 + SL3 + SL4 + SL5 + SL6 + SR1 + SR2 + SR3 + SR4 + SR5 + SR6) > 5);
    4918:	40 e0       	ldi	r20, 0x00	; 0
    491a:	60 e0       	ldi	r22, 0x00	; 0
    491c:	80 e0       	ldi	r24, 0x00	; 0
    491e:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4922:	ec 01       	movw	r28, r24
    4924:	40 e0       	ldi	r20, 0x00	; 0
    4926:	60 e0       	ldi	r22, 0x00	; 0
    4928:	81 e0       	ldi	r24, 0x01	; 1
    492a:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    492e:	c8 0f       	add	r28, r24
    4930:	d9 1f       	adc	r29, r25
    4932:	40 e0       	ldi	r20, 0x00	; 0
    4934:	60 e0       	ldi	r22, 0x00	; 0
    4936:	82 e0       	ldi	r24, 0x02	; 2
    4938:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    493c:	c8 0f       	add	r28, r24
    493e:	d9 1f       	adc	r29, r25
    4940:	40 e0       	ldi	r20, 0x00	; 0
    4942:	60 e0       	ldi	r22, 0x00	; 0
    4944:	83 e0       	ldi	r24, 0x03	; 3
    4946:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    494a:	c8 0f       	add	r28, r24
    494c:	d9 1f       	adc	r29, r25
    494e:	40 e0       	ldi	r20, 0x00	; 0
    4950:	60 e0       	ldi	r22, 0x00	; 0
    4952:	84 e0       	ldi	r24, 0x04	; 4
    4954:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4958:	c8 0f       	add	r28, r24
    495a:	d9 1f       	adc	r29, r25
    495c:	40 e0       	ldi	r20, 0x00	; 0
    495e:	60 e0       	ldi	r22, 0x00	; 0
    4960:	85 e0       	ldi	r24, 0x05	; 5
    4962:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4966:	c8 0f       	add	r28, r24
    4968:	d9 1f       	adc	r29, r25
    496a:	40 e0       	ldi	r20, 0x00	; 0
    496c:	60 e0       	ldi	r22, 0x00	; 0
    496e:	86 e0       	ldi	r24, 0x06	; 6
    4970:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4974:	c8 0f       	add	r28, r24
    4976:	d9 1f       	adc	r29, r25
    4978:	40 e0       	ldi	r20, 0x00	; 0
    497a:	61 e0       	ldi	r22, 0x01	; 1
    497c:	81 e0       	ldi	r24, 0x01	; 1
    497e:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4982:	c8 0f       	add	r28, r24
    4984:	d9 1f       	adc	r29, r25
    4986:	40 e0       	ldi	r20, 0x00	; 0
    4988:	61 e0       	ldi	r22, 0x01	; 1
    498a:	82 e0       	ldi	r24, 0x02	; 2
    498c:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4990:	c8 0f       	add	r28, r24
    4992:	d9 1f       	adc	r29, r25
    4994:	40 e0       	ldi	r20, 0x00	; 0
    4996:	61 e0       	ldi	r22, 0x01	; 1
    4998:	83 e0       	ldi	r24, 0x03	; 3
    499a:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    499e:	c8 0f       	add	r28, r24
    49a0:	d9 1f       	adc	r29, r25
    49a2:	40 e0       	ldi	r20, 0x00	; 0
    49a4:	61 e0       	ldi	r22, 0x01	; 1
    49a6:	84 e0       	ldi	r24, 0x04	; 4
    49a8:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    49ac:	c8 0f       	add	r28, r24
    49ae:	d9 1f       	adc	r29, r25
    49b0:	40 e0       	ldi	r20, 0x00	; 0
    49b2:	61 e0       	ldi	r22, 0x01	; 1
    49b4:	85 e0       	ldi	r24, 0x05	; 5
    49b6:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    49ba:	c8 0f       	add	r28, r24
    49bc:	d9 1f       	adc	r29, r25
    49be:	40 e0       	ldi	r20, 0x00	; 0
    49c0:	61 e0       	ldi	r22, 0x01	; 1
    49c2:	86 e0       	ldi	r24, 0x06	; 6
    49c4:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    49c8:	8c 0f       	add	r24, r28
    49ca:	9d 1f       	adc	r25, r29
    49cc:	06 97       	sbiw	r24, 0x06	; 6
    49ce:	0c f0       	brlt	.+2      	; 0x49d2 <main+0x5a2>
    49d0:	a3 cf       	rjmp	.-186    	; 0x4918 <main+0x4e8>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_main_code_2023.ino:41
  move(forward,T90/2);
    49d2:	60 91 e5 08 	lds	r22, 0x08E5	; 0x8008e5 <T90>
    49d6:	70 91 e6 08 	lds	r23, 0x08E6	; 0x8008e6 <T90+0x1>
    49da:	77 ff       	sbrs	r23, 7
    49dc:	02 c0       	rjmp	.+4      	; 0x49e2 <main+0x5b2>
    49de:	6f 5f       	subi	r22, 0xFF	; 255
    49e0:	7f 4f       	sbci	r23, 0xFF	; 255
    49e2:	75 95       	asr	r23
    49e4:	67 95       	ror	r22
    49e6:	44 eb       	ldi	r20, 0xB4	; 180
    49e8:	50 e0       	ldi	r21, 0x00	; 0
    49ea:	8a e0       	ldi	r24, 0x0A	; 10
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
color_detection():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2021
        archery();
      }
    }
  }
  else if (right_card != WHITE) {
    direction=Right;
    49f2:	9c e0       	ldi	r25, 0x0C	; 12
    49f4:	e9 2e       	mov	r14, r25
    49f6:	f1 2c       	mov	r15, r1
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2068
    if (right_card == YELLOW) {
      go(0, 0);
      if (color_R == YELLOW) {
        lcd.clear();
        lcd.print("archery");
        move(forward,T90/3,100);
    49f8:	03 e0       	ldi	r16, 0x03	; 3
    49fa:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1967
  int inter_detected = false;
  int deadend_detected = false;
  left_card = color_L;
  right_card = color_R;
  if (left_card != WHITE) {
    direction=Left;
    49fc:	2b e0       	ldi	r18, 0x0B	; 11
    49fe:	c2 2e       	mov	r12, r18
    4a00:	d1 2c       	mov	r13, r1
loop():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_main_code_2023.ino:48




void loop(){
  linefollow();
    4a02:	0e 94 db 07 	call	0xfb6	; 0xfb6 <linefollow()>
color_detection():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1961
    go(0,0); delay(2000);
  }
}
*/
void color_detection() {
  int T90 = EEPROM_read_int(T90_address);
    4a06:	88 e9       	ldi	r24, 0x98	; 152
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    4a0e:	ec 01       	movw	r28, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1964
  int inter_detected = false;
  int deadend_detected = false;
  left_card = color_L;
    4a10:	81 e0       	ldi	r24, 0x01	; 1
    4a12:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    4a16:	a8 2e       	mov	r10, r24
    4a18:	88 0f       	add	r24, r24
    4a1a:	bb 08       	sbc	r11, r11
    4a1c:	b0 92 0b 01 	sts	0x010B, r11	; 0x80010b <left_card+0x1>
    4a20:	a0 92 0a 01 	sts	0x010A, r10	; 0x80010a <left_card>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1965
  right_card = color_R;
    4a24:	82 e0       	ldi	r24, 0x02	; 2
    4a26:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    4a2a:	08 2e       	mov	r0, r24
    4a2c:	00 0c       	add	r0, r0
    4a2e:	99 0b       	sbc	r25, r25
    4a30:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <right_card+0x1>
    4a34:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <right_card>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1966
  if (left_card != WHITE) {
    4a38:	f7 e0       	ldi	r31, 0x07	; 7
    4a3a:	af 16       	cp	r10, r31
    4a3c:	b1 04       	cpc	r11, r1
    4a3e:	11 f4       	brne	.+4      	; 0x4a44 <main+0x614>
    4a40:	0c 94 9f 30 	jmp	0x613e	; 0x613e <main+0x1d0e>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1967
    direction=Left;
    4a44:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <direction+0x1>
    4a48:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <direction>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1968
    if (left_card == GREEN) {
    4a4c:	aa 94       	dec	r10
    4a4e:	ab 28       	or	r10, r11
    4a50:	49 f5       	brne	.+82     	; 0x4aa4 <main+0x674>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1969
        go(0, 0);
    4a52:	70 e0       	ldi	r23, 0x00	; 0
    4a54:	60 e0       	ldi	r22, 0x00	; 0
    4a56:	90 e0       	ldi	r25, 0x00	; 0
    4a58:	80 e0       	ldi	r24, 0x00	; 0
    4a5a:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1970
        beep(1);
    4a5e:	81 e0       	ldi	r24, 0x01	; 1
    4a60:	90 e0       	ldi	r25, 0x00	; 0
    4a62:	0e 94 61 08 	call	0x10c2	; 0x10c2 <beep(int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1971
      if (color_L == GREEN) {
    4a66:	81 e0       	ldi	r24, 0x01	; 1
    4a68:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    4a6c:	81 30       	cpi	r24, 0x01	; 1
    4a6e:	09 f0       	breq	.+2      	; 0x4a72 <main+0x642>
    4a70:	44 c0       	rjmp	.+136    	; 0x4afa <main+0x6ca>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1972
        lcd.clear();
    4a72:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1973
        lcd.print("Football");
    4a76:	88 e3       	ldi	r24, 0x38	; 56
    4a78:	98 e0       	ldi	r25, 0x08	; 8
    4a7a:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1974
        move(forward,T90/3,100);
    4a7e:	ce 01       	movw	r24, r28
    4a80:	b8 01       	movw	r22, r16
    4a82:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    4a86:	44 e6       	ldi	r20, 0x64	; 100
    4a88:	50 e0       	ldi	r21, 0x00	; 0
    4a8a:	8a e0       	ldi	r24, 0x0A	; 10
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1975
        move(Left,T90,150);
    4a92:	46 e9       	ldi	r20, 0x96	; 150
    4a94:	50 e0       	ldi	r21, 0x00	; 0
    4a96:	be 01       	movw	r22, r28
    4a98:	8b e0       	ldi	r24, 0x0B	; 11
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1976
        bowling();
    4aa0:	0e 94 75 12 	call	0x24ea	; 0x24ea <bowling()>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1979
      }
    }
    if (left_card == SILVER) {
    4aa4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <left_card>
    4aa8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <left_card+0x1>
    4aac:	05 97       	sbiw	r24, 0x05	; 5
    4aae:	29 f5       	brne	.+74     	; 0x4afa <main+0x6ca>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1980
      go(0, 0);
    4ab0:	70 e0       	ldi	r23, 0x00	; 0
    4ab2:	60 e0       	ldi	r22, 0x00	; 0
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	80 e0       	ldi	r24, 0x00	; 0
    4ab8:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1981
      if (color_L == SILVER) {
    4abc:	81 e0       	ldi	r24, 0x01	; 1
    4abe:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    4ac2:	85 30       	cpi	r24, 0x05	; 5
    4ac4:	09 f0       	breq	.+2      	; 0x4ac8 <main+0x698>
    4ac6:	44 c0       	rjmp	.+136    	; 0x4b50 <main+0x720>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1982
        lcd.clear();
    4ac8:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1983
        lcd.print("Obstacle");
    4acc:	81 e4       	ldi	r24, 0x41	; 65
    4ace:	98 e0       	ldi	r25, 0x08	; 8
    4ad0:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1984
        move(forward,T90/3,100);
    4ad4:	ce 01       	movw	r24, r28
    4ad6:	b8 01       	movw	r22, r16
    4ad8:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    4adc:	44 e6       	ldi	r20, 0x64	; 100
    4ade:	50 e0       	ldi	r21, 0x00	; 0
    4ae0:	8a e0       	ldi	r24, 0x0A	; 10
    4ae2:	90 e0       	ldi	r25, 0x00	; 0
    4ae4:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1985
        move(Left,T90,150);
    4ae8:	46 e9       	ldi	r20, 0x96	; 150
    4aea:	50 e0       	ldi	r21, 0x00	; 0
    4aec:	be 01       	movw	r22, r28
    4aee:	8b e0       	ldi	r24, 0x0B	; 11
    4af0:	90 e0       	ldi	r25, 0x00	; 0
    4af2:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1986
        obstacle();
    4af6:	0e 94 ce 10 	call	0x219c	; 0x219c <obstacle()>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1989
      }
    }
    if (left_card == BLUE) {
    4afa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <left_card>
    4afe:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <left_card+0x1>
    4b02:	02 97       	sbiw	r24, 0x02	; 2
    4b04:	29 f5       	brne	.+74     	; 0x4b50 <main+0x720>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1990
      go(0, 0);
    4b06:	70 e0       	ldi	r23, 0x00	; 0
    4b08:	60 e0       	ldi	r22, 0x00	; 0
    4b0a:	90 e0       	ldi	r25, 0x00	; 0
    4b0c:	80 e0       	ldi	r24, 0x00	; 0
    4b0e:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1991
      if (color_L == BLUE) {
    4b12:	81 e0       	ldi	r24, 0x01	; 1
    4b14:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    4b18:	82 30       	cpi	r24, 0x02	; 2
    4b1a:	09 f0       	breq	.+2      	; 0x4b1e <main+0x6ee>
    4b1c:	45 c0       	rjmp	.+138    	; 0x4ba8 <main+0x778>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1992
        lcd.clear();
    4b1e:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1993
        lcd.print("weight lift");
    4b22:	8a e4       	ldi	r24, 0x4A	; 74
    4b24:	98 e0       	ldi	r25, 0x08	; 8
    4b26:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1994
        move(forward,T90/3,100);
    4b2a:	ce 01       	movw	r24, r28
    4b2c:	b8 01       	movw	r22, r16
    4b2e:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    4b32:	44 e6       	ldi	r20, 0x64	; 100
    4b34:	50 e0       	ldi	r21, 0x00	; 0
    4b36:	8a e0       	ldi	r24, 0x0A	; 10
    4b38:	90 e0       	ldi	r25, 0x00	; 0
    4b3a:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1995
        move(Left,T90,150);
    4b3e:	46 e9       	ldi	r20, 0x96	; 150
    4b40:	50 e0       	ldi	r21, 0x00	; 0
    4b42:	be 01       	movw	r22, r28
    4b44:	8b e0       	ldi	r24, 0x0B	; 11
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1996
        wlift();
    4b4c:	0e 94 27 13 	call	0x264e	; 0x264e <wlift()>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1999
      }
    }
    if (left_card == RED) {
    4b50:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <left_card>
    4b54:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <left_card+0x1>
    4b58:	89 2b       	or	r24, r25
    4b5a:	31 f5       	brne	.+76     	; 0x4ba8 <main+0x778>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2000
      go(0, 0);
    4b5c:	70 e0       	ldi	r23, 0x00	; 0
    4b5e:	60 e0       	ldi	r22, 0x00	; 0
    4b60:	90 e0       	ldi	r25, 0x00	; 0
    4b62:	80 e0       	ldi	r24, 0x00	; 0
    4b64:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2001
      if (color_L == RED) {
    4b68:	81 e0       	ldi	r24, 0x01	; 1
    4b6a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    4b6e:	81 11       	cpse	r24, r1
    4b70:	45 c0       	rjmp	.+138    	; 0x4bfc <main+0x7cc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2002
        lcd.clear();
    4b72:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2003
        lcd.print("Trck");
    4b76:	86 e5       	ldi	r24, 0x56	; 86
    4b78:	98 e0       	ldi	r25, 0x08	; 8
    4b7a:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2004
        move(forward,T90/3,100);
    4b7e:	ce 01       	movw	r24, r28
    4b80:	b8 01       	movw	r22, r16
    4b82:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    4b86:	44 e6       	ldi	r20, 0x64	; 100
    4b88:	50 e0       	ldi	r21, 0x00	; 0
    4b8a:	8a e0       	ldi	r24, 0x0A	; 10
    4b8c:	90 e0       	ldi	r25, 0x00	; 0
    4b8e:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2005
        move(Left,T90,150);
    4b92:	46 e9       	ldi	r20, 0x96	; 150
    4b94:	50 e0       	ldi	r21, 0x00	; 0
    4b96:	be 01       	movw	r22, r28
    4b98:	8b e0       	ldi	r24, 0x0B	; 11
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2006
        track(1,Left);
    4ba0:	8b e0       	ldi	r24, 0x0B	; 11
    4ba2:	90 e0       	ldi	r25, 0x00	; 0
    4ba4:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <track(int, int) [clone .constprop.3]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2009
      }
    }
    if (left_card == YELLOW) {
    4ba8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <left_card>
    4bac:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <left_card+0x1>
    4bb0:	04 97       	sbiw	r24, 0x04	; 4
    4bb2:	21 f5       	brne	.+72     	; 0x4bfc <main+0x7cc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2010
      go(0, 0);
    4bb4:	70 e0       	ldi	r23, 0x00	; 0
    4bb6:	60 e0       	ldi	r22, 0x00	; 0
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	80 e0       	ldi	r24, 0x00	; 0
    4bbc:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2011
      if (color_L == YELLOW) {
    4bc0:	81 e0       	ldi	r24, 0x01	; 1
    4bc2:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    4bc6:	84 30       	cpi	r24, 0x04	; 4
    4bc8:	c9 f4       	brne	.+50     	; 0x4bfc <main+0x7cc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2012
        lcd.clear();
    4bca:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2013
        lcd.print("archery");
    4bce:	8b e5       	ldi	r24, 0x5B	; 91
    4bd0:	98 e0       	ldi	r25, 0x08	; 8
    4bd2:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2014
        move(forward,T90/3,100);
    4bd6:	ce 01       	movw	r24, r28
    4bd8:	b8 01       	movw	r22, r16
    4bda:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    4bde:	44 e6       	ldi	r20, 0x64	; 100
    4be0:	50 e0       	ldi	r21, 0x00	; 0
    4be2:	8a e0       	ldi	r24, 0x0A	; 10
    4be4:	90 e0       	ldi	r25, 0x00	; 0
    4be6:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2015
        move(Left,T90,150);
    4bea:	46 e9       	ldi	r20, 0x96	; 150
    4bec:	50 e0       	ldi	r21, 0x00	; 0
    4bee:	be 01       	movw	r22, r28
    4bf0:	8b e0       	ldi	r24, 0x0B	; 11
    4bf2:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2069
      go(0, 0);
      if (color_R == YELLOW) {
        lcd.clear();
        lcd.print("archery");
        move(forward,T90/3,100);
        move(Right,T90,150);
    4bf4:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2070
        archery();
    4bf8:	0e 94 ee 11 	call	0x23dc	; 0x23dc <archery()>
main():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    4bfc:	0e 94 9c 04 	call	0x938	; 0x938 <serialEventRun()>
    4c00:	00 cf       	rjmp	.-512    	; 0x4a02 <main+0x5d2>
menu():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1344
  lcd.printf("SBL=%d   SBR=%d", SBL, SBR);

  lcd.setCursor(0, 3);
  lcd.printf("p_p=%d next_p=%d Ent=%d", previuse_page, next_page, start);

  if (start == 0 || next_page == 0 || previuse_page == 0 || SBL == 0 || SBR == 0)
    4c02:	88 e0       	ldi	r24, 0x08	; 8
    4c04:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    4c08:	89 2b       	or	r24, r25
    4c0a:	09 f4       	brne	.+2      	; 0x4c0e <main+0x7de>
    4c0c:	f3 cd       	rjmp	.-1050   	; 0x47f4 <main+0x3c4>
    4c0e:	89 e0       	ldi	r24, 0x09	; 9
    4c10:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    4c14:	89 2b       	or	r24, r25
    4c16:	09 f4       	brne	.+2      	; 0x4c1a <main+0x7ea>
    4c18:	ed cd       	rjmp	.-1062   	; 0x47f4 <main+0x3c4>
    4c1a:	85 e2       	ldi	r24, 0x25	; 37
    4c1c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    4c20:	89 2b       	or	r24, r25
    4c22:	09 f4       	brne	.+2      	; 0x4c26 <main+0x7f6>
    4c24:	e7 cd       	rjmp	.-1074   	; 0x47f4 <main+0x3c4>
    4c26:	86 e2       	ldi	r24, 0x26	; 38
    4c28:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    4c2c:	89 2b       	or	r24, r25
    4c2e:	09 f4       	brne	.+2      	; 0x4c32 <main+0x802>
    4c30:	e1 cd       	rjmp	.-1086   	; 0x47f4 <main+0x3c4>
    4c32:	e4 cd       	rjmp	.-1080   	; 0x47fc <main+0x3cc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1354
      while (next_page == 0)
        ;
      delay(50);
      page++;
      if (page > last_page)
        page = 1;
    4c34:	d0 92 05 01 	sts	0x0105, r13	; 0x800105 <menu()::page>
    4c38:	05 ce       	rjmp	.-1014   	; 0x4844 <main+0x414>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1363
      while (previuse_page == 0)
        ;
      delay(50);
      page--;
      if (page < 1)
        page = last_page;
    4c3a:	c0 92 05 01 	sts	0x0105, r12	; 0x800105 <menu()::page>
    4c3e:	1b ce       	rjmp	.-970    	; 0x4876 <main+0x446>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1378
      lcd.setCursor(2, 3);
      lcd.print("Test Color    ");
      lcd.setCursor(0, page - 1);
      lcd.print("> ");
    } else if (page > 4) {
      lcd.setCursor(2, 0);
    4c40:	82 e0       	ldi	r24, 0x02	; 2
    4c42:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1379
      lcd.print("Test Motor   ");
    4c46:	83 ec       	ldi	r24, 0xC3	; 195
    4c48:	95 e0       	ldi	r25, 0x05	; 5
    4c4a:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1380
      lcd.setCursor(2, 1);
    4c4e:	61 e0       	ldi	r22, 0x01	; 1
    4c50:	82 e0       	ldi	r24, 0x02	; 2
    4c52:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1381
      lcd.print("color calib ");
    4c56:	81 ed       	ldi	r24, 0xD1	; 209
    4c58:	95 e0       	ldi	r25, 0x05	; 5
    4c5a:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1382
      lcd.setCursor(0, page - 5);
    4c5e:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <menu()::page>
    4c62:	65 50       	subi	r22, 0x05	; 5
    4c64:	32 ce       	rjmp	.-924    	; 0x48ca <main+0x49a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1397

        lcd.print("Rescue Team");
        beep(1);
        break;
      }
      battery = analogRead(A7);
    4c66:	84 e3       	ldi	r24, 0x34	; 52
    4c68:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <analogRead>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1398
      battery = (battery * 5 / 102.3) * 3.1;
    4c6c:	b8 9e       	mul	r11, r24
    4c6e:	b0 01       	movw	r22, r0
    4c70:	b9 9e       	mul	r11, r25
    4c72:	70 0d       	add	r23, r0
    4c74:	11 24       	eor	r1, r1
    4c76:	07 2e       	mov	r0, r23
    4c78:	00 0c       	add	r0, r0
    4c7a:	88 0b       	sbc	r24, r24
    4c7c:	99 0b       	sbc	r25, r25
    4c7e:	0e 94 ed 34 	call	0x69da	; 0x69da <__floatsisf>
    4c82:	2a e9       	ldi	r18, 0x9A	; 154
    4c84:	39 e9       	ldi	r19, 0x99	; 153
    4c86:	4c ec       	ldi	r20, 0xCC	; 204
    4c88:	52 e4       	ldi	r21, 0x42	; 66
    4c8a:	0e 94 43 34 	call	0x6886	; 0x6886 <__divsf3>
    4c8e:	26 e6       	ldi	r18, 0x66	; 102
    4c90:	36 e6       	ldi	r19, 0x66	; 102
    4c92:	46 e4       	ldi	r20, 0x46	; 70
    4c94:	50 e4       	ldi	r21, 0x40	; 64
    4c96:	0e 94 9d 35 	call	0x6b3a	; 0x6b3a <__mulsf3>
    4c9a:	0e 94 b5 34 	call	0x696a	; 0x696a <__fixsfsi>
    4c9e:	a6 2e       	mov	r10, r22
    4ca0:	97 2e       	mov	r9, r23
    4ca2:	e6 2e       	mov	r14, r22
    4ca4:	f7 2e       	mov	r15, r23
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1399
      lcd.setCursor(8, 0);
    4ca6:	60 e0       	ldi	r22, 0x00	; 0
    4ca8:	88 e0       	ldi	r24, 0x08	; 8
    4caa:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1400
      lcd.printf("bat=%3d ", battery);
    4cae:	9f 92       	push	r9
    4cb0:	af 92       	push	r10
    4cb2:	df 93       	push	r29
    4cb4:	cf 93       	push	r28
    4cb6:	1f 93       	push	r17
    4cb8:	0f 93       	push	r16
    4cba:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1402

      if (battery < 105) {
    4cbe:	0f 90       	pop	r0
    4cc0:	0f 90       	pop	r0
    4cc2:	0f 90       	pop	r0
    4cc4:	0f 90       	pop	r0
    4cc6:	0f 90       	pop	r0
    4cc8:	0f 90       	pop	r0
    4cca:	39 e6       	ldi	r19, 0x69	; 105
    4ccc:	e3 16       	cp	r14, r19
    4cce:	f1 04       	cpc	r15, r1
    4cd0:	0c f0       	brlt	.+2      	; 0x4cd4 <main+0x8a4>
    4cd2:	a0 cd       	rjmp	.-1216   	; 0x4814 <main+0x3e4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1403
        LED_on;
    4cd4:	61 e0       	ldi	r22, 0x01	; 1
    4cd6:	8d e0       	ldi	r24, 0x0D	; 13
    4cd8:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1404
        delay(50);
    4cdc:	62 e3       	ldi	r22, 0x32	; 50
    4cde:	70 e0       	ldi	r23, 0x00	; 0
    4ce0:	80 e0       	ldi	r24, 0x00	; 0
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1405
        LED_off;
    4ce8:	60 e0       	ldi	r22, 0x00	; 0
    4cea:	8d e0       	ldi	r24, 0x0D	; 13
    4cec:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1406
        delay(50);
    4cf0:	62 e3       	ldi	r22, 0x32	; 50
    4cf2:	70 e0       	ldi	r23, 0x00	; 0
    4cf4:	80 e0       	ldi	r24, 0x00	; 0
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
    4cfc:	8b cd       	rjmp	.-1258   	; 0x4814 <main+0x3e4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1408
      }
    } else if (page == 2)  // Test Sensor
    4cfe:	82 30       	cpi	r24, 0x02	; 2
    4d00:	09 f0       	breq	.+2      	; 0x4d04 <main+0x8d4>
    4d02:	61 c4       	rjmp	.+2242   	; 0x55c6 <main+0x1196>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1410
    {
      if (start == 0) {
    4d04:	86 e0       	ldi	r24, 0x06	; 6
    4d06:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    4d0a:	89 2b       	or	r24, r25
    4d0c:	09 f0       	breq	.+2      	; 0x4d10 <main+0x8e0>
    4d0e:	82 cd       	rjmp	.-1276   	; 0x4814 <main+0x3e4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1411
        while (start == 0)
    4d10:	86 e0       	ldi	r24, 0x06	; 6
    4d12:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    4d16:	89 2b       	or	r24, r25
    4d18:	d9 f3       	breq	.-10     	; 0x4d10 <main+0x8e0>
menu_sensor():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:806
long microsecondsToMillimeters(long microseconds) {
  return microseconds * 10 / 29 / 2;
}
void menu_sensor(void) {
  static char page = 1, last_page = 6;
  lcd.clear();
    4d1a:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:936
      delay(200);
      lcd.clear();
    } else if (page == 6)  // compass
    {
      lcd.setCursor(0, 0);
      lcd.printf("deg: %d pi: %d ro: %d", deg, pitch, role);
    4d1e:	ce eb       	ldi	r28, 0xBE	; 190
    4d20:	da e0       	ldi	r29, 0x0A	; 10
pulseIn():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.c:50

  unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);

  // prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
  if (width)
    return clockCyclesToMicroseconds(width * 16 + 16);
    4d22:	bb e0       	ldi	r27, 0x0B	; 11
    4d24:	cb 2e       	mov	r12, r27
    4d26:	d1 2c       	mov	r13, r1
    4d28:	e1 2c       	mov	r14, r1
    4d2a:	f1 2c       	mov	r15, r1
menu_sensor():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:808
}
void menu_sensor(void) {
  static char page = 1, last_page = 6;
  lcd.clear();
  while (1) {
    if (next_page == 0) {
    4d2c:	88 e0       	ldi	r24, 0x08	; 8
    4d2e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    4d32:	89 2b       	or	r24, r25
    4d34:	a9 f4       	brne	.+42     	; 0x4d60 <main+0x930>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:809
      while (next_page == 0)
    4d36:	88 e0       	ldi	r24, 0x08	; 8
    4d38:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    4d3c:	89 2b       	or	r24, r25
    4d3e:	d9 f3       	breq	.-10     	; 0x4d36 <main+0x906>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:811
        ;
      delay(50);
    4d40:	62 e3       	ldi	r22, 0x32	; 50
    4d42:	70 e0       	ldi	r23, 0x00	; 0
    4d44:	80 e0       	ldi	r24, 0x00	; 0
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:812
      page++;
    4d4c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <menu_sensor()::page>
    4d50:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:813
      if (page > last_page)
    4d52:	87 30       	cpi	r24, 0x07	; 7
    4d54:	0c f0       	brlt	.+2      	; 0x4d58 <main+0x928>
    4d56:	5b c1       	rjmp	.+694    	; 0x500e <main+0xbde>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:814
        page = 1;
    4d58:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <menu_sensor()::page>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:815
      lcd.clear();
    4d5c:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:817
    }
    if (previuse_page == 0) {
    4d60:	89 e0       	ldi	r24, 0x09	; 9
    4d62:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    4d66:	89 2b       	or	r24, r25
    4d68:	a9 f4       	brne	.+42     	; 0x4d94 <main+0x964>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:818
      while (previuse_page == 0)
    4d6a:	89 e0       	ldi	r24, 0x09	; 9
    4d6c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    4d70:	89 2b       	or	r24, r25
    4d72:	d9 f3       	breq	.-10     	; 0x4d6a <main+0x93a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:820
        ;
      delay(50);
    4d74:	62 e3       	ldi	r22, 0x32	; 50
    4d76:	70 e0       	ldi	r23, 0x00	; 0
    4d78:	80 e0       	ldi	r24, 0x00	; 0
    4d7a:	90 e0       	ldi	r25, 0x00	; 0
    4d7c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:821
      page--;
    4d80:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <menu_sensor()::page>
    4d84:	81 50       	subi	r24, 0x01	; 1
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:822
      if (page < 1)
    4d86:	18 16       	cp	r1, r24
    4d88:	0c f0       	brlt	.+2      	; 0x4d8c <main+0x95c>
    4d8a:	43 c1       	rjmp	.+646    	; 0x5012 <main+0xbe2>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:823
        page = last_page;
    4d8c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <menu_sensor()::page>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:824
      lcd.clear();
    4d90:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:826
    }
    if (increase == 0)
    4d94:	8a e0       	ldi	r24, 0x0A	; 10
    4d96:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    4d9a:	89 2b       	or	r24, r25
    4d9c:	09 f0       	breq	.+2      	; 0x4da0 <main+0x970>
    4d9e:	3b c1       	rjmp	.+630    	; 0x5016 <main+0xbe6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:827
      go(40, 40);
    4da0:	68 e2       	ldi	r22, 0x28	; 40
    4da2:	70 e0       	ldi	r23, 0x00	; 0
    4da4:	88 e2       	ldi	r24, 0x28	; 40
    4da6:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:831
    else if (decrease == 0)
      go(-40, -40);
    else
      go(0, 0);
    4da8:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:835

    ///////////////

    if (page == 1) {
    4dac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <menu_sensor()::page>
    4db0:	81 30       	cpi	r24, 0x01	; 1
    4db2:	09 f0       	breq	.+2      	; 0x4db6 <main+0x986>
    4db4:	93 c1       	rjmp	.+806    	; 0x50dc <main+0xcac>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:836
      lcd.setCursor(0, 0);
    4db6:	60 e0       	ldi	r22, 0x00	; 0
    4db8:	80 e0       	ldi	r24, 0x00	; 0
    4dba:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:837
      lcd.printf("%d       %d      %d", SL10, SM, SR10);
    4dbe:	40 e0       	ldi	r20, 0x00	; 0
    4dc0:	63 e0       	ldi	r22, 0x03	; 3
    4dc2:	82 e0       	ldi	r24, 0x02	; 2
    4dc4:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4dc8:	b8 2e       	mov	r11, r24
    4dca:	a9 2e       	mov	r10, r25
    4dcc:	40 e0       	ldi	r20, 0x00	; 0
    4dce:	60 e0       	ldi	r22, 0x00	; 0
    4dd0:	80 e0       	ldi	r24, 0x00	; 0
    4dd2:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4dd6:	18 2f       	mov	r17, r24
    4dd8:	09 2f       	mov	r16, r25
    4dda:	40 e0       	ldi	r20, 0x00	; 0
    4ddc:	62 e0       	ldi	r22, 0x02	; 2
    4dde:	82 e0       	ldi	r24, 0x02	; 2
    4de0:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4de4:	af 92       	push	r10
    4de6:	bf 92       	push	r11
    4de8:	0f 93       	push	r16
    4dea:	1f 93       	push	r17
    4dec:	9f 93       	push	r25
    4dee:	8f 93       	push	r24
    4df0:	83 ef       	ldi	r24, 0xF3	; 243
    4df2:	95 e0       	ldi	r25, 0x05	; 5
    4df4:	9f 93       	push	r25
    4df6:	8f 93       	push	r24
    4df8:	df 93       	push	r29
    4dfa:	cf 93       	push	r28
    4dfc:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:839

      lcd.setCursor(0, 1);
    4e00:	61 e0       	ldi	r22, 0x01	; 1
    4e02:	80 e0       	ldi	r24, 0x00	; 0
    4e04:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:840
      lcd.printf("   %d%d%d    %d%d%d   ", SL3, SL2, SL1, SR1, SR2, SR3);
    4e08:	40 e0       	ldi	r20, 0x00	; 0
    4e0a:	61 e0       	ldi	r22, 0x01	; 1
    4e0c:	83 e0       	ldi	r24, 0x03	; 3
    4e0e:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4e12:	58 2e       	mov	r5, r24
    4e14:	49 2e       	mov	r4, r25
    4e16:	40 e0       	ldi	r20, 0x00	; 0
    4e18:	61 e0       	ldi	r22, 0x01	; 1
    4e1a:	82 e0       	ldi	r24, 0x02	; 2
    4e1c:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4e20:	78 2e       	mov	r7, r24
    4e22:	69 2e       	mov	r6, r25
    4e24:	40 e0       	ldi	r20, 0x00	; 0
    4e26:	61 e0       	ldi	r22, 0x01	; 1
    4e28:	81 e0       	ldi	r24, 0x01	; 1
    4e2a:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4e2e:	98 2e       	mov	r9, r24
    4e30:	89 2e       	mov	r8, r25
    4e32:	40 e0       	ldi	r20, 0x00	; 0
    4e34:	60 e0       	ldi	r22, 0x00	; 0
    4e36:	81 e0       	ldi	r24, 0x01	; 1
    4e38:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4e3c:	b8 2e       	mov	r11, r24
    4e3e:	a9 2e       	mov	r10, r25
    4e40:	40 e0       	ldi	r20, 0x00	; 0
    4e42:	60 e0       	ldi	r22, 0x00	; 0
    4e44:	82 e0       	ldi	r24, 0x02	; 2
    4e46:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4e4a:	18 2f       	mov	r17, r24
    4e4c:	09 2f       	mov	r16, r25
    4e4e:	40 e0       	ldi	r20, 0x00	; 0
    4e50:	60 e0       	ldi	r22, 0x00	; 0
    4e52:	83 e0       	ldi	r24, 0x03	; 3
    4e54:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4e58:	4f 92       	push	r4
    4e5a:	5f 92       	push	r5
    4e5c:	6f 92       	push	r6
    4e5e:	7f 92       	push	r7
    4e60:	8f 92       	push	r8
    4e62:	9f 92       	push	r9
    4e64:	af 92       	push	r10
    4e66:	bf 92       	push	r11
    4e68:	0f 93       	push	r16
    4e6a:	1f 93       	push	r17
    4e6c:	9f 93       	push	r25
    4e6e:	8f 93       	push	r24
    4e70:	87 e0       	ldi	r24, 0x07	; 7
    4e72:	96 e0       	ldi	r25, 0x06	; 6
    4e74:	9f 93       	push	r25
    4e76:	8f 93       	push	r24
    4e78:	df 93       	push	r29
    4e7a:	cf 93       	push	r28
    4e7c:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:842

      lcd.setCursor(0, 2);
    4e80:	62 e0       	ldi	r22, 0x02	; 2
    4e82:	80 e0       	ldi	r24, 0x00	; 0
    4e84:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:843
      lcd.printf("%d%d%d  ENC=%3d %d%d%d", SL6, SL5, SL4, cnt / 100, SR4, SR5, SR6);
    4e88:	40 e0       	ldi	r20, 0x00	; 0
    4e8a:	61 e0       	ldi	r22, 0x01	; 1
    4e8c:	86 e0       	ldi	r24, 0x06	; 6
    4e8e:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4e92:	38 2e       	mov	r3, r24
    4e94:	29 2e       	mov	r2, r25
    4e96:	40 e0       	ldi	r20, 0x00	; 0
    4e98:	61 e0       	ldi	r22, 0x01	; 1
    4e9a:	85 e0       	ldi	r24, 0x05	; 5
    4e9c:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4ea0:	58 2e       	mov	r5, r24
    4ea2:	49 2e       	mov	r4, r25
    4ea4:	40 e0       	ldi	r20, 0x00	; 0
    4ea6:	61 e0       	ldi	r22, 0x01	; 1
    4ea8:	84 e0       	ldi	r24, 0x04	; 4
    4eaa:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4eae:	78 2e       	mov	r7, r24
    4eb0:	69 2e       	mov	r6, r25
    4eb2:	ac b4       	in	r10, 0x2c	; 44
    4eb4:	bd b4       	in	r11, 0x2d	; 45
    4eb6:	40 e0       	ldi	r20, 0x00	; 0
    4eb8:	60 e0       	ldi	r22, 0x00	; 0
    4eba:	84 e0       	ldi	r24, 0x04	; 4
    4ebc:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4ec0:	98 2e       	mov	r9, r24
    4ec2:	89 2e       	mov	r8, r25
    4ec4:	40 e0       	ldi	r20, 0x00	; 0
    4ec6:	60 e0       	ldi	r22, 0x00	; 0
    4ec8:	85 e0       	ldi	r24, 0x05	; 5
    4eca:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4ece:	18 2f       	mov	r17, r24
    4ed0:	09 2f       	mov	r16, r25
    4ed2:	40 e0       	ldi	r20, 0x00	; 0
    4ed4:	60 e0       	ldi	r22, 0x00	; 0
    4ed6:	86 e0       	ldi	r24, 0x06	; 6
    4ed8:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4edc:	9c 01       	movw	r18, r24
    4ede:	2f 92       	push	r2
    4ee0:	3f 92       	push	r3
    4ee2:	4f 92       	push	r4
    4ee4:	5f 92       	push	r5
    4ee6:	6f 92       	push	r6
    4ee8:	7f 92       	push	r7
    4eea:	c5 01       	movw	r24, r10
    4eec:	64 e6       	ldi	r22, 0x64	; 100
    4eee:	70 e0       	ldi	r23, 0x00	; 0
    4ef0:	0e 94 0a 36 	call	0x6c14	; 0x6c14 <__udivmodhi4>
    4ef4:	7f 93       	push	r23
    4ef6:	6f 93       	push	r22
    4ef8:	8f 92       	push	r8
    4efa:	9f 92       	push	r9
    4efc:	0f 93       	push	r16
    4efe:	1f 93       	push	r17
    4f00:	3f 93       	push	r19
    4f02:	2f 93       	push	r18
    4f04:	8e e1       	ldi	r24, 0x1E	; 30
    4f06:	96 e0       	ldi	r25, 0x06	; 6
    4f08:	9f 93       	push	r25
    4f0a:	8f 93       	push	r24
    4f0c:	df 93       	push	r29
    4f0e:	cf 93       	push	r28
    4f10:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:845

      lcd.setCursor(0, 3);
    4f14:	8d b7       	in	r24, 0x3d	; 61
    4f16:	9e b7       	in	r25, 0x3e	; 62
    4f18:	8c 96       	adiw	r24, 0x2c	; 44
    4f1a:	0f b6       	in	r0, 0x3f	; 63
    4f1c:	f8 94       	cli
    4f1e:	9e bf       	out	0x3e, r25	; 62
    4f20:	0f be       	out	0x3f, r0	; 63
    4f22:	8d bf       	out	0x3d, r24	; 61
    4f24:	63 e0       	ldi	r22, 0x03	; 3
    4f26:	80 e0       	ldi	r24, 0x00	; 0
    4f28:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:846
      lcd.printf("%d%d%d", SL9, SL8, SL7);
    4f2c:	40 e0       	ldi	r20, 0x00	; 0
    4f2e:	60 e0       	ldi	r22, 0x00	; 0
    4f30:	87 e0       	ldi	r24, 0x07	; 7
    4f32:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4f36:	b8 2e       	mov	r11, r24
    4f38:	a9 2e       	mov	r10, r25
    4f3a:	40 e0       	ldi	r20, 0x00	; 0
    4f3c:	62 e0       	ldi	r22, 0x02	; 2
    4f3e:	80 e0       	ldi	r24, 0x00	; 0
    4f40:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4f44:	18 2f       	mov	r17, r24
    4f46:	09 2f       	mov	r16, r25
    4f48:	40 e0       	ldi	r20, 0x00	; 0
    4f4a:	62 e0       	ldi	r22, 0x02	; 2
    4f4c:	81 e0       	ldi	r24, 0x01	; 1
    4f4e:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4f52:	af 92       	push	r10
    4f54:	bf 92       	push	r11
    4f56:	0f 93       	push	r16
    4f58:	1f 93       	push	r17
    4f5a:	9f 93       	push	r25
    4f5c:	8f 93       	push	r24
    4f5e:	0e e2       	ldi	r16, 0x2E	; 46
    4f60:	16 e0       	ldi	r17, 0x06	; 6
    4f62:	1f 93       	push	r17
    4f64:	0f 93       	push	r16
    4f66:	df 93       	push	r29
    4f68:	cf 93       	push	r28
    4f6a:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:848

      lcd.setCursor(13, 3);
    4f6e:	63 e0       	ldi	r22, 0x03	; 3
    4f70:	8d e0       	ldi	r24, 0x0D	; 13
    4f72:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:849
      lcd.printf("%d%d%d", SR7, SR8, SR9);
    4f76:	40 e0       	ldi	r20, 0x00	; 0
    4f78:	63 e0       	ldi	r22, 0x03	; 3
    4f7a:	81 e0       	ldi	r24, 0x01	; 1
    4f7c:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4f80:	98 2e       	mov	r9, r24
    4f82:	89 2e       	mov	r8, r25
    4f84:	40 e0       	ldi	r20, 0x00	; 0
    4f86:	63 e0       	ldi	r22, 0x03	; 3
    4f88:	80 e0       	ldi	r24, 0x00	; 0
    4f8a:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4f8e:	b8 2e       	mov	r11, r24
    4f90:	a9 2e       	mov	r10, r25
    4f92:	40 e0       	ldi	r20, 0x00	; 0
    4f94:	61 e0       	ldi	r22, 0x01	; 1
    4f96:	87 e0       	ldi	r24, 0x07	; 7
    4f98:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    4f9c:	8f 92       	push	r8
    4f9e:	9f 92       	push	r9
    4fa0:	af 92       	push	r10
    4fa2:	bf 92       	push	r11
    4fa4:	9f 93       	push	r25
    4fa6:	8f 93       	push	r24
    4fa8:	1f 93       	push	r17
    4faa:	0f 93       	push	r16
    4fac:	df 93       	push	r29
    4fae:	cf 93       	push	r28
    4fb0:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:851

      lcd.setCursor(4, 3);
    4fb4:	63 e0       	ldi	r22, 0x03	; 3
    4fb6:	84 e0       	ldi	r24, 0x04	; 4
    4fb8:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:852
      if (color_L == RED)
    4fbc:	81 e0       	ldi	r24, 0x01	; 1
    4fbe:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    4fc2:	ed b7       	in	r30, 0x3d	; 61
    4fc4:	fe b7       	in	r31, 0x3e	; 62
    4fc6:	74 96       	adiw	r30, 0x14	; 20
    4fc8:	0f b6       	in	r0, 0x3f	; 63
    4fca:	f8 94       	cli
    4fcc:	fe bf       	out	0x3e, r31	; 62
    4fce:	0f be       	out	0x3f, r0	; 63
    4fd0:	ed bf       	out	0x3d, r30	; 61
    4fd2:	81 11       	cpse	r24, r1
    4fd4:	2f c0       	rjmp	.+94     	; 0x5034 <main+0xc04>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:853
        lcd.print("RED ");
    4fd6:	86 e8       	ldi	r24, 0x86	; 134
    4fd8:	94 e0       	ldi	r25, 0x04	; 4
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:863
      else if (color_L == YELLOW)
        lcd.print("YEL ");
      else if (color_L == SILVER)
        lcd.print("SIL ");
      else
        lcd.print("WHT ");
    4fda:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:865

      lcd.setCursor(9, 3);
    4fde:	63 e0       	ldi	r22, 0x03	; 3
    4fe0:	89 e0       	ldi	r24, 0x09	; 9
    4fe2:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:866
      if (color_R == RED)
    4fe6:	82 e0       	ldi	r24, 0x02	; 2
    4fe8:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    4fec:	81 11       	cpse	r24, r1
    4fee:	45 c0       	rjmp	.+138    	; 0x507a <main+0xc4a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:867
        lcd.print("RED");
    4ff0:	8a e3       	ldi	r24, 0x3A	; 58
    4ff2:	96 e0       	ldi	r25, 0x06	; 6
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:877
      else if (color_R == YELLOW)
        lcd.print("YEL");
      else if (VSR6 < 0.9)
        lcd.print("SIL");
      else
        lcd.print("WHT");
    4ff4:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:879

      if (start == 0) {
    4ff8:	86 e0       	ldi	r24, 0x06	; 6
    4ffa:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    4ffe:	89 2b       	or	r24, r25
    5000:	09 f0       	breq	.+2      	; 0x5004 <main+0xbd4>
    5002:	94 ce       	rjmp	.-728    	; 0x4d2c <main+0x8fc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:880
        TCNT1 = 0;
    5004:	1d bc       	out	0x2d, r1	; 45
    5006:	1c bc       	out	0x2c, r1	; 44
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:881
        cnt = 0;
    5008:	1d bc       	out	0x2d, r1	; 45
    500a:	1c bc       	out	0x2c, r1	; 44
    500c:	8f ce       	rjmp	.-738    	; 0x4d2c <main+0x8fc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:814
      while (next_page == 0)
        ;
      delay(50);
      page++;
      if (page > last_page)
        page = 1;
    500e:	81 e0       	ldi	r24, 0x01	; 1
    5010:	a3 ce       	rjmp	.-698    	; 0x4d58 <main+0x928>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:823
      while (previuse_page == 0)
        ;
      delay(50);
      page--;
      if (page < 1)
        page = last_page;
    5012:	86 e0       	ldi	r24, 0x06	; 6
    5014:	bb ce       	rjmp	.-650    	; 0x4d8c <main+0x95c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:828
      lcd.clear();
    }
    if (increase == 0)
      go(40, 40);
    else if (decrease == 0)
    5016:	8b e0       	ldi	r24, 0x0B	; 11
    5018:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    501c:	89 2b       	or	r24, r25
    501e:	29 f4       	brne	.+10     	; 0x502a <main+0xbfa>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:829
      go(-40, -40);
    5020:	68 ed       	ldi	r22, 0xD8	; 216
    5022:	7f ef       	ldi	r23, 0xFF	; 255
    5024:	88 ed       	ldi	r24, 0xD8	; 216
    5026:	9f ef       	ldi	r25, 0xFF	; 255
    5028:	bf ce       	rjmp	.-642    	; 0x4da8 <main+0x978>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:831
    else
      go(0, 0);
    502a:	70 e0       	ldi	r23, 0x00	; 0
    502c:	60 e0       	ldi	r22, 0x00	; 0
    502e:	90 e0       	ldi	r25, 0x00	; 0
    5030:	80 e0       	ldi	r24, 0x00	; 0
    5032:	ba ce       	rjmp	.-652    	; 0x4da8 <main+0x978>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:854
      lcd.printf("%d%d%d", SR7, SR8, SR9);

      lcd.setCursor(4, 3);
      if (color_L == RED)
        lcd.print("RED ");
      else if (color_L == GREEN)
    5034:	81 e0       	ldi	r24, 0x01	; 1
    5036:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    503a:	81 30       	cpi	r24, 0x01	; 1
    503c:	19 f4       	brne	.+6      	; 0x5044 <main+0xc14>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:855
        lcd.print("GRN ");
    503e:	8d e9       	ldi	r24, 0x9D	; 157
    5040:	94 e0       	ldi	r25, 0x04	; 4
    5042:	cb cf       	rjmp	.-106    	; 0x4fda <main+0xbaa>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:856
      else if (color_L == BLUE)
    5044:	81 e0       	ldi	r24, 0x01	; 1
    5046:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    504a:	82 30       	cpi	r24, 0x02	; 2
    504c:	19 f4       	brne	.+6      	; 0x5054 <main+0xc24>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:857
        lcd.print("BLU ");
    504e:	81 e8       	ldi	r24, 0x81	; 129
    5050:	94 e0       	ldi	r25, 0x04	; 4
    5052:	c3 cf       	rjmp	.-122    	; 0x4fda <main+0xbaa>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:858
      else if (color_L == YELLOW)
    5054:	81 e0       	ldi	r24, 0x01	; 1
    5056:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    505a:	84 30       	cpi	r24, 0x04	; 4
    505c:	19 f4       	brne	.+6      	; 0x5064 <main+0xc34>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:859
        lcd.print("YEL ");
    505e:	85 e3       	ldi	r24, 0x35	; 53
    5060:	96 e0       	ldi	r25, 0x06	; 6
    5062:	bb cf       	rjmp	.-138    	; 0x4fda <main+0xbaa>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:860
      else if (color_L == SILVER)
    5064:	81 e0       	ldi	r24, 0x01	; 1
    5066:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    506a:	85 30       	cpi	r24, 0x05	; 5
    506c:	19 f4       	brne	.+6      	; 0x5074 <main+0xc44>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:861
        lcd.print("SIL ");
    506e:	85 eb       	ldi	r24, 0xB5	; 181
    5070:	94 e0       	ldi	r25, 0x04	; 4
    5072:	b3 cf       	rjmp	.-154    	; 0x4fda <main+0xbaa>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:863
      else
        lcd.print("WHT ");
    5074:	8a eb       	ldi	r24, 0xBA	; 186
    5076:	94 e0       	ldi	r25, 0x04	; 4
    5078:	b0 cf       	rjmp	.-160    	; 0x4fda <main+0xbaa>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:868

      lcd.setCursor(9, 3);
      if (color_R == RED)
        lcd.print("RED");
      else if (color_R == GREEN)
    507a:	82 e0       	ldi	r24, 0x02	; 2
    507c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    5080:	81 30       	cpi	r24, 0x01	; 1
    5082:	19 f4       	brne	.+6      	; 0x508a <main+0xc5a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:869
        lcd.print("GRN");
    5084:	8e e3       	ldi	r24, 0x3E	; 62
    5086:	96 e0       	ldi	r25, 0x06	; 6
    5088:	b5 cf       	rjmp	.-150    	; 0x4ff4 <main+0xbc4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:870
      else if (color_R == BLUE)
    508a:	82 e0       	ldi	r24, 0x02	; 2
    508c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    5090:	82 30       	cpi	r24, 0x02	; 2
    5092:	19 f4       	brne	.+6      	; 0x509a <main+0xc6a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:871
        lcd.print("BLU");
    5094:	82 e4       	ldi	r24, 0x42	; 66
    5096:	96 e0       	ldi	r25, 0x06	; 6
    5098:	ad cf       	rjmp	.-166    	; 0x4ff4 <main+0xbc4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:872
      else if (color_R == YELLOW)
    509a:	82 e0       	ldi	r24, 0x02	; 2
    509c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    50a0:	84 30       	cpi	r24, 0x04	; 4
    50a2:	19 f4       	brne	.+6      	; 0x50aa <main+0xc7a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:873
        lcd.print("YEL");
    50a4:	86 e4       	ldi	r24, 0x46	; 70
    50a6:	96 e0       	ldi	r25, 0x06	; 6
    50a8:	a5 cf       	rjmp	.-182    	; 0x4ff4 <main+0xbc4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:874
      else if (VSR6 < 0.9)
    50aa:	41 e0       	ldi	r20, 0x01	; 1
    50ac:	61 e0       	ldi	r22, 0x01	; 1
    50ae:	86 e0       	ldi	r24, 0x06	; 6
    50b0:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    50b4:	bc 01       	movw	r22, r24
    50b6:	99 0f       	add	r25, r25
    50b8:	88 0b       	sbc	r24, r24
    50ba:	99 0b       	sbc	r25, r25
    50bc:	0e 94 ed 34 	call	0x69da	; 0x69da <__floatsisf>
    50c0:	26 e6       	ldi	r18, 0x66	; 102
    50c2:	36 e6       	ldi	r19, 0x66	; 102
    50c4:	46 e6       	ldi	r20, 0x66	; 102
    50c6:	5f e3       	ldi	r21, 0x3F	; 63
    50c8:	0e 94 3e 34 	call	0x687c	; 0x687c <__cmpsf2>
    50cc:	87 ff       	sbrs	r24, 7
    50ce:	03 c0       	rjmp	.+6      	; 0x50d6 <main+0xca6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:875
        lcd.print("SIL");
    50d0:	8a e4       	ldi	r24, 0x4A	; 74
    50d2:	96 e0       	ldi	r25, 0x06	; 6
    50d4:	8f cf       	rjmp	.-226    	; 0x4ff4 <main+0xbc4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:877
      else
        lcd.print("WHT");
    50d6:	8e e4       	ldi	r24, 0x4E	; 78
    50d8:	96 e0       	ldi	r25, 0x06	; 6
    50da:	8c cf       	rjmp	.-232    	; 0x4ff4 <main+0xbc4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:884
      if (start == 0) {
        TCNT1 = 0;
        cnt = 0;
        //puls_cnt = 0;
      }
    } else if (page == 2)  // V left
    50dc:	82 30       	cpi	r24, 0x02	; 2
    50de:	09 f0       	breq	.+2      	; 0x50e2 <main+0xcb2>
    50e0:	92 c0       	rjmp	.+292    	; 0x5206 <main+0xdd6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:886
    {
      lcd.setCursor(0, 0);
    50e2:	60 e0       	ldi	r22, 0x00	; 0
    50e4:	80 e0       	ldi	r24, 0x00	; 0
    50e6:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:887
      lcd.printf("L10=%02d        %02d", VSL10, VSM);
    50ea:	41 e0       	ldi	r20, 0x01	; 1
    50ec:	60 e0       	ldi	r22, 0x00	; 0
    50ee:	80 e0       	ldi	r24, 0x00	; 0
    50f0:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    50f4:	18 2f       	mov	r17, r24
    50f6:	09 2f       	mov	r16, r25
    50f8:	41 e0       	ldi	r20, 0x01	; 1
    50fa:	62 e0       	ldi	r22, 0x02	; 2
    50fc:	82 e0       	ldi	r24, 0x02	; 2
    50fe:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    5102:	0f 93       	push	r16
    5104:	1f 93       	push	r17
    5106:	9f 93       	push	r25
    5108:	8f 93       	push	r24
    510a:	82 e5       	ldi	r24, 0x52	; 82
    510c:	96 e0       	ldi	r25, 0x06	; 6
    510e:	9f 93       	push	r25
    5110:	8f 93       	push	r24
    5112:	df 93       	push	r29
    5114:	cf 93       	push	r28
    5116:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:889

      lcd.setCursor(5, 1);
    511a:	61 e0       	ldi	r22, 0x01	; 1
    511c:	85 e0       	ldi	r24, 0x05	; 5
    511e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:890
      lcd.printf("%02d  %02d  %02d", VSL3, VSL2, VSL1);
    5122:	41 e0       	ldi	r20, 0x01	; 1
    5124:	60 e0       	ldi	r22, 0x00	; 0
    5126:	81 e0       	ldi	r24, 0x01	; 1
    5128:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    512c:	b8 2e       	mov	r11, r24
    512e:	a9 2e       	mov	r10, r25
    5130:	41 e0       	ldi	r20, 0x01	; 1
    5132:	60 e0       	ldi	r22, 0x00	; 0
    5134:	82 e0       	ldi	r24, 0x02	; 2
    5136:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    513a:	18 2f       	mov	r17, r24
    513c:	09 2f       	mov	r16, r25
    513e:	41 e0       	ldi	r20, 0x01	; 1
    5140:	60 e0       	ldi	r22, 0x00	; 0
    5142:	83 e0       	ldi	r24, 0x03	; 3
    5144:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    5148:	af 92       	push	r10
    514a:	bf 92       	push	r11
    514c:	0f 93       	push	r16
    514e:	1f 93       	push	r17
    5150:	9f 93       	push	r25
    5152:	8f 93       	push	r24
    5154:	87 e6       	ldi	r24, 0x67	; 103
    5156:	96 e0       	ldi	r25, 0x06	; 6
    5158:	9f 93       	push	r25
    515a:	8f 93       	push	r24
    515c:	df 93       	push	r29
    515e:	cf 93       	push	r28
    5160:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:892

      lcd.setCursor(2, 2);
    5164:	62 e0       	ldi	r22, 0x02	; 2
    5166:	82 e0       	ldi	r24, 0x02	; 2
    5168:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:893
      lcd.printf("%02d  %02d  %02d ", VSL6, VSL5, VSL4);
    516c:	41 e0       	ldi	r20, 0x01	; 1
    516e:	60 e0       	ldi	r22, 0x00	; 0
    5170:	84 e0       	ldi	r24, 0x04	; 4
    5172:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    5176:	b8 2e       	mov	r11, r24
    5178:	a9 2e       	mov	r10, r25
    517a:	41 e0       	ldi	r20, 0x01	; 1
    517c:	60 e0       	ldi	r22, 0x00	; 0
    517e:	85 e0       	ldi	r24, 0x05	; 5
    5180:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    5184:	18 2f       	mov	r17, r24
    5186:	09 2f       	mov	r16, r25
    5188:	41 e0       	ldi	r20, 0x01	; 1
    518a:	60 e0       	ldi	r22, 0x00	; 0
    518c:	86 e0       	ldi	r24, 0x06	; 6
    518e:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    5192:	af 92       	push	r10
    5194:	bf 92       	push	r11
    5196:	0f 93       	push	r16
    5198:	1f 93       	push	r17
    519a:	9f 93       	push	r25
    519c:	8f 93       	push	r24
    519e:	08 e7       	ldi	r16, 0x78	; 120
    51a0:	16 e0       	ldi	r17, 0x06	; 6
    51a2:	1f 93       	push	r17
    51a4:	0f 93       	push	r16
    51a6:	df 93       	push	r29
    51a8:	cf 93       	push	r28
    51aa:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:895

      lcd.setCursor(0, 3);
    51ae:	63 e0       	ldi	r22, 0x03	; 3
    51b0:	80 e0       	ldi	r24, 0x00	; 0
    51b2:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:896
      lcd.printf("%02d  %02d  %02d ", VSL9, VSL8, VSL7);
    51b6:	41 e0       	ldi	r20, 0x01	; 1
    51b8:	60 e0       	ldi	r22, 0x00	; 0
    51ba:	87 e0       	ldi	r24, 0x07	; 7
    51bc:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    51c0:	98 2e       	mov	r9, r24
    51c2:	89 2e       	mov	r8, r25
    51c4:	41 e0       	ldi	r20, 0x01	; 1
    51c6:	62 e0       	ldi	r22, 0x02	; 2
    51c8:	80 e0       	ldi	r24, 0x00	; 0
    51ca:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    51ce:	b8 2e       	mov	r11, r24
    51d0:	a9 2e       	mov	r10, r25
    51d2:	41 e0       	ldi	r20, 0x01	; 1
    51d4:	62 e0       	ldi	r22, 0x02	; 2
    51d6:	81 e0       	ldi	r24, 0x01	; 1
    51d8:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    51dc:	8f 92       	push	r8
    51de:	9f 92       	push	r9
    51e0:	af 92       	push	r10
    51e2:	bf 92       	push	r11
    51e4:	9f 93       	push	r25
    51e6:	8f 93       	push	r24
    51e8:	1f 93       	push	r17
    51ea:	0f 93       	push	r16
    51ec:	df 93       	push	r29
    51ee:	cf 93       	push	r28
    51f0:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    51f4:	8d b7       	in	r24, 0x3d	; 61
    51f6:	9e b7       	in	r25, 0x3e	; 62
    51f8:	86 96       	adiw	r24, 0x26	; 38
    51fa:	0f b6       	in	r0, 0x3f	; 63
    51fc:	f8 94       	cli
    51fe:	9e bf       	out	0x3e, r25	; 62
    5200:	0f be       	out	0x3f, r0	; 63
    5202:	8d bf       	out	0x3d, r24	; 61
    5204:	93 cd       	rjmp	.-1242   	; 0x4d2c <main+0x8fc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:897
    } else if (page == 3)  // V right
    5206:	83 30       	cpi	r24, 0x03	; 3
    5208:	09 f0       	breq	.+2      	; 0x520c <main+0xddc>
    520a:	91 c0       	rjmp	.+290    	; 0x532e <main+0xefe>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:899
    {
      lcd.setCursor(0, 0);
    520c:	60 e0       	ldi	r22, 0x00	; 0
    520e:	80 e0       	ldi	r24, 0x00	; 0
    5210:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:900
      lcd.printf("%02d        R10=%02d", VSM, VSR10);
    5214:	41 e0       	ldi	r20, 0x01	; 1
    5216:	63 e0       	ldi	r22, 0x03	; 3
    5218:	82 e0       	ldi	r24, 0x02	; 2
    521a:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    521e:	18 2f       	mov	r17, r24
    5220:	09 2f       	mov	r16, r25
    5222:	41 e0       	ldi	r20, 0x01	; 1
    5224:	60 e0       	ldi	r22, 0x00	; 0
    5226:	80 e0       	ldi	r24, 0x00	; 0
    5228:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    522c:	0f 93       	push	r16
    522e:	1f 93       	push	r17
    5230:	9f 93       	push	r25
    5232:	8f 93       	push	r24
    5234:	8a e8       	ldi	r24, 0x8A	; 138
    5236:	96 e0       	ldi	r25, 0x06	; 6
    5238:	9f 93       	push	r25
    523a:	8f 93       	push	r24
    523c:	df 93       	push	r29
    523e:	cf 93       	push	r28
    5240:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:902

      lcd.setCursor(2, 1);
    5244:	61 e0       	ldi	r22, 0x01	; 1
    5246:	82 e0       	ldi	r24, 0x02	; 2
    5248:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:903
      lcd.printf("%02d  %02d  %02d ", VSR1, VSR2, VSR3);
    524c:	41 e0       	ldi	r20, 0x01	; 1
    524e:	61 e0       	ldi	r22, 0x01	; 1
    5250:	83 e0       	ldi	r24, 0x03	; 3
    5252:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    5256:	b8 2e       	mov	r11, r24
    5258:	a9 2e       	mov	r10, r25
    525a:	41 e0       	ldi	r20, 0x01	; 1
    525c:	61 e0       	ldi	r22, 0x01	; 1
    525e:	82 e0       	ldi	r24, 0x02	; 2
    5260:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    5264:	18 2f       	mov	r17, r24
    5266:	09 2f       	mov	r16, r25
    5268:	41 e0       	ldi	r20, 0x01	; 1
    526a:	61 e0       	ldi	r22, 0x01	; 1
    526c:	81 e0       	ldi	r24, 0x01	; 1
    526e:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    5272:	af 92       	push	r10
    5274:	bf 92       	push	r11
    5276:	0f 93       	push	r16
    5278:	1f 93       	push	r17
    527a:	9f 93       	push	r25
    527c:	8f 93       	push	r24
    527e:	08 e7       	ldi	r16, 0x78	; 120
    5280:	16 e0       	ldi	r17, 0x06	; 6
    5282:	1f 93       	push	r17
    5284:	0f 93       	push	r16
    5286:	df 93       	push	r29
    5288:	cf 93       	push	r28
    528a:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:905

      lcd.setCursor(4, 2);
    528e:	62 e0       	ldi	r22, 0x02	; 2
    5290:	84 e0       	ldi	r24, 0x04	; 4
    5292:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:906
      lcd.printf("%02d  %02d  %02d ", VSR4, VSR5, VSR6);
    5296:	41 e0       	ldi	r20, 0x01	; 1
    5298:	61 e0       	ldi	r22, 0x01	; 1
    529a:	86 e0       	ldi	r24, 0x06	; 6
    529c:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    52a0:	98 2e       	mov	r9, r24
    52a2:	89 2e       	mov	r8, r25
    52a4:	41 e0       	ldi	r20, 0x01	; 1
    52a6:	61 e0       	ldi	r22, 0x01	; 1
    52a8:	85 e0       	ldi	r24, 0x05	; 5
    52aa:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    52ae:	b8 2e       	mov	r11, r24
    52b0:	a9 2e       	mov	r10, r25
    52b2:	41 e0       	ldi	r20, 0x01	; 1
    52b4:	61 e0       	ldi	r22, 0x01	; 1
    52b6:	84 e0       	ldi	r24, 0x04	; 4
    52b8:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    52bc:	8f 92       	push	r8
    52be:	9f 92       	push	r9
    52c0:	af 92       	push	r10
    52c2:	bf 92       	push	r11
    52c4:	9f 93       	push	r25
    52c6:	8f 93       	push	r24
    52c8:	1f 93       	push	r17
    52ca:	0f 93       	push	r16
    52cc:	df 93       	push	r29
    52ce:	cf 93       	push	r28
    52d0:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:908

      lcd.setCursor(6, 3);
    52d4:	63 e0       	ldi	r22, 0x03	; 3
    52d6:	86 e0       	ldi	r24, 0x06	; 6
    52d8:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:909
      lcd.printf("%02d  %02d  %02d ", VSR7, VSR8, VSR9);
    52dc:	41 e0       	ldi	r20, 0x01	; 1
    52de:	63 e0       	ldi	r22, 0x03	; 3
    52e0:	81 e0       	ldi	r24, 0x01	; 1
    52e2:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    52e6:	98 2e       	mov	r9, r24
    52e8:	89 2e       	mov	r8, r25
    52ea:	41 e0       	ldi	r20, 0x01	; 1
    52ec:	63 e0       	ldi	r22, 0x03	; 3
    52ee:	80 e0       	ldi	r24, 0x00	; 0
    52f0:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    52f4:	b8 2e       	mov	r11, r24
    52f6:	a9 2e       	mov	r10, r25
    52f8:	41 e0       	ldi	r20, 0x01	; 1
    52fa:	61 e0       	ldi	r22, 0x01	; 1
    52fc:	87 e0       	ldi	r24, 0x07	; 7
    52fe:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    5302:	8f 92       	push	r8
    5304:	9f 92       	push	r9
    5306:	af 92       	push	r10
    5308:	bf 92       	push	r11
    530a:	9f 93       	push	r25
    530c:	8f 93       	push	r24
    530e:	1f 93       	push	r17
    5310:	0f 93       	push	r16
    5312:	df 93       	push	r29
    5314:	cf 93       	push	r28
    5316:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    531a:	2d b7       	in	r18, 0x3d	; 61
    531c:	3e b7       	in	r19, 0x3e	; 62
    531e:	2a 5d       	subi	r18, 0xDA	; 218
    5320:	3f 4f       	sbci	r19, 0xFF	; 255
    5322:	0f b6       	in	r0, 0x3f	; 63
    5324:	f8 94       	cli
    5326:	3e bf       	out	0x3e, r19	; 62
    5328:	0f be       	out	0x3f, r0	; 63
    532a:	2d bf       	out	0x3d, r18	; 61
    532c:	ff cc       	rjmp	.-1538   	; 0x4d2c <main+0x8fc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:910
    } else if (page == 4)  // switches
    532e:	84 30       	cpi	r24, 0x04	; 4
    5330:	09 f0       	breq	.+2      	; 0x5334 <main+0xf04>
    5332:	7e c0       	rjmp	.+252    	; 0x5430 <main+0x1000>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:912
    {
      lcd.setCursor(0, 0);
    5334:	60 e0       	ldi	r22, 0x00	; 0
    5336:	80 e0       	ldi	r24, 0x00	; 0
    5338:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:913
      lcd.printf("SL=%d con=%d SR=%d", SFL, con, SFR);
    533c:	40 e0       	ldi	r20, 0x00	; 0
    533e:	63 e0       	ldi	r22, 0x03	; 3
    5340:	84 e0       	ldi	r24, 0x04	; 4
    5342:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    5346:	b8 2e       	mov	r11, r24
    5348:	a9 2e       	mov	r10, r25
    534a:	40 e0       	ldi	r20, 0x00	; 0
    534c:	63 e0       	ldi	r22, 0x03	; 3
    534e:	83 e0       	ldi	r24, 0x03	; 3
    5350:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    5354:	18 2f       	mov	r17, r24
    5356:	09 2f       	mov	r16, r25
    5358:	40 e0       	ldi	r20, 0x00	; 0
    535a:	62 e0       	ldi	r22, 0x02	; 2
    535c:	84 e0       	ldi	r24, 0x04	; 4
    535e:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    5362:	af 92       	push	r10
    5364:	bf 92       	push	r11
    5366:	0f 93       	push	r16
    5368:	1f 93       	push	r17
    536a:	9f 93       	push	r25
    536c:	8f 93       	push	r24
    536e:	8f e9       	ldi	r24, 0x9F	; 159
    5370:	96 e0       	ldi	r25, 0x06	; 6
    5372:	9f 93       	push	r25
    5374:	8f 93       	push	r24
    5376:	df 93       	push	r29
    5378:	cf 93       	push	r28
    537a:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:915

      lcd.setCursor(0, 1);
    537e:	61 e0       	ldi	r22, 0x01	; 1
    5380:	80 e0       	ldi	r24, 0x00	; 0
    5382:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:916
      lcd.printf("obs = %d = %02d ", obs, Vobs);
    5386:	41 e0       	ldi	r20, 0x01	; 1
    5388:	62 e0       	ldi	r22, 0x02	; 2
    538a:	86 e0       	ldi	r24, 0x06	; 6
    538c:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    5390:	18 2f       	mov	r17, r24
    5392:	09 2f       	mov	r16, r25
    5394:	40 e0       	ldi	r20, 0x00	; 0
    5396:	62 e0       	ldi	r22, 0x02	; 2
    5398:	86 e0       	ldi	r24, 0x06	; 6
    539a:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    539e:	0f 93       	push	r16
    53a0:	1f 93       	push	r17
    53a2:	9f 93       	push	r25
    53a4:	8f 93       	push	r24
    53a6:	82 eb       	ldi	r24, 0xB2	; 178
    53a8:	96 e0       	ldi	r25, 0x06	; 6
    53aa:	9f 93       	push	r25
    53ac:	8f 93       	push	r24
    53ae:	df 93       	push	r29
    53b0:	cf 93       	push	r28
    53b2:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:918

      lcd.setCursor(0, 2);
    53b6:	62 e0       	ldi	r22, 0x02	; 2
    53b8:	80 e0       	ldi	r24, 0x00	; 0
    53ba:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:919
      lcd.printf("ball=%d = %02d ", ball, Vball);
    53be:	41 e0       	ldi	r20, 0x01	; 1
    53c0:	62 e0       	ldi	r22, 0x02	; 2
    53c2:	85 e0       	ldi	r24, 0x05	; 5
    53c4:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    53c8:	18 2f       	mov	r17, r24
    53ca:	09 2f       	mov	r16, r25
    53cc:	40 e0       	ldi	r20, 0x00	; 0
    53ce:	62 e0       	ldi	r22, 0x02	; 2
    53d0:	85 e0       	ldi	r24, 0x05	; 5
    53d2:	0e 94 ba 06 	call	0xd74	; 0xd74 <read_sensor(char, char, char)>
    53d6:	0f 93       	push	r16
    53d8:	1f 93       	push	r17
    53da:	9f 93       	push	r25
    53dc:	8f 93       	push	r24
    53de:	83 ec       	ldi	r24, 0xC3	; 195
    53e0:	96 e0       	ldi	r25, 0x06	; 6
    53e2:	9f 93       	push	r25
    53e4:	8f 93       	push	r24
    53e6:	df 93       	push	r29
    53e8:	cf 93       	push	r28
    53ea:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:921

      lcd.setCursor(0, 3);
    53ee:	63 e0       	ldi	r22, 0x03	; 3
    53f0:	80 e0       	ldi	r24, 0x00	; 0
    53f2:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:922
      lcd.printf("SBL=%d  SBR=%d  ", SBL, SBR);
    53f6:	86 e2       	ldi	r24, 0x26	; 38
    53f8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    53fc:	18 2f       	mov	r17, r24
    53fe:	09 2f       	mov	r16, r25
    5400:	85 e2       	ldi	r24, 0x25	; 37
    5402:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5406:	0f 93       	push	r16
    5408:	1f 93       	push	r17
    540a:	9f 93       	push	r25
    540c:	8f 93       	push	r24
    540e:	83 ed       	ldi	r24, 0xD3	; 211
    5410:	96 e0       	ldi	r25, 0x06	; 6
    5412:	9f 93       	push	r25
    5414:	8f 93       	push	r24
    5416:	df 93       	push	r29
    5418:	cf 93       	push	r28
    541a:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    541e:	8d b7       	in	r24, 0x3d	; 61
    5420:	9e b7       	in	r25, 0x3e	; 62
    5422:	82 96       	adiw	r24, 0x22	; 34
    5424:	0f b6       	in	r0, 0x3f	; 63
    5426:	f8 94       	cli
    5428:	9e bf       	out	0x3e, r25	; 62
    542a:	0f be       	out	0x3f, r0	; 63
    542c:	8d bf       	out	0x3d, r24	; 61
    542e:	7e cc       	rjmp	.-1796   	; 0x4d2c <main+0x8fc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:923
    } else if (page == 5)  // distance
    5430:	85 30       	cpi	r24, 0x05	; 5
    5432:	09 f0       	breq	.+2      	; 0x5436 <main+0x1006>
    5434:	9a c0       	rjmp	.+308    	; 0x556a <main+0x113a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:925
    {
      lcd.setCursor(0, 0);
    5436:	60 e0       	ldi	r22, 0x00	; 0
    5438:	80 e0       	ldi	r24, 0x00	; 0
    543a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
ultrasonic():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2076
      }
    }
  }
}
int ultrasonic() {
  pinMode(pingPin, OUTPUT);
    543e:	61 e0       	ldi	r22, 0x01	; 1
    5440:	89 e1       	ldi	r24, 0x19	; 25
    5442:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2077
  digitalWrite(pingPin, LOW);
    5446:	60 e0       	ldi	r22, 0x00	; 0
    5448:	89 e1       	ldi	r24, 0x19	; 25
    544a:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2078
  delayMicroseconds(2);
    544e:	82 e0       	ldi	r24, 0x02	; 2
    5450:	90 e0       	ldi	r25, 0x00	; 0
    5452:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <delayMicroseconds>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2079
  digitalWrite(pingPin, HIGH);
    5456:	61 e0       	ldi	r22, 0x01	; 1
    5458:	89 e1       	ldi	r24, 0x19	; 25
    545a:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2080
  delayMicroseconds(10);
    545e:	8a e0       	ldi	r24, 0x0A	; 10
    5460:	90 e0       	ldi	r25, 0x00	; 0
    5462:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <delayMicroseconds>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2081
  digitalWrite(pingPin, LOW);
    5466:	60 e0       	ldi	r22, 0x00	; 0
    5468:	89 e1       	ldi	r24, 0x19	; 25
    546a:	0e 94 0c 02 	call	0x418	; 0x418 <digitalWrite>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2082
  pinMode(echoPin, INPUT);
    546e:	60 e0       	ldi	r22, 0x00	; 0
    5470:	80 e1       	ldi	r24, 0x10	; 16
    5472:	0e 94 3a 02 	call	0x474	; 0x474 <pinMode>
pulseIn():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.c:38
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
  // cache the port and bit of the pin in order to speed up the
  // pulse width measuring loop and achieve finer resolution.  calling
  // digitalRead() instead yields much coarser resolution.
  uint8_t bit = digitalPinToBitMask(pin);
    5476:	e1 e0       	ldi	r30, 0x01	; 1
    5478:	f1 e0       	ldi	r31, 0x01	; 1
    547a:	64 91       	lpm	r22, Z
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.c:39
  uint8_t port = digitalPinToPort(pin);
    547c:	ec ec       	ldi	r30, 0xCC	; 204
    547e:	f0 e0       	ldi	r31, 0x00	; 0
    5480:	84 91       	lpm	r24, Z
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.c:46

  // convert the timeout from microseconds to a number of times through
  // the initial loop; it takes approximately 16 clock cycles per iteration
  unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

  unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
    5482:	e8 2f       	mov	r30, r24
    5484:	f0 e0       	ldi	r31, 0x00	; 0
    5486:	ee 0f       	add	r30, r30
    5488:	ff 1f       	adc	r31, r31
    548a:	e4 55       	subi	r30, 0x54	; 84
    548c:	ff 4f       	sbci	r31, 0xFF	; 255
    548e:	85 91       	lpm	r24, Z+
    5490:	94 91       	lpm	r25, Z
    5492:	0c e8       	ldi	r16, 0x8C	; 140
    5494:	1d e7       	ldi	r17, 0x7D	; 125
    5496:	2a e0       	ldi	r18, 0x0A	; 10
    5498:	30 e0       	ldi	r19, 0x00	; 0
    549a:	46 2f       	mov	r20, r22
    549c:	0e 94 da 16 	call	0x2db4	; 0x2db4 <countPulseASM>
    54a0:	9b 01       	movw	r18, r22
    54a2:	ac 01       	movw	r20, r24
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.c:49

  // prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
  if (width)
    54a4:	21 15       	cp	r18, r1
    54a6:	31 05       	cpc	r19, r1
    54a8:	41 05       	cpc	r20, r1
    54aa:	51 05       	cpc	r21, r1
    54ac:	79 f0       	breq	.+30     	; 0x54cc <main+0x109c>
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\cores\MCUdude_corefiles/wiring_pulse.c:50
    return clockCyclesToMicroseconds(width * 16 + 16);
    54ae:	6f 5f       	subi	r22, 0xFF	; 255
    54b0:	7f 4f       	sbci	r23, 0xFF	; 255
    54b2:	8f 4f       	sbci	r24, 0xFF	; 255
    54b4:	9f 4f       	sbci	r25, 0xFF	; 255
    54b6:	e4 e0       	ldi	r30, 0x04	; 4
    54b8:	66 0f       	add	r22, r22
    54ba:	77 1f       	adc	r23, r23
    54bc:	88 1f       	adc	r24, r24
    54be:	99 1f       	adc	r25, r25
    54c0:	ea 95       	dec	r30
    54c2:	d1 f7       	brne	.-12     	; 0x54b8 <main+0x1088>
    54c4:	a7 01       	movw	r20, r14
    54c6:	96 01       	movw	r18, r12
    54c8:	0e 94 32 36 	call	0x6c64	; 0x6c64 <__udivmodsi4>
microsecondsToMillimeters():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:802
      }
    }
  }
}
long microsecondsToMillimeters(long microseconds) {
  return microseconds * 10 / 29 / 2;
    54cc:	aa e0       	ldi	r26, 0x0A	; 10
    54ce:	b0 e0       	ldi	r27, 0x00	; 0
    54d0:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <__muluhisi3>
    54d4:	2a e3       	ldi	r18, 0x3A	; 58
    54d6:	30 e0       	ldi	r19, 0x00	; 0
    54d8:	40 e0       	ldi	r20, 0x00	; 0
    54da:	50 e0       	ldi	r21, 0x00	; 0
    54dc:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <__divmodsi4>
menu_sensor():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:926
      lcd.setCursor(0, 3);
      lcd.printf("SBL=%d  SBR=%d  ", SBL, SBR);
    } else if (page == 5)  // distance
    {
      lcd.setCursor(0, 0);
      lcd.printf("Front: %d", Front_distance);
    54e0:	3f 93       	push	r19
    54e2:	2f 93       	push	r18
    54e4:	24 ee       	ldi	r18, 0xE4	; 228
    54e6:	36 e0       	ldi	r19, 0x06	; 6
    54e8:	3f 93       	push	r19
    54ea:	2f 93       	push	r18
    54ec:	df 93       	push	r29
    54ee:	cf 93       	push	r28
    54f0:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:927
      lcd.setCursor(0, 1);
    54f4:	61 e0       	ldi	r22, 0x01	; 1
    54f6:	80 e0       	ldi	r24, 0x00	; 0
    54f8:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:928
      lcd.printf("     VL_F=%d  ", VL_Front);
    54fc:	83 e0       	ldi	r24, 0x03	; 3
    54fe:	0e 94 24 17 	call	0x2e48	; 0x2e48 <vl(char)>
    5502:	9f 93       	push	r25
    5504:	8f 93       	push	r24
    5506:	2e ee       	ldi	r18, 0xEE	; 238
    5508:	36 e0       	ldi	r19, 0x06	; 6
    550a:	3f 93       	push	r19
    550c:	2f 93       	push	r18
    550e:	df 93       	push	r29
    5510:	cf 93       	push	r28
    5512:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:929
      lcd.setCursor(0, 2);
    5516:	62 e0       	ldi	r22, 0x02	; 2
    5518:	80 e0       	ldi	r24, 0x00	; 0
    551a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:930
      lcd.printf("VL_L=%d VL_R=%d ", VL_Left, VL_Right);
    551e:	81 e0       	ldi	r24, 0x01	; 1
    5520:	0e 94 24 17 	call	0x2e48	; 0x2e48 <vl(char)>
    5524:	18 2f       	mov	r17, r24
    5526:	09 2f       	mov	r16, r25
    5528:	82 e0       	ldi	r24, 0x02	; 2
    552a:	0e 94 24 17 	call	0x2e48	; 0x2e48 <vl(char)>
    552e:	0f 93       	push	r16
    5530:	1f 93       	push	r17
    5532:	9f 93       	push	r25
    5534:	8f 93       	push	r24
    5536:	2d ef       	ldi	r18, 0xFD	; 253
    5538:	36 e0       	ldi	r19, 0x06	; 6
    553a:	3f 93       	push	r19
    553c:	2f 93       	push	r18
    553e:	df 93       	push	r29
    5540:	cf 93       	push	r28
    5542:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:931
      delay(200);
    5546:	68 ec       	ldi	r22, 0xC8	; 200
    5548:	70 e0       	ldi	r23, 0x00	; 0
    554a:	80 e0       	ldi	r24, 0x00	; 0
    554c:	90 e0       	ldi	r25, 0x00	; 0
    554e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:932
      lcd.clear();
    5552:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
    5556:	2d b7       	in	r18, 0x3d	; 61
    5558:	3e b7       	in	r19, 0x3e	; 62
    555a:	2c 5e       	subi	r18, 0xEC	; 236
    555c:	3f 4f       	sbci	r19, 0xFF	; 255
    555e:	0f b6       	in	r0, 0x3f	; 63
    5560:	f8 94       	cli
    5562:	3e bf       	out	0x3e, r19	; 62
    5564:	0f be       	out	0x3f, r0	; 63
    5566:	2d bf       	out	0x3d, r18	; 61
    5568:	e1 cb       	rjmp	.-2110   	; 0x4d2c <main+0x8fc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:933
    } else if (page == 6)  // compass
    556a:	86 30       	cpi	r24, 0x06	; 6
    556c:	09 f0       	breq	.+2      	; 0x5570 <main+0x1140>
    556e:	de cb       	rjmp	.-2116   	; 0x4d2c <main+0x8fc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:935
    {
      lcd.setCursor(0, 0);
    5570:	60 e0       	ldi	r22, 0x00	; 0
    5572:	80 e0       	ldi	r24, 0x00	; 0
    5574:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:936
      lcd.printf("deg: %d pi: %d ro: %d", deg, pitch, role);
    5578:	83 e0       	ldi	r24, 0x03	; 3
    557a:	90 e0       	ldi	r25, 0x00	; 0
    557c:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <cmps(int)>
    5580:	b8 2e       	mov	r11, r24
    5582:	a9 2e       	mov	r10, r25
    5584:	82 e0       	ldi	r24, 0x02	; 2
    5586:	90 e0       	ldi	r25, 0x00	; 0
    5588:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <cmps(int)>
    558c:	18 2f       	mov	r17, r24
    558e:	09 2f       	mov	r16, r25
    5590:	81 e0       	ldi	r24, 0x01	; 1
    5592:	90 e0       	ldi	r25, 0x00	; 0
    5594:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <cmps(int)>
    5598:	af 92       	push	r10
    559a:	bf 92       	push	r11
    559c:	0f 93       	push	r16
    559e:	1f 93       	push	r17
    55a0:	9f 93       	push	r25
    55a2:	8f 93       	push	r24
    55a4:	8e e0       	ldi	r24, 0x0E	; 14
    55a6:	97 e0       	ldi	r25, 0x07	; 7
    55a8:	9f 93       	push	r25
    55aa:	8f 93       	push	r24
    55ac:	df 93       	push	r29
    55ae:	cf 93       	push	r28
    55b0:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
    55b4:	8d b7       	in	r24, 0x3d	; 61
    55b6:	9e b7       	in	r25, 0x3e	; 62
    55b8:	0a 96       	adiw	r24, 0x0a	; 10
    55ba:	0f b6       	in	r0, 0x3f	; 63
    55bc:	f8 94       	cli
    55be:	9e bf       	out	0x3e, r25	; 62
    55c0:	0f be       	out	0x3f, r0	; 63
    55c2:	8d bf       	out	0x3d, r24	; 61
    55c4:	b3 cb       	rjmp	.-2202   	; 0x4d2c <main+0x8fc>
menu():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1415
      if (start == 0) {
        while (start == 0)
          ;
        menu_sensor();
      }
    } else if (page == 3)  // Setup
    55c6:	83 30       	cpi	r24, 0x03	; 3
    55c8:	09 f0       	breq	.+2      	; 0x55cc <main+0x119c>
    55ca:	44 c2       	rjmp	.+1160   	; 0x5a54 <main+0x1624>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1417
    {
      if (start == 0) {
    55cc:	86 e0       	ldi	r24, 0x06	; 6
    55ce:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    55d2:	89 2b       	or	r24, r25
    55d4:	09 f0       	breq	.+2      	; 0x55d8 <main+0x11a8>
    55d6:	1e c9       	rjmp	.-3524   	; 0x4814 <main+0x3e4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1418
        while (start == 0)
    55d8:	86 e0       	ldi	r24, 0x06	; 6
    55da:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    55de:	89 2b       	or	r24, r25
    55e0:	d9 f3       	breq	.-10     	; 0x55d8 <main+0x11a8>
menu_setup():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:642
  }
}

void menu_setup(void) {
  static char page = 1, last_page = 8;
  int spd = EEPROM_read_int(spd_address);
    55e2:	86 e9       	ldi	r24, 0x96	; 150
    55e4:	90 e0       	ldi	r25, 0x00	; 0
    55e6:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    55ea:	8c 01       	movw	r16, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:643
  int T90 = EEPROM_read_int(T90_address);
    55ec:	88 e9       	ldi	r24, 0x98	; 152
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    55f4:	7c 01       	movw	r14, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:644
  int range_value = EEPROM_read_int(range_address);
    55f6:	8a e9       	ldi	r24, 0x9A	; 154
    55f8:	90 e0       	ldi	r25, 0x00	; 0
    55fa:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    55fe:	6c 01       	movw	r12, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:645
  int DN = EEPROM_read_int(DN_address);
    5600:	8c e9       	ldi	r24, 0x9C	; 156
    5602:	90 e0       	ldi	r25, 0x00	; 0
    5604:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    5608:	98 2e       	mov	r9, r24
    560a:	89 2e       	mov	r8, r25
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:646
  int DE = EEPROM_read_int(DE_address);
    560c:	8e e9       	ldi	r24, 0x9E	; 158
    560e:	90 e0       	ldi	r25, 0x00	; 0
    5610:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    5614:	78 2e       	mov	r7, r24
    5616:	69 2e       	mov	r6, r25
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:647
  int DS = EEPROM_read_int(DS_address);
    5618:	80 ea       	ldi	r24, 0xA0	; 160
    561a:	90 e0       	ldi	r25, 0x00	; 0
    561c:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    5620:	58 2e       	mov	r5, r24
    5622:	49 2e       	mov	r4, r25
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:648
  int ev_s_ball = EEPROM_read_int(DW_address);
    5624:	82 ea       	ldi	r24, 0xA2	; 162
    5626:	90 e0       	ldi	r25, 0x00	; 0
    5628:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    562c:	1c 01       	movw	r2, r24
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:650

  lcd.clear();
    562e:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:689
      lcd.setCursor(0, page - 1);
      lcd.print(">");
    } else if (page < 9) {

      lcd.setCursor(2, 0);
      lcd.printf("DN  %d  deg: %d ", DN, deg);
    5632:	ce eb       	ldi	r28, 0xBE	; 190
    5634:	da e0       	ldi	r29, 0x0A	; 10
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:653
  int ev_s_ball = EEPROM_read_int(DW_address);

  lcd.clear();

  while (1) {
    if (next_page == 0) {
    5636:	88 e0       	ldi	r24, 0x08	; 8
    5638:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    563c:	89 2b       	or	r24, r25
    563e:	a9 f4       	brne	.+42     	; 0x566a <main+0x123a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:654
      while (next_page == 0)
    5640:	88 e0       	ldi	r24, 0x08	; 8
    5642:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5646:	89 2b       	or	r24, r25
    5648:	d9 f3       	breq	.-10     	; 0x5640 <main+0x1210>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:656
        ;
      delay(50);
    564a:	62 e3       	ldi	r22, 0x32	; 50
    564c:	70 e0       	ldi	r23, 0x00	; 0
    564e:	80 e0       	ldi	r24, 0x00	; 0
    5650:	90 e0       	ldi	r25, 0x00	; 0
    5652:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:657
      page++;
    5656:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <menu_setup()::page>
    565a:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:658
      if (page > last_page)
    565c:	89 30       	cpi	r24, 0x09	; 9
    565e:	0c f0       	brlt	.+2      	; 0x5662 <main+0x1232>
    5660:	8e c0       	rjmp	.+284    	; 0x577e <main+0x134e>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:659
        page = 1;
    5662:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <menu_setup()::page>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:660
      lcd.clear();
    5666:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:662
    }
    if (previuse_page == 0) {
    566a:	89 e0       	ldi	r24, 0x09	; 9
    566c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5670:	89 2b       	or	r24, r25
    5672:	a9 f4       	brne	.+42     	; 0x569e <main+0x126e>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:663
      while (previuse_page == 0)
    5674:	89 e0       	ldi	r24, 0x09	; 9
    5676:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    567a:	89 2b       	or	r24, r25
    567c:	d9 f3       	breq	.-10     	; 0x5674 <main+0x1244>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:665
        ;
      delay(50);
    567e:	62 e3       	ldi	r22, 0x32	; 50
    5680:	70 e0       	ldi	r23, 0x00	; 0
    5682:	80 e0       	ldi	r24, 0x00	; 0
    5684:	90 e0       	ldi	r25, 0x00	; 0
    5686:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:666
      page--;
    568a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <menu_setup()::page>
    568e:	81 50       	subi	r24, 0x01	; 1
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:667
      if (page < 1)
    5690:	18 16       	cp	r1, r24
    5692:	0c f0       	brlt	.+2      	; 0x5696 <main+0x1266>
    5694:	76 c0       	rjmp	.+236    	; 0x5782 <main+0x1352>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:668
        page = last_page;
    5696:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <menu_setup()::page>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:669
      lcd.clear();
    569a:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:671
    }
    if (page < 5) {
    569e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <menu_setup()::page>
    56a2:	85 30       	cpi	r24, 0x05	; 5
    56a4:	0c f0       	brlt	.+2      	; 0x56a8 <main+0x1278>
    56a6:	6f c0       	rjmp	.+222    	; 0x5786 <main+0x1356>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:672
      lcd.setCursor(2, 0);
    56a8:	60 e0       	ldi	r22, 0x00	; 0
    56aa:	82 e0       	ldi	r24, 0x02	; 2
    56ac:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:673
      lcd.printf("speed     %3d ", spd);
    56b0:	1f 93       	push	r17
    56b2:	0f 93       	push	r16
    56b4:	e4 e2       	ldi	r30, 0x24	; 36
    56b6:	f7 e0       	ldi	r31, 0x07	; 7
    56b8:	ff 93       	push	r31
    56ba:	ef 93       	push	r30
    56bc:	df 93       	push	r29
    56be:	cf 93       	push	r28
    56c0:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:675

      lcd.setCursor(2, 1);
    56c4:	61 e0       	ldi	r22, 0x01	; 1
    56c6:	82 e0       	ldi	r24, 0x02	; 2
    56c8:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:676
      lcd.printf("T90       %3d ", T90);
    56cc:	ff 92       	push	r15
    56ce:	ef 92       	push	r14
    56d0:	e3 e3       	ldi	r30, 0x33	; 51
    56d2:	f7 e0       	ldi	r31, 0x07	; 7
    56d4:	ff 93       	push	r31
    56d6:	ef 93       	push	r30
    56d8:	df 93       	push	r29
    56da:	cf 93       	push	r28
    56dc:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:678

      lcd.setCursor(2, 2);
    56e0:	62 e0       	ldi	r22, 0x02	; 2
    56e2:	82 e0       	ldi	r24, 0x02	; 2
    56e4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:679
      lcd.printf("calib rng %3d ", range);
    56e8:	8a e9       	ldi	r24, 0x9A	; 154
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_read_int(int)>
    56f0:	9f 93       	push	r25
    56f2:	8f 93       	push	r24
    56f4:	e2 e4       	ldi	r30, 0x42	; 66
    56f6:	f7 e0       	ldi	r31, 0x07	; 7
    56f8:	ff 93       	push	r31
    56fa:	ef 93       	push	r30
    56fc:	df 93       	push	r29
    56fe:	cf 93       	push	r28
    5700:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:681

      lcd.setCursor(2, 3);
    5704:	63 e0       	ldi	r22, 0x03	; 3
    5706:	82 e0       	ldi	r24, 0x02	; 2
    5708:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:682
      lcd.printf("reset memory   ");
    570c:	e1 e5       	ldi	r30, 0x51	; 81
    570e:	f7 e0       	ldi	r31, 0x07	; 7
    5710:	ff 93       	push	r31
    5712:	ef 93       	push	r30
    5714:	df 93       	push	r29
    5716:	cf 93       	push	r28
    5718:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:684

      lcd.setCursor(0, page - 1);
    571c:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <menu_setup()::page>
    5720:	61 50       	subi	r22, 0x01	; 1
    5722:	80 e0       	ldi	r24, 0x00	; 0
    5724:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:685
      lcd.print(">");
    5728:	81 e6       	ldi	r24, 0x61	; 97
    572a:	97 e0       	ldi	r25, 0x07	; 7
    572c:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
    5730:	ed b7       	in	r30, 0x3d	; 61
    5732:	fe b7       	in	r31, 0x3e	; 62
    5734:	76 96       	adiw	r30, 0x16	; 22
    5736:	0f b6       	in	r0, 0x3f	; 63
    5738:	f8 94       	cli
    573a:	fe bf       	out	0x3e, r31	; 62
    573c:	0f be       	out	0x3f, r0	; 63
    573e:	ed bf       	out	0x3d, r30	; 61
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:704

      lcd.setCursor(0, page - 5);
      lcd.print(">");
    }

    if (page == 1)  // spd
    5740:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <menu_setup()::page>
    5744:	81 30       	cpi	r24, 0x01	; 1
    5746:	09 f0       	breq	.+2      	; 0x574a <main+0x131a>
    5748:	9c c0       	rjmp	.+312    	; 0x5882 <main+0x1452>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:706
    {
      if (increase == 0) {
    574a:	8a e0       	ldi	r24, 0x0A	; 10
    574c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5750:	89 2b       	or	r24, r25
    5752:	09 f0       	breq	.+2      	; 0x5756 <main+0x1326>
    5754:	6c c0       	rjmp	.+216    	; 0x582e <main+0x13fe>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:707
        delay(120);
    5756:	68 e7       	ldi	r22, 0x78	; 120
    5758:	70 e0       	ldi	r23, 0x00	; 0
    575a:	80 e0       	ldi	r24, 0x00	; 0
    575c:	90 e0       	ldi	r25, 0x00	; 0
    575e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
    5762:	06 5f       	subi	r16, 0xF6	; 246
    5764:	1f 4f       	sbci	r17, 0xFF	; 255
    5766:	0f 3f       	cpi	r16, 0xFF	; 255
    5768:	11 05       	cpc	r17, r1
    576a:	19 f0       	breq	.+6      	; 0x5772 <main+0x1342>
    576c:	14 f0       	brlt	.+4      	; 0x5772 <main+0x1342>
    576e:	0f ef       	ldi	r16, 0xFF	; 255
    5770:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:723
      } else if (start == 0) {
        go(spd, spd);
        while (start == 0)
          ;
        go(0, 0);
        EEPROM_write_int(spd_address, spd);
    5772:	b8 01       	movw	r22, r16
    5774:	86 e9       	ldi	r24, 0x96	; 150
    5776:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:788
    {
      if (start == 0) {
        while (start == 0)
          ;
        DS = deg;
        EEPROM_write_int(DS_address, DS);
    5778:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
    577c:	5c cf       	rjmp	.-328    	; 0x5636 <main+0x1206>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:659
      while (next_page == 0)
        ;
      delay(50);
      page++;
      if (page > last_page)
        page = 1;
    577e:	81 e0       	ldi	r24, 0x01	; 1
    5780:	70 cf       	rjmp	.-288    	; 0x5662 <main+0x1232>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:668
      while (previuse_page == 0)
        ;
      delay(50);
      page--;
      if (page < 1)
        page = last_page;
    5782:	88 e0       	ldi	r24, 0x08	; 8
    5784:	88 cf       	rjmp	.-240    	; 0x5696 <main+0x1266>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:686
      lcd.setCursor(2, 3);
      lcd.printf("reset memory   ");

      lcd.setCursor(0, page - 1);
      lcd.print(">");
    } else if (page < 9) {
    5786:	89 30       	cpi	r24, 0x09	; 9
    5788:	dc f6       	brge	.-74     	; 0x5740 <main+0x1310>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:688

      lcd.setCursor(2, 0);
    578a:	60 e0       	ldi	r22, 0x00	; 0
    578c:	82 e0       	ldi	r24, 0x02	; 2
    578e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:689
      lcd.printf("DN  %d  deg: %d ", DN, deg);
    5792:	81 e0       	ldi	r24, 0x01	; 1
    5794:	90 e0       	ldi	r25, 0x00	; 0
    5796:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <cmps(int)>
    579a:	9f 93       	push	r25
    579c:	8f 93       	push	r24
    579e:	8f 92       	push	r8
    57a0:	9f 92       	push	r9
    57a2:	23 e6       	ldi	r18, 0x63	; 99
    57a4:	37 e0       	ldi	r19, 0x07	; 7
    57a6:	3f 93       	push	r19
    57a8:	2f 93       	push	r18
    57aa:	df 93       	push	r29
    57ac:	cf 93       	push	r28
    57ae:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:691

      lcd.setCursor(2, 1);
    57b2:	61 e0       	ldi	r22, 0x01	; 1
    57b4:	82 e0       	ldi	r24, 0x02	; 2
    57b6:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:692
      lcd.printf("DE  %d ", DE);
    57ba:	6f 92       	push	r6
    57bc:	7f 92       	push	r7
    57be:	24 e7       	ldi	r18, 0x74	; 116
    57c0:	37 e0       	ldi	r19, 0x07	; 7
    57c2:	3f 93       	push	r19
    57c4:	2f 93       	push	r18
    57c6:	df 93       	push	r29
    57c8:	cf 93       	push	r28
    57ca:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:694

      lcd.setCursor(2, 2);
    57ce:	62 e0       	ldi	r22, 0x02	; 2
    57d0:	82 e0       	ldi	r24, 0x02	; 2
    57d2:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:695
      lcd.printf("DS  %d ", DS);
    57d6:	4f 92       	push	r4
    57d8:	5f 92       	push	r5
    57da:	2c e7       	ldi	r18, 0x7C	; 124
    57dc:	37 e0       	ldi	r19, 0x07	; 7
    57de:	3f 93       	push	r19
    57e0:	2f 93       	push	r18
    57e2:	df 93       	push	r29
    57e4:	cf 93       	push	r28
    57e6:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:697

      lcd.setCursor(2, 3);
    57ea:	63 e0       	ldi	r22, 0x03	; 3
    57ec:	82 e0       	ldi	r24, 0x02	; 2
    57ee:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:698
      lcd.printf("ev_s_ball  %d ", ev_s_ball);
    57f2:	3f 92       	push	r3
    57f4:	2f 92       	push	r2
    57f6:	24 e8       	ldi	r18, 0x84	; 132
    57f8:	37 e0       	ldi	r19, 0x07	; 7
    57fa:	3f 93       	push	r19
    57fc:	2f 93       	push	r18
    57fe:	df 93       	push	r29
    5800:	cf 93       	push	r28
    5802:	0e 94 4c 09 	call	0x1298	; 0x1298 <Print::printf(char const*, ...) [clone .constprop.28]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:700

      lcd.setCursor(0, page - 5);
    5806:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <menu_setup()::page>
    580a:	65 50       	subi	r22, 0x05	; 5
    580c:	80 e0       	ldi	r24, 0x00	; 0
    580e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:701
      lcd.print(">");
    5812:	81 e6       	ldi	r24, 0x61	; 97
    5814:	97 e0       	ldi	r25, 0x07	; 7
    5816:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
    581a:	2d b7       	in	r18, 0x3d	; 61
    581c:	3e b7       	in	r19, 0x3e	; 62
    581e:	26 5e       	subi	r18, 0xE6	; 230
    5820:	3f 4f       	sbci	r19, 0xFF	; 255
    5822:	0f b6       	in	r0, 0x3f	; 63
    5824:	f8 94       	cli
    5826:	3e bf       	out	0x3e, r19	; 62
    5828:	0f be       	out	0x3f, r0	; 63
    582a:	2d bf       	out	0x3d, r18	; 61
    582c:	89 cf       	rjmp	.-238    	; 0x5740 <main+0x1310>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:712
        delay(120);
        spd += 10;
        if (spd > 255)
          spd = 255;
        EEPROM_write_int(spd_address, spd);
      } else if (decrease == 0) {
    582e:	8b e0       	ldi	r24, 0x0B	; 11
    5830:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5834:	89 2b       	or	r24, r25
    5836:	79 f4       	brne	.+30     	; 0x5856 <main+0x1426>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:713
        delay(120);
    5838:	68 e7       	ldi	r22, 0x78	; 120
    583a:	70 e0       	ldi	r23, 0x00	; 0
    583c:	80 e0       	ldi	r24, 0x00	; 0
    583e:	90 e0       	ldi	r25, 0x00	; 0
    5840:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
    5844:	0a 50       	subi	r16, 0x0A	; 10
    5846:	11 09       	sbc	r17, r1
    5848:	0a 30       	cpi	r16, 0x0A	; 10
    584a:	11 05       	cpc	r17, r1
    584c:	0c f0       	brlt	.+2      	; 0x5850 <main+0x1420>
    584e:	91 cf       	rjmp	.-222    	; 0x5772 <main+0x1342>
    5850:	0a e0       	ldi	r16, 0x0A	; 10
    5852:	10 e0       	ldi	r17, 0x00	; 0
    5854:	8e cf       	rjmp	.-228    	; 0x5772 <main+0x1342>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:718
        spd -= 10;
        if (spd < 10)
          spd = 10;
        EEPROM_write_int(spd_address, spd);
      } else if (start == 0) {
    5856:	86 e0       	ldi	r24, 0x06	; 6
    5858:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    585c:	89 2b       	or	r24, r25
    585e:	09 f0       	breq	.+2      	; 0x5862 <main+0x1432>
    5860:	ea ce       	rjmp	.-556    	; 0x5636 <main+0x1206>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:719
        go(spd, spd);
    5862:	b8 01       	movw	r22, r16
    5864:	c8 01       	movw	r24, r16
    5866:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:720
        while (start == 0)
    586a:	86 e0       	ldi	r24, 0x06	; 6
    586c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5870:	89 2b       	or	r24, r25
    5872:	d9 f3       	breq	.-10     	; 0x586a <main+0x143a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:722
          ;
        go(0, 0);
    5874:	70 e0       	ldi	r23, 0x00	; 0
    5876:	60 e0       	ldi	r22, 0x00	; 0
    5878:	90 e0       	ldi	r25, 0x00	; 0
    587a:	80 e0       	ldi	r24, 0x00	; 0
    587c:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
    5880:	78 cf       	rjmp	.-272    	; 0x5772 <main+0x1342>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:725
        EEPROM_write_int(spd_address, spd);
      }
    } else if (page == 2)  // T90
    5882:	82 30       	cpi	r24, 0x02	; 2
    5884:	d9 f5       	brne	.+118    	; 0x58fc <main+0x14cc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:727
    {
      if (increase == 0) {
    5886:	8a e0       	ldi	r24, 0x0A	; 10
    5888:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    588c:	89 2b       	or	r24, r25
    588e:	69 f4       	brne	.+26     	; 0x58aa <main+0x147a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:728
        delay(200);
    5890:	68 ec       	ldi	r22, 0xC8	; 200
    5892:	70 e0       	ldi	r23, 0x00	; 0
    5894:	80 e0       	ldi	r24, 0x00	; 0
    5896:	90 e0       	ldi	r25, 0x00	; 0
    5898:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:729
        T90 += 1;
    589c:	3f ef       	ldi	r19, 0xFF	; 255
    589e:	e3 1a       	sub	r14, r19
    58a0:	f3 0a       	sbc	r15, r19
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:734
        EEPROM_write_int(T90_address, T90);
      } else if (decrease == 0) {
        delay(200);
        T90 -= 1;
        EEPROM_write_int(T90_address, T90);
    58a2:	b7 01       	movw	r22, r14
    58a4:	88 e9       	ldi	r24, 0x98	; 152
    58a6:	90 e0       	ldi	r25, 0x00	; 0
    58a8:	67 cf       	rjmp	.-306    	; 0x5778 <main+0x1348>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:731
    {
      if (increase == 0) {
        delay(200);
        T90 += 1;
        EEPROM_write_int(T90_address, T90);
      } else if (decrease == 0) {
    58aa:	8b e0       	ldi	r24, 0x0B	; 11
    58ac:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    58b0:	89 2b       	or	r24, r25
    58b2:	51 f4       	brne	.+20     	; 0x58c8 <main+0x1498>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:732
        delay(200);
    58b4:	68 ec       	ldi	r22, 0xC8	; 200
    58b6:	70 e0       	ldi	r23, 0x00	; 0
    58b8:	80 e0       	ldi	r24, 0x00	; 0
    58ba:	90 e0       	ldi	r25, 0x00	; 0
    58bc:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:733
        T90 -= 1;
    58c0:	81 e0       	ldi	r24, 0x01	; 1
    58c2:	e8 1a       	sub	r14, r24
    58c4:	f1 08       	sbc	r15, r1
    58c6:	ed cf       	rjmp	.-38     	; 0x58a2 <main+0x1472>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:735
        EEPROM_write_int(T90_address, T90);
      } else if (start == 0) {
    58c8:	86 e0       	ldi	r24, 0x06	; 6
    58ca:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    58ce:	89 2b       	or	r24, r25
    58d0:	09 f0       	breq	.+2      	; 0x58d4 <main+0x14a4>
    58d2:	b1 ce       	rjmp	.-670    	; 0x5636 <main+0x1206>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:736
        while (start == 0)
    58d4:	86 e0       	ldi	r24, 0x06	; 6
    58d6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    58da:	89 2b       	or	r24, r25
    58dc:	d9 f3       	breq	.-10     	; 0x58d4 <main+0x14a4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:738
          ;
        lcd.clear();
    58de:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:739
        EEPROM_write_int(T90_address, T90);
    58e2:	b7 01       	movw	r22, r14
    58e4:	88 e9       	ldi	r24, 0x98	; 152
    58e6:	90 e0       	ldi	r25, 0x00	; 0
    58e8:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:740
        move(Left, T90, 200);
    58ec:	48 ec       	ldi	r20, 0xC8	; 200
    58ee:	50 e0       	ldi	r21, 0x00	; 0
    58f0:	b7 01       	movw	r22, r14
    58f2:	8b e0       	ldi	r24, 0x0B	; 11
    58f4:	90 e0       	ldi	r25, 0x00	; 0
    58f6:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
    58fa:	9d ce       	rjmp	.-710    	; 0x5636 <main+0x1206>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:742
      }
    } else if (page == 3)  // range
    58fc:	83 30       	cpi	r24, 0x03	; 3
    58fe:	81 f5       	brne	.+96     	; 0x5960 <main+0x1530>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:744
    {
      if (increase == 0) {
    5900:	8a e0       	ldi	r24, 0x0A	; 10
    5902:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5906:	89 2b       	or	r24, r25
    5908:	a1 f4       	brne	.+40     	; 0x5932 <main+0x1502>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:745
        delay(100);
    590a:	64 e6       	ldi	r22, 0x64	; 100
    590c:	70 e0       	ldi	r23, 0x00	; 0
    590e:	80 e0       	ldi	r24, 0x00	; 0
    5910:	90 e0       	ldi	r25, 0x00	; 0
    5912:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
    5916:	9f ef       	ldi	r25, 0xFF	; 255
    5918:	c9 1a       	sub	r12, r25
    591a:	d9 0a       	sbc	r13, r25
    591c:	e1 e5       	ldi	r30, 0x51	; 81
    591e:	ce 16       	cp	r12, r30
    5920:	d1 04       	cpc	r13, r1
    5922:	1c f0       	brlt	.+6      	; 0x592a <main+0x14fa>
    5924:	50 e5       	ldi	r21, 0x50	; 80
    5926:	c5 2e       	mov	r12, r21
    5928:	d1 2c       	mov	r13, r1
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:755
      } else if (decrease == 0) {
        delay(100);
        range_value -= 1;
        if (range_value < 5)
          range_value = 5;
        EEPROM_write_int(range_address, range_value);
    592a:	b6 01       	movw	r22, r12
    592c:	8a e9       	ldi	r24, 0x9A	; 154
    592e:	90 e0       	ldi	r25, 0x00	; 0
    5930:	23 cf       	rjmp	.-442    	; 0x5778 <main+0x1348>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:750
        delay(100);
        range_value += 1;
        if (range_value > 80)
          range_value = 80;
        EEPROM_write_int(range_address, range_value);
      } else if (decrease == 0) {
    5932:	8b e0       	ldi	r24, 0x0B	; 11
    5934:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5938:	89 2b       	or	r24, r25
    593a:	09 f0       	breq	.+2      	; 0x593e <main+0x150e>
    593c:	7c ce       	rjmp	.-776    	; 0x5636 <main+0x1206>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:751
        delay(100);
    593e:	64 e6       	ldi	r22, 0x64	; 100
    5940:	70 e0       	ldi	r23, 0x00	; 0
    5942:	80 e0       	ldi	r24, 0x00	; 0
    5944:	90 e0       	ldi	r25, 0x00	; 0
    5946:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
    594a:	f1 e0       	ldi	r31, 0x01	; 1
    594c:	cf 1a       	sub	r12, r31
    594e:	d1 08       	sbc	r13, r1
    5950:	25 e0       	ldi	r18, 0x05	; 5
    5952:	c2 16       	cp	r12, r18
    5954:	d1 04       	cpc	r13, r1
    5956:	4c f7       	brge	.-46     	; 0x592a <main+0x14fa>
    5958:	45 e0       	ldi	r20, 0x05	; 5
    595a:	c4 2e       	mov	r12, r20
    595c:	d1 2c       	mov	r13, r1
    595e:	e5 cf       	rjmp	.-54     	; 0x592a <main+0x14fa>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:757
        range_value -= 1;
        if (range_value < 5)
          range_value = 5;
        EEPROM_write_int(range_address, range_value);
      }
    } else if (page == 4)  // reset memory
    5960:	84 30       	cpi	r24, 0x04	; 4
    5962:	d1 f4       	brne	.+52     	; 0x5998 <main+0x1568>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:759
    {
      if (start == 0) {
    5964:	86 e0       	ldi	r24, 0x06	; 6
    5966:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    596a:	5c 01       	movw	r10, r24
    596c:	89 2b       	or	r24, r25
    596e:	09 f0       	breq	.+2      	; 0x5972 <main+0x1542>
    5970:	62 ce       	rjmp	.-828    	; 0x5636 <main+0x1206>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:760
        lcd.clear();
    5972:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:761
        while (start == 0)
    5976:	86 e0       	ldi	r24, 0x06	; 6
    5978:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    597c:	89 2b       	or	r24, r25
    597e:	d9 f3       	breq	.-10     	; 0x5976 <main+0x1546>
operator=():
C:\Users\Ryan\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.3\libraries\EEPROM\src/EEPROM.h:47
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    5980:	60 e0       	ldi	r22, 0x00	; 0
    5982:	c5 01       	movw	r24, r10
    5984:	0e 94 31 34 	call	0x6862	; 0x6862 <eeprom_write_byte>
menu_setup():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:763
          ;
        for (int i = 0; i < 200; i++)
    5988:	3f ef       	ldi	r19, 0xFF	; 255
    598a:	a3 1a       	sub	r10, r19
    598c:	b3 0a       	sbc	r11, r19
    598e:	88 ec       	ldi	r24, 0xC8	; 200
    5990:	a8 16       	cp	r10, r24
    5992:	b1 04       	cpc	r11, r1
    5994:	a9 f7       	brne	.-22     	; 0x5980 <main+0x1550>
    5996:	4f ce       	rjmp	.-866    	; 0x5636 <main+0x1206>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:766
          EEPROM.write(i, 0);
      }
    } else if (page == 5)  // DN
    5998:	85 30       	cpi	r24, 0x05	; 5
    599a:	b1 f4       	brne	.+44     	; 0x59c8 <main+0x1598>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:768
    {
      if (start == 0) {
    599c:	86 e0       	ldi	r24, 0x06	; 6
    599e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    59a2:	89 2b       	or	r24, r25
    59a4:	09 f0       	breq	.+2      	; 0x59a8 <main+0x1578>
    59a6:	47 ce       	rjmp	.-882    	; 0x5636 <main+0x1206>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:769
        while (start == 0)
    59a8:	86 e0       	ldi	r24, 0x06	; 6
    59aa:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    59ae:	89 2b       	or	r24, r25
    59b0:	d9 f3       	breq	.-10     	; 0x59a8 <main+0x1578>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:771
          ;
        DN = deg;
    59b2:	81 e0       	ldi	r24, 0x01	; 1
    59b4:	90 e0       	ldi	r25, 0x00	; 0
    59b6:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <cmps(int)>
    59ba:	98 2e       	mov	r9, r24
    59bc:	89 2e       	mov	r8, r25
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:772
        EEPROM_write_int(DN_address, DN);
    59be:	68 2f       	mov	r22, r24
    59c0:	79 2f       	mov	r23, r25
    59c2:	8c e9       	ldi	r24, 0x9C	; 156
    59c4:	90 e0       	ldi	r25, 0x00	; 0
    59c6:	d8 ce       	rjmp	.-592    	; 0x5778 <main+0x1348>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:774
      }
    } else if (page == 6)  // DE
    59c8:	86 30       	cpi	r24, 0x06	; 6
    59ca:	a9 f4       	brne	.+42     	; 0x59f6 <main+0x15c6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:776
    {
      if (start == 0) {
    59cc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    59d0:	89 2b       	or	r24, r25
    59d2:	09 f0       	breq	.+2      	; 0x59d6 <main+0x15a6>
    59d4:	30 ce       	rjmp	.-928    	; 0x5636 <main+0x1206>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:777
        while (start == 0)
    59d6:	86 e0       	ldi	r24, 0x06	; 6
    59d8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    59dc:	89 2b       	or	r24, r25
    59de:	d9 f3       	breq	.-10     	; 0x59d6 <main+0x15a6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:779
          ;
        DE = deg;
    59e0:	81 e0       	ldi	r24, 0x01	; 1
    59e2:	90 e0       	ldi	r25, 0x00	; 0
    59e4:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <cmps(int)>
    59e8:	78 2e       	mov	r7, r24
    59ea:	69 2e       	mov	r6, r25
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:780
        EEPROM_write_int(DE_address, DE);
    59ec:	68 2f       	mov	r22, r24
    59ee:	79 2f       	mov	r23, r25
    59f0:	8e e9       	ldi	r24, 0x9E	; 158
    59f2:	90 e0       	ldi	r25, 0x00	; 0
    59f4:	c1 ce       	rjmp	.-638    	; 0x5778 <main+0x1348>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:782
      }
    } else if (page == 7)  // DS
    59f6:	87 30       	cpi	r24, 0x07	; 7
    59f8:	b1 f4       	brne	.+44     	; 0x5a26 <main+0x15f6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:784
    {
      if (start == 0) {
    59fa:	86 e0       	ldi	r24, 0x06	; 6
    59fc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5a00:	89 2b       	or	r24, r25
    5a02:	09 f0       	breq	.+2      	; 0x5a06 <main+0x15d6>
    5a04:	18 ce       	rjmp	.-976    	; 0x5636 <main+0x1206>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:785
        while (start == 0)
    5a06:	86 e0       	ldi	r24, 0x06	; 6
    5a08:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5a0c:	89 2b       	or	r24, r25
    5a0e:	d9 f3       	breq	.-10     	; 0x5a06 <main+0x15d6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:787
          ;
        DS = deg;
    5a10:	81 e0       	ldi	r24, 0x01	; 1
    5a12:	90 e0       	ldi	r25, 0x00	; 0
    5a14:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <cmps(int)>
    5a18:	58 2e       	mov	r5, r24
    5a1a:	49 2e       	mov	r4, r25
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:788
        EEPROM_write_int(DS_address, DS);
    5a1c:	68 2f       	mov	r22, r24
    5a1e:	79 2f       	mov	r23, r25
    5a20:	80 ea       	ldi	r24, 0xA0	; 160
    5a22:	90 e0       	ldi	r25, 0x00	; 0
    5a24:	a9 ce       	rjmp	.-686    	; 0x5778 <main+0x1348>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:790
      }
    } else if (page == 8)  // DW
    5a26:	88 30       	cpi	r24, 0x08	; 8
    5a28:	09 f0       	breq	.+2      	; 0x5a2c <main+0x15fc>
    5a2a:	05 ce       	rjmp	.-1014   	; 0x5636 <main+0x1206>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:792
    {
      if (start == 0) {
    5a2c:	86 e0       	ldi	r24, 0x06	; 6
    5a2e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5a32:	89 2b       	or	r24, r25
    5a34:	09 f0       	breq	.+2      	; 0x5a38 <main+0x1608>
    5a36:	ff cd       	rjmp	.-1026   	; 0x5636 <main+0x1206>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:793
        while (start == 0)
    5a38:	86 e0       	ldi	r24, 0x06	; 6
    5a3a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5a3e:	89 2b       	or	r24, r25
    5a40:	d9 f3       	breq	.-10     	; 0x5a38 <main+0x1608>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:796
          ;
        ev_s_ball = 0;
        EEPROM_write_int(DW_address, ev_s_ball);
    5a42:	70 e0       	ldi	r23, 0x00	; 0
    5a44:	60 e0       	ldi	r22, 0x00	; 0
    5a46:	82 ea       	ldi	r24, 0xA2	; 162
    5a48:	90 e0       	ldi	r25, 0x00	; 0
    5a4a:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
main():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:795
    } else if (page == 8)  // DW
    {
      if (start == 0) {
        while (start == 0)
          ;
        ev_s_ball = 0;
    5a4e:	21 2c       	mov	r2, r1
    5a50:	31 2c       	mov	r3, r1
    5a52:	f1 cd       	rjmp	.-1054   	; 0x5636 <main+0x1206>
menu():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1422
      if (start == 0) {
        while (start == 0)
          ;
        menu_setup();
      }
    } else if (page == 4)  // Test Color
    5a54:	84 30       	cpi	r24, 0x04	; 4
    5a56:	81 f4       	brne	.+32     	; 0x5a78 <main+0x1648>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1424
    {
      if (start == 0) {
    5a58:	86 e0       	ldi	r24, 0x06	; 6
    5a5a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5a5e:	89 2b       	or	r24, r25
    5a60:	11 f0       	breq	.+4      	; 0x5a66 <main+0x1636>
    5a62:	0c 94 0a 24 	jmp	0x4814	; 0x4814 <main+0x3e4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1425
        lcd.clear();
    5a66:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1426
        while (start == 0)
    5a6a:	86 e0       	ldi	r24, 0x06	; 6
    5a6c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5a70:	89 2b       	or	r24, r25
    5a72:	d9 f3       	breq	.-10     	; 0x5a6a <main+0x163a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1428
          ;
        menu_color();
    5a74:	0e 94 75 1b 	call	0x36ea	; 0x36ea <menu_color()>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1430
      }
    } else if (page == 5)  // Test Motor
    5a78:	85 30       	cpi	r24, 0x05	; 5
    5a7a:	71 f4       	brne	.+28     	; 0x5a98 <main+0x1668>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1432
    {
      if (start == 0) {
    5a7c:	86 e0       	ldi	r24, 0x06	; 6
    5a7e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5a82:	89 2b       	or	r24, r25
    5a84:	11 f0       	breq	.+4      	; 0x5a8a <main+0x165a>
    5a86:	0c 94 0a 24 	jmp	0x4814	; 0x4814 <main+0x3e4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1433
        while (start == 0)
    5a8a:	86 e0       	ldi	r24, 0x06	; 6
    5a8c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5a90:	89 2b       	or	r24, r25
    5a92:	d9 f3       	breq	.-10     	; 0x5a8a <main+0x165a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1435
          ;
        menu_motor();
    5a94:	0e 94 53 18 	call	0x30a6	; 0x30a6 <menu_motor()>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1437
      }
    } else if (page == 6)  // color calibration
    5a98:	86 30       	cpi	r24, 0x06	; 6
    5a9a:	11 f0       	breq	.+4      	; 0x5aa0 <main+0x1670>
    5a9c:	0c 94 0a 24 	jmp	0x4814	; 0x4814 <main+0x3e4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1439
    {
      if (start == 0) {
    5aa0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5aa4:	89 2b       	or	r24, r25
    5aa6:	11 f0       	breq	.+4      	; 0x5aac <main+0x167c>
    5aa8:	0c 94 0a 24 	jmp	0x4814	; 0x4814 <main+0x3e4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1440
        lcd.clear();
    5aac:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1441
        while (start == 0)
    5ab0:	86 e0       	ldi	r24, 0x06	; 6
    5ab2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5ab6:	89 2b       	or	r24, r25
    5ab8:	d9 f3       	breq	.-10     	; 0x5ab0 <main+0x1680>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:1443
          ;
        delay(200);
    5aba:	68 ec       	ldi	r22, 0xC8	; 200
    5abc:	70 e0       	ldi	r23, 0x00	; 0
    5abe:	80 e0       	ldi	r24, 0x00	; 0
    5ac0:	90 e0       	ldi	r25, 0x00	; 0
    5ac2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
color_calib():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:408

void color_calib(void) {
  static char page = 1, last_page = 12;
  char red_l_calibrated = 0, red_r_calibrated = 0, grn_l_calibrated = 0, grn_r_calibrated = 0, blu_l_calibrated = 0, blu_r_calibrated = 0, yel_l_calibrated = 0, yel_r_calibrated = 0, sil_l_calibrated = 0, sil_r_calibrated = 0, red_f_calibrated = 0, grn_f_calibrated = 0;

  lcd.clear();
    5ac6:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
main():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:406
  // delay(5);
}

void color_calib(void) {
  static char page = 1, last_page = 12;
  char red_l_calibrated = 0, red_r_calibrated = 0, grn_l_calibrated = 0, grn_r_calibrated = 0, blu_l_calibrated = 0, blu_r_calibrated = 0, yel_l_calibrated = 0, yel_r_calibrated = 0, sil_l_calibrated = 0, sil_r_calibrated = 0, red_f_calibrated = 0, grn_f_calibrated = 0;
    5aca:	81 2c       	mov	r8, r1
    5acc:	c0 e0       	ldi	r28, 0x00	; 0
    5ace:	91 2c       	mov	r9, r1
    5ad0:	a1 2c       	mov	r10, r1
    5ad2:	b1 2c       	mov	r11, r1
    5ad4:	c1 2c       	mov	r12, r1
    5ad6:	d1 2c       	mov	r13, r1
    5ad8:	e1 2c       	mov	r14, r1
    5ada:	f1 2c       	mov	r15, r1
    5adc:	00 e0       	ldi	r16, 0x00	; 0
    5ade:	10 e0       	ldi	r17, 0x00	; 0
    5ae0:	d0 e0       	ldi	r29, 0x00	; 0
color_calib():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:415
    if (next_page == 0) {
      while (next_page == 0)
        ;
      page++;
      if (page > last_page)
        page = 1;
    5ae2:	77 24       	eor	r7, r7
    5ae4:	73 94       	inc	r7
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:424
    if (previuse_page == 0) {
      while (previuse_page == 0)
        ;
      page--;
      if (page < 1)
        page = last_page;
    5ae6:	3c e0       	ldi	r19, 0x0C	; 12
    5ae8:	63 2e       	mov	r6, r19
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:410
  static char page = 1, last_page = 12;
  char red_l_calibrated = 0, red_r_calibrated = 0, grn_l_calibrated = 0, grn_r_calibrated = 0, blu_l_calibrated = 0, blu_r_calibrated = 0, yel_l_calibrated = 0, yel_r_calibrated = 0, sil_l_calibrated = 0, sil_r_calibrated = 0, red_f_calibrated = 0, grn_f_calibrated = 0;

  lcd.clear();
  while (1) {
    if (next_page == 0) {
    5aea:	88 e0       	ldi	r24, 0x08	; 8
    5aec:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5af0:	89 2b       	or	r24, r25
    5af2:	79 f4       	brne	.+30     	; 0x5b12 <main+0x16e2>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:411
      while (next_page == 0)
    5af4:	88 e0       	ldi	r24, 0x08	; 8
    5af6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5afa:	89 2b       	or	r24, r25
    5afc:	d9 f3       	breq	.-10     	; 0x5af4 <main+0x16c4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:413
        ;
      page++;
    5afe:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <color_calib()::page>
    5b02:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:414
      if (page > last_page)
    5b04:	8d 30       	cpi	r24, 0x0D	; 13
    5b06:	0c f0       	brlt	.+2      	; 0x5b0a <main+0x16da>
    5b08:	9d c0       	rjmp	.+314    	; 0x5c44 <main+0x1814>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:413
  lcd.clear();
  while (1) {
    if (next_page == 0) {
      while (next_page == 0)
        ;
      page++;
    5b0a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <color_calib()::page>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:416
      if (page > last_page)
        page = 1;
      lcd.clear();
    5b0e:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:419
    }

    if (previuse_page == 0) {
    5b12:	89 e0       	ldi	r24, 0x09	; 9
    5b14:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5b18:	89 2b       	or	r24, r25
    5b1a:	79 f4       	brne	.+30     	; 0x5b3a <main+0x170a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:420
      while (previuse_page == 0)
    5b1c:	89 e0       	ldi	r24, 0x09	; 9
    5b1e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5b22:	89 2b       	or	r24, r25
    5b24:	d9 f3       	breq	.-10     	; 0x5b1c <main+0x16ec>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:422
        ;
      page--;
    5b26:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <color_calib()::page>
    5b2a:	81 50       	subi	r24, 0x01	; 1
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:423
      if (page < 1)
    5b2c:	18 16       	cp	r1, r24
    5b2e:	0c f0       	brlt	.+2      	; 0x5b32 <main+0x1702>
    5b30:	8c c0       	rjmp	.+280    	; 0x5c4a <main+0x181a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:422
    }

    if (previuse_page == 0) {
      while (previuse_page == 0)
        ;
      page--;
    5b32:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <color_calib()::page>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:425
      if (page < 1)
        page = last_page;
      lcd.clear();
    5b36:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:428
    }

    if (start == 0) {
    5b3a:	86 e0       	ldi	r24, 0x06	; 6
    5b3c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5b40:	89 2b       	or	r24, r25
    5b42:	41 f4       	brne	.+16     	; 0x5b54 <main+0x1724>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:429
      lcd.clear();
    5b44:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:430
      delay(200);
    5b48:	68 ec       	ldi	r22, 0xC8	; 200
    5b4a:	70 e0       	ldi	r23, 0x00	; 0
    5b4c:	80 e0       	ldi	r24, 0x00	; 0
    5b4e:	90 e0       	ldi	r25, 0x00	; 0
    5b50:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <delay>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:433
    }  // baraye inke age 2 bar khastim calib konim motevajeh beshim

    if (page <= 4) {
    5b54:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <color_calib()::page>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:434
      lcd.setCursor(3, 0);
    5b58:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:433
    if (start == 0) {
      lcd.clear();
      delay(200);
    }  // baraye inke age 2 bar khastim calib konim motevajeh beshim

    if (page <= 4) {
    5b5a:	85 30       	cpi	r24, 0x05	; 5
    5b5c:	0c f0       	brlt	.+2      	; 0x5b60 <main+0x1730>
    5b5e:	78 c0       	rjmp	.+240    	; 0x5c50 <main+0x1820>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:434
      lcd.setCursor(3, 0);
    5b60:	83 e0       	ldi	r24, 0x03	; 3
    5b62:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:435
      lcd.print("RED left    ");
    5b66:	83 e9       	ldi	r24, 0x93	; 147
    5b68:	97 e0       	ldi	r25, 0x07	; 7
    5b6a:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:436
      if (red_l_calibrated == 1)
    5b6e:	d1 30       	cpi	r29, 0x01	; 1
    5b70:	21 f4       	brne	.+8      	; 0x5b7a <main+0x174a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:437
        lcd.print("done");
    5b72:	80 ea       	ldi	r24, 0xA0	; 160
    5b74:	97 e0       	ldi	r25, 0x07	; 7
    5b76:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:439

      lcd.setCursor(3, 1);
    5b7a:	61 e0       	ldi	r22, 0x01	; 1
    5b7c:	83 e0       	ldi	r24, 0x03	; 3
    5b7e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:440
      lcd.print("RED right   ");
    5b82:	85 ea       	ldi	r24, 0xA5	; 165
    5b84:	97 e0       	ldi	r25, 0x07	; 7
    5b86:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:441
      if (red_r_calibrated == 1)
    5b8a:	11 30       	cpi	r17, 0x01	; 1
    5b8c:	21 f4       	brne	.+8      	; 0x5b96 <main+0x1766>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:442
        lcd.print("done");
    5b8e:	80 ea       	ldi	r24, 0xA0	; 160
    5b90:	97 e0       	ldi	r25, 0x07	; 7
    5b92:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:444

      lcd.setCursor(3, 2);
    5b96:	62 e0       	ldi	r22, 0x02	; 2
    5b98:	83 e0       	ldi	r24, 0x03	; 3
    5b9a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:445
      lcd.print("Green left  ");
    5b9e:	82 eb       	ldi	r24, 0xB2	; 178
    5ba0:	97 e0       	ldi	r25, 0x07	; 7
    5ba2:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:446
      if (grn_l_calibrated == 1)
    5ba6:	01 30       	cpi	r16, 0x01	; 1
    5ba8:	21 f4       	brne	.+8      	; 0x5bb2 <main+0x1782>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:447
        lcd.print("done");
    5baa:	80 ea       	ldi	r24, 0xA0	; 160
    5bac:	97 e0       	ldi	r25, 0x07	; 7
    5bae:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:449

      lcd.setCursor(3, 3);
    5bb2:	63 e0       	ldi	r22, 0x03	; 3
    5bb4:	83 e0       	ldi	r24, 0x03	; 3
    5bb6:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:450
      lcd.print("Green right ");
    5bba:	8f eb       	ldi	r24, 0xBF	; 191
    5bbc:	97 e0       	ldi	r25, 0x07	; 7
    5bbe:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:451
      if (grn_r_calibrated == 1)
    5bc2:	91 e0       	ldi	r25, 0x01	; 1
    5bc4:	f9 12       	cpse	r15, r25
    5bc6:	04 c0       	rjmp	.+8      	; 0x5bd0 <main+0x17a0>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:452
        lcd.print("done");
    5bc8:	80 ea       	ldi	r24, 0xA0	; 160
    5bca:	97 e0       	ldi	r25, 0x07	; 7
    5bcc:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:454

      lcd.setCursor(0, page - 1);
    5bd0:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <color_calib()::page>
    5bd4:	61 50       	subi	r22, 0x01	; 1
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:500
      lcd.setCursor(3, 3);
      lcd.print("Red Front");
      if (red_f_calibrated == 1)
        lcd.print("done");

      lcd.setCursor(0, page - 9);
    5bd6:	80 e0       	ldi	r24, 0x00	; 0
    5bd8:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:501
      lcd.print("-> ");
    5bdc:	8c ec       	ldi	r24, 0xCC	; 204
    5bde:	97 e0       	ldi	r25, 0x07	; 7
    5be0:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:504
    }

    if (page == 1)  // -> red left
    5be4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <color_calib()::page>
    5be8:	81 30       	cpi	r24, 0x01	; 1
    5bea:	09 f0       	breq	.+2      	; 0x5bee <main+0x17be>
    5bec:	b1 c0       	rjmp	.+354    	; 0x5d50 <main+0x1920>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:506
    {
      if (start == 0) {
    5bee:	86 e0       	ldi	r24, 0x06	; 6
    5bf0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5bf4:	89 2b       	or	r24, r25
    5bf6:	09 f0       	breq	.+2      	; 0x5bfa <main+0x17ca>
    5bf8:	78 cf       	rjmp	.-272    	; 0x5aea <main+0x16ba>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:507
        color_L;
    5bfa:	81 e0       	ldi	r24, 0x01	; 1
    5bfc:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:512
        // EEPROM_read_int(red_left_r) = red;
        // EEPROM_read_int(red_left_g) = green;
        // EEPROM_read_int(red_left_b) = blue;
        // EEPROM_read_int(red_left_c) = clear;
        EEPROM_write_int(red_left_r, red);
    5c00:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <red>
    5c04:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <red+0x1>
    5c08:	84 e1       	ldi	r24, 0x14	; 20
    5c0a:	90 e0       	ldi	r25, 0x00	; 0
    5c0c:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:513
        EEPROM_write_int(red_left_g, green);
    5c10:	60 91 cb 08 	lds	r22, 0x08CB	; 0x8008cb <green>
    5c14:	70 91 cc 08 	lds	r23, 0x08CC	; 0x8008cc <green+0x1>
    5c18:	86 e1       	ldi	r24, 0x16	; 22
    5c1a:	90 e0       	ldi	r25, 0x00	; 0
    5c1c:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:514
        EEPROM_write_int(red_left_b, blue);
    5c20:	60 91 c9 08 	lds	r22, 0x08C9	; 0x8008c9 <blue>
    5c24:	70 91 ca 08 	lds	r23, 0x08CA	; 0x8008ca <blue+0x1>
    5c28:	88 e1       	ldi	r24, 0x18	; 24
    5c2a:	90 e0       	ldi	r25, 0x00	; 0
    5c2c:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:515
        EEPROM_write_int(red_left_c, clear);
    5c30:	60 91 c7 08 	lds	r22, 0x08C7	; 0x8008c7 <clear>
    5c34:	70 91 c8 08 	lds	r23, 0x08C8	; 0x8008c8 <clear+0x1>
    5c38:	8a e1       	ldi	r24, 0x1A	; 26
    5c3a:	90 e0       	ldi	r25, 0x00	; 0
    5c3c:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
main():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:516
        red_l_calibrated = 1;
    5c40:	d1 e0       	ldi	r29, 0x01	; 1
    5c42:	53 cf       	rjmp	.-346    	; 0x5aea <main+0x16ba>
color_calib():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:415
    if (next_page == 0) {
      while (next_page == 0)
        ;
      page++;
      if (page > last_page)
        page = 1;
    5c44:	70 92 04 01 	sts	0x0104, r7	; 0x800104 <color_calib()::page>
    5c48:	62 cf       	rjmp	.-316    	; 0x5b0e <main+0x16de>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:424
    if (previuse_page == 0) {
      while (previuse_page == 0)
        ;
      page--;
      if (page < 1)
        page = last_page;
    5c4a:	60 92 04 01 	sts	0x0104, r6	; 0x800104 <color_calib()::page>
    5c4e:	73 cf       	rjmp	.-282    	; 0x5b36 <main+0x1706>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:456
      if (grn_r_calibrated == 1)
        lcd.print("done");

      lcd.setCursor(0, page - 1);
      lcd.print("-> ");
    } else if (page <= 8) {
    5c50:	89 30       	cpi	r24, 0x09	; 9
    5c52:	0c f0       	brlt	.+2      	; 0x5c56 <main+0x1826>
    5c54:	3f c0       	rjmp	.+126    	; 0x5cd4 <main+0x18a4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:457
      lcd.setCursor(3, 0);
    5c56:	83 e0       	ldi	r24, 0x03	; 3
    5c58:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:458
      lcd.print("BLUE left   ");
    5c5c:	80 ed       	ldi	r24, 0xD0	; 208
    5c5e:	97 e0       	ldi	r25, 0x07	; 7
    5c60:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:459
      if (blu_l_calibrated == 1)
    5c64:	e1 e0       	ldi	r30, 0x01	; 1
    5c66:	ee 12       	cpse	r14, r30
    5c68:	04 c0       	rjmp	.+8      	; 0x5c72 <main+0x1842>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:460
        lcd.print("done");
    5c6a:	80 ea       	ldi	r24, 0xA0	; 160
    5c6c:	97 e0       	ldi	r25, 0x07	; 7
    5c6e:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:462

      lcd.setCursor(3, 1);
    5c72:	61 e0       	ldi	r22, 0x01	; 1
    5c74:	83 e0       	ldi	r24, 0x03	; 3
    5c76:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:463
      lcd.print("BLUE right  ");
    5c7a:	8d ed       	ldi	r24, 0xDD	; 221
    5c7c:	97 e0       	ldi	r25, 0x07	; 7
    5c7e:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:464
      if (blu_r_calibrated == 1)
    5c82:	f1 e0       	ldi	r31, 0x01	; 1
    5c84:	df 12       	cpse	r13, r31
    5c86:	04 c0       	rjmp	.+8      	; 0x5c90 <main+0x1860>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:465
        lcd.print("done");
    5c88:	80 ea       	ldi	r24, 0xA0	; 160
    5c8a:	97 e0       	ldi	r25, 0x07	; 7
    5c8c:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:467

      lcd.setCursor(3, 2);
    5c90:	62 e0       	ldi	r22, 0x02	; 2
    5c92:	83 e0       	ldi	r24, 0x03	; 3
    5c94:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:468
      lcd.print("YELLOW left ");
    5c98:	8a ee       	ldi	r24, 0xEA	; 234
    5c9a:	97 e0       	ldi	r25, 0x07	; 7
    5c9c:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:469
      if (yel_l_calibrated == 1)
    5ca0:	21 e0       	ldi	r18, 0x01	; 1
    5ca2:	c2 12       	cpse	r12, r18
    5ca4:	04 c0       	rjmp	.+8      	; 0x5cae <main+0x187e>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:470
        lcd.print("done");
    5ca6:	80 ea       	ldi	r24, 0xA0	; 160
    5ca8:	97 e0       	ldi	r25, 0x07	; 7
    5caa:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:472

      lcd.setCursor(3, 3);
    5cae:	63 e0       	ldi	r22, 0x03	; 3
    5cb0:	83 e0       	ldi	r24, 0x03	; 3
    5cb2:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:473
      lcd.print("YELLOW right ");
    5cb6:	87 ef       	ldi	r24, 0xF7	; 247
    5cb8:	97 e0       	ldi	r25, 0x07	; 7
    5cba:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:474
      if (yel_r_calibrated == 1)
    5cbe:	31 e0       	ldi	r19, 0x01	; 1
    5cc0:	b3 12       	cpse	r11, r19
    5cc2:	04 c0       	rjmp	.+8      	; 0x5ccc <main+0x189c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:475
        lcd.print("done");
    5cc4:	80 ea       	ldi	r24, 0xA0	; 160
    5cc6:	97 e0       	ldi	r25, 0x07	; 7
    5cc8:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:477

      lcd.setCursor(0, page - 5);
    5ccc:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <color_calib()::page>
    5cd0:	65 50       	subi	r22, 0x05	; 5
    5cd2:	81 cf       	rjmp	.-254    	; 0x5bd6 <main+0x17a6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:480
      lcd.print("-> ");
    } else {
      lcd.setCursor(3, 0);
    5cd4:	83 e0       	ldi	r24, 0x03	; 3
    5cd6:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:481
      lcd.print("SILVER left  ");
    5cda:	85 e0       	ldi	r24, 0x05	; 5
    5cdc:	98 e0       	ldi	r25, 0x08	; 8
    5cde:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:482
      if (sil_l_calibrated == 1)
    5ce2:	81 e0       	ldi	r24, 0x01	; 1
    5ce4:	a8 12       	cpse	r10, r24
    5ce6:	04 c0       	rjmp	.+8      	; 0x5cf0 <main+0x18c0>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:483
        lcd.print("done");
    5ce8:	80 ea       	ldi	r24, 0xA0	; 160
    5cea:	97 e0       	ldi	r25, 0x07	; 7
    5cec:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:485

      lcd.setCursor(3, 1);
    5cf0:	61 e0       	ldi	r22, 0x01	; 1
    5cf2:	83 e0       	ldi	r24, 0x03	; 3
    5cf4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:486
      lcd.print("SILVER right ");
    5cf8:	83 e1       	ldi	r24, 0x13	; 19
    5cfa:	98 e0       	ldi	r25, 0x08	; 8
    5cfc:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:487
      if (sil_r_calibrated == 1)
    5d00:	91 e0       	ldi	r25, 0x01	; 1
    5d02:	99 12       	cpse	r9, r25
    5d04:	04 c0       	rjmp	.+8      	; 0x5d0e <main+0x18de>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:488
        lcd.print("done");
    5d06:	80 ea       	ldi	r24, 0xA0	; 160
    5d08:	97 e0       	ldi	r25, 0x07	; 7
    5d0a:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:490

      lcd.setCursor(3, 2);
    5d0e:	62 e0       	ldi	r22, 0x02	; 2
    5d10:	83 e0       	ldi	r24, 0x03	; 3
    5d12:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:491
      lcd.print("Green Front ");
    5d16:	81 e2       	ldi	r24, 0x21	; 33
    5d18:	98 e0       	ldi	r25, 0x08	; 8
    5d1a:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:492
      if (grn_f_calibrated == 1)
    5d1e:	e1 e0       	ldi	r30, 0x01	; 1
    5d20:	8e 12       	cpse	r8, r30
    5d22:	04 c0       	rjmp	.+8      	; 0x5d2c <main+0x18fc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:493
        lcd.print("done");
    5d24:	80 ea       	ldi	r24, 0xA0	; 160
    5d26:	97 e0       	ldi	r25, 0x07	; 7
    5d28:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:495

      lcd.setCursor(3, 3);
    5d2c:	63 e0       	ldi	r22, 0x03	; 3
    5d2e:	83 e0       	ldi	r24, 0x03	; 3
    5d30:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.27]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:496
      lcd.print("Red Front");
    5d34:	8e e2       	ldi	r24, 0x2E	; 46
    5d36:	98 e0       	ldi	r25, 0x08	; 8
    5d38:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:497
      if (red_f_calibrated == 1)
    5d3c:	c1 30       	cpi	r28, 0x01	; 1
    5d3e:	21 f4       	brne	.+8      	; 0x5d48 <main+0x1918>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:498
        lcd.print("done");
    5d40:	80 ea       	ldi	r24, 0xA0	; 160
    5d42:	97 e0       	ldi	r25, 0x07	; 7
    5d44:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:500

      lcd.setCursor(0, page - 9);
    5d48:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <color_calib()::page>
    5d4c:	69 50       	subi	r22, 0x09	; 9
    5d4e:	43 cf       	rjmp	.-378    	; 0x5bd6 <main+0x17a6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:518
        EEPROM_write_int(red_left_g, green);
        EEPROM_write_int(red_left_b, blue);
        EEPROM_write_int(red_left_c, clear);
        red_l_calibrated = 1;
      }
    } else if (page == 2)  // red right
    5d50:	82 30       	cpi	r24, 0x02	; 2
    5d52:	59 f5       	brne	.+86     	; 0x5daa <main+0x197a>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:520
    {
      if (start == 0) {
    5d54:	86 e0       	ldi	r24, 0x06	; 6
    5d56:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5d5a:	89 2b       	or	r24, r25
    5d5c:	09 f0       	breq	.+2      	; 0x5d60 <main+0x1930>
    5d5e:	c5 ce       	rjmp	.-630    	; 0x5aea <main+0x16ba>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:521
        color_R;
    5d60:	82 e0       	ldi	r24, 0x02	; 2
    5d62:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:522
        EEPROM_write_int(red_right_r, red);
    5d66:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <red>
    5d6a:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <red+0x1>
    5d6e:	8c e3       	ldi	r24, 0x3C	; 60
    5d70:	90 e0       	ldi	r25, 0x00	; 0
    5d72:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:523
        EEPROM_write_int(red_right_g, green);
    5d76:	60 91 cb 08 	lds	r22, 0x08CB	; 0x8008cb <green>
    5d7a:	70 91 cc 08 	lds	r23, 0x08CC	; 0x8008cc <green+0x1>
    5d7e:	8e e3       	ldi	r24, 0x3E	; 62
    5d80:	90 e0       	ldi	r25, 0x00	; 0
    5d82:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:524
        EEPROM_write_int(red_right_b, blue);
    5d86:	60 91 c9 08 	lds	r22, 0x08C9	; 0x8008c9 <blue>
    5d8a:	70 91 ca 08 	lds	r23, 0x08CA	; 0x8008ca <blue+0x1>
    5d8e:	80 e4       	ldi	r24, 0x40	; 64
    5d90:	90 e0       	ldi	r25, 0x00	; 0
    5d92:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:525
        EEPROM_write_int(red_right_c, clear);
    5d96:	60 91 c7 08 	lds	r22, 0x08C7	; 0x8008c7 <clear>
    5d9a:	70 91 c8 08 	lds	r23, 0x08C8	; 0x8008c8 <clear+0x1>
    5d9e:	82 e4       	ldi	r24, 0x42	; 66
    5da0:	90 e0       	ldi	r25, 0x00	; 0
    5da2:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
main():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:526
        red_r_calibrated = 1;
    5da6:	11 e0       	ldi	r17, 0x01	; 1
    5da8:	a0 ce       	rjmp	.-704    	; 0x5aea <main+0x16ba>
color_calib():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:530
      }
    }

    else if (page == 3)  // grn left
    5daa:	83 30       	cpi	r24, 0x03	; 3
    5dac:	59 f5       	brne	.+86     	; 0x5e04 <main+0x19d4>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:532
    {
      if (start == 0) {
    5dae:	86 e0       	ldi	r24, 0x06	; 6
    5db0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5db4:	89 2b       	or	r24, r25
    5db6:	09 f0       	breq	.+2      	; 0x5dba <main+0x198a>
    5db8:	98 ce       	rjmp	.-720    	; 0x5aea <main+0x16ba>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:533
        color_L;
    5dba:	81 e0       	ldi	r24, 0x01	; 1
    5dbc:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:534
        EEPROM_write_int(green_left_r, red);
    5dc0:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <red>
    5dc4:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <red+0x1>
    5dc8:	8c e1       	ldi	r24, 0x1C	; 28
    5dca:	90 e0       	ldi	r25, 0x00	; 0
    5dcc:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:535
        EEPROM_write_int(green_left_g, green);
    5dd0:	60 91 cb 08 	lds	r22, 0x08CB	; 0x8008cb <green>
    5dd4:	70 91 cc 08 	lds	r23, 0x08CC	; 0x8008cc <green+0x1>
    5dd8:	8e e1       	ldi	r24, 0x1E	; 30
    5dda:	90 e0       	ldi	r25, 0x00	; 0
    5ddc:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:536
        EEPROM_write_int(green_left_b, blue);
    5de0:	60 91 c9 08 	lds	r22, 0x08C9	; 0x8008c9 <blue>
    5de4:	70 91 ca 08 	lds	r23, 0x08CA	; 0x8008ca <blue+0x1>
    5de8:	80 e2       	ldi	r24, 0x20	; 32
    5dea:	90 e0       	ldi	r25, 0x00	; 0
    5dec:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:537
        EEPROM_write_int(green_left_c, clear);
    5df0:	60 91 c7 08 	lds	r22, 0x08C7	; 0x8008c7 <clear>
    5df4:	70 91 c8 08 	lds	r23, 0x08C8	; 0x8008c8 <clear+0x1>
    5df8:	82 e2       	ldi	r24, 0x22	; 34
    5dfa:	90 e0       	ldi	r25, 0x00	; 0
    5dfc:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
main():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:538
        grn_l_calibrated = 1;
    5e00:	01 e0       	ldi	r16, 0x01	; 1
    5e02:	73 ce       	rjmp	.-794    	; 0x5aea <main+0x16ba>
color_calib():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:540
      }
    } else if (page == 4)  // grn right
    5e04:	84 30       	cpi	r24, 0x04	; 4
    5e06:	61 f5       	brne	.+88     	; 0x5e60 <main+0x1a30>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:542
    {
      if (start == 0) {
    5e08:	86 e0       	ldi	r24, 0x06	; 6
    5e0a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5e0e:	89 2b       	or	r24, r25
    5e10:	09 f0       	breq	.+2      	; 0x5e14 <main+0x19e4>
    5e12:	6b ce       	rjmp	.-810    	; 0x5aea <main+0x16ba>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:543
        color_R;
    5e14:	82 e0       	ldi	r24, 0x02	; 2
    5e16:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:544
        EEPROM_write_int(green_right_r, red);
    5e1a:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <red>
    5e1e:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <red+0x1>
    5e22:	84 e4       	ldi	r24, 0x44	; 68
    5e24:	90 e0       	ldi	r25, 0x00	; 0
    5e26:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:545
        EEPROM_write_int(green_right_g, green);
    5e2a:	60 91 cb 08 	lds	r22, 0x08CB	; 0x8008cb <green>
    5e2e:	70 91 cc 08 	lds	r23, 0x08CC	; 0x8008cc <green+0x1>
    5e32:	86 e4       	ldi	r24, 0x46	; 70
    5e34:	90 e0       	ldi	r25, 0x00	; 0
    5e36:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:546
        EEPROM_write_int(green_right_b, blue);
    5e3a:	60 91 c9 08 	lds	r22, 0x08C9	; 0x8008c9 <blue>
    5e3e:	70 91 ca 08 	lds	r23, 0x08CA	; 0x8008ca <blue+0x1>
    5e42:	88 e4       	ldi	r24, 0x48	; 72
    5e44:	90 e0       	ldi	r25, 0x00	; 0
    5e46:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:547
        EEPROM_write_int(green_right_c, clear);
    5e4a:	60 91 c7 08 	lds	r22, 0x08C7	; 0x8008c7 <clear>
    5e4e:	70 91 c8 08 	lds	r23, 0x08C8	; 0x8008c8 <clear+0x1>
    5e52:	8a e4       	ldi	r24, 0x4A	; 74
    5e54:	90 e0       	ldi	r25, 0x00	; 0
    5e56:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
main():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:548
        grn_r_calibrated = 1;
    5e5a:	ff 24       	eor	r15, r15
    5e5c:	f3 94       	inc	r15
    5e5e:	45 ce       	rjmp	.-886    	; 0x5aea <main+0x16ba>
color_calib():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:552
      }
    }

    else if (page == 5)  // blu left
    5e60:	85 30       	cpi	r24, 0x05	; 5
    5e62:	61 f5       	brne	.+88     	; 0x5ebc <main+0x1a8c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:554
    {
      if (start == 0) {
    5e64:	86 e0       	ldi	r24, 0x06	; 6
    5e66:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5e6a:	89 2b       	or	r24, r25
    5e6c:	09 f0       	breq	.+2      	; 0x5e70 <main+0x1a40>
    5e6e:	3d ce       	rjmp	.-902    	; 0x5aea <main+0x16ba>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:555
        color_L;
    5e70:	81 e0       	ldi	r24, 0x01	; 1
    5e72:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:556
        EEPROM_write_int(blue_left_r, red);
    5e76:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <red>
    5e7a:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <red+0x1>
    5e7e:	84 e2       	ldi	r24, 0x24	; 36
    5e80:	90 e0       	ldi	r25, 0x00	; 0
    5e82:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:557
        EEPROM_write_int(blue_left_g, green);
    5e86:	60 91 cb 08 	lds	r22, 0x08CB	; 0x8008cb <green>
    5e8a:	70 91 cc 08 	lds	r23, 0x08CC	; 0x8008cc <green+0x1>
    5e8e:	86 e2       	ldi	r24, 0x26	; 38
    5e90:	90 e0       	ldi	r25, 0x00	; 0
    5e92:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:558
        EEPROM_write_int(blue_left_b, blue);
    5e96:	60 91 c9 08 	lds	r22, 0x08C9	; 0x8008c9 <blue>
    5e9a:	70 91 ca 08 	lds	r23, 0x08CA	; 0x8008ca <blue+0x1>
    5e9e:	88 e2       	ldi	r24, 0x28	; 40
    5ea0:	90 e0       	ldi	r25, 0x00	; 0
    5ea2:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:559
        EEPROM_write_int(blue_left_c, clear);
    5ea6:	60 91 c7 08 	lds	r22, 0x08C7	; 0x8008c7 <clear>
    5eaa:	70 91 c8 08 	lds	r23, 0x08C8	; 0x8008c8 <clear+0x1>
    5eae:	8a e2       	ldi	r24, 0x2A	; 42
    5eb0:	90 e0       	ldi	r25, 0x00	; 0
    5eb2:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
main():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:560
        blu_l_calibrated = 1;
    5eb6:	ee 24       	eor	r14, r14
    5eb8:	e3 94       	inc	r14
    5eba:	17 ce       	rjmp	.-978    	; 0x5aea <main+0x16ba>
color_calib():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:562
      }
    } else if (page == 6)  // blu right
    5ebc:	86 30       	cpi	r24, 0x06	; 6
    5ebe:	59 f5       	brne	.+86     	; 0x5f16 <main+0x1ae6>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:564
    {
      if (start == 0) {
    5ec0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5ec4:	89 2b       	or	r24, r25
    5ec6:	09 f0       	breq	.+2      	; 0x5eca <main+0x1a9a>
    5ec8:	10 ce       	rjmp	.-992    	; 0x5aea <main+0x16ba>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:565
        color_R;
    5eca:	82 e0       	ldi	r24, 0x02	; 2
    5ecc:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:566
        EEPROM_write_int(blue_right_r, red);
    5ed0:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <red>
    5ed4:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <red+0x1>
    5ed8:	8c e4       	ldi	r24, 0x4C	; 76
    5eda:	90 e0       	ldi	r25, 0x00	; 0
    5edc:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:567
        EEPROM_write_int(blue_right_g, green);
    5ee0:	60 91 cb 08 	lds	r22, 0x08CB	; 0x8008cb <green>
    5ee4:	70 91 cc 08 	lds	r23, 0x08CC	; 0x8008cc <green+0x1>
    5ee8:	8e e4       	ldi	r24, 0x4E	; 78
    5eea:	90 e0       	ldi	r25, 0x00	; 0
    5eec:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:568
        EEPROM_write_int(blue_right_b, blue);
    5ef0:	60 91 c9 08 	lds	r22, 0x08C9	; 0x8008c9 <blue>
    5ef4:	70 91 ca 08 	lds	r23, 0x08CA	; 0x8008ca <blue+0x1>
    5ef8:	80 e5       	ldi	r24, 0x50	; 80
    5efa:	90 e0       	ldi	r25, 0x00	; 0
    5efc:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:569
        EEPROM_write_int(blue_right_c, clear);
    5f00:	60 91 c7 08 	lds	r22, 0x08C7	; 0x8008c7 <clear>
    5f04:	70 91 c8 08 	lds	r23, 0x08C8	; 0x8008c8 <clear+0x1>
    5f08:	82 e5       	ldi	r24, 0x52	; 82
    5f0a:	90 e0       	ldi	r25, 0x00	; 0
    5f0c:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
main():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:570
        blu_r_calibrated = 1;
    5f10:	dd 24       	eor	r13, r13
    5f12:	d3 94       	inc	r13
    5f14:	ea cd       	rjmp	.-1068   	; 0x5aea <main+0x16ba>
color_calib():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:574
      }
    }

    else if (page == 7)  // yelow left
    5f16:	87 30       	cpi	r24, 0x07	; 7
    5f18:	61 f5       	brne	.+88     	; 0x5f72 <main+0x1b42>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:576
    {
      if (start == 0) {
    5f1a:	86 e0       	ldi	r24, 0x06	; 6
    5f1c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5f20:	89 2b       	or	r24, r25
    5f22:	09 f0       	breq	.+2      	; 0x5f26 <main+0x1af6>
    5f24:	e2 cd       	rjmp	.-1084   	; 0x5aea <main+0x16ba>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:577
        color_L;
    5f26:	81 e0       	ldi	r24, 0x01	; 1
    5f28:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:578
        EEPROM_write_int(yellow_left_r, red);
    5f2c:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <red>
    5f30:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <red+0x1>
    5f34:	8c e2       	ldi	r24, 0x2C	; 44
    5f36:	90 e0       	ldi	r25, 0x00	; 0
    5f38:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:579
        EEPROM_write_int(yellow_left_g, green);
    5f3c:	60 91 cb 08 	lds	r22, 0x08CB	; 0x8008cb <green>
    5f40:	70 91 cc 08 	lds	r23, 0x08CC	; 0x8008cc <green+0x1>
    5f44:	8e e2       	ldi	r24, 0x2E	; 46
    5f46:	90 e0       	ldi	r25, 0x00	; 0
    5f48:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:580
        EEPROM_write_int(yellow_left_b, blue);
    5f4c:	60 91 c9 08 	lds	r22, 0x08C9	; 0x8008c9 <blue>
    5f50:	70 91 ca 08 	lds	r23, 0x08CA	; 0x8008ca <blue+0x1>
    5f54:	80 e3       	ldi	r24, 0x30	; 48
    5f56:	90 e0       	ldi	r25, 0x00	; 0
    5f58:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:581
        EEPROM_write_int(yellow_left_c, clear);
    5f5c:	60 91 c7 08 	lds	r22, 0x08C7	; 0x8008c7 <clear>
    5f60:	70 91 c8 08 	lds	r23, 0x08C8	; 0x8008c8 <clear+0x1>
    5f64:	82 e3       	ldi	r24, 0x32	; 50
    5f66:	90 e0       	ldi	r25, 0x00	; 0
    5f68:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
main():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:582
        yel_l_calibrated = 1;
    5f6c:	cc 24       	eor	r12, r12
    5f6e:	c3 94       	inc	r12
    5f70:	bc cd       	rjmp	.-1160   	; 0x5aea <main+0x16ba>
color_calib():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:584
      }
    } else if (page == 8)  // yelow right
    5f72:	88 30       	cpi	r24, 0x08	; 8
    5f74:	61 f5       	brne	.+88     	; 0x5fce <main+0x1b9e>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:586
    {
      if (start == 0) {
    5f76:	86 e0       	ldi	r24, 0x06	; 6
    5f78:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5f7c:	89 2b       	or	r24, r25
    5f7e:	09 f0       	breq	.+2      	; 0x5f82 <main+0x1b52>
    5f80:	b4 cd       	rjmp	.-1176   	; 0x5aea <main+0x16ba>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:587
        color_R;
    5f82:	82 e0       	ldi	r24, 0x02	; 2
    5f84:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:588
        EEPROM_write_int(yellow_right_r, red);
    5f88:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <red>
    5f8c:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <red+0x1>
    5f90:	84 e5       	ldi	r24, 0x54	; 84
    5f92:	90 e0       	ldi	r25, 0x00	; 0
    5f94:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:589
        EEPROM_write_int(yellow_right_g, green);
    5f98:	60 91 cb 08 	lds	r22, 0x08CB	; 0x8008cb <green>
    5f9c:	70 91 cc 08 	lds	r23, 0x08CC	; 0x8008cc <green+0x1>
    5fa0:	86 e5       	ldi	r24, 0x56	; 86
    5fa2:	90 e0       	ldi	r25, 0x00	; 0
    5fa4:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:590
        EEPROM_write_int(yellow_right_b, blue);
    5fa8:	60 91 c9 08 	lds	r22, 0x08C9	; 0x8008c9 <blue>
    5fac:	70 91 ca 08 	lds	r23, 0x08CA	; 0x8008ca <blue+0x1>
    5fb0:	88 e5       	ldi	r24, 0x58	; 88
    5fb2:	90 e0       	ldi	r25, 0x00	; 0
    5fb4:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:591
        EEPROM_write_int(yellow_right_c, clear);
    5fb8:	60 91 c7 08 	lds	r22, 0x08C7	; 0x8008c7 <clear>
    5fbc:	70 91 c8 08 	lds	r23, 0x08C8	; 0x8008c8 <clear+0x1>
    5fc0:	8a e5       	ldi	r24, 0x5A	; 90
    5fc2:	90 e0       	ldi	r25, 0x00	; 0
    5fc4:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
main():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:592
        yel_r_calibrated = 1;
    5fc8:	bb 24       	eor	r11, r11
    5fca:	b3 94       	inc	r11
    5fcc:	8e cd       	rjmp	.-1252   	; 0x5aea <main+0x16ba>
color_calib():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:596
      }
    }

    else if (page == 9)  // sil left
    5fce:	89 30       	cpi	r24, 0x09	; 9
    5fd0:	61 f5       	brne	.+88     	; 0x602a <main+0x1bfa>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:598
    {
      if (start == 0) {
    5fd2:	86 e0       	ldi	r24, 0x06	; 6
    5fd4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    5fd8:	89 2b       	or	r24, r25
    5fda:	09 f0       	breq	.+2      	; 0x5fde <main+0x1bae>
    5fdc:	86 cd       	rjmp	.-1268   	; 0x5aea <main+0x16ba>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:599
        color_L;
    5fde:	81 e0       	ldi	r24, 0x01	; 1
    5fe0:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:600
        EEPROM_write_int(silver_left_r, red);
    5fe4:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <red>
    5fe8:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <red+0x1>
    5fec:	84 e3       	ldi	r24, 0x34	; 52
    5fee:	90 e0       	ldi	r25, 0x00	; 0
    5ff0:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:601
        EEPROM_write_int(silver_left_g, green);
    5ff4:	60 91 cb 08 	lds	r22, 0x08CB	; 0x8008cb <green>
    5ff8:	70 91 cc 08 	lds	r23, 0x08CC	; 0x8008cc <green+0x1>
    5ffc:	86 e3       	ldi	r24, 0x36	; 54
    5ffe:	90 e0       	ldi	r25, 0x00	; 0
    6000:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:602
        EEPROM_write_int(silver_left_b, blue);
    6004:	60 91 c9 08 	lds	r22, 0x08C9	; 0x8008c9 <blue>
    6008:	70 91 ca 08 	lds	r23, 0x08CA	; 0x8008ca <blue+0x1>
    600c:	88 e3       	ldi	r24, 0x38	; 56
    600e:	90 e0       	ldi	r25, 0x00	; 0
    6010:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:603
        EEPROM_write_int(silver_left_c, clear);
    6014:	60 91 c7 08 	lds	r22, 0x08C7	; 0x8008c7 <clear>
    6018:	70 91 c8 08 	lds	r23, 0x08C8	; 0x8008c8 <clear+0x1>
    601c:	8a e3       	ldi	r24, 0x3A	; 58
    601e:	90 e0       	ldi	r25, 0x00	; 0
    6020:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
main():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:604
        sil_l_calibrated = 1;
    6024:	aa 24       	eor	r10, r10
    6026:	a3 94       	inc	r10
    6028:	60 cd       	rjmp	.-1344   	; 0x5aea <main+0x16ba>
color_calib():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:606
      }
    } else if (page == 10)  // sil right
    602a:	8a 30       	cpi	r24, 0x0A	; 10
    602c:	61 f5       	brne	.+88     	; 0x6086 <main+0x1c56>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:608
    {
      if (start == 0) {
    602e:	86 e0       	ldi	r24, 0x06	; 6
    6030:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    6034:	89 2b       	or	r24, r25
    6036:	09 f0       	breq	.+2      	; 0x603a <main+0x1c0a>
    6038:	58 cd       	rjmp	.-1360   	; 0x5aea <main+0x16ba>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:609
        color_R;
    603a:	82 e0       	ldi	r24, 0x02	; 2
    603c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:610
        EEPROM_write_int(silver_right_r, red);
    6040:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <red>
    6044:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <red+0x1>
    6048:	8c e5       	ldi	r24, 0x5C	; 92
    604a:	90 e0       	ldi	r25, 0x00	; 0
    604c:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:611
        EEPROM_write_int(silver_right_g, green);
    6050:	60 91 cb 08 	lds	r22, 0x08CB	; 0x8008cb <green>
    6054:	70 91 cc 08 	lds	r23, 0x08CC	; 0x8008cc <green+0x1>
    6058:	8e e5       	ldi	r24, 0x5E	; 94
    605a:	90 e0       	ldi	r25, 0x00	; 0
    605c:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:612
        EEPROM_write_int(silver_right_b, blue);
    6060:	60 91 c9 08 	lds	r22, 0x08C9	; 0x8008c9 <blue>
    6064:	70 91 ca 08 	lds	r23, 0x08CA	; 0x8008ca <blue+0x1>
    6068:	80 e6       	ldi	r24, 0x60	; 96
    606a:	90 e0       	ldi	r25, 0x00	; 0
    606c:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:613
        EEPROM_write_int(silver_right_c, clear);
    6070:	60 91 c7 08 	lds	r22, 0x08C7	; 0x8008c7 <clear>
    6074:	70 91 c8 08 	lds	r23, 0x08C8	; 0x8008c8 <clear+0x1>
    6078:	82 e6       	ldi	r24, 0x62	; 98
    607a:	90 e0       	ldi	r25, 0x00	; 0
    607c:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
main():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:614
        sil_r_calibrated = 1;
    6080:	99 24       	eor	r9, r9
    6082:	93 94       	inc	r9
    6084:	32 cd       	rjmp	.-1436   	; 0x5aea <main+0x16ba>
color_calib():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:616
      }
    } else if (page == 11)  // grn front
    6086:	8b 30       	cpi	r24, 0x0B	; 11
    6088:	61 f5       	brne	.+88     	; 0x60e2 <main+0x1cb2>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:618
    {
      if (start == 0) {
    608a:	86 e0       	ldi	r24, 0x06	; 6
    608c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    6090:	89 2b       	or	r24, r25
    6092:	09 f0       	breq	.+2      	; 0x6096 <main+0x1c66>
    6094:	2a cd       	rjmp	.-1452   	; 0x5aea <main+0x16ba>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:619
        color_F;
    6096:	83 e0       	ldi	r24, 0x03	; 3
    6098:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:620
        EEPROM_write_int(green_front_r, red);
    609c:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <red>
    60a0:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <red+0x1>
    60a4:	8c e6       	ldi	r24, 0x6C	; 108
    60a6:	90 e0       	ldi	r25, 0x00	; 0
    60a8:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:621
        EEPROM_write_int(green_front_g, green);
    60ac:	60 91 cb 08 	lds	r22, 0x08CB	; 0x8008cb <green>
    60b0:	70 91 cc 08 	lds	r23, 0x08CC	; 0x8008cc <green+0x1>
    60b4:	8e e6       	ldi	r24, 0x6E	; 110
    60b6:	90 e0       	ldi	r25, 0x00	; 0
    60b8:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:622
        EEPROM_write_int(green_front_b, blue);
    60bc:	60 91 c9 08 	lds	r22, 0x08C9	; 0x8008c9 <blue>
    60c0:	70 91 ca 08 	lds	r23, 0x08CA	; 0x8008ca <blue+0x1>
    60c4:	80 e7       	ldi	r24, 0x70	; 112
    60c6:	90 e0       	ldi	r25, 0x00	; 0
    60c8:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:623
        EEPROM_write_int(green_front_c, clear);
    60cc:	60 91 c7 08 	lds	r22, 0x08C7	; 0x8008c7 <clear>
    60d0:	70 91 c8 08 	lds	r23, 0x08C8	; 0x8008c8 <clear+0x1>
    60d4:	82 e7       	ldi	r24, 0x72	; 114
    60d6:	90 e0       	ldi	r25, 0x00	; 0
    60d8:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
main():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:624
        grn_f_calibrated = 1;
    60dc:	88 24       	eor	r8, r8
    60de:	83 94       	inc	r8
    60e0:	04 cd       	rjmp	.-1528   	; 0x5aea <main+0x16ba>
color_calib():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:626
      }
    } else if (page == 12)  // red front
    60e2:	8c 30       	cpi	r24, 0x0C	; 12
    60e4:	09 f0       	breq	.+2      	; 0x60e8 <main+0x1cb8>
    60e6:	01 cd       	rjmp	.-1534   	; 0x5aea <main+0x16ba>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:628
    {
      if (start == 0) {
    60e8:	86 e0       	ldi	r24, 0x06	; 6
    60ea:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <digitalRead>
    60ee:	89 2b       	or	r24, r25
    60f0:	09 f0       	breq	.+2      	; 0x60f4 <main+0x1cc4>
    60f2:	fb cc       	rjmp	.-1546   	; 0x5aea <main+0x16ba>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:629
        color_F;
    60f4:	83 e0       	ldi	r24, 0x03	; 3
    60f6:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:630
        EEPROM_write_int(red_front_r, red);
    60fa:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <red>
    60fe:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <red+0x1>
    6102:	84 e6       	ldi	r24, 0x64	; 100
    6104:	90 e0       	ldi	r25, 0x00	; 0
    6106:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:631
        EEPROM_write_int(red_front_g, green);
    610a:	60 91 cb 08 	lds	r22, 0x08CB	; 0x8008cb <green>
    610e:	70 91 cc 08 	lds	r23, 0x08CC	; 0x8008cc <green+0x1>
    6112:	86 e6       	ldi	r24, 0x66	; 102
    6114:	90 e0       	ldi	r25, 0x00	; 0
    6116:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:632
        EEPROM_write_int(red_front_b, blue);
    611a:	60 91 c9 08 	lds	r22, 0x08C9	; 0x8008c9 <blue>
    611e:	70 91 ca 08 	lds	r23, 0x08CA	; 0x8008ca <blue+0x1>
    6122:	88 e6       	ldi	r24, 0x68	; 104
    6124:	90 e0       	ldi	r25, 0x00	; 0
    6126:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:633
        EEPROM_write_int(red_front_c, clear);
    612a:	60 91 c7 08 	lds	r22, 0x08C7	; 0x8008c7 <clear>
    612e:	70 91 c8 08 	lds	r23, 0x08C8	; 0x8008c8 <clear+0x1>
    6132:	8a e6       	ldi	r24, 0x6A	; 106
    6134:	90 e0       	ldi	r25, 0x00	; 0
    6136:	0e 94 3f 0a 	call	0x147e	; 0x147e <EEPROM_write_int(int, int)>
main():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:634
        red_f_calibrated = 1;
    613a:	c1 e0       	ldi	r28, 0x01	; 1
    613c:	d6 cc       	rjmp	.-1620   	; 0x5aea <main+0x16ba>
color_detection():
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2020
        move(Left,T90,150);
        archery();
      }
    }
  }
  else if (right_card != WHITE) {
    613e:	87 30       	cpi	r24, 0x07	; 7
    6140:	91 05       	cpc	r25, r1
    6142:	11 f4       	brne	.+4      	; 0x6148 <main+0x1d18>
    6144:	0c 94 fe 25 	jmp	0x4bfc	; 0x4bfc <main+0x7cc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2021
    direction=Right;
    6148:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <direction+0x1>
    614c:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <direction>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2022
    if (right_card == GREEN) {
    6150:	01 97       	sbiw	r24, 0x01	; 1
    6152:	49 f5       	brne	.+82     	; 0x61a6 <main+0x1d76>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2023
        go(0, 0);
    6154:	70 e0       	ldi	r23, 0x00	; 0
    6156:	60 e0       	ldi	r22, 0x00	; 0
    6158:	90 e0       	ldi	r25, 0x00	; 0
    615a:	80 e0       	ldi	r24, 0x00	; 0
    615c:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2024
        beep(1);
    6160:	81 e0       	ldi	r24, 0x01	; 1
    6162:	90 e0       	ldi	r25, 0x00	; 0
    6164:	0e 94 61 08 	call	0x10c2	; 0x10c2 <beep(int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2025
      if (color_R == GREEN) {
    6168:	82 e0       	ldi	r24, 0x02	; 2
    616a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    616e:	81 30       	cpi	r24, 0x01	; 1
    6170:	09 f0       	breq	.+2      	; 0x6174 <main+0x1d44>
    6172:	44 c0       	rjmp	.+136    	; 0x61fc <main+0x1dcc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2026
        lcd.clear();
    6174:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2027
        lcd.print("Football");
    6178:	88 e3       	ldi	r24, 0x38	; 56
    617a:	98 e0       	ldi	r25, 0x08	; 8
    617c:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2028
        move(forward,T90/3,100);
    6180:	ce 01       	movw	r24, r28
    6182:	b8 01       	movw	r22, r16
    6184:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    6188:	44 e6       	ldi	r20, 0x64	; 100
    618a:	50 e0       	ldi	r21, 0x00	; 0
    618c:	8a e0       	ldi	r24, 0x0A	; 10
    618e:	90 e0       	ldi	r25, 0x00	; 0
    6190:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2029
        move(Right,T90,150);
    6194:	46 e9       	ldi	r20, 0x96	; 150
    6196:	50 e0       	ldi	r21, 0x00	; 0
    6198:	be 01       	movw	r22, r28
    619a:	8c e0       	ldi	r24, 0x0C	; 12
    619c:	90 e0       	ldi	r25, 0x00	; 0
    619e:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2030
        bowling();
    61a2:	0e 94 75 12 	call	0x24ea	; 0x24ea <bowling()>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2033
      }
    }
    if (right_card == SILVER) {
    61a6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <right_card>
    61aa:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <right_card+0x1>
    61ae:	05 97       	sbiw	r24, 0x05	; 5
    61b0:	29 f5       	brne	.+74     	; 0x61fc <main+0x1dcc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2034
      go(0, 0);
    61b2:	70 e0       	ldi	r23, 0x00	; 0
    61b4:	60 e0       	ldi	r22, 0x00	; 0
    61b6:	90 e0       	ldi	r25, 0x00	; 0
    61b8:	80 e0       	ldi	r24, 0x00	; 0
    61ba:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2035
      if (color_R == SILVER) {
    61be:	82 e0       	ldi	r24, 0x02	; 2
    61c0:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    61c4:	85 30       	cpi	r24, 0x05	; 5
    61c6:	09 f0       	breq	.+2      	; 0x61ca <main+0x1d9a>
    61c8:	44 c0       	rjmp	.+136    	; 0x6252 <main+0x1e22>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2036
        lcd.clear();
    61ca:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2037
        lcd.print("Obstacle");
    61ce:	81 e4       	ldi	r24, 0x41	; 65
    61d0:	98 e0       	ldi	r25, 0x08	; 8
    61d2:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2038
        move(forward,T90/3,100);
    61d6:	ce 01       	movw	r24, r28
    61d8:	b8 01       	movw	r22, r16
    61da:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    61de:	44 e6       	ldi	r20, 0x64	; 100
    61e0:	50 e0       	ldi	r21, 0x00	; 0
    61e2:	8a e0       	ldi	r24, 0x0A	; 10
    61e4:	90 e0       	ldi	r25, 0x00	; 0
    61e6:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2039
        move(Right,T90,150);
    61ea:	46 e9       	ldi	r20, 0x96	; 150
    61ec:	50 e0       	ldi	r21, 0x00	; 0
    61ee:	be 01       	movw	r22, r28
    61f0:	8c e0       	ldi	r24, 0x0C	; 12
    61f2:	90 e0       	ldi	r25, 0x00	; 0
    61f4:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2040
        obstacle();
    61f8:	0e 94 ce 10 	call	0x219c	; 0x219c <obstacle()>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2043
      }
    }
    if (right_card == BLUE) {
    61fc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <right_card>
    6200:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <right_card+0x1>
    6204:	02 97       	sbiw	r24, 0x02	; 2
    6206:	29 f5       	brne	.+74     	; 0x6252 <main+0x1e22>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2044
      go(0, 0);
    6208:	70 e0       	ldi	r23, 0x00	; 0
    620a:	60 e0       	ldi	r22, 0x00	; 0
    620c:	90 e0       	ldi	r25, 0x00	; 0
    620e:	80 e0       	ldi	r24, 0x00	; 0
    6210:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2045
      if (color_R == BLUE) {
    6214:	82 e0       	ldi	r24, 0x02	; 2
    6216:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    621a:	82 30       	cpi	r24, 0x02	; 2
    621c:	09 f0       	breq	.+2      	; 0x6220 <main+0x1df0>
    621e:	46 c0       	rjmp	.+140    	; 0x62ac <main+0x1e7c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2046
        lcd.clear();
    6220:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2047
        lcd.print("weight lift");
    6224:	8a e4       	ldi	r24, 0x4A	; 74
    6226:	98 e0       	ldi	r25, 0x08	; 8
    6228:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2048
        move(forward,T90/3,100);
    622c:	ce 01       	movw	r24, r28
    622e:	b8 01       	movw	r22, r16
    6230:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    6234:	44 e6       	ldi	r20, 0x64	; 100
    6236:	50 e0       	ldi	r21, 0x00	; 0
    6238:	8a e0       	ldi	r24, 0x0A	; 10
    623a:	90 e0       	ldi	r25, 0x00	; 0
    623c:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2049
        move(Right,T90,150);
    6240:	46 e9       	ldi	r20, 0x96	; 150
    6242:	50 e0       	ldi	r21, 0x00	; 0
    6244:	be 01       	movw	r22, r28
    6246:	8c e0       	ldi	r24, 0x0C	; 12
    6248:	90 e0       	ldi	r25, 0x00	; 0
    624a:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2050
        wlift();
    624e:	0e 94 27 13 	call	0x264e	; 0x264e <wlift()>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2053
      }
    }
    if (right_card == RED) {
    6252:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <right_card>
    6256:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <right_card+0x1>
    625a:	89 2b       	or	r24, r25
    625c:	39 f5       	brne	.+78     	; 0x62ac <main+0x1e7c>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2054
      go(0, 0);
    625e:	70 e0       	ldi	r23, 0x00	; 0
    6260:	60 e0       	ldi	r22, 0x00	; 0
    6262:	90 e0       	ldi	r25, 0x00	; 0
    6264:	80 e0       	ldi	r24, 0x00	; 0
    6266:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2055
      if (color_R == RED) {
    626a:	82 e0       	ldi	r24, 0x02	; 2
    626c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    6270:	81 11       	cpse	r24, r1
    6272:	0c 94 fe 25 	jmp	0x4bfc	; 0x4bfc <main+0x7cc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2056
        lcd.clear();
    6276:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2057
        lcd.print("Trck");
    627a:	86 e5       	ldi	r24, 0x56	; 86
    627c:	98 e0       	ldi	r25, 0x08	; 8
    627e:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2058
        move(forward,T90/3,100);
    6282:	ce 01       	movw	r24, r28
    6284:	b8 01       	movw	r22, r16
    6286:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    628a:	44 e6       	ldi	r20, 0x64	; 100
    628c:	50 e0       	ldi	r21, 0x00	; 0
    628e:	8a e0       	ldi	r24, 0x0A	; 10
    6290:	90 e0       	ldi	r25, 0x00	; 0
    6292:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2059
        move(Right,T90,150);
    6296:	46 e9       	ldi	r20, 0x96	; 150
    6298:	50 e0       	ldi	r21, 0x00	; 0
    629a:	be 01       	movw	r22, r28
    629c:	8c e0       	ldi	r24, 0x0C	; 12
    629e:	90 e0       	ldi	r25, 0x00	; 0
    62a0:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2060
        track(1,Right);
    62a4:	8c e0       	ldi	r24, 0x0C	; 12
    62a6:	90 e0       	ldi	r25, 0x00	; 0
    62a8:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <track(int, int) [clone .constprop.3]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2063
      }
    }
    if (right_card == YELLOW) {
    62ac:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <right_card>
    62b0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <right_card+0x1>
    62b4:	04 97       	sbiw	r24, 0x04	; 4
    62b6:	11 f0       	breq	.+4      	; 0x62bc <main+0x1e8c>
    62b8:	0c 94 fe 25 	jmp	0x4bfc	; 0x4bfc <main+0x7cc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2064
      go(0, 0);
    62bc:	70 e0       	ldi	r23, 0x00	; 0
    62be:	60 e0       	ldi	r22, 0x00	; 0
    62c0:	90 e0       	ldi	r25, 0x00	; 0
    62c2:	80 e0       	ldi	r24, 0x00	; 0
    62c4:	0e 94 07 07 	call	0xe0e	; 0xe0e <go(int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2065
      if (color_R == YELLOW) {
    62c8:	82 e0       	ldi	r24, 0x02	; 2
    62ca:	0e 94 65 0a 	call	0x14ca	; 0x14ca <color(char)>
    62ce:	84 30       	cpi	r24, 0x04	; 4
    62d0:	11 f0       	breq	.+4      	; 0x62d6 <main+0x1ea6>
    62d2:	0c 94 fe 25 	jmp	0x4bfc	; 0x4bfc <main+0x7cc>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2066
        lcd.clear();
    62d6:	0e 94 f6 05 	call	0xbec	; 0xbec <LiquidCrystal::clear() [clone .constprop.38]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2067
        lcd.print("archery");
    62da:	8b e5       	ldi	r24, 0x5B	; 91
    62dc:	98 e0       	ldi	r25, 0x08	; 8
    62de:	0e 94 32 0a 	call	0x1464	; 0x1464 <Print::print(char const*) [clone .constprop.9]>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2068
        move(forward,T90/3,100);
    62e2:	ce 01       	movw	r24, r28
    62e4:	b8 01       	movw	r22, r16
    62e6:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    62ea:	44 e6       	ldi	r20, 0x64	; 100
    62ec:	50 e0       	ldi	r21, 0x00	; 0
    62ee:	8a e0       	ldi	r24, 0x0A	; 10
    62f0:	90 e0       	ldi	r25, 0x00	; 0
    62f2:	0e 94 6c 07 	call	0xed8	; 0xed8 <move(int, int, int)>
C:\Users\Ryan\Documents\GitHub\sport_main_code_2023/sport_menu.h:2069
        move(Right,T90,150);
    62f6:	46 e9       	ldi	r20, 0x96	; 150
    62f8:	50 e0       	ldi	r21, 0x00	; 0
    62fa:	be 01       	movw	r22, r28
    62fc:	8c e0       	ldi	r24, 0x0C	; 12
    62fe:	90 e0       	ldi	r25, 0x00	; 0
    6300:	0c 94 fa 25 	jmp	0x4bf4	; 0x4bf4 <main+0x7c4>

00006304 <vfprintf>:
vfprintf():
    6304:	2f 92       	push	r2
    6306:	3f 92       	push	r3
    6308:	4f 92       	push	r4
    630a:	5f 92       	push	r5
    630c:	6f 92       	push	r6
    630e:	7f 92       	push	r7
    6310:	8f 92       	push	r8
    6312:	9f 92       	push	r9
    6314:	af 92       	push	r10
    6316:	bf 92       	push	r11
    6318:	cf 92       	push	r12
    631a:	df 92       	push	r13
    631c:	ef 92       	push	r14
    631e:	ff 92       	push	r15
    6320:	0f 93       	push	r16
    6322:	1f 93       	push	r17
    6324:	cf 93       	push	r28
    6326:	df 93       	push	r29
    6328:	cd b7       	in	r28, 0x3d	; 61
    632a:	de b7       	in	r29, 0x3e	; 62
    632c:	2b 97       	sbiw	r28, 0x0b	; 11
    632e:	0f b6       	in	r0, 0x3f	; 63
    6330:	f8 94       	cli
    6332:	de bf       	out	0x3e, r29	; 62
    6334:	0f be       	out	0x3f, r0	; 63
    6336:	cd bf       	out	0x3d, r28	; 61
    6338:	7c 01       	movw	r14, r24
    633a:	3b 01       	movw	r6, r22
    633c:	8a 01       	movw	r16, r20
    633e:	fc 01       	movw	r30, r24
    6340:	17 82       	std	Z+7, r1	; 0x07
    6342:	16 82       	std	Z+6, r1	; 0x06
    6344:	83 81       	ldd	r24, Z+3	; 0x03
    6346:	81 ff       	sbrs	r24, 1
    6348:	dd c1       	rjmp	.+954    	; 0x6704 <vfprintf+0x400>
    634a:	ce 01       	movw	r24, r28
    634c:	01 96       	adiw	r24, 0x01	; 1
    634e:	5c 01       	movw	r10, r24
    6350:	f7 01       	movw	r30, r14
    6352:	93 81       	ldd	r25, Z+3	; 0x03
    6354:	f3 01       	movw	r30, r6
    6356:	93 fd       	sbrc	r25, 3
    6358:	85 91       	lpm	r24, Z+
    635a:	93 ff       	sbrs	r25, 3
    635c:	81 91       	ld	r24, Z+
    635e:	3f 01       	movw	r6, r30
    6360:	88 23       	and	r24, r24
    6362:	09 f4       	brne	.+2      	; 0x6366 <vfprintf+0x62>
    6364:	53 c1       	rjmp	.+678    	; 0x660c <vfprintf+0x308>
    6366:	85 32       	cpi	r24, 0x25	; 37
    6368:	39 f4       	brne	.+14     	; 0x6378 <vfprintf+0x74>
    636a:	93 fd       	sbrc	r25, 3
    636c:	85 91       	lpm	r24, Z+
    636e:	93 ff       	sbrs	r25, 3
    6370:	81 91       	ld	r24, Z+
    6372:	3f 01       	movw	r6, r30
    6374:	85 32       	cpi	r24, 0x25	; 37
    6376:	29 f4       	brne	.+10     	; 0x6382 <vfprintf+0x7e>
    6378:	b7 01       	movw	r22, r14
    637a:	90 e0       	ldi	r25, 0x00	; 0
    637c:	0e 94 9b 33 	call	0x6736	; 0x6736 <fputc>
    6380:	e7 cf       	rjmp	.-50     	; 0x6350 <vfprintf+0x4c>
    6382:	91 2c       	mov	r9, r1
    6384:	21 2c       	mov	r2, r1
    6386:	31 2c       	mov	r3, r1
    6388:	ff e1       	ldi	r31, 0x1F	; 31
    638a:	f3 15       	cp	r31, r3
    638c:	38 f0       	brcs	.+14     	; 0x639c <vfprintf+0x98>
    638e:	8b 32       	cpi	r24, 0x2B	; 43
    6390:	11 f1       	breq	.+68     	; 0x63d6 <vfprintf+0xd2>
    6392:	90 f4       	brcc	.+36     	; 0x63b8 <vfprintf+0xb4>
    6394:	80 32       	cpi	r24, 0x20	; 32
    6396:	09 f1       	breq	.+66     	; 0x63da <vfprintf+0xd6>
    6398:	83 32       	cpi	r24, 0x23	; 35
    639a:	29 f1       	breq	.+74     	; 0x63e6 <vfprintf+0xe2>
    639c:	37 fc       	sbrc	r3, 7
    639e:	3c c0       	rjmp	.+120    	; 0x6418 <vfprintf+0x114>
    63a0:	20 ed       	ldi	r18, 0xD0	; 208
    63a2:	28 0f       	add	r18, r24
    63a4:	2a 30       	cpi	r18, 0x0A	; 10
    63a6:	50 f5       	brcc	.+84     	; 0x63fc <vfprintf+0xf8>
    63a8:	36 fe       	sbrs	r3, 6
    63aa:	20 c0       	rjmp	.+64     	; 0x63ec <vfprintf+0xe8>
    63ac:	8a e0       	ldi	r24, 0x0A	; 10
    63ae:	98 9e       	mul	r9, r24
    63b0:	20 0d       	add	r18, r0
    63b2:	11 24       	eor	r1, r1
    63b4:	92 2e       	mov	r9, r18
    63b6:	06 c0       	rjmp	.+12     	; 0x63c4 <vfprintf+0xc0>
    63b8:	8d 32       	cpi	r24, 0x2D	; 45
    63ba:	91 f0       	breq	.+36     	; 0x63e0 <vfprintf+0xdc>
    63bc:	80 33       	cpi	r24, 0x30	; 48
    63be:	71 f7       	brne	.-36     	; 0x639c <vfprintf+0x98>
    63c0:	68 94       	set
    63c2:	30 f8       	bld	r3, 0
    63c4:	f3 01       	movw	r30, r6
    63c6:	93 fd       	sbrc	r25, 3
    63c8:	85 91       	lpm	r24, Z+
    63ca:	93 ff       	sbrs	r25, 3
    63cc:	81 91       	ld	r24, Z+
    63ce:	3f 01       	movw	r6, r30
    63d0:	81 11       	cpse	r24, r1
    63d2:	da cf       	rjmp	.-76     	; 0x6388 <vfprintf+0x84>
    63d4:	21 c0       	rjmp	.+66     	; 0x6418 <vfprintf+0x114>
    63d6:	68 94       	set
    63d8:	31 f8       	bld	r3, 1
    63da:	68 94       	set
    63dc:	32 f8       	bld	r3, 2
    63de:	f2 cf       	rjmp	.-28     	; 0x63c4 <vfprintf+0xc0>
    63e0:	68 94       	set
    63e2:	33 f8       	bld	r3, 3
    63e4:	ef cf       	rjmp	.-34     	; 0x63c4 <vfprintf+0xc0>
    63e6:	68 94       	set
    63e8:	34 f8       	bld	r3, 4
    63ea:	ec cf       	rjmp	.-40     	; 0x63c4 <vfprintf+0xc0>
    63ec:	ea e0       	ldi	r30, 0x0A	; 10
    63ee:	2e 9e       	mul	r2, r30
    63f0:	20 0d       	add	r18, r0
    63f2:	11 24       	eor	r1, r1
    63f4:	22 2e       	mov	r2, r18
    63f6:	68 94       	set
    63f8:	35 f8       	bld	r3, 5
    63fa:	e4 cf       	rjmp	.-56     	; 0x63c4 <vfprintf+0xc0>
    63fc:	8e 32       	cpi	r24, 0x2E	; 46
    63fe:	29 f4       	brne	.+10     	; 0x640a <vfprintf+0x106>
    6400:	36 fc       	sbrc	r3, 6
    6402:	04 c1       	rjmp	.+520    	; 0x660c <vfprintf+0x308>
    6404:	68 94       	set
    6406:	36 f8       	bld	r3, 6
    6408:	dd cf       	rjmp	.-70     	; 0x63c4 <vfprintf+0xc0>
    640a:	8c 36       	cpi	r24, 0x6C	; 108
    640c:	19 f4       	brne	.+6      	; 0x6414 <vfprintf+0x110>
    640e:	68 94       	set
    6410:	37 f8       	bld	r3, 7
    6412:	d8 cf       	rjmp	.-80     	; 0x63c4 <vfprintf+0xc0>
    6414:	88 36       	cpi	r24, 0x68	; 104
    6416:	b1 f2       	breq	.-84     	; 0x63c4 <vfprintf+0xc0>
    6418:	98 2f       	mov	r25, r24
    641a:	9f 7d       	andi	r25, 0xDF	; 223
    641c:	95 54       	subi	r25, 0x45	; 69
    641e:	93 30       	cpi	r25, 0x03	; 3
    6420:	e0 f0       	brcs	.+56     	; 0x645a <vfprintf+0x156>
    6422:	83 36       	cpi	r24, 0x63	; 99
    6424:	a1 f1       	breq	.+104    	; 0x648e <vfprintf+0x18a>
    6426:	83 37       	cpi	r24, 0x73	; 115
    6428:	c1 f1       	breq	.+112    	; 0x649a <vfprintf+0x196>
    642a:	83 35       	cpi	r24, 0x53	; 83
    642c:	09 f0       	breq	.+2      	; 0x6430 <vfprintf+0x12c>
    642e:	63 c0       	rjmp	.+198    	; 0x64f6 <vfprintf+0x1f2>
    6430:	28 01       	movw	r4, r16
    6432:	f2 e0       	ldi	r31, 0x02	; 2
    6434:	4f 0e       	add	r4, r31
    6436:	51 1c       	adc	r5, r1
    6438:	f8 01       	movw	r30, r16
    643a:	c0 80       	ld	r12, Z
    643c:	d1 80       	ldd	r13, Z+1	; 0x01
    643e:	69 2d       	mov	r22, r9
    6440:	70 e0       	ldi	r23, 0x00	; 0
    6442:	36 fc       	sbrc	r3, 6
    6444:	02 c0       	rjmp	.+4      	; 0x644a <vfprintf+0x146>
    6446:	6f ef       	ldi	r22, 0xFF	; 255
    6448:	7f ef       	ldi	r23, 0xFF	; 255
    644a:	c6 01       	movw	r24, r12
    644c:	0e 94 85 33 	call	0x670a	; 0x670a <strnlen_P>
    6450:	4c 01       	movw	r8, r24
    6452:	68 94       	set
    6454:	37 f8       	bld	r3, 7
    6456:	82 01       	movw	r16, r4
    6458:	0a c0       	rjmp	.+20     	; 0x646e <vfprintf+0x16a>
    645a:	0c 5f       	subi	r16, 0xFC	; 252
    645c:	1f 4f       	sbci	r17, 0xFF	; 255
    645e:	ff e3       	ldi	r31, 0x3F	; 63
    6460:	f9 83       	std	Y+1, r31	; 0x01
    6462:	88 24       	eor	r8, r8
    6464:	83 94       	inc	r8
    6466:	91 2c       	mov	r9, r1
    6468:	65 01       	movw	r12, r10
    646a:	e8 94       	clt
    646c:	37 f8       	bld	r3, 7
    646e:	33 fe       	sbrs	r3, 3
    6470:	2d c0       	rjmp	.+90     	; 0x64cc <vfprintf+0x1c8>
    6472:	52 2c       	mov	r5, r2
    6474:	81 14       	cp	r8, r1
    6476:	91 04       	cpc	r9, r1
    6478:	71 f5       	brne	.+92     	; 0x64d6 <vfprintf+0x1d2>
    647a:	55 20       	and	r5, r5
    647c:	09 f4       	brne	.+2      	; 0x6480 <vfprintf+0x17c>
    647e:	68 cf       	rjmp	.-304    	; 0x6350 <vfprintf+0x4c>
    6480:	b7 01       	movw	r22, r14
    6482:	80 e2       	ldi	r24, 0x20	; 32
    6484:	90 e0       	ldi	r25, 0x00	; 0
    6486:	0e 94 9b 33 	call	0x6736	; 0x6736 <fputc>
    648a:	5a 94       	dec	r5
    648c:	f6 cf       	rjmp	.-20     	; 0x647a <vfprintf+0x176>
    648e:	f8 01       	movw	r30, r16
    6490:	80 81       	ld	r24, Z
    6492:	89 83       	std	Y+1, r24	; 0x01
    6494:	0e 5f       	subi	r16, 0xFE	; 254
    6496:	1f 4f       	sbci	r17, 0xFF	; 255
    6498:	e4 cf       	rjmp	.-56     	; 0x6462 <vfprintf+0x15e>
    649a:	28 01       	movw	r4, r16
    649c:	f2 e0       	ldi	r31, 0x02	; 2
    649e:	4f 0e       	add	r4, r31
    64a0:	51 1c       	adc	r5, r1
    64a2:	f8 01       	movw	r30, r16
    64a4:	c0 80       	ld	r12, Z
    64a6:	d1 80       	ldd	r13, Z+1	; 0x01
    64a8:	69 2d       	mov	r22, r9
    64aa:	70 e0       	ldi	r23, 0x00	; 0
    64ac:	36 fc       	sbrc	r3, 6
    64ae:	02 c0       	rjmp	.+4      	; 0x64b4 <vfprintf+0x1b0>
    64b0:	6f ef       	ldi	r22, 0xFF	; 255
    64b2:	7f ef       	ldi	r23, 0xFF	; 255
    64b4:	c6 01       	movw	r24, r12
    64b6:	0e 94 90 33 	call	0x6720	; 0x6720 <strnlen>
    64ba:	4c 01       	movw	r8, r24
    64bc:	82 01       	movw	r16, r4
    64be:	d5 cf       	rjmp	.-86     	; 0x646a <vfprintf+0x166>
    64c0:	b7 01       	movw	r22, r14
    64c2:	80 e2       	ldi	r24, 0x20	; 32
    64c4:	90 e0       	ldi	r25, 0x00	; 0
    64c6:	0e 94 9b 33 	call	0x6736	; 0x6736 <fputc>
    64ca:	2a 94       	dec	r2
    64cc:	28 14       	cp	r2, r8
    64ce:	19 04       	cpc	r1, r9
    64d0:	09 f0       	breq	.+2      	; 0x64d4 <vfprintf+0x1d0>
    64d2:	b0 f7       	brcc	.-20     	; 0x64c0 <vfprintf+0x1bc>
    64d4:	ce cf       	rjmp	.-100    	; 0x6472 <vfprintf+0x16e>
    64d6:	f6 01       	movw	r30, r12
    64d8:	37 fc       	sbrc	r3, 7
    64da:	85 91       	lpm	r24, Z+
    64dc:	37 fe       	sbrs	r3, 7
    64de:	81 91       	ld	r24, Z+
    64e0:	6f 01       	movw	r12, r30
    64e2:	b7 01       	movw	r22, r14
    64e4:	90 e0       	ldi	r25, 0x00	; 0
    64e6:	0e 94 9b 33 	call	0x6736	; 0x6736 <fputc>
    64ea:	51 10       	cpse	r5, r1
    64ec:	5a 94       	dec	r5
    64ee:	f1 e0       	ldi	r31, 0x01	; 1
    64f0:	8f 1a       	sub	r8, r31
    64f2:	91 08       	sbc	r9, r1
    64f4:	bf cf       	rjmp	.-130    	; 0x6474 <vfprintf+0x170>
    64f6:	84 36       	cpi	r24, 0x64	; 100
    64f8:	19 f0       	breq	.+6      	; 0x6500 <vfprintf+0x1fc>
    64fa:	89 36       	cpi	r24, 0x69	; 105
    64fc:	09 f0       	breq	.+2      	; 0x6500 <vfprintf+0x1fc>
    64fe:	77 c0       	rjmp	.+238    	; 0x65ee <vfprintf+0x2ea>
    6500:	f8 01       	movw	r30, r16
    6502:	37 fe       	sbrs	r3, 7
    6504:	6b c0       	rjmp	.+214    	; 0x65dc <vfprintf+0x2d8>
    6506:	60 81       	ld	r22, Z
    6508:	71 81       	ldd	r23, Z+1	; 0x01
    650a:	82 81       	ldd	r24, Z+2	; 0x02
    650c:	93 81       	ldd	r25, Z+3	; 0x03
    650e:	0c 5f       	subi	r16, 0xFC	; 252
    6510:	1f 4f       	sbci	r17, 0xFF	; 255
    6512:	f3 2d       	mov	r31, r3
    6514:	ff 76       	andi	r31, 0x6F	; 111
    6516:	3f 2e       	mov	r3, r31
    6518:	97 ff       	sbrs	r25, 7
    651a:	09 c0       	rjmp	.+18     	; 0x652e <vfprintf+0x22a>
    651c:	90 95       	com	r25
    651e:	80 95       	com	r24
    6520:	70 95       	com	r23
    6522:	61 95       	neg	r22
    6524:	7f 4f       	sbci	r23, 0xFF	; 255
    6526:	8f 4f       	sbci	r24, 0xFF	; 255
    6528:	9f 4f       	sbci	r25, 0xFF	; 255
    652a:	68 94       	set
    652c:	37 f8       	bld	r3, 7
    652e:	2a e0       	ldi	r18, 0x0A	; 10
    6530:	30 e0       	ldi	r19, 0x00	; 0
    6532:	a5 01       	movw	r20, r10
    6534:	0e 94 cb 33 	call	0x6796	; 0x6796 <__ultoa_invert>
    6538:	c8 2e       	mov	r12, r24
    653a:	ca 18       	sub	r12, r10
    653c:	8c 2c       	mov	r8, r12
    653e:	43 2c       	mov	r4, r3
    6540:	36 fe       	sbrs	r3, 6
    6542:	0c c0       	rjmp	.+24     	; 0x655c <vfprintf+0x258>
    6544:	e8 94       	clt
    6546:	40 f8       	bld	r4, 0
    6548:	c9 14       	cp	r12, r9
    654a:	40 f4       	brcc	.+16     	; 0x655c <vfprintf+0x258>
    654c:	34 fe       	sbrs	r3, 4
    654e:	05 c0       	rjmp	.+10     	; 0x655a <vfprintf+0x256>
    6550:	32 fc       	sbrc	r3, 2
    6552:	03 c0       	rjmp	.+6      	; 0x655a <vfprintf+0x256>
    6554:	f3 2d       	mov	r31, r3
    6556:	fe 7e       	andi	r31, 0xEE	; 238
    6558:	4f 2e       	mov	r4, r31
    655a:	89 2c       	mov	r8, r9
    655c:	44 fe       	sbrs	r4, 4
    655e:	aa c0       	rjmp	.+340    	; 0x66b4 <vfprintf+0x3b0>
    6560:	fe 01       	movw	r30, r28
    6562:	ec 0d       	add	r30, r12
    6564:	f1 1d       	adc	r31, r1
    6566:	80 81       	ld	r24, Z
    6568:	80 33       	cpi	r24, 0x30	; 48
    656a:	09 f0       	breq	.+2      	; 0x656e <vfprintf+0x26a>
    656c:	9c c0       	rjmp	.+312    	; 0x66a6 <vfprintf+0x3a2>
    656e:	24 2d       	mov	r18, r4
    6570:	29 7e       	andi	r18, 0xE9	; 233
    6572:	42 2e       	mov	r4, r18
    6574:	84 2d       	mov	r24, r4
    6576:	88 70       	andi	r24, 0x08	; 8
    6578:	58 2e       	mov	r5, r24
    657a:	43 fc       	sbrc	r4, 3
    657c:	aa c0       	rjmp	.+340    	; 0x66d2 <vfprintf+0x3ce>
    657e:	40 fe       	sbrs	r4, 0
    6580:	a4 c0       	rjmp	.+328    	; 0x66ca <vfprintf+0x3c6>
    6582:	9c 2c       	mov	r9, r12
    6584:	82 14       	cp	r8, r2
    6586:	18 f4       	brcc	.+6      	; 0x658e <vfprintf+0x28a>
    6588:	2c 0c       	add	r2, r12
    658a:	92 2c       	mov	r9, r2
    658c:	98 18       	sub	r9, r8
    658e:	44 fe       	sbrs	r4, 4
    6590:	a6 c0       	rjmp	.+332    	; 0x66de <vfprintf+0x3da>
    6592:	b7 01       	movw	r22, r14
    6594:	80 e3       	ldi	r24, 0x30	; 48
    6596:	90 e0       	ldi	r25, 0x00	; 0
    6598:	0e 94 9b 33 	call	0x6736	; 0x6736 <fputc>
    659c:	42 fe       	sbrs	r4, 2
    659e:	09 c0       	rjmp	.+18     	; 0x65b2 <vfprintf+0x2ae>
    65a0:	88 e7       	ldi	r24, 0x78	; 120
    65a2:	90 e0       	ldi	r25, 0x00	; 0
    65a4:	41 fe       	sbrs	r4, 1
    65a6:	02 c0       	rjmp	.+4      	; 0x65ac <vfprintf+0x2a8>
    65a8:	88 e5       	ldi	r24, 0x58	; 88
    65aa:	90 e0       	ldi	r25, 0x00	; 0
    65ac:	b7 01       	movw	r22, r14
    65ae:	0e 94 9b 33 	call	0x6736	; 0x6736 <fputc>
    65b2:	c9 14       	cp	r12, r9
    65b4:	08 f4       	brcc	.+2      	; 0x65b8 <vfprintf+0x2b4>
    65b6:	9f c0       	rjmp	.+318    	; 0x66f6 <vfprintf+0x3f2>
    65b8:	ca 94       	dec	r12
    65ba:	d1 2c       	mov	r13, r1
    65bc:	9f ef       	ldi	r25, 0xFF	; 255
    65be:	c9 1a       	sub	r12, r25
    65c0:	d9 0a       	sbc	r13, r25
    65c2:	ca 0c       	add	r12, r10
    65c4:	db 1c       	adc	r13, r11
    65c6:	f6 01       	movw	r30, r12
    65c8:	82 91       	ld	r24, -Z
    65ca:	6f 01       	movw	r12, r30
    65cc:	b7 01       	movw	r22, r14
    65ce:	90 e0       	ldi	r25, 0x00	; 0
    65d0:	0e 94 9b 33 	call	0x6736	; 0x6736 <fputc>
    65d4:	ac 14       	cp	r10, r12
    65d6:	bd 04       	cpc	r11, r13
    65d8:	b1 f7       	brne	.-20     	; 0x65c6 <vfprintf+0x2c2>
    65da:	4f cf       	rjmp	.-354    	; 0x647a <vfprintf+0x176>
    65dc:	60 81       	ld	r22, Z
    65de:	71 81       	ldd	r23, Z+1	; 0x01
    65e0:	07 2e       	mov	r0, r23
    65e2:	00 0c       	add	r0, r0
    65e4:	88 0b       	sbc	r24, r24
    65e6:	99 0b       	sbc	r25, r25
    65e8:	0e 5f       	subi	r16, 0xFE	; 254
    65ea:	1f 4f       	sbci	r17, 0xFF	; 255
    65ec:	92 cf       	rjmp	.-220    	; 0x6512 <vfprintf+0x20e>
    65ee:	d3 2c       	mov	r13, r3
    65f0:	e8 94       	clt
    65f2:	d4 f8       	bld	r13, 4
    65f4:	2a e0       	ldi	r18, 0x0A	; 10
    65f6:	30 e0       	ldi	r19, 0x00	; 0
    65f8:	85 37       	cpi	r24, 0x75	; 117
    65fa:	e1 f1       	breq	.+120    	; 0x6674 <vfprintf+0x370>
    65fc:	23 2d       	mov	r18, r3
    65fe:	29 7f       	andi	r18, 0xF9	; 249
    6600:	d2 2e       	mov	r13, r18
    6602:	8f 36       	cpi	r24, 0x6F	; 111
    6604:	a9 f1       	breq	.+106    	; 0x6670 <vfprintf+0x36c>
    6606:	f0 f4       	brcc	.+60     	; 0x6644 <vfprintf+0x340>
    6608:	88 35       	cpi	r24, 0x58	; 88
    660a:	51 f1       	breq	.+84     	; 0x6660 <vfprintf+0x35c>
    660c:	f7 01       	movw	r30, r14
    660e:	86 81       	ldd	r24, Z+6	; 0x06
    6610:	97 81       	ldd	r25, Z+7	; 0x07
    6612:	2b 96       	adiw	r28, 0x0b	; 11
    6614:	0f b6       	in	r0, 0x3f	; 63
    6616:	f8 94       	cli
    6618:	de bf       	out	0x3e, r29	; 62
    661a:	0f be       	out	0x3f, r0	; 63
    661c:	cd bf       	out	0x3d, r28	; 61
    661e:	df 91       	pop	r29
    6620:	cf 91       	pop	r28
    6622:	1f 91       	pop	r17
    6624:	0f 91       	pop	r16
    6626:	ff 90       	pop	r15
    6628:	ef 90       	pop	r14
    662a:	df 90       	pop	r13
    662c:	cf 90       	pop	r12
    662e:	bf 90       	pop	r11
    6630:	af 90       	pop	r10
    6632:	9f 90       	pop	r9
    6634:	8f 90       	pop	r8
    6636:	7f 90       	pop	r7
    6638:	6f 90       	pop	r6
    663a:	5f 90       	pop	r5
    663c:	4f 90       	pop	r4
    663e:	3f 90       	pop	r3
    6640:	2f 90       	pop	r2
    6642:	08 95       	ret
    6644:	80 37       	cpi	r24, 0x70	; 112
    6646:	49 f0       	breq	.+18     	; 0x665a <vfprintf+0x356>
    6648:	88 37       	cpi	r24, 0x78	; 120
    664a:	01 f7       	brne	.-64     	; 0x660c <vfprintf+0x308>
    664c:	d4 fe       	sbrs	r13, 4
    664e:	02 c0       	rjmp	.+4      	; 0x6654 <vfprintf+0x350>
    6650:	68 94       	set
    6652:	d2 f8       	bld	r13, 2
    6654:	20 e1       	ldi	r18, 0x10	; 16
    6656:	30 e0       	ldi	r19, 0x00	; 0
    6658:	0d c0       	rjmp	.+26     	; 0x6674 <vfprintf+0x370>
    665a:	68 94       	set
    665c:	d4 f8       	bld	r13, 4
    665e:	f6 cf       	rjmp	.-20     	; 0x664c <vfprintf+0x348>
    6660:	34 fe       	sbrs	r3, 4
    6662:	03 c0       	rjmp	.+6      	; 0x666a <vfprintf+0x366>
    6664:	82 2f       	mov	r24, r18
    6666:	86 60       	ori	r24, 0x06	; 6
    6668:	d8 2e       	mov	r13, r24
    666a:	20 e1       	ldi	r18, 0x10	; 16
    666c:	32 e0       	ldi	r19, 0x02	; 2
    666e:	02 c0       	rjmp	.+4      	; 0x6674 <vfprintf+0x370>
    6670:	28 e0       	ldi	r18, 0x08	; 8
    6672:	30 e0       	ldi	r19, 0x00	; 0
    6674:	f8 01       	movw	r30, r16
    6676:	d7 fe       	sbrs	r13, 7
    6678:	0f c0       	rjmp	.+30     	; 0x6698 <vfprintf+0x394>
    667a:	60 81       	ld	r22, Z
    667c:	71 81       	ldd	r23, Z+1	; 0x01
    667e:	82 81       	ldd	r24, Z+2	; 0x02
    6680:	93 81       	ldd	r25, Z+3	; 0x03
    6682:	0c 5f       	subi	r16, 0xFC	; 252
    6684:	1f 4f       	sbci	r17, 0xFF	; 255
    6686:	a5 01       	movw	r20, r10
    6688:	0e 94 cb 33 	call	0x6796	; 0x6796 <__ultoa_invert>
    668c:	c8 2e       	mov	r12, r24
    668e:	ca 18       	sub	r12, r10
    6690:	3d 2c       	mov	r3, r13
    6692:	e8 94       	clt
    6694:	37 f8       	bld	r3, 7
    6696:	52 cf       	rjmp	.-348    	; 0x653c <vfprintf+0x238>
    6698:	60 81       	ld	r22, Z
    669a:	71 81       	ldd	r23, Z+1	; 0x01
    669c:	90 e0       	ldi	r25, 0x00	; 0
    669e:	80 e0       	ldi	r24, 0x00	; 0
    66a0:	0e 5f       	subi	r16, 0xFE	; 254
    66a2:	1f 4f       	sbci	r17, 0xFF	; 255
    66a4:	f0 cf       	rjmp	.-32     	; 0x6686 <vfprintf+0x382>
    66a6:	42 fc       	sbrc	r4, 2
    66a8:	02 c0       	rjmp	.+4      	; 0x66ae <vfprintf+0x3aa>
    66aa:	83 94       	inc	r8
    66ac:	63 cf       	rjmp	.-314    	; 0x6574 <vfprintf+0x270>
    66ae:	83 94       	inc	r8
    66b0:	83 94       	inc	r8
    66b2:	60 cf       	rjmp	.-320    	; 0x6574 <vfprintf+0x270>
    66b4:	84 2d       	mov	r24, r4
    66b6:	86 78       	andi	r24, 0x86	; 134
    66b8:	09 f4       	brne	.+2      	; 0x66bc <vfprintf+0x3b8>
    66ba:	5c cf       	rjmp	.-328    	; 0x6574 <vfprintf+0x270>
    66bc:	f6 cf       	rjmp	.-20     	; 0x66aa <vfprintf+0x3a6>
    66be:	b7 01       	movw	r22, r14
    66c0:	80 e2       	ldi	r24, 0x20	; 32
    66c2:	90 e0       	ldi	r25, 0x00	; 0
    66c4:	0e 94 9b 33 	call	0x6736	; 0x6736 <fputc>
    66c8:	83 94       	inc	r8
    66ca:	82 14       	cp	r8, r2
    66cc:	c0 f3       	brcs	.-16     	; 0x66be <vfprintf+0x3ba>
    66ce:	51 2c       	mov	r5, r1
    66d0:	5e cf       	rjmp	.-324    	; 0x658e <vfprintf+0x28a>
    66d2:	52 2c       	mov	r5, r2
    66d4:	58 18       	sub	r5, r8
    66d6:	82 14       	cp	r8, r2
    66d8:	08 f4       	brcc	.+2      	; 0x66dc <vfprintf+0x3d8>
    66da:	59 cf       	rjmp	.-334    	; 0x658e <vfprintf+0x28a>
    66dc:	f8 cf       	rjmp	.-16     	; 0x66ce <vfprintf+0x3ca>
    66de:	84 2d       	mov	r24, r4
    66e0:	86 78       	andi	r24, 0x86	; 134
    66e2:	09 f4       	brne	.+2      	; 0x66e6 <vfprintf+0x3e2>
    66e4:	66 cf       	rjmp	.-308    	; 0x65b2 <vfprintf+0x2ae>
    66e6:	8b e2       	ldi	r24, 0x2B	; 43
    66e8:	41 fe       	sbrs	r4, 1
    66ea:	80 e2       	ldi	r24, 0x20	; 32
    66ec:	47 fc       	sbrc	r4, 7
    66ee:	8d e2       	ldi	r24, 0x2D	; 45
    66f0:	b7 01       	movw	r22, r14
    66f2:	90 e0       	ldi	r25, 0x00	; 0
    66f4:	5c cf       	rjmp	.-328    	; 0x65ae <vfprintf+0x2aa>
    66f6:	b7 01       	movw	r22, r14
    66f8:	80 e3       	ldi	r24, 0x30	; 48
    66fa:	90 e0       	ldi	r25, 0x00	; 0
    66fc:	0e 94 9b 33 	call	0x6736	; 0x6736 <fputc>
    6700:	9a 94       	dec	r9
    6702:	57 cf       	rjmp	.-338    	; 0x65b2 <vfprintf+0x2ae>
    6704:	8f ef       	ldi	r24, 0xFF	; 255
    6706:	9f ef       	ldi	r25, 0xFF	; 255
    6708:	84 cf       	rjmp	.-248    	; 0x6612 <vfprintf+0x30e>

0000670a <strnlen_P>:
strnlen_P():
    670a:	fc 01       	movw	r30, r24
    670c:	05 90       	lpm	r0, Z+
    670e:	61 50       	subi	r22, 0x01	; 1
    6710:	70 40       	sbci	r23, 0x00	; 0
    6712:	01 10       	cpse	r0, r1
    6714:	d8 f7       	brcc	.-10     	; 0x670c <strnlen_P+0x2>
    6716:	80 95       	com	r24
    6718:	90 95       	com	r25
    671a:	8e 0f       	add	r24, r30
    671c:	9f 1f       	adc	r25, r31
    671e:	08 95       	ret

00006720 <strnlen>:
strnlen():
    6720:	fc 01       	movw	r30, r24
    6722:	61 50       	subi	r22, 0x01	; 1
    6724:	70 40       	sbci	r23, 0x00	; 0
    6726:	01 90       	ld	r0, Z+
    6728:	01 10       	cpse	r0, r1
    672a:	d8 f7       	brcc	.-10     	; 0x6722 <strnlen+0x2>
    672c:	80 95       	com	r24
    672e:	90 95       	com	r25
    6730:	8e 0f       	add	r24, r30
    6732:	9f 1f       	adc	r25, r31
    6734:	08 95       	ret

00006736 <fputc>:
fputc():
    6736:	0f 93       	push	r16
    6738:	1f 93       	push	r17
    673a:	cf 93       	push	r28
    673c:	df 93       	push	r29
    673e:	18 2f       	mov	r17, r24
    6740:	09 2f       	mov	r16, r25
    6742:	eb 01       	movw	r28, r22
    6744:	8b 81       	ldd	r24, Y+3	; 0x03
    6746:	81 fd       	sbrc	r24, 1
    6748:	09 c0       	rjmp	.+18     	; 0x675c <fputc+0x26>
    674a:	1f ef       	ldi	r17, 0xFF	; 255
    674c:	0f ef       	ldi	r16, 0xFF	; 255
    674e:	81 2f       	mov	r24, r17
    6750:	90 2f       	mov	r25, r16
    6752:	df 91       	pop	r29
    6754:	cf 91       	pop	r28
    6756:	1f 91       	pop	r17
    6758:	0f 91       	pop	r16
    675a:	08 95       	ret
    675c:	82 ff       	sbrs	r24, 2
    675e:	14 c0       	rjmp	.+40     	; 0x6788 <fputc+0x52>
    6760:	2e 81       	ldd	r18, Y+6	; 0x06
    6762:	3f 81       	ldd	r19, Y+7	; 0x07
    6764:	8c 81       	ldd	r24, Y+4	; 0x04
    6766:	9d 81       	ldd	r25, Y+5	; 0x05
    6768:	28 17       	cp	r18, r24
    676a:	39 07       	cpc	r19, r25
    676c:	3c f4       	brge	.+14     	; 0x677c <fputc+0x46>
    676e:	e8 81       	ld	r30, Y
    6770:	f9 81       	ldd	r31, Y+1	; 0x01
    6772:	cf 01       	movw	r24, r30
    6774:	01 96       	adiw	r24, 0x01	; 1
    6776:	99 83       	std	Y+1, r25	; 0x01
    6778:	88 83       	st	Y, r24
    677a:	10 83       	st	Z, r17
    677c:	8e 81       	ldd	r24, Y+6	; 0x06
    677e:	9f 81       	ldd	r25, Y+7	; 0x07
    6780:	01 96       	adiw	r24, 0x01	; 1
    6782:	9f 83       	std	Y+7, r25	; 0x07
    6784:	8e 83       	std	Y+6, r24	; 0x06
    6786:	e3 cf       	rjmp	.-58     	; 0x674e <fputc+0x18>
    6788:	e8 85       	ldd	r30, Y+8	; 0x08
    678a:	f9 85       	ldd	r31, Y+9	; 0x09
    678c:	81 2f       	mov	r24, r17
    678e:	09 95       	icall
    6790:	89 2b       	or	r24, r25
    6792:	a1 f3       	breq	.-24     	; 0x677c <fputc+0x46>
    6794:	da cf       	rjmp	.-76     	; 0x674a <fputc+0x14>

00006796 <__ultoa_invert>:
__ultoa_invert():
    6796:	fa 01       	movw	r30, r20
    6798:	aa 27       	eor	r26, r26
    679a:	28 30       	cpi	r18, 0x08	; 8
    679c:	51 f1       	breq	.+84     	; 0x67f2 <__ultoa_invert+0x5c>
    679e:	20 31       	cpi	r18, 0x10	; 16
    67a0:	81 f1       	breq	.+96     	; 0x6802 <__ultoa_invert+0x6c>
    67a2:	e8 94       	clt
    67a4:	6f 93       	push	r22
    67a6:	6e 7f       	andi	r22, 0xFE	; 254
    67a8:	6e 5f       	subi	r22, 0xFE	; 254
    67aa:	7f 4f       	sbci	r23, 0xFF	; 255
    67ac:	8f 4f       	sbci	r24, 0xFF	; 255
    67ae:	9f 4f       	sbci	r25, 0xFF	; 255
    67b0:	af 4f       	sbci	r26, 0xFF	; 255
    67b2:	b1 e0       	ldi	r27, 0x01	; 1
    67b4:	3e d0       	rcall	.+124    	; 0x6832 <__ultoa_invert+0x9c>
    67b6:	b4 e0       	ldi	r27, 0x04	; 4
    67b8:	3c d0       	rcall	.+120    	; 0x6832 <__ultoa_invert+0x9c>
    67ba:	67 0f       	add	r22, r23
    67bc:	78 1f       	adc	r23, r24
    67be:	89 1f       	adc	r24, r25
    67c0:	9a 1f       	adc	r25, r26
    67c2:	a1 1d       	adc	r26, r1
    67c4:	68 0f       	add	r22, r24
    67c6:	79 1f       	adc	r23, r25
    67c8:	8a 1f       	adc	r24, r26
    67ca:	91 1d       	adc	r25, r1
    67cc:	a1 1d       	adc	r26, r1
    67ce:	6a 0f       	add	r22, r26
    67d0:	71 1d       	adc	r23, r1
    67d2:	81 1d       	adc	r24, r1
    67d4:	91 1d       	adc	r25, r1
    67d6:	a1 1d       	adc	r26, r1
    67d8:	20 d0       	rcall	.+64     	; 0x681a <__ultoa_invert+0x84>
    67da:	09 f4       	brne	.+2      	; 0x67de <__ultoa_invert+0x48>
    67dc:	68 94       	set
    67de:	3f 91       	pop	r19
    67e0:	2a e0       	ldi	r18, 0x0A	; 10
    67e2:	26 9f       	mul	r18, r22
    67e4:	11 24       	eor	r1, r1
    67e6:	30 19       	sub	r19, r0
    67e8:	30 5d       	subi	r19, 0xD0	; 208
    67ea:	31 93       	st	Z+, r19
    67ec:	de f6       	brtc	.-74     	; 0x67a4 <__ultoa_invert+0xe>
    67ee:	cf 01       	movw	r24, r30
    67f0:	08 95       	ret
    67f2:	46 2f       	mov	r20, r22
    67f4:	47 70       	andi	r20, 0x07	; 7
    67f6:	40 5d       	subi	r20, 0xD0	; 208
    67f8:	41 93       	st	Z+, r20
    67fa:	b3 e0       	ldi	r27, 0x03	; 3
    67fc:	0f d0       	rcall	.+30     	; 0x681c <__ultoa_invert+0x86>
    67fe:	c9 f7       	brne	.-14     	; 0x67f2 <__ultoa_invert+0x5c>
    6800:	f6 cf       	rjmp	.-20     	; 0x67ee <__ultoa_invert+0x58>
    6802:	46 2f       	mov	r20, r22
    6804:	4f 70       	andi	r20, 0x0F	; 15
    6806:	40 5d       	subi	r20, 0xD0	; 208
    6808:	4a 33       	cpi	r20, 0x3A	; 58
    680a:	18 f0       	brcs	.+6      	; 0x6812 <__ultoa_invert+0x7c>
    680c:	49 5d       	subi	r20, 0xD9	; 217
    680e:	31 fd       	sbrc	r19, 1
    6810:	40 52       	subi	r20, 0x20	; 32
    6812:	41 93       	st	Z+, r20
    6814:	02 d0       	rcall	.+4      	; 0x681a <__ultoa_invert+0x84>
    6816:	a9 f7       	brne	.-22     	; 0x6802 <__ultoa_invert+0x6c>
    6818:	ea cf       	rjmp	.-44     	; 0x67ee <__ultoa_invert+0x58>
    681a:	b4 e0       	ldi	r27, 0x04	; 4
    681c:	a6 95       	lsr	r26
    681e:	97 95       	ror	r25
    6820:	87 95       	ror	r24
    6822:	77 95       	ror	r23
    6824:	67 95       	ror	r22
    6826:	ba 95       	dec	r27
    6828:	c9 f7       	brne	.-14     	; 0x681c <__ultoa_invert+0x86>
    682a:	00 97       	sbiw	r24, 0x00	; 0
    682c:	61 05       	cpc	r22, r1
    682e:	71 05       	cpc	r23, r1
    6830:	08 95       	ret
    6832:	9b 01       	movw	r18, r22
    6834:	ac 01       	movw	r20, r24
    6836:	0a 2e       	mov	r0, r26
    6838:	06 94       	lsr	r0
    683a:	57 95       	ror	r21
    683c:	47 95       	ror	r20
    683e:	37 95       	ror	r19
    6840:	27 95       	ror	r18
    6842:	ba 95       	dec	r27
    6844:	c9 f7       	brne	.-14     	; 0x6838 <__ultoa_invert+0xa2>
    6846:	62 0f       	add	r22, r18
    6848:	73 1f       	adc	r23, r19
    684a:	84 1f       	adc	r24, r20
    684c:	95 1f       	adc	r25, r21
    684e:	a0 1d       	adc	r26, r0
    6850:	08 95       	ret

00006852 <eeprom_read_byte>:
eeprom_read_byte():
    6852:	e1 99       	sbic	0x1c, 1	; 28
    6854:	fe cf       	rjmp	.-4      	; 0x6852 <eeprom_read_byte>
    6856:	9f bb       	out	0x1f, r25	; 31
    6858:	8e bb       	out	0x1e, r24	; 30
    685a:	e0 9a       	sbi	0x1c, 0	; 28
    685c:	99 27       	eor	r25, r25
    685e:	8d b3       	in	r24, 0x1d	; 29
    6860:	08 95       	ret

00006862 <eeprom_write_byte>:
eeprom_write_byte():
    6862:	26 2f       	mov	r18, r22

00006864 <eeprom_write_r18>:
    6864:	e1 99       	sbic	0x1c, 1	; 28
    6866:	fe cf       	rjmp	.-4      	; 0x6864 <eeprom_write_r18>
    6868:	9f bb       	out	0x1f, r25	; 31
    686a:	8e bb       	out	0x1e, r24	; 30
    686c:	2d bb       	out	0x1d, r18	; 29
    686e:	0f b6       	in	r0, 0x3f	; 63
    6870:	f8 94       	cli
    6872:	e2 9a       	sbi	0x1c, 2	; 28
    6874:	e1 9a       	sbi	0x1c, 1	; 28
    6876:	0f be       	out	0x3f, r0	; 63
    6878:	01 96       	adiw	r24, 0x01	; 1
    687a:	08 95       	ret

0000687c <__cmpsf2>:
__cmpsf2():
    687c:	0e 94 28 35 	call	0x6a50	; 0x6a50 <__fp_cmp>
    6880:	08 f4       	brcc	.+2      	; 0x6884 <__cmpsf2+0x8>
    6882:	81 e0       	ldi	r24, 0x01	; 1
    6884:	08 95       	ret

00006886 <__divsf3>:
__divsf3():
    6886:	0e 94 57 34 	call	0x68ae	; 0x68ae <__divsf3x>
    688a:	0c 94 63 35 	jmp	0x6ac6	; 0x6ac6 <__fp_round>
    688e:	0e 94 5c 35 	call	0x6ab8	; 0x6ab8 <__fp_pscB>
    6892:	58 f0       	brcs	.+22     	; 0x68aa <__divsf3+0x24>
    6894:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <__fp_pscA>
    6898:	40 f0       	brcs	.+16     	; 0x68aa <__divsf3+0x24>
    689a:	29 f4       	brne	.+10     	; 0x68a6 <__divsf3+0x20>
    689c:	5f 3f       	cpi	r21, 0xFF	; 255
    689e:	29 f0       	breq	.+10     	; 0x68aa <__divsf3+0x24>
    68a0:	0c 94 4c 35 	jmp	0x6a98	; 0x6a98 <__fp_inf>
    68a4:	51 11       	cpse	r21, r1
    68a6:	0c 94 97 35 	jmp	0x6b2e	; 0x6b2e <__fp_szero>
    68aa:	0c 94 52 35 	jmp	0x6aa4	; 0x6aa4 <__fp_nan>

000068ae <__divsf3x>:
__divsf3x():
    68ae:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <__fp_split3>
    68b2:	68 f3       	brcs	.-38     	; 0x688e <__divsf3+0x8>

000068b4 <__divsf3_pse>:
    68b4:	99 23       	and	r25, r25
    68b6:	b1 f3       	breq	.-20     	; 0x68a4 <__divsf3+0x1e>
    68b8:	55 23       	and	r21, r21
    68ba:	91 f3       	breq	.-28     	; 0x68a0 <__divsf3+0x1a>
    68bc:	95 1b       	sub	r25, r21
    68be:	55 0b       	sbc	r21, r21
    68c0:	bb 27       	eor	r27, r27
    68c2:	aa 27       	eor	r26, r26
    68c4:	62 17       	cp	r22, r18
    68c6:	73 07       	cpc	r23, r19
    68c8:	84 07       	cpc	r24, r20
    68ca:	38 f0       	brcs	.+14     	; 0x68da <__divsf3_pse+0x26>
    68cc:	9f 5f       	subi	r25, 0xFF	; 255
    68ce:	5f 4f       	sbci	r21, 0xFF	; 255
    68d0:	22 0f       	add	r18, r18
    68d2:	33 1f       	adc	r19, r19
    68d4:	44 1f       	adc	r20, r20
    68d6:	aa 1f       	adc	r26, r26
    68d8:	a9 f3       	breq	.-22     	; 0x68c4 <__divsf3_pse+0x10>
    68da:	35 d0       	rcall	.+106    	; 0x6946 <__divsf3_pse+0x92>
    68dc:	0e 2e       	mov	r0, r30
    68de:	3a f0       	brmi	.+14     	; 0x68ee <__divsf3_pse+0x3a>
    68e0:	e0 e8       	ldi	r30, 0x80	; 128
    68e2:	32 d0       	rcall	.+100    	; 0x6948 <__divsf3_pse+0x94>
    68e4:	91 50       	subi	r25, 0x01	; 1
    68e6:	50 40       	sbci	r21, 0x00	; 0
    68e8:	e6 95       	lsr	r30
    68ea:	00 1c       	adc	r0, r0
    68ec:	ca f7       	brpl	.-14     	; 0x68e0 <__divsf3_pse+0x2c>
    68ee:	2b d0       	rcall	.+86     	; 0x6946 <__divsf3_pse+0x92>
    68f0:	fe 2f       	mov	r31, r30
    68f2:	29 d0       	rcall	.+82     	; 0x6946 <__divsf3_pse+0x92>
    68f4:	66 0f       	add	r22, r22
    68f6:	77 1f       	adc	r23, r23
    68f8:	88 1f       	adc	r24, r24
    68fa:	bb 1f       	adc	r27, r27
    68fc:	26 17       	cp	r18, r22
    68fe:	37 07       	cpc	r19, r23
    6900:	48 07       	cpc	r20, r24
    6902:	ab 07       	cpc	r26, r27
    6904:	b0 e8       	ldi	r27, 0x80	; 128
    6906:	09 f0       	breq	.+2      	; 0x690a <__divsf3_pse+0x56>
    6908:	bb 0b       	sbc	r27, r27
    690a:	80 2d       	mov	r24, r0
    690c:	bf 01       	movw	r22, r30
    690e:	ff 27       	eor	r31, r31
    6910:	93 58       	subi	r25, 0x83	; 131
    6912:	5f 4f       	sbci	r21, 0xFF	; 255
    6914:	3a f0       	brmi	.+14     	; 0x6924 <__divsf3_pse+0x70>
    6916:	9e 3f       	cpi	r25, 0xFE	; 254
    6918:	51 05       	cpc	r21, r1
    691a:	78 f0       	brcs	.+30     	; 0x693a <__divsf3_pse+0x86>
    691c:	0c 94 4c 35 	jmp	0x6a98	; 0x6a98 <__fp_inf>
    6920:	0c 94 97 35 	jmp	0x6b2e	; 0x6b2e <__fp_szero>
    6924:	5f 3f       	cpi	r21, 0xFF	; 255
    6926:	e4 f3       	brlt	.-8      	; 0x6920 <__divsf3_pse+0x6c>
    6928:	98 3e       	cpi	r25, 0xE8	; 232
    692a:	d4 f3       	brlt	.-12     	; 0x6920 <__divsf3_pse+0x6c>
    692c:	86 95       	lsr	r24
    692e:	77 95       	ror	r23
    6930:	67 95       	ror	r22
    6932:	b7 95       	ror	r27
    6934:	f7 95       	ror	r31
    6936:	9f 5f       	subi	r25, 0xFF	; 255
    6938:	c9 f7       	brne	.-14     	; 0x692c <__divsf3_pse+0x78>
    693a:	88 0f       	add	r24, r24
    693c:	91 1d       	adc	r25, r1
    693e:	96 95       	lsr	r25
    6940:	87 95       	ror	r24
    6942:	97 f9       	bld	r25, 7
    6944:	08 95       	ret
    6946:	e1 e0       	ldi	r30, 0x01	; 1
    6948:	66 0f       	add	r22, r22
    694a:	77 1f       	adc	r23, r23
    694c:	88 1f       	adc	r24, r24
    694e:	bb 1f       	adc	r27, r27
    6950:	62 17       	cp	r22, r18
    6952:	73 07       	cpc	r23, r19
    6954:	84 07       	cpc	r24, r20
    6956:	ba 07       	cpc	r27, r26
    6958:	20 f0       	brcs	.+8      	; 0x6962 <__divsf3_pse+0xae>
    695a:	62 1b       	sub	r22, r18
    695c:	73 0b       	sbc	r23, r19
    695e:	84 0b       	sbc	r24, r20
    6960:	ba 0b       	sbc	r27, r26
    6962:	ee 1f       	adc	r30, r30
    6964:	88 f7       	brcc	.-30     	; 0x6948 <__divsf3_pse+0x94>
    6966:	e0 95       	com	r30
    6968:	08 95       	ret

0000696a <__fixsfsi>:
    696a:	0e 94 bc 34 	call	0x6978	; 0x6978 <__fixunssfsi>
    696e:	68 94       	set
    6970:	b1 11       	cpse	r27, r1
    6972:	0c 94 97 35 	jmp	0x6b2e	; 0x6b2e <__fp_szero>
    6976:	08 95       	ret

00006978 <__fixunssfsi>:
    6978:	0e 94 7c 35 	call	0x6af8	; 0x6af8 <__fp_splitA>
    697c:	88 f0       	brcs	.+34     	; 0x69a0 <__fixunssfsi+0x28>
    697e:	9f 57       	subi	r25, 0x7F	; 127
    6980:	98 f0       	brcs	.+38     	; 0x69a8 <__fixunssfsi+0x30>
    6982:	b9 2f       	mov	r27, r25
    6984:	99 27       	eor	r25, r25
    6986:	b7 51       	subi	r27, 0x17	; 23
    6988:	b0 f0       	brcs	.+44     	; 0x69b6 <__fixunssfsi+0x3e>
__fixunssfsi():
    698a:	e1 f0       	breq	.+56     	; 0x69c4 <__fixunssfsi+0x4c>
    698c:	66 0f       	add	r22, r22
    698e:	77 1f       	adc	r23, r23
    6990:	88 1f       	adc	r24, r24
    6992:	99 1f       	adc	r25, r25
    6994:	1a f0       	brmi	.+6      	; 0x699c <__fixunssfsi+0x24>
    6996:	ba 95       	dec	r27
    6998:	c9 f7       	brne	.-14     	; 0x698c <__fixunssfsi+0x14>
    699a:	14 c0       	rjmp	.+40     	; 0x69c4 <__fixunssfsi+0x4c>
    699c:	b1 30       	cpi	r27, 0x01	; 1
    699e:	91 f0       	breq	.+36     	; 0x69c4 <__fixunssfsi+0x4c>
    69a0:	0e 94 96 35 	call	0x6b2c	; 0x6b2c <__fp_zero>
    69a4:	b1 e0       	ldi	r27, 0x01	; 1
    69a6:	08 95       	ret
    69a8:	0c 94 96 35 	jmp	0x6b2c	; 0x6b2c <__fp_zero>
    69ac:	67 2f       	mov	r22, r23
    69ae:	78 2f       	mov	r23, r24
    69b0:	88 27       	eor	r24, r24
    69b2:	b8 5f       	subi	r27, 0xF8	; 248
    69b4:	39 f0       	breq	.+14     	; 0x69c4 <__fixunssfsi+0x4c>
    69b6:	b9 3f       	cpi	r27, 0xF9	; 249
    69b8:	cc f3       	brlt	.-14     	; 0x69ac <__fixunssfsi+0x34>
    69ba:	86 95       	lsr	r24
    69bc:	77 95       	ror	r23
    69be:	67 95       	ror	r22
    69c0:	b3 95       	inc	r27
    69c2:	d9 f7       	brne	.-10     	; 0x69ba <__fixunssfsi+0x42>
    69c4:	3e f4       	brtc	.+14     	; 0x69d4 <__fixunssfsi+0x5c>
    69c6:	90 95       	com	r25
    69c8:	80 95       	com	r24
    69ca:	70 95       	com	r23
    69cc:	61 95       	neg	r22
    69ce:	7f 4f       	sbci	r23, 0xFF	; 255
    69d0:	8f 4f       	sbci	r24, 0xFF	; 255
    69d2:	9f 4f       	sbci	r25, 0xFF	; 255
    69d4:	08 95       	ret

000069d6 <__floatunsisf>:
__floatunsisf():
    69d6:	e8 94       	clt
    69d8:	09 c0       	rjmp	.+18     	; 0x69ec <__floatsisf+0x12>

000069da <__floatsisf>:
    69da:	97 fb       	bst	r25, 7
    69dc:	3e f4       	brtc	.+14     	; 0x69ec <__floatsisf+0x12>
    69de:	90 95       	com	r25
    69e0:	80 95       	com	r24
    69e2:	70 95       	com	r23
    69e4:	61 95       	neg	r22
    69e6:	7f 4f       	sbci	r23, 0xFF	; 255
    69e8:	8f 4f       	sbci	r24, 0xFF	; 255
    69ea:	9f 4f       	sbci	r25, 0xFF	; 255
    69ec:	99 23       	and	r25, r25
    69ee:	a9 f0       	breq	.+42     	; 0x6a1a <__floatsisf+0x40>
    69f0:	f9 2f       	mov	r31, r25
    69f2:	96 e9       	ldi	r25, 0x96	; 150
    69f4:	bb 27       	eor	r27, r27
    69f6:	93 95       	inc	r25
    69f8:	f6 95       	lsr	r31
    69fa:	87 95       	ror	r24
    69fc:	77 95       	ror	r23
    69fe:	67 95       	ror	r22
    6a00:	b7 95       	ror	r27
    6a02:	f1 11       	cpse	r31, r1
    6a04:	f8 cf       	rjmp	.-16     	; 0x69f6 <__floatsisf+0x1c>
    6a06:	fa f4       	brpl	.+62     	; 0x6a46 <__floatsisf+0x6c>
    6a08:	bb 0f       	add	r27, r27
    6a0a:	11 f4       	brne	.+4      	; 0x6a10 <__floatsisf+0x36>
    6a0c:	60 ff       	sbrs	r22, 0
    6a0e:	1b c0       	rjmp	.+54     	; 0x6a46 <__floatsisf+0x6c>
    6a10:	6f 5f       	subi	r22, 0xFF	; 255
    6a12:	7f 4f       	sbci	r23, 0xFF	; 255
    6a14:	8f 4f       	sbci	r24, 0xFF	; 255
    6a16:	9f 4f       	sbci	r25, 0xFF	; 255
    6a18:	16 c0       	rjmp	.+44     	; 0x6a46 <__floatsisf+0x6c>
    6a1a:	88 23       	and	r24, r24
    6a1c:	11 f0       	breq	.+4      	; 0x6a22 <__floatsisf+0x48>
    6a1e:	96 e9       	ldi	r25, 0x96	; 150
    6a20:	11 c0       	rjmp	.+34     	; 0x6a44 <__floatsisf+0x6a>
    6a22:	77 23       	and	r23, r23
    6a24:	21 f0       	breq	.+8      	; 0x6a2e <__floatsisf+0x54>
    6a26:	9e e8       	ldi	r25, 0x8E	; 142
    6a28:	87 2f       	mov	r24, r23
    6a2a:	76 2f       	mov	r23, r22
    6a2c:	05 c0       	rjmp	.+10     	; 0x6a38 <__floatsisf+0x5e>
    6a2e:	66 23       	and	r22, r22
    6a30:	71 f0       	breq	.+28     	; 0x6a4e <__floatsisf+0x74>
    6a32:	96 e8       	ldi	r25, 0x86	; 134
    6a34:	86 2f       	mov	r24, r22
    6a36:	70 e0       	ldi	r23, 0x00	; 0
    6a38:	60 e0       	ldi	r22, 0x00	; 0
    6a3a:	2a f0       	brmi	.+10     	; 0x6a46 <__floatsisf+0x6c>
    6a3c:	9a 95       	dec	r25
    6a3e:	66 0f       	add	r22, r22
    6a40:	77 1f       	adc	r23, r23
    6a42:	88 1f       	adc	r24, r24
    6a44:	da f7       	brpl	.-10     	; 0x6a3c <__floatsisf+0x62>
    6a46:	88 0f       	add	r24, r24
    6a48:	96 95       	lsr	r25
    6a4a:	87 95       	ror	r24
    6a4c:	97 f9       	bld	r25, 7
    6a4e:	08 95       	ret

00006a50 <__fp_cmp>:
__fp_cmp():
    6a50:	99 0f       	add	r25, r25
    6a52:	00 08       	sbc	r0, r0
    6a54:	55 0f       	add	r21, r21
    6a56:	aa 0b       	sbc	r26, r26
    6a58:	e0 e8       	ldi	r30, 0x80	; 128
    6a5a:	fe ef       	ldi	r31, 0xFE	; 254
    6a5c:	16 16       	cp	r1, r22
    6a5e:	17 06       	cpc	r1, r23
    6a60:	e8 07       	cpc	r30, r24
    6a62:	f9 07       	cpc	r31, r25
    6a64:	c0 f0       	brcs	.+48     	; 0x6a96 <__fp_cmp+0x46>
    6a66:	12 16       	cp	r1, r18
    6a68:	13 06       	cpc	r1, r19
    6a6a:	e4 07       	cpc	r30, r20
    6a6c:	f5 07       	cpc	r31, r21
    6a6e:	98 f0       	brcs	.+38     	; 0x6a96 <__fp_cmp+0x46>
    6a70:	62 1b       	sub	r22, r18
    6a72:	73 0b       	sbc	r23, r19
    6a74:	84 0b       	sbc	r24, r20
    6a76:	95 0b       	sbc	r25, r21
    6a78:	39 f4       	brne	.+14     	; 0x6a88 <__fp_cmp+0x38>
    6a7a:	0a 26       	eor	r0, r26
    6a7c:	61 f0       	breq	.+24     	; 0x6a96 <__fp_cmp+0x46>
    6a7e:	23 2b       	or	r18, r19
    6a80:	24 2b       	or	r18, r20
    6a82:	25 2b       	or	r18, r21
    6a84:	21 f4       	brne	.+8      	; 0x6a8e <__fp_cmp+0x3e>
    6a86:	08 95       	ret
    6a88:	0a 26       	eor	r0, r26
    6a8a:	09 f4       	brne	.+2      	; 0x6a8e <__fp_cmp+0x3e>
    6a8c:	a1 40       	sbci	r26, 0x01	; 1
    6a8e:	a6 95       	lsr	r26
    6a90:	8f ef       	ldi	r24, 0xFF	; 255
    6a92:	81 1d       	adc	r24, r1
    6a94:	81 1d       	adc	r24, r1
    6a96:	08 95       	ret

00006a98 <__fp_inf>:
__fp_inf():
    6a98:	97 f9       	bld	r25, 7
    6a9a:	9f 67       	ori	r25, 0x7F	; 127
    6a9c:	80 e8       	ldi	r24, 0x80	; 128
    6a9e:	70 e0       	ldi	r23, 0x00	; 0
    6aa0:	60 e0       	ldi	r22, 0x00	; 0
    6aa2:	08 95       	ret

00006aa4 <__fp_nan>:
__fp_nan():
    6aa4:	9f ef       	ldi	r25, 0xFF	; 255
    6aa6:	80 ec       	ldi	r24, 0xC0	; 192
    6aa8:	08 95       	ret

00006aaa <__fp_pscA>:
__fp_pscA():
    6aaa:	00 24       	eor	r0, r0
    6aac:	0a 94       	dec	r0
    6aae:	16 16       	cp	r1, r22
    6ab0:	17 06       	cpc	r1, r23
    6ab2:	18 06       	cpc	r1, r24
    6ab4:	09 06       	cpc	r0, r25
    6ab6:	08 95       	ret

00006ab8 <__fp_pscB>:
__fp_pscB():
    6ab8:	00 24       	eor	r0, r0
    6aba:	0a 94       	dec	r0
    6abc:	12 16       	cp	r1, r18
    6abe:	13 06       	cpc	r1, r19
    6ac0:	14 06       	cpc	r1, r20
    6ac2:	05 06       	cpc	r0, r21
    6ac4:	08 95       	ret

00006ac6 <__fp_round>:
__fp_round():
    6ac6:	09 2e       	mov	r0, r25
    6ac8:	03 94       	inc	r0
    6aca:	00 0c       	add	r0, r0
    6acc:	11 f4       	brne	.+4      	; 0x6ad2 <__fp_round+0xc>
    6ace:	88 23       	and	r24, r24
    6ad0:	52 f0       	brmi	.+20     	; 0x6ae6 <__fp_round+0x20>
    6ad2:	bb 0f       	add	r27, r27
    6ad4:	40 f4       	brcc	.+16     	; 0x6ae6 <__fp_round+0x20>
    6ad6:	bf 2b       	or	r27, r31
    6ad8:	11 f4       	brne	.+4      	; 0x6ade <__fp_round+0x18>
    6ada:	60 ff       	sbrs	r22, 0
    6adc:	04 c0       	rjmp	.+8      	; 0x6ae6 <__fp_round+0x20>
    6ade:	6f 5f       	subi	r22, 0xFF	; 255
    6ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    6ae2:	8f 4f       	sbci	r24, 0xFF	; 255
    6ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    6ae6:	08 95       	ret

00006ae8 <__fp_split3>:
__fp_split3():
    6ae8:	57 fd       	sbrc	r21, 7
    6aea:	90 58       	subi	r25, 0x80	; 128
    6aec:	44 0f       	add	r20, r20
    6aee:	55 1f       	adc	r21, r21
    6af0:	59 f0       	breq	.+22     	; 0x6b08 <__fp_splitA+0x10>
    6af2:	5f 3f       	cpi	r21, 0xFF	; 255
    6af4:	71 f0       	breq	.+28     	; 0x6b12 <__fp_splitA+0x1a>
    6af6:	47 95       	ror	r20

00006af8 <__fp_splitA>:
    6af8:	88 0f       	add	r24, r24
    6afa:	97 fb       	bst	r25, 7
    6afc:	99 1f       	adc	r25, r25
    6afe:	61 f0       	breq	.+24     	; 0x6b18 <__fp_splitA+0x20>
    6b00:	9f 3f       	cpi	r25, 0xFF	; 255
    6b02:	79 f0       	breq	.+30     	; 0x6b22 <__fp_splitA+0x2a>
    6b04:	87 95       	ror	r24
    6b06:	08 95       	ret
    6b08:	12 16       	cp	r1, r18
    6b0a:	13 06       	cpc	r1, r19
    6b0c:	14 06       	cpc	r1, r20
    6b0e:	55 1f       	adc	r21, r21
    6b10:	f2 cf       	rjmp	.-28     	; 0x6af6 <__fp_split3+0xe>
    6b12:	46 95       	lsr	r20
    6b14:	f1 df       	rcall	.-30     	; 0x6af8 <__fp_splitA>
    6b16:	08 c0       	rjmp	.+16     	; 0x6b28 <__fp_splitA+0x30>
    6b18:	16 16       	cp	r1, r22
    6b1a:	17 06       	cpc	r1, r23
    6b1c:	18 06       	cpc	r1, r24
    6b1e:	99 1f       	adc	r25, r25
    6b20:	f1 cf       	rjmp	.-30     	; 0x6b04 <__fp_splitA+0xc>
    6b22:	86 95       	lsr	r24
    6b24:	71 05       	cpc	r23, r1
    6b26:	61 05       	cpc	r22, r1
    6b28:	08 94       	sec
    6b2a:	08 95       	ret

00006b2c <__fp_zero>:
__fp_zero():
    6b2c:	e8 94       	clt

00006b2e <__fp_szero>:
    6b2e:	bb 27       	eor	r27, r27
    6b30:	66 27       	eor	r22, r22
    6b32:	77 27       	eor	r23, r23
    6b34:	cb 01       	movw	r24, r22
    6b36:	97 f9       	bld	r25, 7
    6b38:	08 95       	ret

00006b3a <__mulsf3>:
__mulsf3():
    6b3a:	0e 94 b0 35 	call	0x6b60	; 0x6b60 <__mulsf3x>
    6b3e:	0c 94 63 35 	jmp	0x6ac6	; 0x6ac6 <__fp_round>
    6b42:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <__fp_pscA>
    6b46:	38 f0       	brcs	.+14     	; 0x6b56 <__mulsf3+0x1c>
    6b48:	0e 94 5c 35 	call	0x6ab8	; 0x6ab8 <__fp_pscB>
    6b4c:	20 f0       	brcs	.+8      	; 0x6b56 <__mulsf3+0x1c>
    6b4e:	95 23       	and	r25, r21
    6b50:	11 f0       	breq	.+4      	; 0x6b56 <__mulsf3+0x1c>
    6b52:	0c 94 4c 35 	jmp	0x6a98	; 0x6a98 <__fp_inf>
    6b56:	0c 94 52 35 	jmp	0x6aa4	; 0x6aa4 <__fp_nan>
    6b5a:	11 24       	eor	r1, r1
    6b5c:	0c 94 97 35 	jmp	0x6b2e	; 0x6b2e <__fp_szero>

00006b60 <__mulsf3x>:
__mulsf3x():
    6b60:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <__fp_split3>
    6b64:	70 f3       	brcs	.-36     	; 0x6b42 <__mulsf3+0x8>

00006b66 <__mulsf3_pse>:
    6b66:	95 9f       	mul	r25, r21
    6b68:	c1 f3       	breq	.-16     	; 0x6b5a <__mulsf3+0x20>
    6b6a:	95 0f       	add	r25, r21
    6b6c:	50 e0       	ldi	r21, 0x00	; 0
    6b6e:	55 1f       	adc	r21, r21
    6b70:	62 9f       	mul	r22, r18
    6b72:	f0 01       	movw	r30, r0
    6b74:	72 9f       	mul	r23, r18
    6b76:	bb 27       	eor	r27, r27
    6b78:	f0 0d       	add	r31, r0
    6b7a:	b1 1d       	adc	r27, r1
    6b7c:	63 9f       	mul	r22, r19
    6b7e:	aa 27       	eor	r26, r26
    6b80:	f0 0d       	add	r31, r0
    6b82:	b1 1d       	adc	r27, r1
    6b84:	aa 1f       	adc	r26, r26
    6b86:	64 9f       	mul	r22, r20
    6b88:	66 27       	eor	r22, r22
    6b8a:	b0 0d       	add	r27, r0
    6b8c:	a1 1d       	adc	r26, r1
    6b8e:	66 1f       	adc	r22, r22
    6b90:	82 9f       	mul	r24, r18
    6b92:	22 27       	eor	r18, r18
    6b94:	b0 0d       	add	r27, r0
    6b96:	a1 1d       	adc	r26, r1
    6b98:	62 1f       	adc	r22, r18
    6b9a:	73 9f       	mul	r23, r19
    6b9c:	b0 0d       	add	r27, r0
    6b9e:	a1 1d       	adc	r26, r1
    6ba0:	62 1f       	adc	r22, r18
    6ba2:	83 9f       	mul	r24, r19
    6ba4:	a0 0d       	add	r26, r0
    6ba6:	61 1d       	adc	r22, r1
    6ba8:	22 1f       	adc	r18, r18
    6baa:	74 9f       	mul	r23, r20
    6bac:	33 27       	eor	r19, r19
    6bae:	a0 0d       	add	r26, r0
    6bb0:	61 1d       	adc	r22, r1
    6bb2:	23 1f       	adc	r18, r19
    6bb4:	84 9f       	mul	r24, r20
    6bb6:	60 0d       	add	r22, r0
    6bb8:	21 1d       	adc	r18, r1
    6bba:	82 2f       	mov	r24, r18
    6bbc:	76 2f       	mov	r23, r22
    6bbe:	6a 2f       	mov	r22, r26
    6bc0:	11 24       	eor	r1, r1
    6bc2:	9f 57       	subi	r25, 0x7F	; 127
    6bc4:	50 40       	sbci	r21, 0x00	; 0
    6bc6:	9a f0       	brmi	.+38     	; 0x6bee <__mulsf3_pse+0x88>
    6bc8:	f1 f0       	breq	.+60     	; 0x6c06 <__mulsf3_pse+0xa0>
    6bca:	88 23       	and	r24, r24
    6bcc:	4a f0       	brmi	.+18     	; 0x6be0 <__mulsf3_pse+0x7a>
    6bce:	ee 0f       	add	r30, r30
    6bd0:	ff 1f       	adc	r31, r31
    6bd2:	bb 1f       	adc	r27, r27
    6bd4:	66 1f       	adc	r22, r22
    6bd6:	77 1f       	adc	r23, r23
    6bd8:	88 1f       	adc	r24, r24
    6bda:	91 50       	subi	r25, 0x01	; 1
    6bdc:	50 40       	sbci	r21, 0x00	; 0
    6bde:	a9 f7       	brne	.-22     	; 0x6bca <__mulsf3_pse+0x64>
    6be0:	9e 3f       	cpi	r25, 0xFE	; 254
    6be2:	51 05       	cpc	r21, r1
    6be4:	80 f0       	brcs	.+32     	; 0x6c06 <__mulsf3_pse+0xa0>
    6be6:	0c 94 4c 35 	jmp	0x6a98	; 0x6a98 <__fp_inf>
    6bea:	0c 94 97 35 	jmp	0x6b2e	; 0x6b2e <__fp_szero>
    6bee:	5f 3f       	cpi	r21, 0xFF	; 255
    6bf0:	e4 f3       	brlt	.-8      	; 0x6bea <__mulsf3_pse+0x84>
    6bf2:	98 3e       	cpi	r25, 0xE8	; 232
    6bf4:	d4 f3       	brlt	.-12     	; 0x6bea <__mulsf3_pse+0x84>
    6bf6:	86 95       	lsr	r24
    6bf8:	77 95       	ror	r23
    6bfa:	67 95       	ror	r22
    6bfc:	b7 95       	ror	r27
    6bfe:	f7 95       	ror	r31
    6c00:	e7 95       	ror	r30
    6c02:	9f 5f       	subi	r25, 0xFF	; 255
    6c04:	c1 f7       	brne	.-16     	; 0x6bf6 <__mulsf3_pse+0x90>
    6c06:	fe 2b       	or	r31, r30
    6c08:	88 0f       	add	r24, r24
    6c0a:	91 1d       	adc	r25, r1
    6c0c:	96 95       	lsr	r25
    6c0e:	87 95       	ror	r24
    6c10:	97 f9       	bld	r25, 7
    6c12:	08 95       	ret

00006c14 <__udivmodhi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    6c14:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    6c16:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    6c18:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    6c1a:	07 c0       	rjmp	.+14     	; 0x6c2a <__udivmodhi4_ep>

00006c1c <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    6c1c:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    6c1e:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    6c20:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    6c22:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    6c24:	10 f0       	brcs	.+4      	; 0x6c2a <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    6c26:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    6c28:	b7 0b       	sbc	r27, r23

00006c2a <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    6c2a:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    6c2c:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    6c2e:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    6c30:	a9 f7       	brne	.-22     	; 0x6c1c <__udivmodhi4_loop>
__udivmodhi4_ep():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    6c32:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    6c34:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    6c36:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    6c38:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    6c3a:	08 95       	ret

00006c3c <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    6c3c:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    6c3e:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    6c40:	16 f4       	brtc	.+4      	; 0x6c46 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    6c42:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    6c44:	07 d0       	rcall	.+14     	; 0x6c54 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    6c46:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    6c48:	09 d0       	rcall	.+18     	; 0x6c5c <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    6c4a:	0e 94 0a 36 	call	0x6c14	; 0x6c14 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    6c4e:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    6c50:	05 d0       	rcall	.+10     	; 0x6c5c <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    6c52:	3e f4       	brtc	.+14     	; 0x6c62 <__divmodhi4_exit>

00006c54 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    6c54:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    6c56:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    6c58:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    6c5a:	08 95       	ret

00006c5c <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    6c5c:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    6c5e:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    6c60:	7f 4f       	sbci	r23, 0xFF	; 255

00006c62 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    6c62:	08 95       	ret

00006c64 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    6c64:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    6c66:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    6c68:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    6c6a:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    6c6c:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    6c6e:	0d c0       	rjmp	.+26     	; 0x6c8a <__udivmodsi4_ep>

00006c70 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    6c70:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    6c72:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    6c74:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    6c76:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    6c78:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    6c7a:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    6c7c:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    6c7e:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    6c80:	20 f0       	brcs	.+8      	; 0x6c8a <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    6c82:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    6c84:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    6c86:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    6c88:	f5 0b       	sbc	r31, r21

00006c8a <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    6c8a:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    6c8c:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    6c8e:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    6c90:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    6c92:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    6c94:	69 f7       	brne	.-38     	; 0x6c70 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    6c96:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    6c98:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    6c9a:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    6c9c:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    6c9e:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    6ca0:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    6ca2:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    6ca4:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    6ca6:	08 95       	ret

00006ca8 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    6ca8:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    6caa:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    6cac:	1e f4       	brtc	.+6      	; 0x6cb4 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    6cae:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    6cb0:	0e 94 6b 36 	call	0x6cd6	; 0x6cd6 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    6cb4:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    6cb6:	07 d0       	rcall	.+14     	; 0x6cc6 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    6cb8:	0e 94 32 36 	call	0x6c64	; 0x6c64 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    6cbc:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    6cbe:	03 d0       	rcall	.+6      	; 0x6cc6 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    6cc0:	4e f4       	brtc	.+18     	; 0x6cd4 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    6cc2:	0c 94 6b 36 	jmp	0x6cd6	; 0x6cd6 <__negsi2>

00006cc6 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    6cc6:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    6cc8:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    6cca:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    6ccc:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    6cce:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    6cd0:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    6cd2:	5f 4f       	sbci	r21, 0xFF	; 255

00006cd4 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    6cd4:	08 95       	ret

00006cd6 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    6cd6:	90 95       	com	r25
    6cd8:	80 95       	com	r24
    6cda:	70 95       	com	r23
    6cdc:	61 95       	neg	r22
    6cde:	7f 4f       	sbci	r23, 0xFF	; 255
    6ce0:	8f 4f       	sbci	r24, 0xFF	; 255
    6ce2:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    6ce4:	08 95       	ret

00006ce6 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    6ce6:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    6ce8:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    6cea:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    6cec:	00 1c       	adc	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    6cee:	0b be       	out	0x3b, r0	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    6cf0:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    6cf2:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    6cf4:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    6cf6:	09 94       	ijmp

00006cf8 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    6cf8:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    6cfa:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    6cfc:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    6cfe:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    6d00:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    6d02:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    6d04:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    6d06:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    6d08:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    6d0a:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    6d0c:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    6d0e:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    6d10:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    6d12:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    6d14:	08 95       	ret

00006d16 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    6d16:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    6d1a:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    6d1c:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    6d1e:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    6d20:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    6d22:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    6d24:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    6d26:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    6d28:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    6d2a:	08 95       	ret

00006d2c <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    6d2c:	f8 94       	cli

00006d2e <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    6d2e:	ff cf       	rjmp	.-2      	; 0x6d2e <__stop_program>
